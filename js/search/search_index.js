var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.537,1,2.406]],["body/modules/AppModule.html",[0,2.312,1,4.819,2,2.031,3,2.466,4,3.485,5,3.485,6,4.133,7,0.023,8,3.535,9,4.133,10,3.811,11,3.052,12,2.35,13,2.031,14,0.268,15,0.268,16,0.237,17,4.091,18,3.619,19,0.496,20,0.681,21,5.314,22,2.787,23,4.091,24,3.31,25,4.091,26,4.091,27,4.091,28,4.091,29,4.091,30,2.548,31,4.091,32,4.091,33,0.268,34,0.226,35,0.016,36,0.016]],["title/controllers/AuthController.html",[37,1.882,38,2.406]],["body/controllers/AuthController.html",[7,0.023,14,0.257,15,0.257,16,0.227,19,0.481,20,0.652,33,0.257,34,0.217,35,0.016,36,0.016,37,2.752,38,3.517,39,2.087,40,3.336,41,0.385,42,0.993,43,3.517,44,2.752,45,0.652,46,2.111,47,2.682,48,3.599,49,3.917,50,4.184,51,1.704,52,2.953,53,5.164,54,3.917,55,0.569,56,3.917,57,5.164,58,1.601,59,1.06,60,0.695,61,1.06,62,1.337,63,1.763,64,3.894,65,2.953,66,2.953,67,2.953,68,3.894,69,2.953,70,1.945,71,3.318,72,3.336,73,3.917,74,3.917,75,2.668,76,3.917,77,2.966,78,3.336,79,3.917,80,2.087,81,2.25,82,2.953,83,3.917,84,3.917,85,1.506,86,1.763,87,1.506,88,3.917]],["title/modules/AuthModule.html",[0,1.537,6,2.201]],["body/modules/AuthModule.html",[0,2.329,2,2.054,3,2.484,6,4.358,7,0.023,10,3.823,11,3.074,12,2.376,13,2.054,14,0.271,15,0.271,16,0.24,18,3.646,19,0.504,20,0.688,30,3.334,33,0.271,34,0.229,35,0.017,36,0.017,38,4.041,39,2.852,71,3.823,72,3.524,89,3.524,90,4.138,91,3.524,92,3.546,93,4.138,94,4.138,95,3.12,96,5.353,97,2.376,98,2.376,99,2.818,100,4.138,101,4.138,102,4.138,103,4.138]],["title/injectables/AuthService.html",[71,2.029,104,0.956]],["body/injectables/AuthService.html",[3,1.876,7,0.023,14,0.181,15,0.181,16,0.16,19,0.431,20,0.458,33,0.181,34,0.265,35,0.013,36,0.013,41,0.271,42,0.987,45,0.458,46,1.652,47,2.723,48,2.981,55,0.695,58,1.956,59,1.295,60,0.85,61,1.295,62,1.8,63,1.8,71,2.321,81,2.321,85,2.391,86,2.258,87,1.554,95,2.078,104,1.094,105,1.368,106,2.347,107,3.59,108,5.272,109,3.823,110,4.042,111,1.302,112,2.756,113,3.313,114,6.345,115,2.756,116,2.753,117,2.756,118,1.79,119,2.756,120,3.59,121,5.296,122,5.272,123,4.49,124,4.49,125,3.975,126,3.975,127,2.153,128,4.076,129,4.042,130,2.756,131,1.876,132,2.517,133,2.347,134,1.877,135,2.756,136,2.756,137,2.753,138,2.347,139,2.756,140,2.617,141,3.26,142,2.756,143,1.583,144,1.877,145,2.756,146,1.279,147,2.756,148,2.756,149,2.756,150,4.042,151,2.756,152,2.347,153,2.756,154,2.078,155,1.199]],["title/classes/CreateProductDto.html",[34,0.196,156,2.029]],["body/classes/CreateProductDto.html",[7,0.023,14,0.187,15,0.187,16,0.165,19,0.393,33,0.187,34,0.229,35,0.013,36,0.013,41,0.583,45,0.473,51,2.582,55,0.862,59,1.539,60,1.053,61,1.698,70,1.413,118,1.698,140,1.413,156,2.377,157,0.686,158,5.216,159,2.146,160,1.691,161,2.577,162,2.377,163,1.691,164,2.788,165,1.413,166,4.153,167,4.153,168,4.844,169,4.844,170,4.042,171,4.844,172,2.846,173,2.846,174,3.525,175,3.525,176,3.525,177,3.12,178,3.525,179,3.525,180,3.525,181,3.525,182,2.846,183,2.846,184,2.846,185,3.525,186,3.525,187,4.037,188,3.646,189,2.424,190,2.846,191,2.846,192,2.846,193,2.846,194,3.12,195,2.424,196,2.424,197,3.525,198,3.321,199,4.876,200,3.873,201,3.075,202,1.321,203,2.146,204,0.865,205,2.846,206,1.238,207,2.146,208,1.773,209,1.803,210,2.424,211,3.525,212,3.525,213,2.424,214,2.424,215,1.635,216,2.424,217,2.424]],["title/classes/CreateUserDto.html",[34,0.196,218,2.029]],["body/classes/CreateUserDto.html",[7,0.023,14,0.211,15,0.211,16,0.187,19,0.332,33,0.211,34,0.25,35,0.014,36,0.014,41,0.317,42,1.068,45,0.536,51,2.464,55,0.822,59,1.614,60,1.005,61,1.533,85,2.293,86,2.249,118,1.755,125,2.429,157,0.776,160,1.848,161,2.815,162,2.596,163,1.848,165,1.543,170,3.857,181,3.85,188,2.194,200,3.557,201,3.252,202,1.495,209,1.721,218,2.596,219,5.08,220,2.194,221,2.596,222,5.08,223,3.221,224,3.221,225,3.409,226,3.85,227,3.221,228,3.221,229,3.221,230,2.961,231,4.521,232,3.221,233,4.521,234,5.663,235,4.037,236,5.663,237,3.221,238,3.85,239,3.221,240,2.743,241,2.194,242,2.194,243,3.221,244,3.221,245,3.221,246,2.743,247,2.743,248,2.743,249,2.743]],["title/classes/DeleteUserDto.html",[34,0.196,250,2.201]],["body/classes/DeleteUserDto.html",[7,0.022,14,0.301,15,0.301,16,0.266,19,0.337,33,0.301,34,0.317,35,0.018,36,0.018,41,0.451,42,1.014,45,0.764,51,1.997,55,0.667,60,0.815,86,1.952,118,1.548,157,1.106,160,2.337,161,3.561,162,3.284,165,1.952,189,3.91,198,3.894,201,3.284,202,2.131,209,1.395,220,3.126,242,3.126,250,3.561,251,4.87,252,3.894,253,4.695,254,4.59,255,3.561]],["title/classes/EmailInUseException.html",[34,0.196,256,2.406]],["body/classes/EmailInUseException.html",[7,0.022,14,0.273,15,0.273,16,0.241,19,0.305,20,0.692,33,0.273,34,0.23,35,0.017,36,0.017,41,0.409,42,0.978,55,0.604,85,2.417,111,1.916,131,2.918,157,1.002,204,1.633,225,4.051,226,5.067,230,2.667,256,3.659,257,4.576,258,3.138,259,3.121,260,3.35,261,4.282,262,2.277,263,3.35,264,5.777,265,3.916,266,3.611,267,4.052,268,3.544,269,4.486,270,4.161]],["title/classes/FindAllProductsDto.html",[34,0.196,271,2.201]],["body/classes/FindAllProductsDto.html",[7,0.023,14,0.243,15,0.243,16,0.214,19,0.365,33,0.243,34,0.311,35,0.015,36,0.015,41,0.364,45,0.615,51,2.443,55,0.816,59,1.346,60,1.145,61,1.746,118,1.625,157,0.891,160,2.032,164,2.032,165,1.697,170,4.394,194,3.749,197,4.783,200,4.09,201,2.856,202,1.717,209,1.707,215,2.125,235,2.304,271,3.097,272,5.114,273,3.151,274,2.468,275,4.972,276,4.018,277,4.783,278,4.97,279,4.783,280,4.972,281,3.7,282,6.005,283,3.749,284,3.7,285,3.7,286,3.7,287,4.972,288,2.79,289,5.616,290,3.151]],["title/classes/InvalidEmailOrPasswordError.html",[34,0.196,137,2.406]],["body/classes/InvalidEmailOrPasswordError.html",[7,0.022,14,0.264,15,0.264,16,0.233,19,0.295,20,0.669,33,0.264,34,0.223,35,0.016,36,0.016,41,0.396,42,0.966,55,0.584,85,2.728,86,2.297,111,1.885,131,2.881,137,3.58,157,0.969,204,1.597,230,2.61,259,3.082,260,3.307,262,2.248,263,3.307,265,4.251,266,3.565,291,4.477,292,3.427,293,6.208,294,5.287,295,5.855,296,4.024,297,4.477,298,3.427]],["title/classes/InvalidPasswordUpdateError.html",[34,0.196,299,2.406]],["body/classes/InvalidPasswordUpdateError.html",[7,0.022,14,0.265,15,0.265,16,0.234,19,0.296,20,0.671,33,0.265,34,0.223,35,0.016,36,0.016,41,0.397,42,0.967,55,0.586,86,2.424,111,1.888,131,2.884,155,2.704,157,0.972,163,2.54,204,1.6,230,2.614,255,4.194,259,3.085,260,3.311,261,4.232,262,2.25,263,3.311,267,3.993,294,5.293,297,4.485,298,3.437,299,3.587,300,4.485,301,3.043,302,6.214,303,4.035]],["title/injectables/JwtAuthGuard.html",[24,2.201,104,0.956]],["body/injectables/JwtAuthGuard.html",[7,0.023,14,0.213,15,0.213,16,0.188,19,0.439,20,0.541,22,2.213,24,2.833,33,0.213,34,0.291,35,0.014,36,0.014,41,0.319,43,4.224,45,0.541,46,1.859,55,0.661,58,1.859,59,1.231,60,0.807,61,1.231,62,1.109,63,1.553,77,2.612,78,2.768,80,1.731,87,1.749,97,1.866,104,1.231,105,1.613,111,1.046,140,1.613,204,0.987,304,4.47,305,2.768,306,5.282,307,3.265,308,3.541,309,5.984,310,5.685,311,4.676,312,5.685,313,4.287,314,3.541,315,4.842,316,4.842,317,4.47,318,2.768,319,5.533,320,3.249,321,3.43,322,2.612,323,2.768,324,4.287,325,3.249,326,4.549,327,4.549,328,3.43,329,3.43,330,3.957,331,2.213,332,2.45,333,3.249,334,2.213,335,3.874,336,3.249,337,2.768,338,2.768,339,2.213,340,3.249]],["title/injectables/JwtStrategy.html",[92,1.882,104,0.956]],["body/injectables/JwtStrategy.html",[7,0.023,14,0.218,15,0.218,16,0.192,19,0.421,20,0.553,33,0.218,34,0.184,35,0.014,36,0.014,41,0.327,42,0.972,45,0.553,46,1.888,47,2.465,55,0.671,58,1.358,59,0.899,60,0.59,61,0.899,62,1.813,63,1.577,87,1.278,92,2.461,97,1.908,98,1.908,99,2.263,104,1.251,105,1.65,111,1.71,118,1.554,120,3.147,127,1.77,143,3.465,144,2.263,146,2.465,204,1.01,206,2.01,209,1.744,262,1.203,307,3.465,308,3.575,334,2.263,341,2.263,342,4.449,343,4.329,344,4.62,345,3.323,346,3.484,347,3.323,348,2.877,349,4.005,350,2.506,351,2.506,352,2.506,353,2.506,354,2.653,355,2.07,356,2.263,357,3.484,358,3.484,359,3.484,360,3.484,361,3.484,362,2.506,363,1.908,364,2.506,365,2.07,366,3.147,367,3.147,368,2.506,369,2.506,370,2.506,371,2.506,372,2.263,373,2.506,374,2.506,375,2.506,376,2.506]],["title/classes/LoginCredentialsDto.html",[34,0.196,50,2.406]],["body/classes/LoginCredentialsDto.html",[7,0.023,14,0.279,15,0.279,16,0.247,19,0.313,33,0.279,34,0.302,35,0.017,36,0.017,41,0.419,42,1.043,45,0.708,50,3.713,51,2.372,55,0.792,60,0.968,85,2.521,86,2.238,118,1.717,157,1.026,160,2.228,162,3.131,165,1.861,198,4.096,201,3.454,202,1.976,209,1.657,241,2.9,242,2.9,274,2.707,363,3.131,377,5.123,378,3.626,379,5.452,380,5.452,381,4.258,382,4.258]],["title/classes/LoginResponse.html",[34,0.196,75,2.406]],["body/classes/LoginResponse.html",[7,0.022,14,0.32,15,0.32,16,0.283,33,0.32,34,0.27,35,0.018,36,0.018,41,0.48,43,4.044,45,0.812,48,3.039,55,0.709,60,0.866,75,4.044,118,1.607,127,3.163,128,5.45,157,1.175,160,1.994,165,2.027,209,1.483,311,3.68,355,3.698,383,4.156,384,4.88,385,4.88,386,4.88,387,4.88,388,4.88,389,4.88]],["title/classes/MissingPasswordUpdateError.html",[34,0.196,390,2.406]],["body/classes/MissingPasswordUpdateError.html",[7,0.022,14,0.252,15,0.252,16,0.223,19,0.282,20,0.64,33,0.252,34,0.213,35,0.016,36,0.016,41,0.378,42,0.949,55,0.558,86,2.467,111,1.844,131,2.83,155,2.896,157,0.926,162,3.502,204,1.55,230,2.533,255,4.145,259,3.027,260,3.249,261,4.153,262,2.208,263,3.249,267,3.899,301,2.899,390,3.475,391,4.345,392,5.668,393,3.249,394,3.845,395,5.102,396,5.725,397,3.845]],["title/interfaces/Payload.html",[143,2.029,354,2.029]],["body/interfaces/Payload.html",[7,0.023,14,0.223,15,0.223,16,0.197,19,0.426,20,0.567,33,0.223,34,0.189,35,0.015,36,0.015,41,0.335,42,1.023,45,0.567,47,1.582,60,0.835,62,1.163,63,1.163,87,1.31,92,1.816,97,1.957,98,1.957,99,2.321,104,1.273,111,1.097,118,1.779,120,2.321,127,1.816,143,3.091,144,3.952,146,2.994,165,1.605,204,1.036,206,2.342,209,1.763,262,1.703,307,3.091,308,2.928,334,2.321,341,2.321,342,4.287,343,3.545,346,2.57,348,2.122,349,4.059,350,2.57,351,2.57,352,2.57,353,3.545,354,2.7,355,2.928,356,3.202,357,3.545,358,3.545,359,3.545,360,3.545,361,3.545,362,2.57,363,1.957,364,2.57,365,2.122,366,3.202,367,3.202,368,2.57,369,2.57,370,2.57,371,2.57,372,2.321,373,2.57,374,2.57,375,2.57,376,2.57,398,2.57]],["title/injectables/PrismaInterceptor.html",[104,0.956,399,2.664]],["body/injectables/PrismaInterceptor.html",[7,0.023,14,0.137,15,0.137,16,0.121,19,0.418,20,0.347,33,0.137,34,0.115,35,0.01,36,0.01,41,0.205,42,0.508,45,0.347,46,1.336,55,0.764,58,2.151,59,1.623,60,0.881,61,1.425,62,2.177,63,1.116,85,1.55,87,2.024,104,0.885,105,1.034,109,4.389,131,1.517,132,4.234,154,4.15,155,2.159,164,2.028,196,1.774,208,1.297,221,1.196,256,2.226,259,1.622,274,1.622,306,2.783,313,3.443,314,2.844,324,3.443,328,2.464,329,4.522,330,3.041,331,1.419,399,2.464,400,1.774,401,3.268,402,3.034,403,3.89,404,4.567,405,3.268,406,4.567,407,4.033,408,3.268,409,3.268,410,3.268,411,4.033,412,3.268,413,2.083,414,4.033,415,4.567,416,2.083,417,3.268,418,3.268,419,2.464,420,2.512,421,2.783,422,3.268,423,3.435,424,2.083,425,5.699,426,5.699,427,3.11,428,2.083,429,3.268,430,2.083,431,2.783,432,2.783,433,3.268,434,3.268,435,3.268,436,3.268,437,6.112,438,2.083,439,3.89,440,2.083,441,2.083,442,3.268,443,2.083,444,3.268,445,2.083,446,1.571,447,2.083,448,2.083,449,3.268,450,2.226,451,3.268,452,2.746,453,3.268,454,2.226,455,2.083,456,2.083,457,2.083,458,2.083,459,2.083,460,2.083,461,2.783,462,2.083,463,2.083,464,2.083,465,3.268,466,2.083,467,2.083,468,2.083,469,2.083,470,2.083,471,1.571,472,2.083,473,3.268,474,3.268,475,2.083,476,2.083]],["title/modules/PrismaModule.html",[0,1.537,8,1.882]],["body/modules/PrismaModule.html",[0,2.532,2,2.345,3,2.701,7,0.022,8,3.717,11,3.342,12,2.713,13,2.345,14,0.31,15,0.31,16,0.274,19,0.427,20,0.786,30,3.624,33,0.31,34,0.261,35,0.018,36,0.018,477,4.023,478,4.023,479,4.023,480,3.844,481,4.723,482,4.956,483,4.723]],["title/injectables/PrismaService.html",[104,0.956,480,1.882]],["body/injectables/PrismaService.html",[7,0.023,13,2.368,14,0.228,15,0.228,16,0.202,19,0.35,20,0.579,33,0.228,34,0.193,35,0.015,36,0.015,41,0.342,45,0.579,46,1.95,47,3.011,55,0.693,58,1.422,59,0.942,60,0.618,61,1.473,62,1.629,63,1.999,104,1.291,105,1.728,107,3.249,141,3.249,204,1.45,221,1.999,314,2.971,363,2.74,402,3.145,403,4.063,419,2.624,421,4.063,480,2.541,484,2.964,485,4.77,486,3.363,487,6.335,488,5.442,489,5.855,490,6.335,491,4.77,492,5.855,493,3.481,494,4.77,495,4.77,496,5.855,497,4.77,498,5.855,499,4.77,500,4.77,501,4.77,502,4.77,503,3.481,504,4.77,505,4.77,506,4.77,507,4.77,508,1.999,509,3.481,510,3.481,511,3.481]],["title/classes/Product.html",[34,0.196,164,1.444]],["body/classes/Product.html",[7,0.023,14,0.181,15,0.181,16,0.16,19,0.202,33,0.181,34,0.153,35,0.013,36,0.013,41,0.577,45,0.458,55,0.921,59,1.641,60,1.126,61,1.79,118,1.823,157,0.664,160,1.652,164,2.869,165,1.8,166,4.076,167,4.076,168,4.781,169,4.781,170,3.996,171,3.442,174,3.442,175,3.442,176,3.442,177,3.047,178,3.442,179,3.442,180,3.442,185,3.442,186,3.442,187,3.975,188,3.59,194,3.047,206,2.442,207,4.233,208,2.981,209,1.928,210,3.442,211,4.076,212,4.076,213,2.347,214,2.347,215,1.583,216,2.347,217,2.347,221,2.321,402,1.368,486,2.321,508,1.583,512,2.347,513,4.042,514,2.756,515,3.047,516,2.756,517,3.442,518,2.756,519,2.756,520,2.756,521,3.442,522,2.756,523,2.756,524,2.756,525,2.756,526,4.042,527,3.047,528,2.756,529,2.756,530,2.756,531,2.756,532,2.756,533,2.756,534,2.078,535,2.347,536,2.347]],["title/controllers/ProductController.html",[37,1.882,537,2.406]],["body/controllers/ProductController.html",[7,0.023,14,0.139,15,0.139,16,0.123,19,0.433,20,0.354,33,0.139,34,0.184,35,0.014,36,0.01,37,1.132,39,1.132,41,0.209,44,2.176,45,0.354,46,1.357,51,2.31,52,4.003,55,0.771,58,2.169,59,1.632,60,0.942,61,1.437,62,2.059,63,2.131,64,2.503,65,1.603,66,1.603,67,2.503,68,4.182,69,1.603,70,1.055,77,2.346,80,1.132,81,1.221,82,4.003,87,2.041,116,1.448,118,1.69,155,2.009,156,3.049,163,1.357,164,2.774,203,1.603,206,2.566,208,2.544,215,1.907,235,2.068,252,1.448,271,3.306,274,1.648,276,2.544,278,3.481,283,2.503,322,1.221,393,2.176,420,2.068,439,1.81,486,1.907,527,2.503,537,2.261,538,1.81,539,1.81,540,3.479,541,2.544,542,2.827,543,2.827,544,2.827,545,2.068,546,1.81,547,3.057,548,3.144,549,2.125,550,2.125,551,4.887,552,2.125,553,2.125,554,2.125,555,2.827,556,2.827,557,2.827,558,3.32,559,2.827,560,1.81,561,3.932,562,2.125,563,2.125,564,3.932,565,1.81,566,2.125,567,2.125,568,1.603,569,3.932,570,2.125,571,2.125,572,1.603,573,3.574,574,3.144,575,2.125,576,2.125,577,2.125,578,1.81,579,4.266,580,1.81,581,2.876,582,1.324,583,1.603,584,1.448,585,2.503,586,1.81,587,1.81,588,1.448,589,2.652,590,1.81,591,2.125,592,2.125,593,1.81,594,2.125,595,2.125,596,2.125,597,2.125,598,2.125,599,2.125,600,2.125,601,2.125,602,2.125,603,2.125,604,2.125,605,2.125,606,2.125,607,1.81,608,2.125,609,2.125]],["title/modules/ProductModule.html",[0,1.537,9,2.201]],["body/modules/ProductModule.html",[0,2.464,2,2.244,3,2.628,7,0.022,8,3.628,9,4.352,11,3.252,12,2.596,13,2.244,14,0.296,15,0.296,16,0.262,18,3.856,19,0.476,20,0.752,30,3.527,33,0.296,34,0.25,35,0.018,36,0.018,39,3.017,537,4.211,589,3.911,590,3.849,610,3.849,611,4.52,612,3.849,613,4.52,614,4.52,615,3.849]],["title/classes/ProductNameInUseException.html",[34,0.196,450,2.406]],["body/classes/ProductNameInUseException.html",[7,0.022,14,0.268,15,0.268,16,0.237,19,0.3,20,0.681,33,0.268,34,0.226,35,0.016,36,0.016,41,0.402,42,0.972,55,0.594,59,1.874,111,1.901,131,2.9,157,0.986,164,2.712,204,1.615,230,2.638,258,3.085,259,3.101,260,3.328,261,4.255,262,2.262,263,3.328,264,5.754,265,3.891,266,3.588,267,4.02,268,3.485,269,4.45,450,3.619,616,4.007,617,3.485]],["title/classes/ProductNotFoundException.html",[34,0.196,452,2.406]],["body/classes/ProductNotFoundException.html",[7,0.022,14,0.281,15,0.281,16,0.248,19,0.314,20,0.712,33,0.281,34,0.237,35,0.017,36,0.017,41,0.421,42,0.989,55,0.622,111,1.942,131,2.95,157,1.032,164,2.745,204,1.663,230,2.717,259,3.155,260,3.386,262,2.302,263,3.386,265,3.958,266,3.65,452,3.727,471,4.548,616,4.126,617,3.647,618,3.229,619,5.413,620,5.137,621,3.647]],["title/injectables/ProductService.html",[104,0.956,589,2.029]],["body/injectables/ProductService.html",[7,0.023,14,0.109,15,0.109,16,0.097,19,0.35,20,0.278,33,0.109,34,0.192,35,0.012,36,0.008,41,0.164,42,0.426,44,2.142,45,0.278,46,1.118,47,2.939,55,0.79,58,2.223,59,1.767,60,0.965,61,1.472,62,1.911,63,2.065,80,0.889,81,0.958,87,2.02,104,0.74,105,0.828,107,2.738,109,3.246,111,0.537,118,1.743,126,2.063,140,2.608,141,1.863,155,1.749,156,2.737,163,1.118,164,2.563,203,1.258,206,2.546,208,3.486,209,0.831,215,1.996,235,2.504,262,0.991,271,2.504,274,1.358,276,2.968,277,2.96,278,3.593,279,2.33,283,2.063,290,2.96,321,2.063,322,1.571,339,1.863,348,2.165,393,1.852,402,1.358,420,1.704,432,1.421,461,2.33,480,2.539,486,2.737,527,2.063,541,2.504,542,2.96,543,2.33,544,2.33,545,2.504,546,2.33,548,1.863,555,2.33,556,2.33,557,2.33,559,2.33,560,2.33,564,3.424,565,2.33,568,2.063,572,1.258,573,3.865,574,3.246,584,1.137,585,2.063,586,1.421,587,1.421,588,1.137,589,1.571,622,1.421,623,3.424,624,3.424,625,2.735,626,3.476,627,1.421,628,1.669,629,2.504,630,1.669,631,1.669,632,1.669,633,1.669,634,1.669,635,2.735,636,1.669,637,4.02,638,2.735,639,2.063,640,2.735,641,2.735,642,2.735,643,2.735,644,4.766,645,2.735,646,4.02,647,2.735,648,2.735,649,2.735,650,2.735,651,2.735,652,2.735,653,3.476,654,2.735,655,1.669,656,1.669,657,1.669,658,2.33,659,1.669,660,1.669,661,1.669,662,1.421,663,1.669,664,1.669,665,2.735,666,1.669,667,1.669,668,1.669,669,1.669,670,1.669,671,1.669,672,1.669,673,2.735,674,2.735,675,1.669,676,1.669,677,2.735,678,1.669,679,1.669,680,1.669,681,1.669,682,1.669,683,1.669,684,1.669,685,2.735,686,1.669,687,1.669,688,1.669]],["title/guards/RolesGuard.html",[689,2.664,690,2.406]],["body/guards/RolesGuard.html",[7,0.023,14,0.217,15,0.217,16,0.192,19,0.442,20,0.55,22,2.253,33,0.217,34,0.293,35,0.014,36,0.014,41,0.325,42,0.97,45,0.55,46,1.882,55,0.669,58,1.882,59,1.247,60,0.818,61,1.247,62,1.129,63,1.572,80,1.762,87,1.771,104,1.247,111,1.065,140,2.63,146,1.535,221,1.9,311,4.32,313,4.32,314,3.568,315,5.13,316,4.88,317,5.13,318,2.817,319,5.558,321,3.473,322,2.645,323,2.817,324,4.32,328,3.473,329,3.473,330,3.995,331,2.253,337,2.817,338,2.817,339,2.253,367,3.137,372,2.253,431,4.88,508,1.9,547,3.323,581,2.645,583,2.494,690,3.137,691,2.817,692,5.729,693,3.308,694,3.308,695,4.606,696,4.606,697,2.494,698,3.308,699,3.308,700,2.817,701,3.308,702,3.308,703,3.308]],["title/classes/UpdateProductDto.html",[34,0.196,573,2.201]],["body/classes/UpdateProductDto.html",[7,0.023,14,0.312,15,0.312,16,0.275,19,0.429,33,0.312,34,0.263,35,0.018,36,0.018,41,0.467,61,1.581,70,2.36,156,3.633,157,1.145,159,3.584,160,2.388,161,3.639,163,1.943,164,2.388,204,1.445,427,3.979,573,3.639,585,3.584,704,4.049,705,4.976,706,4.976,707,4.976,708,4.976,709,4.049,710,4.754]],["title/classes/UpdateUserDto.html",[34,0.196,711,2.201]],["body/classes/UpdateUserDto.html",[7,0.023,14,0.274,15,0.274,16,0.242,19,0.438,33,0.274,34,0.298,35,0.017,36,0.017,41,0.411,42,0.98,45,0.696,51,1.821,55,0.608,60,0.743,61,1.705,70,2.077,86,1.841,118,1.459,157,1.008,160,2.204,161,3.358,163,1.71,165,1.841,198,3.672,200,3.672,201,3.097,202,1.942,204,1.272,209,1.272,218,3.426,220,2.85,242,2.85,253,4.498,255,3.358,427,3.672,705,4.592,706,4.592,707,4.592,708,4.592,709,3.564,711,3.358,712,4.066,713,4.185,714,4.185,715,3.155,716,4.185]],["title/classes/UpdateUserRoleDto.html",[34,0.196,717,2.201]],["body/classes/UpdateUserRoleDto.html",[7,0.023,14,0.273,15,0.273,16,0.241,19,0.394,33,0.273,34,0.297,35,0.017,36,0.017,41,0.409,42,1.081,45,0.692,51,2.337,55,0.78,60,0.954,85,2.503,118,1.454,146,3.251,155,2.337,157,1.002,160,2.196,162,3.085,165,1.834,202,1.931,209,1.633,238,5.067,241,2.834,274,2.667,393,2.862,508,2.39,547,2.217,712,4.486,717,3.346,718,3.544,719,4.161,720,5.372,721,4.161,722,4.161]],["title/classes/User.html",[34,0.196,42,0.55]],["body/classes/User.html",[7,0.023,14,0.192,15,0.192,16,0.17,19,0.215,33,0.192,34,0.162,35,0.013,36,0.013,41,0.288,42,1.103,45,0.488,55,0.919,59,1.557,60,1.123,61,1.812,85,2.212,86,1.964,118,1.843,146,2.936,157,0.706,160,1.728,165,1.853,187,3.188,188,1.997,206,2.504,207,4.339,209,1.922,221,2.428,222,4.901,241,1.997,246,2.497,247,2.497,248,2.497,249,2.497,276,2.633,402,1.455,486,2.428,508,1.684,515,4.093,517,4.623,521,3.601,534,3.188,535,3.601,536,3.601,547,2.892,629,2.633,723,2.497,724,4.901,725,2.932,726,2.932,727,2.932,728,2.932,729,2.932,730,2.932,731,2.932,732,3.601,733,4.228,734,2.932,735,2.932,736,2.932,737,2.932,738,2.932,739,2.932,740,2.932,741,2.932]],["title/controllers/UserController.html",[37,1.882,742,2.406]],["body/controllers/UserController.html",[7,0.023,14,0.147,15,0.147,16,0.13,19,0.457,20,0.372,33,0.147,34,0.191,35,0.011,36,0.011,37,1.193,39,1.193,41,0.22,42,1.041,44,2.249,45,0.372,46,1.413,47,1.96,51,2.232,52,3.58,55,0.745,58,2.097,59,1.389,60,0.911,61,1.389,62,1.93,63,2.089,64,3.58,65,1.688,66,1.688,67,2.606,68,4.089,69,1.688,70,1.111,77,1.985,80,1.193,81,1.286,82,3.869,86,1.18,87,1.973,113,2.529,116,1.525,140,2.096,146,1.96,155,2.066,163,1.413,218,3.114,250,3.636,252,2.354,266,1.985,274,2.692,322,1.286,366,2.875,393,2.249,539,1.907,540,3.596,541,2.629,545,2.629,547,1.842,548,3.233,551,2.944,561,2.944,569,4.044,574,3.693,578,2.944,579,4.37,580,1.907,581,1.985,582,1.394,583,1.688,584,1.525,588,2.354,593,1.907,607,1.907,700,5.617,711,3.636,715,3.183,717,3.377,732,4.619,742,2.354,743,1.907,744,2.944,745,3.596,746,1.907,747,2.239,748,2.239,749,2.239,750,2.239,751,2.239,752,2.239,753,4.222,754,2.629,755,2.239,756,2.239,757,2.239,758,3.456,759,2.239,760,2.239,761,2.239,762,1.907,763,3.456,764,2.239,765,2.239,766,4.222,767,1.525,768,1.907,769,1.907,770,1.394,771,1.907,772,1.907,773,1.907,774,2.239,775,2.239,776,2.239,777,2.239,778,4.222,779,2.239,780,2.239,781,2.239,782,2.239,783,2.239]],["title/modules/UserModule.html",[0,1.537,10,2.029]],["body/modules/UserModule.html",[0,2.413,2,2.17,3,2.574,7,0.022,8,3.598,10,4.024,11,3.184,12,2.511,13,2.17,14,0.287,15,0.287,16,0.253,18,3.776,19,0.47,20,0.727,30,3.453,33,0.287,34,0.242,35,0.017,36,0.017,39,2.954,113,3.805,482,4.722,615,3.723,742,4.147,773,3.723,784,3.723,785,4.372,786,3.723,787,3.723,788,4.372,789,4.372]],["title/classes/UserNotFoundException.html",[34,0.196,454,2.406]],["body/classes/UserNotFoundException.html",[7,0.022,14,0.274,15,0.274,16,0.242,19,0.307,20,0.696,33,0.274,34,0.232,35,0.017,36,0.017,41,0.411,42,1.091,55,0.608,85,2.423,111,1.921,131,2.925,157,1.008,204,1.639,206,2.742,230,2.677,259,3.128,260,3.357,262,2.282,263,3.357,265,3.924,266,3.619,454,3.672,471,4.498,618,3.155,619,5.367,620,5.081,621,3.564,790,4.592,791,4.185]],["title/injectables/UserService.html",[104,0.956,113,1.882]],["body/injectables/UserService.html",[7,0.023,14,0.099,15,0.099,16,0.087,19,0.407,20,0.251,33,0.099,34,0.179,35,0.008,36,0.008,41,0.148,42,1.043,44,2.011,45,0.251,46,1.027,47,3.012,48,1.565,55,0.76,58,2.139,59,1.417,60,0.929,61,1.417,62,1.937,63,2.067,80,0.802,81,0.865,85,1.743,86,2.228,87,1.613,104,0.68,105,0.748,107,2.571,109,3.087,111,0.485,113,1.339,116,1.712,118,1.721,121,4.292,123,2.14,124,4.292,125,2.846,126,3.418,132,2.351,133,2.754,134,1.026,138,1.283,140,2.598,141,3.863,146,1.501,152,3.215,154,1.895,155,2.413,163,1.027,177,2.846,206,2.56,215,1.443,218,2.603,240,1.283,250,2.995,252,2.571,253,2.438,255,3.138,262,1.367,274,1.248,299,1.712,322,1.443,348,2.014,390,1.712,392,2.14,393,1.723,402,1.248,419,1.895,420,1.565,480,2.415,486,3.102,515,1.136,541,2.351,545,1.565,548,1.712,568,1.895,572,1.136,574,2.571,584,1.026,588,1.712,623,3.215,624,3.215,627,1.283,629,3.138,658,2.14,662,1.283,711,3.72,715,2.438,717,2.823,724,1.283,744,2.14,745,2.754,746,2.14,754,2.014,762,1.283,768,1.283,769,1.283,770,0.938,771,1.283,772,1.283,792,1.283,793,2.513,794,3.233,795,3.233,796,1.506,797,1.506,798,2.513,799,1.506,800,3.774,801,2.513,802,2.513,803,1.506,804,2.513,805,2.513,806,2.513,807,1.506,808,1.506,809,2.513,810,2.513,811,2.513,812,3.774,813,1.506,814,1.506,815,1.506,816,1.506,817,1.506,818,2.513,819,1.506,820,2.513,821,1.506,822,3.774,823,1.506,824,3.774,825,1.506,826,1.506,827,3.233,828,1.506,829,1.506,830,2.513,831,1.506,832,1.506,833,2.513,834,1.506,835,1.506,836,3.233,837,3.774,838,1.506,839,2.513,840,1.506]],["title/classes/UserWithoutPassword.html",[34,0.196,770,2.201]],["body/classes/UserWithoutPassword.html",[7,0.023,14,0.318,15,0.318,16,0.281,19,0.434,33,0.318,34,0.268,35,0.018,36,0.018,41,0.477,42,0.993,70,2.407,86,2.178,140,2.407,157,1.168,195,4.129,204,1.473,427,4.027,754,3.019,770,3.683,841,4.129,842,4.129,843,5.913,844,5.913,845,5.913,846,4.848,847,4.848]],["title/interfaces/ValidateReturn.html",[354,2.029,365,2.201]],["body/interfaces/ValidateReturn.html",[7,0.023,14,0.224,15,0.224,16,0.198,19,0.427,20,0.57,33,0.224,34,0.19,35,0.015,36,0.015,41,0.337,42,1.024,45,0.57,47,1.589,60,0.837,62,1.169,63,1.169,87,1.316,92,1.824,97,1.966,98,1.966,99,2.332,104,1.277,111,1.103,118,1.781,120,2.332,127,1.824,143,2.709,144,2.332,146,2.699,165,1.61,204,1.04,206,2.348,209,1.767,262,1.24,307,3.099,308,2.938,334,2.332,341,2.332,342,4.293,343,3.556,346,2.582,348,2.132,349,3.556,350,2.582,351,2.582,352,2.582,353,2.582,354,2.709,355,2.132,356,2.332,357,3.556,358,3.556,359,3.556,360,3.556,361,3.556,362,3.556,363,2.709,364,3.556,365,2.938,366,4.153,367,4.153,368,2.582,369,2.582,370,2.582,371,2.582,372,2.332,373,2.582,374,2.582,375,2.582,376,2.582,398,2.582]],["title/coverage.html",[848,4.105]],["body/coverage.html",[7,0.023,16,0.164,24,1.759,34,0.385,35,0.013,36,0.013,37,2.586,38,1.924,40,2.406,42,0.64,50,1.924,59,0.765,60,0.501,71,1.622,75,1.924,77,1.622,85,1.086,86,1.405,92,1.505,98,1.622,104,1.654,106,2.406,113,1.505,137,1.924,143,1.622,155,1.229,156,1.622,158,2.406,159,3.103,164,1.154,218,1.622,219,2.406,220,3.306,250,1.759,251,2.406,256,1.924,257,2.406,258,3.103,271,1.759,272,2.406,273,2.406,291,2.406,292,2.406,299,1.924,300,2.406,301,3.103,304,2.406,305,2.406,332,2.13,341,3.306,354,2.363,365,1.759,377,2.406,378,2.406,383,2.406,390,1.924,391,2.406,399,2.13,400,2.406,450,1.924,452,1.924,454,1.924,480,1.505,484,2.406,512,2.406,537,1.924,538,2.406,573,1.759,581,1.622,582,2.563,589,1.622,616,3.103,618,3.103,622,2.406,689,2.13,690,1.924,691,2.406,697,2.13,704,2.406,711,1.759,712,3.103,717,1.759,718,2.406,723,2.406,742,1.924,743,2.406,754,1.759,770,1.759,790,2.406,792,2.406,841,2.406,842,2.406,848,2.406,849,2.406,850,2.824,851,2.824,852,7.257,853,6.573,854,4.115,855,6.261,856,3.505,857,5.334,858,6.261,859,3.103,860,4.115,861,4.855,862,2.406,863,2.406,864,2.406,865,4.855,866,2.824,867,2.824,868,2.824,869,2.824,870,2.824]],["title/dependencies.html",[3,1.972,871,2.514]],["body/dependencies.html",[3,2.111,7,0.023,20,0.756,22,3.097,34,0.315,35,0.018,36,0.018,70,2.258,95,3.429,97,2.612,127,2.423,132,2.832,134,3.097,202,2.111,288,3.429,307,3.265,331,3.097,402,2.258,446,3.429,508,2.612,767,3.871,872,6.201,873,4.548,874,4.548,875,4.548,876,4.548,877,4.548,878,4.548,879,4.548,880,4.548,881,4.548,882,4.548,883,4.548,884,4.548,885,4.548,886,4.548,887,4.548,888,4.548,889,4.548,890,4.548,891,4.548,892,3.873,893,3.873,894,4.548]],["title/miscellaneous/functions.html",[895,2.01,896,3.619]],["body/miscellaneous/functions.html",[7,0.021,35,0.019,36,0.019,45,0.84,62,2.069,63,1.723,163,2.063,209,1.534,276,3.144,363,2.899,393,2.689,545,3.144,547,2.689,581,3.729,582,3.144,629,3.144,639,3.806,859,4.569,863,4.299,864,5.53,895,3.438,896,4.299,897,5.048,898,4.299,899,5.048,900,4.299,901,4.299,902,5.048]],["title/index.html",[45,0.491,903,2.514,904,2.514]],["body/index.html",[7,0.022,34,0.223,35,0.012,36,0.012,44,2.141,127,1.457,132,1.703,134,1.863,202,1.269,225,4.922,288,2.062,307,2.308,314,1.703,355,1.703,402,2.608,446,2.062,541,3.272,547,1.457,767,2.738,892,3.423,893,2.329,905,2.735,906,4.765,907,2.735,908,5.851,909,5.596,910,2.735,911,6.9,912,4.019,913,4.019,914,4.019,915,2.735,916,4.765,917,4.019,918,2.735,919,4.019,920,4.765,921,4.019,922,4.019,923,4.019,924,2.735,925,2.735,926,2.735,927,4.019,928,2.735,929,2.735,930,6.205,931,4.019,932,2.735,933,2.735,934,5.253,935,2.735,936,2.735,937,2.735,938,2.735,939,2.735,940,2.735,941,5.253,942,2.735,943,2.735,944,2.735,945,2.735,946,2.735,947,6.332,948,4.019,949,4.019,950,4.019,951,4.019,952,4.019,953,2.735,954,2.735,955,2.735,956,2.735,957,2.735,958,5.253,959,5.596,960,4.019,961,2.735,962,2.735,963,4.019,964,2.735,965,2.735,966,2.735,967,2.735,968,2.735,969,2.735,970,2.735,971,2.735,972,4.019,973,2.735,974,4.019,975,4.765,976,5.596,977,2.735,978,2.735,979,5.596,980,6.048,981,2.735,982,2.735,983,2.735,984,2.735,985,2.735,986,2.735,987,2.735,988,2.735,989,2.735,990,2.735,991,2.735,992,2.735,993,4.019,994,2.735,995,2.735,996,2.735,997,2.735,998,2.735,999,2.735,1000,2.735,1001,2.735,1002,2.735,1003,2.735,1004,2.735,1005,2.735,1006,2.735,1007,2.735,1008,2.735,1009,2.735,1010,2.735,1011,2.735,1012,2.735,1013,2.735,1014,2.735,1015,2.735,1016,2.735,1017,2.735,1018,2.735,1019,2.735,1020,2.735,1021,2.735,1022,2.735,1023,2.735,1024,2.735,1025,2.735,1026,2.735,1027,2.329]],["title/license.html",[903,2.514,904,2.514,1028,2.226]],["body/license.html",[7,0.017,13,2.077,35,0.017,36,0.017,269,4.066,356,2.85,534,3.155,754,3.716,767,2.85,849,3.564,1027,3.564,1028,3.155,1029,5.966,1030,4.185,1031,4.185,1032,4.185,1033,5.392,1034,4.185,1035,4.185,1036,4.185,1037,4.185,1038,4.185,1039,4.185,1040,5.392,1041,6.952,1042,4.185,1043,4.185,1044,4.185,1045,4.185,1046,5.392,1047,4.185,1048,4.185,1049,4.185,1050,4.185,1051,4.185,1052,4.185,1053,4.185,1054,4.185,1055,4.185,1056,5.392,1057,4.185,1058,4.185,1059,4.185,1060,4.185,1061,4.185,1062,4.185,1063,5.392,1064,5.392,1065,4.185,1066,4.185,1067,4.185,1068,4.185,1069,4.185,1070,4.185,1071,4.185,1072,4.185,1073,4.185,1074,4.185,1075,4.185,1076,4.185,1077,4.185,1078,4.185,1079,4.185,1080,4.185,1081,4.185,1082,4.185,1083,4.185,1084,4.185,1085,4.185,1086,4.185,1087,4.185,1088,4.185,1089,4.185,1090,4.185,1091,4.185,1092,4.185,1093,4.185]],["title/modules.html",[2,2.393]],["body/modules.html",[1,3.523,2,2.568,6,3.221,7,0.019,8,2.756,9,3.221,10,2.971,35,0.019,36,0.019,1094,6.933,1095,6.933,1096,6.933,1097,6.933]],["title/overview.html",[1098,4.105]],["body/overview.html",[1,4.734,2,1.976,3,2.423,4,3.39,5,3.39,6,4.289,7,0.022,8,3.628,9,4.18,10,3.955,11,2.998,12,2.286,13,1.976,35,0.016,36,0.016,39,2.121,71,3.345,89,3.39,91,3.39,92,3.103,105,1.976,113,3.576,157,0.959,235,2.479,398,3.001,477,3.39,478,3.39,479,3.39,480,3.576,589,3.345,610,3.39,612,3.39,689,3.001,784,3.39,786,3.39,787,3.39,1098,3.39,1099,3.981,1100,3.981,1101,3.981,1102,3.981,1103,3.981]],["title/properties.html",[165,1.45,871,2.514]],["body/properties.html",[7,0.022,35,0.02,36,0.02,41,0.535,165,1.857,1028,4.102,1104,5.441,1105,5.441,1106,5.441,1107,5.441,1108,5.441]],["title/miscellaneous/variables.html",[895,2.01,1109,3.619]],["body/miscellaneous/variables.html",[7,0.022,24,2.644,35,0.017,36,0.017,42,0.661,43,2.891,44,2.262,45,0.706,48,2.644,60,1.066,77,3.45,98,3.125,118,1.473,163,1.735,209,1.29,262,2.175,308,2.644,332,4.103,335,3.616,339,2.891,342,2.891,420,3.945,423,3.616,581,3.125,582,2.644,629,2.644,639,3.201,690,2.891,697,4.103,856,3.616,859,4.103,862,3.616,895,2.891,898,3.616,900,5.116,901,3.616,1109,3.616,1110,5.442,1111,4.245,1112,6.701,1113,5.442,1114,5.442,1115,5.442,1116,4.245,1117,4.245,1118,4.245,1119,4.245,1120,4.245,1121,4.245,1122,4.245,1123,4.245,1124,4.245]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":188,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["0.0.1",{"_index":1105,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":888,"title":{},"body":{"dependencies.html":{}}}],["0.1.2",{"_index":885,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":882,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":881,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":883,"title":{},"body":{"dependencies.html":{}}}],["03",{"_index":535,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["1",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FindAllProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"overview.html":{}}}],["1/1",{"_index":858,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":215,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindAllProductsDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["10/10",{"_index":865,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":852,"title":{},"body":{"coverage.html":{}}}],["12df",{"_index":358,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["151be8d85634",{"_index":740,"title":{},"body":{"classes/User.html":{}}}],["15m",{"_index":1123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["19",{"_index":1102,"title":{},"body":{"overview.html":{}}}],["2",{"_index":1103,"title":{},"body":{"overview.html":{}}}],["2/2",{"_index":853,"title":{},"body":{"coverage.html":{}}}],["2022",{"_index":534,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{},"license.html":{}}}],["26t15:41:28.527z",{"_index":536,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["2b$10$1xpzuyu8fuvuabb3sc0xzur9dx7kakbmlt0vlnoz.unlntdmfc4lk",{"_index":741,"title":{},"body":{"classes/User.html":{}}}],["3",{"_index":1100,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":890,"title":{},"body":{"dependencies.html":{}}}],["3.12.0",{"_index":879,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":855,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":969,"title":{},"body":{"index.html":{}}}],["4.0.0",{"_index":884,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":894,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":854,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":261,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/MissingPasswordUpdateError.html":{},"classes/ProductNameInUseException.html":{}}}],["401",{"_index":293,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{}}}],["404",{"_index":619,"title":{},"body":{"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["42",{"_index":216,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["4302",{"_index":531,"title":{},"body":{"classes/Product.html":{}}}],["441e",{"_index":738,"title":{},"body":{"classes/User.html":{}}}],["44dd5c499084",{"_index":361,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["4f33",{"_index":359,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["5",{"_index":1099,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":880,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":878,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":866,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":868,"title":{},"body":{"coverage.html":{}}}],["6f4ca8a4",{"_index":529,"title":{},"body":{"classes/Product.html":{}}}],["7",{"_index":1101,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":891,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":861,"title":{},"body":{"coverage.html":{}}}],["70.00",{"_index":214,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["7aed",{"_index":737,"title":{},"body":{"classes/User.html":{}}}],["7b5547f01b0a",{"_index":533,"title":{},"body":{"classes/Product.html":{}}}],["8",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8'})@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":232,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.0.0",{"_index":873,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":876,"title":{},"body":{"dependencies.html":{}}}],["8.4.4",{"_index":872,"title":{},"body":{"dependencies.html":{}}}],["8aa0",{"_index":530,"title":{},"body":{"classes/Product.html":{}}}],["9/9",{"_index":867,"title":{},"body":{"coverage.html":{}}}],["9f7f",{"_index":739,"title":{},"body":{"classes/User.html":{}}}],["9fd6",{"_index":360,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["abc123456",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{}}}],["above",{"_index":1062,"title":{},"body":{"license.html":{}}}],["abrir",{"_index":967,"title":{},"body":{"index.html":{}}}],["ac1b",{"_index":532,"title":{},"body":{"classes/Product.html":{}}}],["access",{"_index":695,"title":{},"body":{"guards/RolesGuard.html":{}}}],["accessible",{"_index":901,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["accessing",{"_index":692,"title":{},"body":{"guards/RolesGuard.html":{}}}],["accesstoken",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginResponse.html":{}}}],["acessar",{"_index":971,"title":{},"body":{"index.html":{}}}],["action",{"_index":1087,"title":{},"body":{"license.html":{}}}],["address",{"_index":222,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["admin",{"_index":547,"title":{},"body":{"controllers/ProductController.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["admin.decorator",{"_index":583,"title":{},"body":{"controllers/ProductController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{}}}],["admin.decorator.ts",{"_index":859,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["admins",{"_index":551,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["allowed",{"_index":696,"title":{},"body":{"guards/RolesGuard.html":{}}}],["already",{"_index":264,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["alterando",{"_index":982,"title":{},"body":{"index.html":{}}}],["alvaromrveiga",{"_index":1108,"title":{},"body":{"properties.html":{}}}],["amount",{"_index":194,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindAllProductsDto.html":{},"classes/Product.html":{}}}],["and/or",{"_index":1054,"title":{},"body":{"license.html":{}}}],["apenas",{"_index":993,"title":{},"body":{"index.html":{}}}],["api",{"_index":907,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":579,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apioperation",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":52,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apitags",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apitags('authentication",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('product",{"_index":591,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags('user",{"_index":774,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":419,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["app.close",{"_index":511,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app_guard",{"_index":21,"title":{},"body":{"modules/AppModule.html":{}}}],["application",{"_index":363,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"interfaces/Payload.html":{},"injectables/PrismaService.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/functions.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arising",{"_index":1091,"title":{},"body":{"license.html":{}}}],["armazenar",{"_index":1005,"title":{},"body":{"index.html":{}}}],["arquivo",{"_index":950,"title":{},"body":{"index.html":{}}}],["asc",{"_index":672,"title":{},"body":{"injectables/ProductService.html":{}}}],["associated",{"_index":1042,"title":{},"body":{"license.html":{}}}],["async",{"_index":47,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{}}}],["autenticação",{"_index":916,"title":{},"body":{"index.html":{}}}],["auth.controller",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["auth.guard.ts",{"_index":305,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:13",{"_index":320,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:28",{"_index":325,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":38,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":379,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["authenticates",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticating",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":43,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginResponse.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":309,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":333,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1107,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":1080,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":71,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autorização",{"_index":917,"title":{},"body":{"index.html":{}}}],["available",{"_index":624,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["avaliações",{"_index":915,"title":{},"body":{"index.html":{}}}],["await",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["backend",{"_index":906,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":267,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/MissingPasswordUpdateError.html":{},"classes/ProductNameInUseException.html":{}}}],["banco",{"_index":975,"title":{},"body":{"index.html":{}}}],["bando",{"_index":989,"title":{},"body":{"index.html":{}}}],["baseprice",{"_index":166,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["bcrypt",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["becomes",{"_index":654,"title":{},"body":{"injectables/ProductService.html":{}}}],["before",{"_index":500,"title":{},"body":{"injectables/PrismaService.html":{}}}],["being",{"_index":1114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["between",{"_index":648,"title":{},"body":{"injectables/ProductService.html":{}}}],["black",{"_index":211,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["body",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["boilerplate",{"_index":421,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{}}}],["boolean",{"_index":329,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/PrismaInterceptor.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":864,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":392,"title":{},"body":{"classes/MissingPasswordUpdateError.html":{},"injectables/UserService.html":{}}}],["brand",{"_index":210,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["brand1",{"_index":653,"title":{},"body":{"injectables/ProductService.html":{}}}],["break",{"_index":465,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["browse",{"_index":1097,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1094,"title":{},"body":{"modules.html":{}}}],["c",{"_index":1030,"title":{},"body":{"license.html":{}}}],["calculations",{"_index":178,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["call",{"_index":498,"title":{},"body":{"injectables/PrismaService.html":{}}}],["called",{"_index":387,"title":{},"body":{"classes/LoginResponse.html":{}}}],["callhandler",{"_index":415,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["canactivate",{"_index":317,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":323,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["case",{"_index":461,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"injectables/ProductService.html":{}}}],["catcherror",{"_index":447,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["catcherror((error",{"_index":457,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["catches",{"_index":417,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["categorias",{"_index":926,"title":{},"body":{"index.html":{}}}],["cd",{"_index":943,"title":{},"body":{"index.html":{}}}],["chair",{"_index":290,"title":{},"body":{"classes/FindAllProductsDto.html":{},"injectables/ProductService.html":{}}}],["chair&quot",{"_index":656,"title":{},"body":{"injectables/ProductService.html":{}}}],["charge",{"_index":1037,"title":{},"body":{"license.html":{}}}],["check",{"_index":310,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["checks",{"_index":431,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"guards/RolesGuard.html":{}}}],["claim",{"_index":1083,"title":{},"body":{"license.html":{}}}],["class",{"_index":34,"title":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"classes/Product.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"classes/UserWithoutPassword.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":157,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"classes/Product.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"classes/UserWithoutPassword.html":{},"overview.html":{}}}],["clientversion",{"_index":433,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["clona",{"_index":933,"title":{},"body":{"index.html":{}}}],["clone",{"_index":938,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":90,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":477,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":478,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":479,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_productmodule",{"_index":610,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_productmodule_imports",{"_index":611,"title":{},"body":{"modules/ProductModule.html":{}}}],["cluster_productmodule_providers",{"_index":612,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":784,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":786,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":785,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":787,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["colocou",{"_index":985,"title":{},"body":{"index.html":{}}}],["com",{"_index":908,"title":{},"body":{"index.html":{}}}],["commerce",{"_index":905,"title":{},"body":{"index.html":{}}}],["compare",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["compare(currentpassword",{"_index":840,"title":{},"body":{"injectables/UserService.html":{}}}],["compare(password",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["compared",{"_index":806,"title":{},"body":{"injectables/UserService.html":{}}}],["compares",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["compodoc",{"_index":1021,"title":{},"body":{"index.html":{}}}],["compras",{"_index":914,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":1061,"title":{},"body":{"license.html":{}}}],["configuration",{"_index":343,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["configurations",{"_index":1124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connect",{"_index":505,"title":{},"body":{"injectables/PrismaService.html":{}}}],["connecting",{"_index":485,"title":{},"body":{"injectables/PrismaService.html":{}}}],["connection",{"_index":1092,"title":{},"body":{"license.html":{}}}],["considering",{"_index":175,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["const",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{}}}],["constructor",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{}}}],["constructor(prisma",{"_index":627,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(reflector",{"_index":318,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["constructor(userservice",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{}}}],["construir",{"_index":1003,"title":{},"body":{"index.html":{}}}],["consult",{"_index":1115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contain",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["containing",{"_index":287,"title":{},"body":{"classes/FindAllProductsDto.html":{}}}],["contains",{"_index":432,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"injectables/ProductService.html":{}}}],["content",{"_index":353,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["context",{"_index":328,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/PrismaInterceptor.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":338,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":337,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":701,"title":{},"body":{"guards/RolesGuard.html":{}}}],["contract",{"_index":1088,"title":{},"body":{"license.html":{}}}],["controller",{"_index":37,"title":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('product",{"_index":592,"title":{},"body":{"controllers/ProductController.html":{}}}],["controller('user",{"_index":775,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":39,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["copies",{"_index":1056,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1040,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1029,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":848,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":163,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/InvalidPasswordUpdateError.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":593,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["create(createproductdto",{"_index":546,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["create(createuserdto",{"_index":746,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createdat",{"_index":207,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["createproductdto",{"_index":156,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["creates",{"_index":548,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":218,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email.tolowercase",{"_index":825,"title":{},"body":{"injectables/UserService.html":{}}}],["credentials.dto",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":378,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:11",{"_index":381,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["credentials.dto.ts:19",{"_index":382,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["criação",{"_index":910,"title":{},"body":{"index.html":{}}}],["crie",{"_index":948,"title":{},"body":{"index.html":{}}}],["crud",{"_index":541,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["currency.js",{"_index":180,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["current",{"_index":255,"title":{},"body":{"classes/DeleteUserDto.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/MissingPasswordUpdateError.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["currentpassword",{"_index":253,"title":{},"body":{"classes/DeleteUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["customdecorator",{"_index":1116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["código",{"_index":1026,"title":{},"body":{"index.html":{}}}],["códigos",{"_index":1015,"title":{},"body":{"index.html":{}}}],["d31fc56c",{"_index":736,"title":{},"body":{"classes/User.html":{}}}],["d6c24523",{"_index":357,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["dados",{"_index":976,"title":{},"body":{"index.html":{}}}],["damages",{"_index":1084,"title":{},"body":{"license.html":{}}}],["data",{"_index":348,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{}}}],["database",{"_index":486,"title":{},"body":{"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["date",{"_index":515,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["datestring",{"_index":517,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["de",{"_index":911,"title":{},"body":{"index.html":{}}}],["deal",{"_index":1044,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1093,"title":{},"body":{"license.html":{}}}],["decimal",{"_index":171,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["decorator",{"_index":326,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["decorators",{"_index":51,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindAllProductsDto.html":{},"classes/LoginCredentialsDto.html":{},"controllers/ProductController.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{}}}],["decorators/is",{"_index":698,"title":{},"body":{"guards/RolesGuard.html":{}}}],["decrypted",{"_index":349,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["default",{"_index":420,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":187,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["defined",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":252,"title":{},"body":{"classes/DeleteUserDto.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(':id",{"_index":606,"title":{},"body":{"controllers/ProductController.html":{}}}],["deletes",{"_index":569,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["deleteuserdto",{"_index":250,"title":{"classes/DeleteUserDto.html":{}},"body":{"classes/DeleteUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["deleteuserdto.currentpassword",{"_index":834,"title":{},"body":{"injectables/UserService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":322,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dependências",{"_index":946,"title":{},"body":{"index.html":{}}}],["describes",{"_index":160,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindAllProductsDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/Product.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{}}}],["description",{"_index":41,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"properties.html":{}}}],["descritas",{"_index":955,"title":{},"body":{"index.html":{}}}],["desenvolvimento",{"_index":965,"title":{},"body":{"index.html":{}}}],["discount",{"_index":185,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["discountpercentage",{"_index":167,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["discounts",{"_index":176,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["distribute",{"_index":1052,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":849,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["documentação",{"_index":972,"title":{},"body":{"index.html":{}}}],["doe",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["doesn't",{"_index":818,"title":{},"body":{"injectables/UserService.html":{}}}],["dos",{"_index":1011,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":584,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/delete",{"_index":768,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/find",{"_index":586,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["dto/login",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/login.response",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/update",{"_index":588,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e",{"_index":225,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"index.html":{}}}],["ecommerce",{"_index":944,"title":{},"body":{"index.html":{}}}],["em",{"_index":963,"title":{},"body":{"index.html":{}}}],["email",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/LoginCredentialsDto.html":{},"injectables/PrismaInterceptor.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["email.tolowercase",{"_index":828,"title":{},"body":{"injectables/UserService.html":{}}}],["emailinuseexception",{"_index":256,"title":{"classes/EmailInUseException.html":{}},"body":{"classes/EmailInUseException.html":{},"injectables/PrismaInterceptor.html":{},"coverage.html":{}}}],["enableshutdownhooks",{"_index":489,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":491,"title":{},"body":{"injectables/PrismaService.html":{}}}],["endpoint",{"_index":900,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":44,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["enter",{"_index":396,"title":{},"body":{"classes/MissingPasswordUpdateError.html":{}}}],["entities/product.entity",{"_index":203,"title":{},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["entities/user",{"_index":771,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entities/user.entity",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":843,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["entra",{"_index":940,"title":{},"body":{"index.html":{}}}],["entrada",{"_index":1010,"title":{},"body":{"index.html":{}}}],["enum",{"_index":446,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"dependencies.html":{},"index.html":{}}}],["env",{"_index":951,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":956,"title":{},"body":{"index.html":{}}}],["env.test",{"_index":981,"title":{},"body":{"index.html":{}}}],["error",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaInterceptor.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["error.clientversion",{"_index":475,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["error.code",{"_index":460,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["error.message",{"_index":470,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["error.message.includes('prisma.product",{"_index":474,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["error.message.includes('prisma.user",{"_index":476,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["errormeta",{"_index":428,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["errors",{"_index":404,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["errors/invalid",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["errors/missing",{"_index":821,"title":{},"body":{"injectables/UserService.html":{}}}],["erros",{"_index":1001,"title":{},"body":{"index.html":{}}}],["eslint",{"_index":1022,"title":{},"body":{"index.html":{}}}],["event",{"_index":1079,"title":{},"body":{"license.html":{}}}],["example",{"_index":209,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindAllProductsDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["exceptions/email",{"_index":448,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["exceptions/product",{"_index":451,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["exceptions/user",{"_index":455,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["exceções",{"_index":1017,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":324,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/PrismaInterceptor.html":{},"guards/RolesGuard.html":{}}}],["exemplo",{"_index":986,"title":{},"body":{"index.html":{}}}],["exists",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":1122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{}}}],["exports",{"_index":482,"title":{},"body":{"modules/PrismaModule.html":{},"modules/UserModule.html":{}}}],["exposes",{"_index":540,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["express",{"_index":767,"title":{},"body":{"controllers/UserController.html":{},"dependencies.html":{},"index.html":{},"license.html":{}}}],["extends",{"_index":204,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaService.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserNotFoundException.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{}}}],["extractjwt",{"_index":351,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":370,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjzdwiioii5nwfkmznhns0wyjk4ltq2odytyjfmms1hmtkwnzm0nwjmyzcilcjpyxqioje2ndg0nzu3mzesimv4cci6mty0odq3njyzmx0.h3z3jdvhoi6y5c_n0kt6tdp2nwk_dhbzxioqn7vanno",{"_index":389,"title":{},"body":{"classes/LoginResponse.html":{}}}],["false",{"_index":372,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"interfaces/ValidateReturn.html":{}}}],["features",{"_index":919,"title":{},"body":{"index.html":{}}}],["field",{"_index":427,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserWithoutPassword.html":{}}}],["fields",{"_index":161,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["file",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{}}}],["files",{"_index":1043,"title":{},"body":{"license.html":{}}}],["find",{"_index":564,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findall",{"_index":542,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findall(@query",{"_index":595,"title":{},"body":{"controllers/ProductController.html":{}}}],["findall(findallproductsdto",{"_index":552,"title":{},"body":{"controllers/ProductController.html":{}}}],["findall(undefined",{"_index":631,"title":{},"body":{"injectables/ProductService.html":{}}}],["findallproductsdto",{"_index":271,"title":{"classes/FindAllProductsDto.html":{}},"body":{"classes/FindAllProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["findbyemail",{"_index":793,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyemail(email",{"_index":798,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid",{"_index":744,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findbyid(@req",{"_index":777,"title":{},"body":{"controllers/UserController.html":{}}}],["findbyid(id",{"_index":802,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(request",{"_index":750,"title":{},"body":{"controllers/UserController.html":{}}}],["findonebyid",{"_index":543,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyid(@param('id",{"_index":598,"title":{},"body":{"controllers/ProductController.html":{}}}],["findonebyid(id",{"_index":560,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyurlname",{"_index":544,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyurlname(@param('urlname",{"_index":601,"title":{},"body":{"controllers/ProductController.html":{}}}],["findonebyurlname(urlname",{"_index":565,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["finds",{"_index":800,"title":{},"body":{"injectables/UserService.html":{}}}],["fire",{"_index":502,"title":{},"body":{"injectables/PrismaService.html":{}}}],["first",{"_index":507,"title":{},"body":{"injectables/PrismaService.html":{}}}],["fitness",{"_index":1075,"title":{},"body":{"license.html":{}}}],["following",{"_index":1060,"title":{},"body":{"license.html":{}}}],["forgot",{"_index":811,"title":{},"body":{"injectables/UserService.html":{}}}],["formatação",{"_index":1025,"title":{},"body":{"index.html":{}}}],["formats",{"_index":637,"title":{},"body":{"injectables/ProductService.html":{}}}],["formaturlname",{"_index":625,"title":{},"body":{"injectables/ProductService.html":{}}}],["formaturlname(name",{"_index":635,"title":{},"body":{"injectables/ProductService.html":{}}}],["found",{"_index":471,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["found.exception",{"_index":453,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["found.exception.ts",{"_index":618,"title":{},"body":{"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["found.exception.ts:6",{"_index":621,"title":{},"body":{"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["free",{"_index":1036,"title":{},"body":{"license.html":{}}}],["function",{"_index":860,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":896,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1059,"title":{},"body":{"license.html":{}}}],["generate",{"_index":638,"title":{},"body":{"injectables/ProductService.html":{}}}],["get('/id/:id",{"_index":597,"title":{},"body":{"controllers/ProductController.html":{}}}],["get(':urlname",{"_index":600,"title":{},"body":{"controllers/ProductController.html":{}}}],["gets",{"_index":561,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["getting",{"_index":903,"title":{"index.html":{},"license.html":{}},"body":{}}],["git",{"_index":937,"title":{},"body":{"index.html":{}}}],["granted",{"_index":1035,"title":{},"body":{"license.html":{}}}],["guard",{"_index":689,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":315,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["handle",{"_index":733,"title":{},"body":{"classes/User.html":{}}}],["handled",{"_index":179,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["happened",{"_index":426,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["hash",{"_index":819,"title":{},"body":{"injectables/UserService.html":{}}}],["hash(createuserdto.password",{"_index":823,"title":{},"body":{"injectables/UserService.html":{}}}],["hash(updateuserdto.password",{"_index":838,"title":{},"body":{"injectables/UserService.html":{}}}],["hashed",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["hashedpassword",{"_index":822,"title":{},"body":{"injectables/UserService.html":{}}}],["hashifupdatingpassword",{"_index":794,"title":{},"body":{"injectables/UserService.html":{}}}],["hashifupdatingpassword(id",{"_index":807,"title":{},"body":{"injectables/UserService.html":{}}}],["hashs",{"_index":1012,"title":{},"body":{"index.html":{}}}],["here",{"_index":708,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["hereby",{"_index":1034,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1081,"title":{},"body":{"license.html":{}}}],["hooks",{"_index":501,"title":{},"body":{"injectables/PrismaService.html":{}}}],["http",{"_index":259,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/MissingPasswordUpdateError.html":{},"injectables/PrismaInterceptor.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["http://localhost:3000/api",{"_index":973,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":607,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://docs.nestjs.com/guards",{"_index":316,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["https://docs.nestjs.com/interceptors",{"_index":406,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["https://docs.nestjs.com/recipes/prisma",{"_index":487,"title":{},"body":{"injectables/PrismaService.html":{}}}],["https://github.com/alvaromrveiga/ecommerce",{"_index":939,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["hyphens",{"_index":651,"title":{},"body":{"injectables/ProductService.html":{}}}],["id",{"_index":206,"title":{},"body":{"classes/CreateProductDto.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{}}}],["id'})@apibearerauth()@isadmin()@get('/id/:id",{"_index":562,"title":{},"body":{"controllers/ProductController.html":{}}}],["identificar",{"_index":1014,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":850,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":371,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["image.jpg",{"_index":213,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["imagens",{"_index":925,"title":{},"body":{"index.html":{}}}],["implements",{"_index":221,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"guards/RolesGuard.html":{},"classes/User.html":{}}}],["implied",{"_index":1071,"title":{},"body":{"license.html":{}}}],["import",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{}}}],["imports",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["included",{"_index":1065,"title":{},"body":{"license.html":{}}}],["including",{"_index":1046,"title":{},"body":{"license.html":{}}}],["index",{"_index":45,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindAllProductsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":492,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{}}}],["information",{"_index":274,"title":{},"body":{"classes/FindAllProductsDto.html":{},"classes/LoginCredentialsDto.html":{},"injectables/PrismaInterceptor.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["informações",{"_index":954,"title":{},"body":{"index.html":{}}}],["inicia",{"_index":962,"title":{},"body":{"index.html":{}}}],["iniciar",{"_index":957,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":104,"title":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{}}}],["injectables",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["inputs",{"_index":263,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/MissingPasswordUpdateError.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["inputted",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["insensitive",{"_index":670,"title":{},"body":{"injectables/ProductService.html":{}}}],["instala",{"_index":945,"title":{},"body":{"index.html":{}}}],["instalado",{"_index":932,"title":{},"body":{"index.html":{}}}],["instalação",{"_index":920,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":458,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["instantiate",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["instantiates",{"_index":321,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{}}}],["integração",{"_index":996,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":407,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["intercept(context",{"_index":413,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["interceptor",{"_index":401,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["interceptors",{"_index":405,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["interface",{"_index":354,"title":{"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{}}}],["interfaces",{"_index":398,"title":{},"body":{"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"overview.html":{}}}],["interferes",{"_index":494,"title":{},"body":{"injectables/PrismaService.html":{}}}],["invalid",{"_index":297,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{}}}],["invalidemailorpassworderror",{"_index":137,"title":{"classes/InvalidEmailOrPasswordError.html":{}},"body":{"injectables/AuthService.html":{},"classes/InvalidEmailOrPasswordError.html":{},"coverage.html":{}}}],["invalidpasswordupdateerror",{"_index":299,"title":{"classes/InvalidPasswordUpdateError.html":{}},"body":{"classes/InvalidPasswordUpdateError.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["is_admin_key",{"_index":697,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["is_public_key",{"_index":332,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isadmin",{"_index":581,"title":{},"body":{"controllers/ProductController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["iscorrectpassword",{"_index":839,"title":{},"body":{"injectables/UserService.html":{}}}],["isemail",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserRoleDto.html":{}}}],["isemail({message",{"_index":224,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemailconstraintviolation",{"_index":408,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["isemailconstraintviolation(errormeta",{"_index":422,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["isenum",{"_index":722,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["isenum(role",{"_index":720,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["isint",{"_index":197,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindAllProductsDto.html":{}}}],["isint()@isoptional",{"_index":192,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isnotempty",{"_index":198,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty()@isstring",{"_index":380,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["isnumber",{"_index":199,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isnumber()@isnotempty",{"_index":172,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isnumber()@isoptional",{"_index":183,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isoptional",{"_index":200,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllProductsDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isstring",{"_index":285,"title":{},"body":{"classes/FindAllProductsDto.html":{}}}],["isoptional()@type(undefined)@isint()@ispositive",{"_index":280,"title":{},"body":{"classes/FindAllProductsDto.html":{}}}],["ispasswordvalid",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispositive",{"_index":289,"title":{},"body":{"classes/FindAllProductsDto.html":{}}}],["isprismaunknownerror",{"_index":409,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["isprismaunknownerror(error",{"_index":429,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["isproducterror",{"_index":410,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["isproducterror(error",{"_index":436,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["isproductnameconstraintviolation",{"_index":411,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["isproductnameconstraintviolation(error",{"_index":440,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["ispublic",{"_index":335,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":201,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindAllProductsDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":189,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/DeleteUserDto.html":{}}}],["isstring()@isnotempty()@isoptional",{"_index":713,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isstring()@isoptional",{"_index":181,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@minlength(8",{"_index":229,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isusererror",{"_index":412,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["isusererror(error",{"_index":442,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["jest",{"_index":1018,"title":{},"body":{"index.html":{}}}],["john",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["join",{"_index":687,"title":{},"body":{"injectables/ProductService.html":{}}}],["json",{"_index":1006,"title":{},"body":{"index.html":{}}}],["jsonwebtoken",{"_index":342,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/variables.html":{}}}],["jwt",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.strategy",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":24,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconfig",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconfig.secret",{"_index":374,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["jwtfromrequest",{"_index":369,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["jwtmodule",{"_index":94,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register(jwtconfig",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":92,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"overview.html":{}}}],["kind",{"_index":1070,"title":{},"body":{"license.html":{}}}],["lazily",{"_index":506,"title":{},"body":{"injectables/PrismaService.html":{}}}],["leading",{"_index":641,"title":{},"body":{"injectables/ProductService.html":{}}}],["leave",{"_index":504,"title":{},"body":{"injectables/PrismaService.html":{}}}],["length",{"_index":231,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letter",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["liability",{"_index":1085,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1082,"title":{},"body":{"license.html":{}}}],["library",{"_index":308,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/variables.html":{}}}],["license",{"_index":1028,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["licença",{"_index":922,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":1047,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1072,"title":{},"body":{"license.html":{}}}],["linting",{"_index":1024,"title":{},"body":{"index.html":{}}}],["listens",{"_index":495,"title":{},"body":{"injectables/PrismaService.html":{}}}],["login",{"_index":48,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["login(email",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(undefined",{"_index":49,"title":{},"body":{"controllers/AuthController.html":{}}}],["logincredentialsdto",{"_index":50,"title":{"classes/LoginCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["loginresponse",{"_index":75,"title":{"classes/LoginResponse.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginResponse.html":{},"coverage.html":{}}}],["logs",{"_index":53,"title":{},"body":{"controllers/AuthController.html":{}}}],["lower",{"_index":640,"title":{},"body":{"injectables/ProductService.html":{}}}],["lowercaseemail",{"_index":824,"title":{},"body":{"injectables/UserService.html":{}}}],["lowercaseurlname",{"_index":679,"title":{},"body":{"injectables/ProductService.html":{}}}],["lowercaseurlname.trim",{"_index":682,"title":{},"body":{"injectables/ProductService.html":{}}}],["lvaro",{"_index":1031,"title":{},"body":{"license.html":{}}}],["mail",{"_index":226,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{}}}],["mainly",{"_index":801,"title":{},"body":{"injectables/UserService.html":{}}}],["make",{"_index":650,"title":{},"body":{"injectables/ProductService.html":{}}}],["makes",{"_index":639,"title":{},"body":{"injectables/ProductService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["making",{"_index":434,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["managing",{"_index":623,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["matches",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":1074,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1050,"title":{},"body":{"license.html":{}}}],["message",{"_index":230,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/MissingPasswordUpdateError.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["metadata",{"_index":887,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":46,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["migrate:dev",{"_index":961,"title":{},"body":{"index.html":{}}}],["migrate:test",{"_index":990,"title":{},"body":{"index.html":{}}}],["migrations",{"_index":960,"title":{},"body":{"index.html":{}}}],["minimizar",{"_index":1000,"title":{},"body":{"index.html":{}}}],["minlength",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":895,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missingpasswordupdateerror",{"_index":390,"title":{"classes/MissingPasswordUpdateError.html":{}},"body":{"classes/MissingPasswordUpdateError.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["mit",{"_index":1027,"title":{},"body":{"index.html":{},"license.html":{}}}],["mode",{"_index":669,"title":{},"body":{"injectables/ProductService.html":{}}}],["models/product/product.module",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["models/user/user.module",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["modify",{"_index":1049,"title":{},"body":{"license.html":{}}}],["modo",{"_index":964,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":313,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/PrismaInterceptor.html":{},"guards/RolesGuard.html":{}}}],["ms",{"_index":1020,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":647,"title":{},"body":{"injectables/ProductService.html":{}}}],["máquina",{"_index":936,"title":{},"body":{"index.html":{}}}],["mínimo",{"_index":983,"title":{},"body":{"index.html":{}}}],["na",{"_index":941,"title":{},"body":{"index.html":{}}}],["name",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllProductsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["name.tolocalelowercase",{"_index":680,"title":{},"body":{"injectables/ProductService.html":{}}}],["ndice",{"_index":918,"title":{},"body":{"index.html":{}}}],["need",{"_index":327,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["needed",{"_index":162,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateError.html":{},"classes/UpdateUserRoleDto.html":{}}}],["needs",{"_index":312,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["nestinterceptor",{"_index":444,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["nestjs",{"_index":314,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"index.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":874,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":877,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserWithoutPassword.html":{},"dependencies.html":{}}}],["new",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/MissingPasswordUpdateError.html":{},"injectables/PrismaInterceptor.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["next",{"_index":414,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["next.handle().pipe",{"_index":456,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["node.js",{"_index":931,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":1078,"title":{},"body":{"license.html":{}}}],["nos",{"_index":1009,"title":{},"body":{"index.html":{}}}],["note",{"_index":706,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["notfoundexception",{"_index":620,"title":{},"body":{"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["notice",{"_index":1063,"title":{},"body":{"license.html":{}}}],["number",{"_index":170,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllProductsDto.html":{},"classes/Product.html":{}}}],["o",{"_index":930,"title":{},"body":{"index.html":{}}}],["object",{"_index":423,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"miscellaneous/variables.html":{}}}],["object.values(error.meta)[0][0",{"_index":473,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["object.values(errormeta)[0][0",{"_index":472,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["observable",{"_index":330,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/PrismaInterceptor.html":{},"guards/RolesGuard.html":{}}}],["obtaining",{"_index":1039,"title":{},"body":{"license.html":{}}}],["offices",{"_index":217,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["offset",{"_index":277,"title":{},"body":{"classes/FindAllProductsDto.html":{},"injectables/ProductService.html":{}}}],["omitting",{"_index":845,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["omittype",{"_index":195,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UserWithoutPassword.html":{}}}],["omittype(product",{"_index":205,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["omittype(user",{"_index":847,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["one",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["onmoduleinit",{"_index":490,"title":{},"body":{"injectables/PrismaService.html":{}}}],["optional",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllProductsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["orderby",{"_index":671,"title":{},"body":{"injectables/ProductService.html":{}}}],["ordering",{"_index":559,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["orm",{"_index":403,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{}}}],["os",{"_index":979,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":1090,"title":{},"body":{"license.html":{}}}],["out",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":1098,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":871,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":278,"title":{},"body":{"classes/FindAllProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["pagination",{"_index":555,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["para",{"_index":909,"title":{},"body":{"index.html":{}}}],["param",{"_index":577,"title":{},"body":{"controllers/ProductController.html":{}}}],["param('id",{"_index":604,"title":{},"body":{"controllers/ProductController.html":{}}}],["parameters",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["partial",{"_index":707,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype",{"_index":709,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createproductdto",{"_index":710,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createuserdto",{"_index":716,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["particular",{"_index":1076,"title":{},"body":{"license.html":{}}}],["passport",{"_index":307,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"dependencies.html":{},"index.html":{}}}],["passportmodule",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":350,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["passportstrategy(strategy",{"_index":368,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["password",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateError.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["password.entity",{"_index":772,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["password.entity.ts",{"_index":842,"title":{},"body":{"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["password.error",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["password.error..ts",{"_index":292,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"coverage.html":{}}}],["password.error..ts:7",{"_index":296,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{}}}],["pasta",{"_index":942,"title":{},"body":{"index.html":{}}}],["patch",{"_index":578,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":603,"title":{},"body":{"controllers/ProductController.html":{}}}],["patch('role",{"_index":781,"title":{},"body":{"controllers/UserController.html":{}}}],["payload",{"_index":143,"title":{"interfaces/Payload.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{}}}],["payload.role",{"_index":376,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["payload.sub",{"_index":375,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["per",{"_index":283,"title":{},"body":{"classes/FindAllProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["percentage",{"_index":186,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["permission",{"_index":1033,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1057,"title":{},"body":{"license.html":{}}}],["person",{"_index":1038,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1058,"title":{},"body":{"license.html":{}}}],["picture",{"_index":168,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["please",{"_index":395,"title":{},"body":{"classes/MissingPasswordUpdateError.html":{}}}],["pode",{"_index":970,"title":{},"body":{"index.html":{}}}],["porta",{"_index":968,"title":{},"body":{"index.html":{}}}],["portions",{"_index":1067,"title":{},"body":{"license.html":{}}}],["post",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["post('login",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgresql",{"_index":1004,"title":{},"body":{"index.html":{}}}],["postgresql://username:password@localhost:5432/ecommerce",{"_index":987,"title":{},"body":{"index.html":{}}}],["precisar",{"_index":928,"title":{},"body":{"index.html":{}}}],["preenchendo",{"_index":953,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":539,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["prettier",{"_index":1023,"title":{},"body":{"index.html":{}}}],["price",{"_index":174,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["prisma",{"_index":402,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["prisma.decimal",{"_index":513,"title":{},"body":{"classes/Product.html":{}}}],["prisma.productuncheckedcreateinput",{"_index":528,"title":{},"body":{"classes/Product.html":{}}}],["prisma.service",{"_index":483,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.useruncheckedcreateinput",{"_index":735,"title":{},"body":{"classes/User.html":{}}}],["prisma/client",{"_index":508,"title":{},"body":{"injectables/PrismaService.html":{},"classes/Product.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"dependencies.html":{}}}],["prisma/client/runtime",{"_index":196,"title":{},"body":{"classes/CreateProductDto.html":{},"injectables/PrismaInterceptor.html":{}}}],["prisma/prisma.module",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":488,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientknownrequesterror",{"_index":437,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["prismaerror",{"_index":445,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["prismaerror.recordsnotfound",{"_index":466,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["prismaerror.uniqueconstraintviolation",{"_index":462,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["prismainterceptor",{"_index":399,"title":{"injectables/PrismaInterceptor.html":{}},"body":{"injectables/PrismaInterceptor.html":{},"coverage.html":{}}}],["prismamodule",{"_index":8,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":480,"title":{"injectables/PrismaService.html":{}},"body":{"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaInterceptor.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["probably",{"_index":810,"title":{},"body":{"injectables/UserService.html":{}}}],["process.env.jwt_secret",{"_index":1120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.exit",{"_index":499,"title":{},"body":{"injectables/PrismaService.html":{}}}],["product",{"_index":164,"title":{"classes/Product.html":{}},"body":{"classes/CreateProductDto.html":{},"classes/FindAllProductsDto.html":{},"injectables/PrismaInterceptor.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product'})@apibearerauth()@isadmin()@delete(':id')@httpcode(httpstatus.no_content",{"_index":570,"title":{},"body":{"controllers/ProductController.html":{}}}],["product'})@apibearerauth()@isadmin()@patch(':id",{"_index":575,"title":{},"body":{"controllers/ProductController.html":{}}}],["product'})@apibearerauth()@isadmin()@post",{"_index":549,"title":{},"body":{"controllers/ProductController.html":{}}}],["product.controller",{"_index":614,"title":{},"body":{"modules/ProductModule.html":{}}}],["product.dto",{"_index":585,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts",{"_index":159,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:24",{"_index":190,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:32",{"_index":191,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:42",{"_index":173,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:50",{"_index":184,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:57",{"_index":193,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:65",{"_index":182,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.service",{"_index":590,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{}}}],["productcontroller",{"_index":537,"title":{"controllers/ProductController.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{}}}],["productmodule",{"_index":9,"title":{"modules/ProductModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules.html":{},"overview.html":{}}}],["productnameinuseexception",{"_index":450,"title":{"classes/ProductNameInUseException.html":{}},"body":{"injectables/PrismaInterceptor.html":{},"classes/ProductNameInUseException.html":{},"coverage.html":{}}}],["productnotfoundexception",{"_index":452,"title":{"classes/ProductNotFoundException.html":{}},"body":{"injectables/PrismaInterceptor.html":{},"classes/ProductNotFoundException.html":{},"coverage.html":{}}}],["products",{"_index":276,"title":{},"body":{"classes/FindAllProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/User.html":{},"miscellaneous/functions.html":{}}}],["products'})@public()@get",{"_index":553,"title":{},"body":{"controllers/ProductController.html":{}}}],["products.dto",{"_index":587,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["products.dto.ts",{"_index":273,"title":{},"body":{"classes/FindAllProductsDto.html":{},"coverage.html":{}}}],["products.dto.ts:11",{"_index":286,"title":{},"body":{"classes/FindAllProductsDto.html":{}}}],["products.dto.ts:20",{"_index":284,"title":{},"body":{"classes/FindAllProductsDto.html":{}}}],["products.dto.ts:29",{"_index":281,"title":{},"body":{"classes/FindAllProductsDto.html":{}}}],["productservice",{"_index":589,"title":{"injectables/ProductService.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{},"overview.html":{}}}],["productstoskip",{"_index":665,"title":{},"body":{"injectables/ProductService.html":{}}}],["produtos",{"_index":913,"title":{},"body":{"index.html":{}}}],["profile",{"_index":753,"title":{},"body":{"controllers/UserController.html":{}}}],["profile'})@apibearerauth()@get",{"_index":751,"title":{},"body":{"controllers/UserController.html":{}}}],["projeto",{"_index":934,"title":{},"body":{"index.html":{}}}],["promise",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":165,"title":{"properties.html":{}},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindAllProductsDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"classes/Product.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"interfaces/ValidateReturn.html":{},"properties.html":{}}}],["provide",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":1068,"title":{},"body":{"license.html":{}}}],["providers",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@apioperation({summary",{"_index":747,"title":{},"body":{"controllers/UserController.html":{}}}],["public.decorator",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["publish",{"_index":1051,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1077,"title":{},"body":{"license.html":{}}}],["que",{"_index":984,"title":{},"body":{"index.html":{}}}],["query",{"_index":439,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"controllers/ProductController.html":{}}}],["quot",{"_index":652,"title":{},"body":{"injectables/ProductService.html":{}}}],["quot;brand1",{"_index":655,"title":{},"body":{"injectables/ProductService.html":{}}}],["raiz",{"_index":952,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["received",{"_index":385,"title":{},"body":{"classes/LoginResponse.html":{}}}],["reflect",{"_index":886,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":319,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["registered",{"_index":265,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["rejectonnotfound",{"_index":674,"title":{},"body":{"injectables/ProductService.html":{}}}],["related",{"_index":758,"title":{},"body":{"controllers/UserController.html":{}}}],["remove",{"_index":545,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["remove(@param('id",{"_index":608,"title":{},"body":{"controllers/ProductController.html":{}}}],["remove(id",{"_index":568,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["remove(request",{"_index":755,"title":{},"body":{"controllers/UserController.html":{}}}],["removes",{"_index":658,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["replacing",{"_index":809,"title":{},"body":{"injectables/UserService.html":{}}}],["req",{"_index":766,"title":{},"body":{"controllers/UserController.html":{}}}],["request",{"_index":700,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/UserController.html":{}}}],["request.user",{"_index":702,"title":{},"body":{"guards/RolesGuard.html":{}}}],["request.user['userid",{"_index":778,"title":{},"body":{"controllers/UserController.html":{}}}],["requests",{"_index":804,"title":{},"body":{"injectables/UserService.html":{}}}],["reset",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["respective",{"_index":418,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["response",{"_index":384,"title":{},"body":{"classes/LoginResponse.html":{}}}],["responsible",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["restriction",{"_index":1045,"title":{},"body":{"license.html":{}}}],["results",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{}}}],["returned",{"_index":362,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["returns",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/functions.html":{}}}],["rights",{"_index":1048,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":889,"title":{},"body":{"dependencies.html":{}}}],["roda",{"_index":959,"title":{},"body":{"index.html":{}}}],["rodar",{"_index":978,"title":{},"body":{"index.html":{}}}],["role",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{}}}],["role'})@apibearerauth()@isadmin()@patch('role",{"_index":764,"title":{},"body":{"controllers/UserController.html":{}}}],["role.admin",{"_index":703,"title":{},"body":{"guards/RolesGuard.html":{}}}],["role.dto",{"_index":769,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role.dto.ts",{"_index":718,"title":{},"body":{"classes/UpdateUserRoleDto.html":{},"coverage.html":{}}}],["role.dto.ts:11",{"_index":719,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["role.dto.ts:18",{"_index":721,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["rolesguard",{"_index":690,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["route",{"_index":311,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"classes/LoginResponse.html":{},"guards/RolesGuard.html":{}}}],["rxjs",{"_index":331,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/PrismaInterceptor.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["same",{"_index":844,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["saved",{"_index":177,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"injectables/UserService.html":{}}}],["search",{"_index":275,"title":{},"body":{"classes/FindAllProductsDto.html":{}}}],["searching",{"_index":558,"title":{},"body":{"controllers/ProductController.html":{}}}],["searchname",{"_index":279,"title":{},"body":{"classes/FindAllProductsDto.html":{},"injectables/ProductService.html":{}}}],["secret",{"_index":1119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":373,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["sell",{"_index":1055,"title":{},"body":{"license.html":{}}}],["senhas",{"_index":1013,"title":{},"body":{"index.html":{}}}],["servidor",{"_index":958,"title":{},"body":{"index.html":{}}}],["set",{"_index":763,"title":{},"body":{"controllers/UserController.html":{}}}],["setmetadata(is_public_key",{"_index":1117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":1064,"title":{},"body":{"license.html":{}}}],["show",{"_index":282,"title":{},"body":{"classes/FindAllProductsDto.html":{}}}],["showing",{"_index":557,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["shutdown",{"_index":496,"title":{},"body":{"injectables/PrismaService.html":{}}}],["signals",{"_index":497,"title":{},"body":{"injectables/PrismaService.html":{}}}],["signoptions",{"_index":1121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["single",{"_index":646,"title":{},"body":{"injectables/ProductService.html":{}}}],["singlespaceurlname",{"_index":683,"title":{},"body":{"injectables/ProductService.html":{}}}],["singlespaceurlname.split",{"_index":686,"title":{},"body":{"injectables/ProductService.html":{}}}],["skip",{"_index":667,"title":{},"body":{"injectables/ProductService.html":{}}}],["software",{"_index":1041,"title":{},"body":{"license.html":{}}}],["source",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{}}}],["spaces",{"_index":644,"title":{},"body":{"injectables/ProductService.html":{}}}],["spacetohyphenurlname",{"_index":685,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/.../is",{"_index":898,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../jwt.config.ts",{"_index":1111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":897,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../public.decorator.ts",{"_index":1110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":17,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":40,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:19",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:10",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:26",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:44",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/login",{"_index":377,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.response.ts",{"_index":383,"title":{},"body":{"classes/LoginResponse.html":{},"coverage.html":{}}}],["src/auth/dto/login.response.ts:7",{"_index":388,"title":{},"body":{"classes/LoginResponse.html":{}}}],["src/auth/errors/invalid",{"_index":291,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"coverage.html":{}}}],["src/auth/jwt",{"_index":304,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":341,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:34",{"_index":345,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:45",{"_index":347,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/public.decorator",{"_index":580,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["src/auth/public.decorator.ts",{"_index":856,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/is",{"_index":582,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/common/exceptions/email",{"_index":257,"title":{},"body":{"classes/EmailInUseException.html":{},"coverage.html":{}}}],["src/common/exceptions/product",{"_index":616,"title":{},"body":{"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"coverage.html":{}}}],["src/common/exceptions/user",{"_index":790,"title":{},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts",{"_index":691,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts:12",{"_index":693,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/guards/roles.guard.ts:22",{"_index":694,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/interceptors/prisma.interceptor.ts",{"_index":400,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/prisma.interceptor.ts:100",{"_index":438,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["src/common/interceptors/prisma.interceptor.ts:27",{"_index":416,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["src/common/interceptors/prisma.interceptor.ts:72",{"_index":424,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["src/common/interceptors/prisma.interceptor.ts:77",{"_index":441,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["src/common/interceptors/prisma.interceptor.ts:90",{"_index":430,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["src/common/interceptors/prisma.interceptor.ts:95",{"_index":443,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["src/config/jwt.config",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["src/config/jwt.config.ts",{"_index":862,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":863,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/models/product/dto/create",{"_index":158,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/models/product/dto/find",{"_index":272,"title":{},"body":{"classes/FindAllProductsDto.html":{},"coverage.html":{}}}],["src/models/product/dto/update",{"_index":704,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/models/product/entities/product.entity.ts",{"_index":512,"title":{},"body":{"classes/Product.html":{},"coverage.html":{}}}],["src/models/product/entities/product.entity.ts:15",{"_index":522,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:21",{"_index":525,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:27",{"_index":523,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:35",{"_index":514,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:41",{"_index":519,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:46",{"_index":524,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:52",{"_index":518,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:58",{"_index":516,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:9",{"_index":520,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/product.controller.ts",{"_index":538,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{}}}],["src/models/product/product.controller.ts:37",{"_index":550,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:48",{"_index":554,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:57",{"_index":563,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:65",{"_index":567,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:74",{"_index":576,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:87",{"_index":571,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.module.ts",{"_index":613,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/models/product/product.service.ts",{"_index":622,"title":{},"body":{"injectables/ProductService.html":{},"coverage.html":{}}}],["src/models/product/product.service.ts:109",{"_index":661,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:12",{"_index":628,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:21",{"_index":630,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:35",{"_index":632,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:53",{"_index":633,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:61",{"_index":634,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:69",{"_index":659,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:84",{"_index":657,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:96",{"_index":636,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/user/dto/create",{"_index":219,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/models/user/dto/delete",{"_index":251,"title":{},"body":{"classes/DeleteUserDto.html":{},"coverage.html":{}}}],["src/models/user/dto/update",{"_index":712,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"coverage.html":{}}}],["src/models/user/entities/user",{"_index":841,"title":{},"body":{"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["src/models/user/entities/user.entity",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/models/user/entities/user.entity.ts",{"_index":723,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/models/user/entities/user.entity.ts:19",{"_index":731,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:25",{"_index":727,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:31",{"_index":730,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:37",{"_index":729,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:43",{"_index":725,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:49",{"_index":726,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:55",{"_index":734,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:9",{"_index":728,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/errors/invalid",{"_index":300,"title":{},"body":{"classes/InvalidPasswordUpdateError.html":{},"coverage.html":{}}}],["src/models/user/errors/missing",{"_index":391,"title":{},"body":{"classes/MissingPasswordUpdateError.html":{},"coverage.html":{}}}],["src/models/user/user.controller.ts",{"_index":743,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/models/user/user.controller.ts:37",{"_index":749,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:45",{"_index":752,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:55",{"_index":761,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:69",{"_index":765,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:80",{"_index":757,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.module",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/models/user/user.module.ts",{"_index":788,"title":{},"body":{"modules/UserModule.html":{}}}],["src/models/user/user.service",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/models/user/user.service.ts",{"_index":792,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/models/user/user.service.ts:107",{"_index":808,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:132",{"_index":817,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:17",{"_index":796,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:26",{"_index":797,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:44",{"_index":803,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:56",{"_index":799,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:63",{"_index":814,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:80",{"_index":815,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:94",{"_index":813,"title":{},"body":{"injectables/UserService.html":{}}}],["src/prisma/prisma.module",{"_index":615,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["src/prisma/prisma.module.ts",{"_index":481,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":662,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":484,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:15",{"_index":503,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:25",{"_index":493,"title":{},"body":{"injectables/PrismaService.html":{}}}],["start:dev",{"_index":966,"title":{},"body":{"index.html":{}}}],["started",{"_index":904,"title":{"index.html":{},"license.html":{}},"body":{}}],["starting",{"_index":556,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["starts",{"_index":899,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statements",{"_index":851,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":260,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/MissingPasswordUpdateError.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["stock",{"_index":169,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["strategy",{"_index":352,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["street",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["string",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindAllProductsDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/variables.html":{}}}],["studio",{"_index":977,"title":{},"body":{"index.html":{}}}],["studio:test",{"_index":998,"title":{},"body":{"index.html":{}}}],["sua",{"_index":935,"title":{},"body":{"index.html":{}}}],["sub",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["subject",{"_index":356,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"license.html":{}}}],["sublicense",{"_index":1053,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1066,"title":{},"body":{"license.html":{}}}],["successfully",{"_index":386,"title":{},"body":{"classes/LoginResponse.html":{}}}],["summary",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":334,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["super('e",{"_index":270,"title":{},"body":{"classes/EmailInUseException.html":{}}}],["super('invalid",{"_index":298,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{}}}],["super('please",{"_index":397,"title":{},"body":{"classes/MissingPasswordUpdateError.html":{}}}],["super('product",{"_index":617,"title":{},"body":{"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{}}}],["super('user",{"_index":791,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["super.canactivate(context",{"_index":340,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["supertest",{"_index":1019,"title":{},"body":{"index.html":{}}}],["support",{"_index":1095,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1096,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":892,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["switch",{"_index":459,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["system",{"_index":266,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"controllers/UserController.html":{},"classes/UserNotFoundException.html":{}}}],["table",{"_index":870,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":869,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":668,"title":{},"body":{"injectables/ProductService.html":{}}}],["tecnologias",{"_index":921,"title":{},"body":{"index.html":{}}}],["ter",{"_index":929,"title":{},"body":{"index.html":{}}}],["test",{"_index":995,"title":{},"body":{"index.html":{}}}],["test:all",{"_index":992,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":997,"title":{},"body":{"index.html":{}}}],["test?schema=public",{"_index":988,"title":{},"body":{"index.html":{}}}],["testes",{"_index":980,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":509,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":510,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.authservice.login(email",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.formaturlname(createproductdto.name",{"_index":663,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.formaturlname(updateproductdto.name",{"_index":688,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.hashifupdatingpassword(id",{"_index":829,"title":{},"body":{"injectables/UserService.html":{}}}],["this.isemailconstraintviolation(error.meta",{"_index":463,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["this.isprismaunknownerror(error",{"_index":469,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["this.isproducterror(error",{"_index":468,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["this.isproductnameconstraintviolation(error",{"_index":464,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["this.isusererror(error",{"_index":467,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["this.jwtservice.sign(payload",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.product.create",{"_index":664,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.delete",{"_index":678,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.findmany",{"_index":666,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.findunique",{"_index":673,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.update",{"_index":677,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.user.create",{"_index":826,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.delete",{"_index":835,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":827,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":830,"title":{},"body":{"injectables/UserService.html":{}}}],["this.productservice.create(createproductdto",{"_index":594,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findall(findallproductsdto",{"_index":596,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findonebyid(id",{"_index":599,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findonebyurlname(urlname",{"_index":602,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.remove(id",{"_index":609,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.update(id",{"_index":605,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.reflector.getallandoverride(is_admin_key",{"_index":699,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":336,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.updateproductandurlname(id",{"_index":676,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.userservice.create(createuserdto",{"_index":776,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyemail(email",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyid(userid",{"_index":779,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(userid",{"_index":783,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(userid",{"_index":780,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateuserrole(updateuserroledto",{"_index":782,"title":{},"body":{"controllers/UserController.html":{}}}],["this.validatecurrentpassword(id",{"_index":833,"title":{},"body":{"injectables/UserService.html":{}}}],["this.validateuser(email",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaInterceptor.html":{},"injectables/UserService.html":{}}}],["thrown",{"_index":812,"title":{},"body":{"injectables/UserService.html":{}}}],["throws",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/MissingPasswordUpdateError.html":{},"injectables/PrismaInterceptor.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["todos",{"_index":991,"title":{},"body":{"index.html":{}}}],["token",{"_index":355,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"index.html":{}}}],["tooling",{"_index":1002,"title":{},"body":{"index.html":{}}}],["tort",{"_index":1089,"title":{},"body":{"license.html":{}}}],["trailing",{"_index":642,"title":{},"body":{"injectables/ProductService.html":{}}}],["transformer",{"_index":288,"title":{},"body":{"classes/FindAllProductsDto.html":{},"dependencies.html":{},"index.html":{}}}],["tratar",{"_index":1016,"title":{},"body":{"index.html":{}}}],["trimmedurlname",{"_index":681,"title":{},"body":{"injectables/ProductService.html":{}}}],["trimmedurlname.replace(/\\s\\s+/g",{"_index":684,"title":{},"body":{"injectables/ProductService.html":{}}}],["true",{"_index":339,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["trying",{"_index":302,"title":{},"body":{"classes/InvalidPasswordUpdateError.html":{}}}],["turn",{"_index":645,"title":{},"body":{"injectables/ProductService.html":{}}}],["turned",{"_index":526,"title":{},"body":{"classes/Product.html":{}}}],["type",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindAllProductsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":875,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":999,"title":{},"body":{"index.html":{}}}],["ui",{"_index":893,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["um",{"_index":949,"title":{},"body":{"index.html":{}}}],["unauthenticated",{"_index":1118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":295,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{}}}],["undefined",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["unitários",{"_index":994,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":435,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["unlicensed",{"_index":1106,"title":{},"body":{"properties.html":{}}}],["updatable",{"_index":705,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["update",{"_index":393,"title":{},"body":{"classes/MissingPasswordUpdateError.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["update(id",{"_index":572,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["update(request",{"_index":759,"title":{},"body":{"controllers/UserController.html":{}}}],["update.error",{"_index":820,"title":{},"body":{"injectables/UserService.html":{}}}],["update.error.ts",{"_index":301,"title":{},"body":{"classes/InvalidPasswordUpdateError.html":{},"classes/MissingPasswordUpdateError.html":{},"coverage.html":{}}}],["update.error.ts:6",{"_index":303,"title":{},"body":{"classes/InvalidPasswordUpdateError.html":{}}}],["update.error.ts:7",{"_index":394,"title":{},"body":{"classes/MissingPasswordUpdateError.html":{}}}],["updatedat",{"_index":724,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{}}}],["updateproductandurlname",{"_index":626,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateproductandurlname(id",{"_index":660,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateproductdto",{"_index":573,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updateproductdto.name",{"_index":675,"title":{},"body":{"injectables/ProductService.html":{}}}],["updates",{"_index":574,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserdto",{"_index":711,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserdto.currentpassword",{"_index":837,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto.password",{"_index":836,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserrole",{"_index":745,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserrole(updateuserroledto",{"_index":762,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserroledto",{"_index":717,"title":{"classes/UpdateUserRoleDto.html":{}},"body":{"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserroledto.email",{"_index":831,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserroledto.role",{"_index":832,"title":{},"body":{"injectables/UserService.html":{}}}],["upload",{"_index":924,"title":{},"body":{"index.html":{}}}],["url",{"_index":527,"title":{},"body":{"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["urlname",{"_index":208,"title":{},"body":{"classes/CreateProductDto.html":{},"injectables/PrismaInterceptor.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["urlname'})@public()@get(':urlname",{"_index":566,"title":{},"body":{"controllers/ProductController.html":{}}}],["use",{"_index":269,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"license.html":{}}}],["use.exception",{"_index":449,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["use.exception.ts",{"_index":258,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"coverage.html":{}}}],["use.exception.ts:6",{"_index":268,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["useclass",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":262,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtStrategy.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":42,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":732,"title":{},"body":{"classes/User.html":{},"controllers/UserController.html":{}}}],["user'})@apibearerauth()@delete()@httpcode(httpstatus.no_content",{"_index":756,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@apibearerauth()@patch",{"_index":760,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@post",{"_index":748,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@public()@post('login')@httpcode(httpstatus.ok",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.controller",{"_index":789,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":715,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":220,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":254,"title":{},"body":{"classes/DeleteUserDto.html":{}}}],["user.dto.ts:17",{"_index":227,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":714,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:28",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":228,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:44",{"_index":223,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":846,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["user.id",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.role",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":773,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user@example.com",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{}}}],["usercontroller",{"_index":742,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":366,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"controllers/UserController.html":{},"interfaces/ValidateReturn.html":{}}}],["usermodule",{"_index":10,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["usernotfoundexception",{"_index":454,"title":{"classes/UserNotFoundException.html":{}},"body":{"injectables/PrismaInterceptor.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["userrole",{"_index":367,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"interfaces/ValidateReturn.html":{}}}],["users",{"_index":629,"title":{},"body":{"injectables/ProductService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":113,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userwithoutpassword",{"_index":770,"title":{"classes/UserWithoutPassword.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["uses",{"_index":306,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/PrismaInterceptor.html":{}}}],["usuário",{"_index":923,"title":{},"body":{"index.html":{}}}],["usuários",{"_index":912,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":521,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["validate",{"_index":344,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":346,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["validatecurrentpassword",{"_index":795,"title":{},"body":{"injectables/UserService.html":{}}}],["validatecurrentpassword(id",{"_index":816,"title":{},"body":{"injectables/UserService.html":{}}}],["validated",{"_index":364,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["validatereturn",{"_index":365,"title":{"interfaces/ValidateReturn.html":{}},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{}}}],["validates",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["validateuser",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":202,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindAllProductsDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"dependencies.html":{},"index.html":{}}}],["validações",{"_index":1008,"title":{},"body":{"index.html":{}}}],["value",{"_index":1112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":857,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1109,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["veiga",{"_index":1032,"title":{},"body":{"license.html":{}}}],["verify",{"_index":1113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1104,"title":{},"body":{"properties.html":{}}}],["visualizar",{"_index":974,"title":{},"body":{"index.html":{}}}],["voc",{"_index":927,"title":{},"body":{"index.html":{}}}],["void",{"_index":902,"title":{},"body":{"miscellaneous/functions.html":{}}}],["warranties",{"_index":1073,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1069,"title":{},"body":{"license.html":{}}}],["web",{"_index":1007,"title":{},"body":{"index.html":{}}}],["wether",{"_index":425,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["wheelchair",{"_index":212,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["whether",{"_index":1086,"title":{},"body":{"license.html":{}}}],["white",{"_index":643,"title":{},"body":{"injectables/ProductService.html":{}}}],["without",{"_index":754,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"license.html":{}}}],["won't",{"_index":805,"title":{},"body":{"injectables/UserService.html":{}}}],["words",{"_index":649,"title":{},"body":{"injectables/ProductService.html":{}}}],["world",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["wrong",{"_index":294,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{}}}],["yarn",{"_index":947,"title":{},"body":{"index.html":{}}}],["z",{"_index":233,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            ProductModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthModule } from './auth/auth.module';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\nimport { UserModule } from './models/user/user.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { ProductModule } from './models/product/product.module';\n\n@Module({\n  imports: [UserModule, AuthModule, PrismaModule, ProductModule],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                User authentication endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(undefined: LoginCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Logs in user'})@Public()@Post('login')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:19\n                \n            \n\n\n            \n                \n                    Authenticates the User\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { LoginCredentialsDto } from './dto/login-credentials.dto';\nimport { LoginResponse } from './dto/login.response';\nimport { Public } from './public.decorator';\n\n/** User authentication endpoints */\n@ApiTags('authentication')\n@Controller()\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  /** Authenticates the User */\n  @ApiOperation({ summary: 'Logs in user' })\n  @Public()\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  async login(\n    @Body() { email, password }: LoginCredentialsDto,\n  ): Promise {\n    return this.authService.login(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { jwtConfig } from 'src/config/jwt.config';\nimport { UserModule } from 'src/models/user/user.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [UserModule, PassportModule, JwtModule.register(jwtConfig)],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for authenticating the user\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Private\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            Responsible for authenticating the user\nInstantiate the class and the UserService and\nJwtService dependencies\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:26\n                \n            \n\n\n            \n                \n                    Validates if the inputted email exists and\ncompares if the hashed password matches the inputted one.\nIf so, returns the JWT accessToken\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:44\n                \n            \n\n\n            \n                \n                    Validates if the inputted email exists and\ncompares if the hashed password matches the inputted one.\nIf not, throws an error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { compare } from 'bcrypt';\nimport { User } from 'src/models/user/entities/user.entity';\nimport { UserService } from 'src/models/user/user.service';\nimport { InvalidEmailOrPasswordError } from './errors/invalid-email-or-password.error.';\n\n/** Responsible for authenticating the user */\n@Injectable()\nexport class AuthService {\n  /** Responsible for authenticating the user\n   *\n   * Instantiate the class and the UserService and\n   * JwtService dependencies\n   */\n  constructor(\n    private readonly userService: UserService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  /** Validates if the inputted email exists and\n   * compares if the hashed password matches the inputted one.\n   *\n   * If so, returns the JWT accessToken\n   */\n  async login(\n    email: string,\n    password: string,\n  ): Promise {\n    const user = await this.validateUser(email, password);\n\n    const payload = { sub: user.id, role: user.role };\n\n    return {\n      accessToken: this.jwtService.sign(payload),\n    };\n  }\n\n  /** Validates if the inputted email exists and\n   * compares if the hashed password matches the inputted one.\n   *\n   * If not, throws an error\n   */\n  private async validateUser(email: string, password: string): Promise {\n    const user = await this.userService.findByEmail(email);\n\n    if (user) {\n      const isPasswordValid = await compare(password, user.password);\n\n      if (isPasswordValid) {\n        return { ...user, password: undefined };\n      }\n    }\n\n    throw new InvalidEmailOrPasswordError();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/create-product.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create a Product\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                basePrice\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                discountPercentage\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                picture\n                            \n                            \n                                    Optional\n                                stock\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        basePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Decimal\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:42\n                        \n                    \n\n            \n                \n                    Product price not considering discounts.\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:65\n                        \n                    \n\n            \n                \n                    Product description\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        discountPercentage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:50\n                        \n                    \n\n            \n                \n                    Product discount in percentage. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:24\n                        \n                    \n\n            \n                \n                    Product name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:32\n                        \n                    \n\n            \n                \n                    Product picture\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:57\n                        \n                    \n\n            \n                \n                    Product stock amount. Defaults to 0\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { Decimal } from '@prisma/client/runtime';\nimport {\n  IsInt,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { Product } from '../entities/product.entity';\n\n/** Describes the fields needed to create a Product */\nexport class CreateProductDto extends OmitType(Product, [\n  'id',\n  'createdAt',\n  'urlName',\n] as const) {\n  /**\n   * Product name\n   * @example \"Brand black wheelchair\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Product picture\n   * @example \"image.jpg\"\n   */\n  @IsString()\n  @IsOptional()\n  picture?: string;\n\n  /**\n   * Product price not considering discounts.\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 70.00\n   */\n  @IsNumber()\n  @IsNotEmpty()\n  basePrice: string | number | Decimal;\n\n  /**\n   * Product discount in percentage. Defaults to 0\n   * @example 10\n   */\n  @IsNumber()\n  @IsOptional()\n  discountPercentage?: number;\n\n  /** Product stock amount. Defaults to 0\n   * @example 42\n   */\n  @IsInt()\n  @IsOptional()\n  stock?: number;\n\n  /**\n   * Product description\n   * @example \"Black wheelchair for offices\"\n   */\n  @IsString()\n  @IsOptional()\n  description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create an User\n\n            \n\n\n            \n                Implements\n            \n            \n                            User\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:44\n                        \n                    \n\n            \n                \n                    User address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({message: 'Must be an e-mail'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:17\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:36\n                        \n                    \n\n            \n                \n                    User name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8, {message: 'Password must have length of at least 8'})@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[a-z]).*$/, {message: 'Password must contain at least 1 number and 1 letter'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:28\n                        \n                    \n\n            \n                \n                    User password must contain at least 1 number and 1 letter\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\nimport { User } from '../entities/user.entity';\n\n/** Describes the fields needed to create an User */\nexport class CreateUserDto implements User {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsEmail({ message: 'Must be an e-mail' })\n  email: string;\n\n  /**\n   * User password must contain at least 1 number and 1 letter\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @MinLength(8, { message: 'Password must have length of at least 8' })\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[a-z]).*$/, {\n    message: 'Password must contain at least 1 number and 1 letter',\n  })\n  password: string;\n\n  /**\n   * User name\n   * @example \"John Doe\"\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  /**\n   * User address\n   * @example \"World Street 0\"\n   */\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserDto.html":{"url":"classes/DeleteUserDto.html","title":"class - DeleteUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/delete-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to delete an User\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/delete-user.dto.ts:11\n                        \n                    \n\n            \n                \n                    User current password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/** Describes the fields needed to delete an User */\nexport class DeleteUserDto {\n  /**\n   * User current password\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  currentPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailInUseException.html":{"url":"classes/EmailInUseException.html","title":"class - EmailInUseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailInUseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/email-in-use.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\nan email that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/email-in-use.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'E-mail already in use'. Used when the user inputs\nan email that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * an email that is already registered in the system\n */\nexport class EmailInUseException extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'E-mail already in use'. Used when the user inputs\n   * an email that is already registered in the system\n   */\n  constructor() {\n    super('E-mail already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindAllProductsDto.html":{"url":"classes/FindAllProductsDto.html","title":"class - FindAllProductsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindAllProductsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/find-all-products.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information to search for products\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                page\n                            \n                            \n                                    Optional\n                                searchName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-all-products.dto.ts:29\n                        \n                    \n\n            \n                \n                    Show this amount of products per page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-all-products.dto.ts:20\n                        \n                    \n\n            \n                \n                    Show products in this page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        searchName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-all-products.dto.ts:11\n                        \n                    \n\n            \n                \n                    String containing in product name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsInt, IsOptional, IsPositive, IsString } from 'class-validator';\n\n/** Describes the information to search for products */\nexport class FindAllProductsDto {\n  /** String containing in product name\n   * @example \"chair\"\n   */\n  @IsOptional()\n  @IsString()\n  searchName?: string;\n\n  /** Show products in this page\n   * @example 1\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  page?: number;\n\n  /** Show this amount of products per page\n   * @example 10\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  offset?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidEmailOrPasswordError.html":{"url":"classes/InvalidEmailOrPasswordError.html","title":"class - InvalidEmailOrPasswordError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidEmailOrPasswordError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/errors/invalid-email-or-password.error..ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 401. Used when the user inputs\nan email that is not registered in the system\nor the wrong password for a registered email\n\n            \n\n            \n                Extends\n            \n            \n                    UnauthorizedException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/errors/invalid-email-or-password.error..ts:7\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 401 with message 'Invalid email or password'.\nUsed when the user inputs an email that is not registered\nin the system or the wrong password for a registered email\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UnauthorizedException } from '@nestjs/common';\n\n/** Throws HTTP status 401. Used when the user inputs\n * an email that is not registered in the system\n * or the wrong password for a registered email\n */\nexport class InvalidEmailOrPasswordError extends UnauthorizedException {\n  /** Throws HTTP status 401 with message 'Invalid email or password'.\n   * Used when the user inputs an email that is not registered\n   * in the system or the wrong password for a registered email\n   */\n  constructor() {\n    super('Invalid email or password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidPasswordUpdateError.html":{"url":"classes/InvalidPasswordUpdateError.html","title":"class - InvalidPasswordUpdateError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidPasswordUpdateError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/errors/invalid-password-update.error.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs the wrong\ncurrent password when trying to create a new password\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/models/user/errors/invalid-password-update.error.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message 'Invalid current password'.\nUsed when the user inputs the wrong current password when\ntrying to create a new password\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs the wrong\n * current password when trying to create a new password\n */\nexport class InvalidPasswordUpdateError extends BadRequestException {\n  /** Throws HTTP status 400 with message 'Invalid current password'.\n   * Used when the user inputs the wrong current password when\n   * trying to create a new password\n   */\n  constructor() {\n    super('Invalid current password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Uses the passport library AuthGuard to check\nif the route needs authentication\nFor more on NestJs Guards: https://docs.nestjs.com/guards\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-auth.guard.ts:13\n                            \n                        \n\n                \n                    \n                            Uses the passport library AuthGuard to check\nif the route needs authentication\nFor more on NestJs Guards: https://docs.nestjs.com/guards\nInstantiates the class and the Reflector dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:28\n                \n            \n\n\n            \n                \n                    If the route uses the Public decorator it\ndoes not need authentication, else it does\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Observable } from 'rxjs';\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n/** Uses the passport library AuthGuard to check\n * if the route needs authentication\n *\n * For more on NestJs Guards: https://docs.nestjs.com/guards\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  /** Uses the passport library AuthGuard to check\n   * if the route needs authentication\n   *\n   * For more on NestJs Guards: https://docs.nestjs.com/guards\n   *\n   * Instantiates the class and the Reflector dependency\n   */\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  /** If the route uses the Public decorator it\n   * does not need authentication, else it does\n   */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Passport library JsonWebToken configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:34\n                            \n                        \n\n                \n                    \n                            Passport library JsonWebToken configuration\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: Payload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:45\n                \n            \n\n\n            \n                \n                    Validates and returns data after JsonWebToken is decrypted\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                Payload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { jwtConfig } from 'src/config/jwt.config';\n\n/** Decrypted JsonWebToken content */\ninterface Payload {\n  /** Token subject, user ID used\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  sub: string;\n\n  /** User role\n   * @example \"user\"\n   */\n  role: string;\n}\n\n/** What is returned to the application after JsonWebToken is validated */\ninterface ValidateReturn {\n  /** User ID\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  userId: string;\n\n  /** User role\n   * @example \"user\"\n   */\n  userRole: string;\n}\n\n/** Passport library JsonWebToken configuration */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /** Passport library JsonWebToken configuration */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConfig.secret,\n    });\n  }\n\n  /** Validates and returns data after JsonWebToken is decrypted */\n  async validate(payload: Payload): Promise {\n    return {\n      userId: payload.sub,\n      userRole: payload.role,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginCredentialsDto.html":{"url":"classes/LoginCredentialsDto.html","title":"class - LoginCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-credentials.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to authenticate an User to the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-credentials.dto.ts:11\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-credentials.dto.ts:19\n                        \n                    \n\n            \n                \n                    User password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/** Describes the information needed to authenticate an User to the application */\nexport class LoginCredentialsDto {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  email: string;\n\n  /**\n   * User password\n   * @example \"abc123456\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginResponse.html":{"url":"classes/LoginResponse.html","title":"class - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.response.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the response received when the Login route is successfully called\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.response.ts:7\n                        \n                    \n\n            \n                \n                    JWT Authentication token\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LoginResponse {\n  /**\n   * JWT Authentication token\n   * @example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5NWFkMzNhNS0wYjk4LTQ2ODYtYjFmMS1hMTkwNzM0NWJmYzciLCJpYXQiOjE2NDg0NzU3MzEsImV4cCI6MTY0ODQ3NjYzMX0.h3z3JDvHOi6y5C_N0Kt6tdP2nWK_dHBZxioQn7VANNo\"\n   */\n  accessToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MissingPasswordUpdateError.html":{"url":"classes/MissingPasswordUpdateError.html","title":"class - MissingPasswordUpdateError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MissingPasswordUpdateError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/errors/missing-password-update.error.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs only the\ncurrent password or the new password, but both are needed to\nupdate the password\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/models/user/errors/missing-password-update.error.ts:7\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'Please enter both new password and current password'.\nUsed when the user inputs only the current password or\nthe new password, but both are needed to update the password\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs only the\n * current password or the new password, but both are needed to\n * update the password\n */\nexport class MissingPasswordUpdateError extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'Please enter both new password and current password'.\n   * Used when the user inputs only the current password or\n   * the new password, but both are needed to update the password\n   */\n  constructor() {\n    super('Please enter both new password and current password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Payload.html":{"url":"interfaces/Payload.html","title":"interface - Payload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Payload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Decrypted JsonWebToken content\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User role\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Token subject, user ID used\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { jwtConfig } from 'src/config/jwt.config';\n\n/** Decrypted JsonWebToken content */\ninterface Payload {\n  /** Token subject, user ID used\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  sub: string;\n\n  /** User role\n   * @example \"user\"\n   */\n  role: string;\n}\n\n/** What is returned to the application after JsonWebToken is validated */\ninterface ValidateReturn {\n  /** User ID\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  userId: string;\n\n  /** User role\n   * @example \"user\"\n   */\n  userRole: string;\n}\n\n/** Passport library JsonWebToken configuration */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /** Passport library JsonWebToken configuration */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConfig.secret,\n    });\n  }\n\n  /** Validates and returns data after JsonWebToken is decrypted */\n  async validate(payload: Payload): Promise {\n    return {\n      userId: payload.sub,\n      userRole: payload.role,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaInterceptor.html":{"url":"injectables/PrismaInterceptor.html","title":"injectable - PrismaInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/prisma.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for Prisma ORM errors\nFor more about NestJs interceptors: https://docs.nestjs.com/interceptors\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                isEmailConstraintViolation\n                            \n                            \n                                    Private\n                                isPrismaUnknownError\n                            \n                            \n                                    Private\n                                isProductError\n                            \n                            \n                                    Private\n                                isProductNameConstraintViolation\n                            \n                            \n                                    Private\n                                isUserError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler<>)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/prisma.interceptor.ts:27\n                \n            \n\n\n            \n                \n                    Catches Prisma ORM errors and throws the\nrespective app HTTP error\nUses default NestJs boilerplate, for more\ninformation: https://docs.nestjs.com/interceptors\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler<>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isEmailConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isEmailConstraintViolation(errorMeta: object)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/prisma.interceptor.ts:72\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the email field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorMeta\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isPrismaUnknownError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isPrismaUnknownError(error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/prisma.interceptor.ts:90\n                \n            \n\n\n            \n                \n                    Checks if the error contains clientVersion,\nmaking it an unknown prisma error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isProductError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isProductError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/prisma.interceptor.ts:100\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an product prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isProductNameConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isProductNameConstraintViolation(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/prisma.interceptor.ts:77\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the product name field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isUserError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isUserError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/prisma.interceptor.ts:95\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an user prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { PrismaClientKnownRequestError } from '@prisma/client/runtime';\nimport { PrismaError } from 'prisma-error-enum';\nimport { catchError, Observable } from 'rxjs';\nimport { EmailInUseException } from '../exceptions/email-in-use.exception';\nimport { ProductNameInUseException } from '../exceptions/product-name-in-use.exception';\nimport { ProductNotFoundException } from '../exceptions/product-not-found.exception';\nimport { UserNotFoundException } from '../exceptions/user-not-found.exception';\n\n/** Interceptor for Prisma ORM errors\n *\n * For more about NestJs interceptors: https://docs.nestjs.com/interceptors\n */\n@Injectable()\nexport class PrismaInterceptor implements NestInterceptor {\n  /** Catches Prisma ORM errors and throws the\n   * respective app HTTP error\n   *\n   * Uses default NestJs boilerplate, for more\n   * information: https://docs.nestjs.com/interceptors\n   */\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | Promise> {\n    return next.handle().pipe(\n      catchError((error) => {\n        if (error instanceof PrismaClientKnownRequestError) {\n          switch (error.code) {\n            case PrismaError.UniqueConstraintViolation:\n              if (this.isEmailConstraintViolation(error.meta)) {\n                throw new EmailInUseException();\n              }\n\n              if (this.isProductNameConstraintViolation(error)) {\n                throw new ProductNameInUseException();\n              }\n              break;\n            case PrismaError.RecordsNotFound: {\n              if (this.isUserError(error)) {\n                throw new UserNotFoundException();\n              }\n\n              if (this.isProductError(error)) {\n                throw new ProductNotFoundException();\n              }\n\n              break;\n            }\n            default:\n              throw error;\n          }\n        }\n\n        if (this.isPrismaUnknownError(error)) {\n          if (error.message === 'No Product found') {\n            throw new ProductNotFoundException();\n          }\n        }\n\n        throw error;\n      }),\n    );\n  }\n\n  /** Returns wether the error happened in the email field or not */\n  private isEmailConstraintViolation(errorMeta: object): boolean {\n    return Object.values(errorMeta)[0][0] === 'email';\n  }\n\n  /** Returns wether the error happened in the product name field or not */\n  private isProductNameConstraintViolation(\n    error: PrismaClientKnownRequestError,\n  ): boolean {\n    return (\n      (Object.values(error.meta)[0][0] === 'name' ||\n        Object.values(error.meta)[0][0] === 'urlName') &&\n      error.message.includes('prisma.product')\n    );\n  }\n\n  /** Checks if the error contains clientVersion,\n   * making it an unknown prisma error\n   * */\n  private isPrismaUnknownError(error): boolean {\n    return !!error.clientVersion;\n  }\n\n  /** Returns wether the error happened on an user prisma query or not */\n  private isUserError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.user');\n  }\n\n  /** Returns wether the error happened on an product prisma query or not */\n  private isProductError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.product');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n            \n                Description\n            \n            \n                ORM responsible for connecting to the database\nBoilerplate from https://docs.nestjs.com/recipes/prisma\n\n            \n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:25\n                \n            \n\n\n            \n                \n                    Prisma interferes with NestJS enableShutdownHooks.\nPrisma listens for shutdown signals and will call process.exit()\nbefore your application shutdown hooks fire.\nhttps://docs.nestjs.com/recipes/prisma\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:15\n                \n            \n\n\n            \n                \n                    Optional — if you leave it out,\nPrisma will connect lazily on its first call to the database.\nhttps://docs.nestjs.com/recipes/prisma\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n/** ORM responsible for connecting to the database\n *\n * Boilerplate from https://docs.nestjs.com/recipes/prisma\n */\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  /** Optional — if you leave it out,\n   * Prisma will connect lazily on its first call to the database.\n   *\n   * https://docs.nestjs.com/recipes/prisma\n   */\n  async onModuleInit(): Promise {\n    await this.$connect();\n  }\n\n  /** Prisma interferes with NestJS enableShutdownHooks.\n   * Prisma listens for shutdown signals and will call process.exit()\n   * before your application shutdown hooks fire.\n   *\n   * https://docs.nestjs.com/recipes/prisma\n   */\n  async enableShutdownHooks(app: INestApplication): Promise {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Product.html":{"url":"classes/Product.html","title":"class - Product","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/entities/product.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of a Product in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                basePrice\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                discountPercentage\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                picture\n                            \n                            \n                                    Optional\n                                stock\n                            \n                            \n                                urlName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        basePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Prisma.Decimal\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:35\n                        \n                    \n\n            \n                \n                    Product price not considering discounts.\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:58\n                        \n                    \n\n            \n                \n                    Product createdAt dateString\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:52\n                        \n                    \n\n            \n                \n                    Product description\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        discountPercentage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:41\n                        \n                    \n\n            \n                \n                    Product discount in percentage. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:9\n                        \n                    \n\n            \n                \n                    Product ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:15\n                        \n                    \n\n            \n                \n                    Product name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:27\n                        \n                    \n\n            \n                \n                    Product picture\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:46\n                        \n                    \n\n            \n                \n                    Product stock amount. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        urlName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:21\n                        \n                    \n\n            \n                \n                    Product name turned to url\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\n/** Describes the properties of a Product in the database */\nexport class Product implements Prisma.ProductUncheckedCreateInput {\n  /**\n   * Product ID as UUID\n   * @example \"6f4ca8a4-8aa0-4302-ac1b-7b5547f01b0a\"\n   */\n  id?: string;\n\n  /**\n   * Product name\n   * @example \"Brand black wheelchair\"\n   */\n  name: string;\n\n  /**\n   * Product name turned to url\n   * @example \"brand-black-wheelchair\"\n   */\n  urlName: string;\n\n  /**\n   * Product picture\n   * @example \"image.jpg\"\n   */\n  picture?: string;\n\n  /**\n   * Product price not considering discounts.\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 70.00\n   */\n  basePrice: string | number | Prisma.Decimal;\n\n  /**\n   * Product discount in percentage. Defaults to 0\n   * @example 10\n   */\n  discountPercentage?: number;\n\n  /** Product stock amount. Defaults to 0\n   * @example 42\n   */\n  stock?: number;\n\n  /**\n   * Product description\n   * @example \"Black wheelchair for offices\"\n   */\n  description?: string;\n\n  /**\n   * Product createdAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  createdAt?: string | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductController.html":{"url":"controllers/ProductController.html","title":"controller - ProductController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                product\n            \n\n\n            \n                Description\n            \n            \n                Exposes product CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOneById\n                            \n                            \n                                findOneByUrlName\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createProductDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin creates a new product'})@ApiBearerAuth()@IsAdmin()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:37\n                \n            \n\n\n            \n                \n                    Creates a new product, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(findAllProductsDto: FindAllProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns all products'})@Public()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:48\n                \n            \n\n\n            \n                \n                    Returns all products with pagination\nDefault is starting on page 1 showing 10 results per page,\nsearching and ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findAllProductsDto\n                                    \n                                                FindAllProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin gets product by ID'})@ApiBearerAuth()@IsAdmin()@Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:57\n                \n            \n\n\n            \n                \n                    Find product by ID, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByUrlName\n                        \n                    \n                \n            \n            \n                \nfindOneByUrlName(urlName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Gets product by urlName'})@Public()@Get(':urlName')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:65\n                \n            \n\n\n            \n                \n                    Find product by Url Name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    urlName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin deletes product'})@ApiBearerAuth()@IsAdmin()@Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:87\n                \n            \n\n\n            \n                \n                    Deletes product from database, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin updates product'})@ApiBearerAuth()@IsAdmin()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:74\n                \n            \n\n\n            \n                \n                    Updates product information, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Public } from 'src/auth/public.decorator';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { FindAllProductsDto } from './dto/find-all-products.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { Product } from './entities/product.entity';\nimport { ProductService } from './product.service';\n\n/** Exposes product CRUD endpoints */\n@ApiTags('product')\n@Controller('product')\nexport class ProductController {\n  /** Exposes product CRUD endpoints\n   *\n   * Instantiate class and ProductService dependency\n   */\n  constructor(private readonly productService: ProductService) {}\n\n  /** Creates a new product, only for admins */\n  @ApiOperation({ summary: 'Admin creates a new product' })\n  @ApiBearerAuth()\n  @IsAdmin()\n  @Post()\n  create(@Body() createProductDto: CreateProductDto): Promise {\n    return this.productService.create(createProductDto);\n  }\n\n  /** Returns all products with pagination\n   * Default is starting on page 1 showing 10 results per page,\n   * searching and ordering by name\n   */\n  @ApiOperation({ summary: 'Returns all products' })\n  @Public()\n  @Get()\n  findAll(@Query() findAllProductsDto: FindAllProductsDto): Promise {\n    return this.productService.findAll(findAllProductsDto);\n  }\n\n  /** Find product by ID, only for admins */\n  @ApiOperation({ summary: 'Admin gets product by ID' })\n  @ApiBearerAuth()\n  @IsAdmin()\n  @Get('/id/:id')\n  findOneById(@Param('id') id: string): Promise {\n    return this.productService.findOneById(id);\n  }\n\n  /** Find product by Url Name */\n  @ApiOperation({ summary: 'Gets product by urlName' })\n  @Public()\n  @Get(':urlName')\n  findOneByUrlName(@Param('urlName') urlName: string): Promise {\n    return this.productService.findOneByUrlName(urlName);\n  }\n\n  /** Updates product information, only for admins */\n  @ApiOperation({ summary: 'Admin updates product' })\n  @ApiBearerAuth()\n  @IsAdmin()\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateProductDto: UpdateProductDto,\n  ): Promise {\n    return this.productService.update(id, updateProductDto);\n  }\n\n  /** Deletes product from database, only for admins */\n  @ApiOperation({ summary: 'Admin deletes product' })\n  @ApiBearerAuth()\n  @IsAdmin()\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  remove(@Param('id') id: string): Promise {\n    return this.productService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductModule.html":{"url":"modules/ProductModule.html","title":"module - ProductModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_imports\n\n\n\ncluster_ProductModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nPrismaModule->ProductModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/product/product.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductService } from './product.service';\nimport { ProductController } from './product.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\n\n@Module({\n  controllers: [ProductController],\n  imports: [PrismaModule],\n  providers: [ProductService],\n})\nexport class ProductModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductNameInUseException.html":{"url":"classes/ProductNameInUseException.html","title":"class - ProductNameInUseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductNameInUseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/product-name-in-use.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\na product name that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/product-name-in-use.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'Product name already in use'. Used when the user inputs\na product name that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * a product name that is already registered in the system\n */\nexport class ProductNameInUseException extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'Product name already in use'. Used when the user inputs\n   * a product name that is already registered in the system\n   */\n  constructor() {\n    super('Product name already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductNotFoundException.html":{"url":"classes/ProductNotFoundException.html","title":"class - ProductNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/product-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\na product that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/product-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'Product not found'. Used when the user inputs\na product that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * a product that is not registered in the system\n */\nexport class ProductNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'Product not found'. Used when the user inputs\n   * a product that is not registered in the system\n   */\n  constructor() {\n    super('Product not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductService.html":{"url":"injectables/ProductService.html","title":"injectable - ProductService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/product.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing products in the database.\nCRUD endpoints are available for products.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUrlName\n                            \n                            \n                                    Private\n                                formatUrlName\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Private\n                                updateProductAndUrlName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/product/product.service.ts:12\n                            \n                        \n\n                \n                    \n                            Responsible for managing users in the database.\nCRUD endpoints are available for users.\nInstantiates the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createProductDto: CreateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:21\n                \n            \n\n\n            \n                \n                    Creates a new product\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: FindAllProductsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:35\n                \n            \n\n\n            \n                \n                    Returns all products with pagination\nDefault is starting on page 1 showing 10 results per page\nand ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindAllProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:53\n                \n            \n\n\n            \n                \n                    Find product by ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUrlName(urlName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:61\n                \n            \n\n\n            \n                \n                    Find product by Url Name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    urlName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        formatUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    formatUrlName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:96\n                \n            \n\n\n            \n                \n                    Formats the name to generate an urlName.\nMakes the name lower case, remove leading and trailing white spaces,\nturn to single the multiple spaces between words and make\nsingle spaces hyphens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            &quot; BraNd1    chAir   &quot; becomes &quot;brand1-chair&quot;\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:84\n                \n            \n\n\n            \n                \n                    Removes product from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:69\n                \n            \n\n\n            \n                \n                    Updates product information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        updateProductAndUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProductAndUrlName(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:109\n                \n            \n\n\n            \n                \n                    Formats UrlName and updates the product with the new one.\nUsed when the user updates the product name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { FindAllProductsDto } from './dto/find-all-products.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { Product } from './entities/product.entity';\n\n/** Responsible for managing products in the database.\n * CRUD endpoints are available for products.\n */\n@Injectable()\nexport class ProductService {\n  /** Responsible for managing users in the database.\n   * CRUD endpoints are available for users.\n   *\n   * Instantiates the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new product */\n  async create(createProductDto: CreateProductDto): Promise {\n    const urlName = this.formatUrlName(createProductDto.name);\n\n    const product = await this.prisma.product.create({\n      data: { ...createProductDto, urlName },\n    });\n\n    return product;\n  }\n\n  /** Returns all products with pagination\n   * Default is starting on page 1 showing 10 results per page\n   * and ordering by name\n   */\n  async findAll({\n    searchName = '',\n    page = 1,\n    offset = 10,\n  }: FindAllProductsDto): Promise {\n    const productsToSkip = (page - 1) * offset;\n\n    return this.prisma.product.findMany({\n      skip: productsToSkip,\n      take: offset,\n      where: {\n        name: { contains: searchName, mode: 'insensitive' },\n      },\n      orderBy: { name: 'asc' },\n    });\n  }\n\n  /** Find product by ID */\n  async findOneById(id: string): Promise {\n    return this.prisma.product.findUnique({\n      where: { id },\n      rejectOnNotFound: true,\n    });\n  }\n\n  /** Find product by Url Name */\n  async findOneByUrlName(urlName: string): Promise {\n    return this.prisma.product.findUnique({\n      where: { urlName },\n      rejectOnNotFound: true,\n    });\n  }\n\n  /** Updates product information */\n  async update(\n    id: string,\n    updateProductDto: UpdateProductDto,\n  ): Promise {\n    if (updateProductDto.name) {\n      return this.updateProductAndUrlName(id, updateProductDto);\n    }\n\n    return this.prisma.product.update({\n      where: { id },\n      data: { ...updateProductDto },\n    });\n  }\n\n  /** Removes product from database */\n  async remove(id: string): Promise {\n    await this.prisma.product.delete({ where: { id } });\n  }\n\n  /** Formats the name to generate an urlName.\n   *\n   * Makes the name lower case, remove leading and trailing white spaces,\n   * turn to single the multiple spaces between words and make\n   * single spaces hyphens\n   *\n   * @example \" BraNd1    chAir   \" becomes \"brand1-chair\"\n   */\n  private formatUrlName(name: string): string {\n    const lowerCaseUrlName = name.toLocaleLowerCase();\n    const trimmedUrlName = lowerCaseUrlName.trim();\n    const singleSpaceUrlName = trimmedUrlName.replace(/\\s\\s+/g, ' ');\n    const spaceToHyphenUrlName = singleSpaceUrlName.split(' ').join('-');\n\n    return spaceToHyphenUrlName;\n  }\n\n  /** Formats UrlName and updates the product with the new one.\n   *\n   * Used when the user updates the product name.\n   */\n  private updateProductAndUrlName(\n    id: string,\n    updateProductDto: UpdateProductDto,\n  ): Promise {\n    const urlName = this.formatUrlName(updateProductDto.name);\n\n    return this.prisma.product.update({\n      where: { id },\n      data: { ...updateProductDto, urlName },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/roles.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Checks if the user accessing the route is an admin\nFor more on NestJs Guards: https://docs.nestjs.com/guards\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/roles.guard.ts:12\n                            \n                        \n\n                \n                    \n                            Checks if the user accessing the route is an admin\nFor more on NestJs Guards: https://docs.nestjs.com/guards\nInstantiates the class and the Reflector dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guards/roles.guard.ts:22\n                \n            \n\n\n            \n                \n                    If the user is an Admin, access is allowed\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '@prisma/client';\nimport { Observable } from 'rxjs';\nimport { IS_ADMIN_KEY } from '../decorators/is-admin.decorator';\n\n/** Checks if the user accessing the route is an admin\n *\n * For more on NestJs Guards: https://docs.nestjs.com/guards\n */\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  /** Checks if the user accessing the route is an admin\n   *\n   * For more on NestJs Guards: https://docs.nestjs.com/guards\n   *\n   * Instantiates the class and the Reflector dependency\n   */\n  constructor(private reflector: Reflector) {}\n\n  /** If the user is an Admin, access is allowed */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const isAdmin = this.reflector.getAllAndOverride(IS_ADMIN_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    const request = context.switchToHttp().getRequest();\n    const { userRole } = request.user;\n\n    if (isAdmin && userRole === Role.ADMIN) {\n      return true;\n    }\n\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/update-product.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the Product fields that are updatable\nNote that since this is a\nPartial of CreateProductDto,\nany field there is optional here\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateProductDto } from './create-product.dto';\n\n/** Describes the Product fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateProductDto,\n * any field there is optional here\n */\nexport class UpdateProductDto extends PartialType(CreateProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the User fields that are updatable\nNote that since this is a\nPartial of CreateUserDto,\nany field there is optional here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                currentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user.dto.ts:19\n                        \n                    \n\n            \n                \n                    User current password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\n\n/** Describes the User fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateUserDto,\n * any field there is optional here\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n  /**\n   * User current password\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  currentPassword?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserRoleDto.html":{"url":"classes/UpdateUserRoleDto.html","title":"class - UpdateUserRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/update-user-role.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to update an User role\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user-role.dto.ts:11\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user-role.dto.ts:18\n                        \n                    \n\n            \n                \n                    User new role\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Role } from '@prisma/client';\nimport { IsEmail, IsEnum } from 'class-validator';\n\n/** Describes the information needed to update an User role */\nexport class UpdateUserRoleDto {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsEmail()\n  email: string;\n\n  /**\n   * User new role\n   * @example \"ADMIN\"\n   */\n  @IsEnum(Role)\n  role: Role;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of an User in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                role\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:43\n                        \n                    \n\n            \n                \n                    User address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:49\n                        \n                    \n\n            \n                \n                    User createdAt dateString\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:25\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:9\n                        \n                    \n\n            \n                \n                    User ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:37\n                        \n                    \n\n            \n                \n                    User name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:31\n                        \n                    \n\n            \n                \n                    User password\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:19\n                        \n                    \n\n            \n                \n                    User's Role.\nCan be \"USER\" or \"ADMIN\".\nAdmin users can handle products\nDefaults to \"USER\"\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:55\n                        \n                    \n\n            \n                \n                    User updatedAt dateString\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma, Role } from '@prisma/client';\n\n/** Describes the properties of an User in the database */\nexport class User implements Prisma.UserUncheckedCreateInput {\n  /**\n   * User ID as UUID\n   * @example \"d31fc56c-7aed-441e-9f7f-151be8d85634\"\n   */\n  id?: string;\n\n  /**\n   * User's Role.\n   * Can be \"USER\" or \"ADMIN\".\n   * Admin users can handle products\n   *\n   * Defaults to \"USER\"\n   * @example \"USER\"\n   */\n  role?: Role;\n\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  email: string;\n\n  /**\n   * User password\n   * @example \"$2b$10$1XpzUYu8FuvuaBb3SC0xzuR9DX7KakbMLt0vLNoZ.UnLntDMFc4LK\"\n   */\n  password: string;\n\n  /**\n   * User name\n   * @example \"John Doe\"\n   */\n  name?: string;\n\n  /**\n   * User address\n   * @example \"World Street 0\"\n   */\n  address?: string;\n\n  /**\n   * User createdAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  createdAt?: string | Date;\n\n  /**\n   * User updatedAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  updatedAt?: string | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                Exposes user CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                updateUserRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@ApiOperation({summary: 'Creates a new user'})@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:37\n                \n            \n\n\n            \n                \n                    Creates a new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Gets user's own profile'})@ApiBearerAuth()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:45\n                \n            \n\n\n            \n                \n                    Returns user's own profile information without password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(request: Request, deleteUserDto: DeleteUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes user'})@ApiBearerAuth()@Delete()@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:80\n                \n            \n\n\n            \n                \n                    Deletes user and all user related information from the system\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    deleteUserDto\n                                    \n                                                DeleteUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(request: Request, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates user'})@ApiBearerAuth()@Patch()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:55\n                \n            \n\n\n            \n                \n                    Updates user information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserRole\n                        \n                    \n                \n            \n            \n                \nupdateUserRole(updateUserRoleDto: UpdateUserRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin set user's role'})@ApiBearerAuth()@IsAdmin()@Patch('role')\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:69\n                \n            \n\n\n            \n                \n                    Updates user role, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserRoleDto\n                                    \n                                                UpdateUserRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Patch,\n  Post,\n  Req,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { Public } from 'src/auth/public.decorator';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { DeleteUserDto } from './dto/delete-user.dto';\nimport { UpdateUserRoleDto } from './dto/update-user-role.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserWithoutPassword } from './entities/user-without-password.entity';\nimport { UserService } from './user.service';\n\n/** Exposes user CRUD endpoints */\n@ApiTags('user')\n@Controller('user')\nexport class UserController {\n  /** Exposes user CRUD endpoints\n   *\n   * Instantiate class and UserService dependency\n   */\n  constructor(private readonly userService: UserService) {}\n\n  /** Creates a new user */\n  @Public()\n  @ApiOperation({ summary: 'Creates a new user' })\n  @Post()\n  create(@Body() createUserDto: CreateUserDto): Promise {\n    return this.userService.create(createUserDto);\n  }\n\n  /** Returns user's own profile information without password */\n  @ApiOperation({ summary: \"Gets user's own profile\" })\n  @ApiBearerAuth()\n  @Get()\n  async findById(@Req() request: Request): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.findById(userId);\n  }\n\n  /** Updates user information */\n  @ApiOperation({ summary: 'Updates user' })\n  @ApiBearerAuth()\n  @Patch()\n  update(\n    @Req() request: Request,\n    @Body() updateUserDto: UpdateUserDto,\n  ): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.update(userId, updateUserDto);\n  }\n\n  /** Updates user role, only for admins */\n  @ApiOperation({ summary: \"Admin set user's role\" })\n  @ApiBearerAuth()\n  @IsAdmin()\n  @Patch('role')\n  updateUserRole(\n    @Body() updateUserRoleDto: UpdateUserRoleDto,\n  ): Promise {\n    return this.userService.updateUserRole(updateUserRoleDto);\n  }\n\n  /** Deletes user and all user related information from the system */\n  @ApiOperation({ summary: 'Deletes user' })\n  @ApiBearerAuth()\n  @Delete()\n  @HttpCode(HttpStatus.NO_CONTENT)\n  remove(\n    @Req() request: Request,\n    @Body() deleteUserDto: DeleteUserDto,\n  ): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.remove(userId, deleteUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  controllers: [UserController],\n  providers: [UserService],\n  imports: [PrismaModule],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotFoundException.html":{"url":"classes/UserNotFoundException.html","title":"class - UserNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/user-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\nan user email or id that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/user-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'User not found'. Used when the user inputs an user\nemail or id that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * an user email or id that is not registered in the system\n */\nexport class UserNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'User not found'. Used when the user inputs an user\n   * email or id that is not registered in the system\n   */\n  constructor() {\n    super('User not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing users in the database.\nCRUD endpoints are available for users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Private\n                                    Async\n                                hashIfUpdatingPassword\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateUserRole\n                            \n                            \n                                    Private\n                                    Async\n                                validateCurrentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/user/user.service.ts:17\n                            \n                        \n\n                \n                    \n                            Responsible for managing users in the database.\nCRUD endpoints are available for users.\nInstantiate the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:26\n                \n            \n\n\n            \n                \n                    Creates a new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:56\n                \n            \n\n\n            \n                \n                    Finds user by email and returns the user with password.\nUsed mainly in login to compare if the inputted password matches\nthe hashed one.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:44\n                \n            \n\n\n            \n                \n                    Finds user by id and returns the user without password.\nUsed for default in app requests where the hashed password\nwon't be compared\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        hashIfUpdatingPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashIfUpdatingPassword(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:107\n                \n            \n\n\n            \n                \n                    If the user inputted both new password and current password\nthe new password is hashed to be saved in the database replacing\nthe current one.\nIf only the new password or current password were inputted the user\nprobably forgot about the other one and an error is thrown\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string, deleteUserDto: DeleteUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:94\n                \n            \n\n\n            \n                \n                    Removes user from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    deleteUserDto\n                                    \n                                                DeleteUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:63\n                \n            \n\n\n            \n                \n                    Updates user information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserRole(updateUserRoleDto: UpdateUserRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:80\n                \n            \n\n\n            \n                \n                    Updates user role\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserRoleDto\n                                    \n                                                UpdateUserRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateCurrentPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateCurrentPassword(id: string, currentPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:132\n                \n            \n\n\n            \n                \n                    Compares if the inputted current password matches the\nuser hashed password saved in the database\nIf it doesn't, an error is thrown\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { compare, hash } from 'bcrypt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { DeleteUserDto } from './dto/delete-user.dto';\nimport { UpdateUserRoleDto } from './dto/update-user-role.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserWithoutPassword } from './entities/user-without-password.entity';\nimport { User } from './entities/user.entity';\nimport { InvalidPasswordUpdateError } from './errors/invalid-password-update.error';\nimport { MissingPasswordUpdateError } from './errors/missing-password-update.error';\n\n/** Responsible for managing users in the database.\n * CRUD endpoints are available for users.\n */\n@Injectable()\nexport class UserService {\n  /** Responsible for managing users in the database.\n   * CRUD endpoints are available for users.\n   *\n   * Instantiate the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new user */\n  async create(createUserDto: CreateUserDto): Promise {\n    const hashedPassword = await hash(createUserDto.password, 10);\n\n    const lowerCaseEmail = createUserDto.email.toLowerCase();\n\n    await this.prisma.user.create({\n      data: {\n        ...createUserDto,\n        email: lowerCaseEmail,\n        password: hashedPassword,\n      },\n    });\n  }\n\n  /** Finds user by id and returns the user without password.\n   * Used for default in app requests where the hashed password\n   * won't be compared\n   */\n  async findById(id: string): Promise {\n    const user = await this.prisma.user.findUnique({ where: { id } });\n\n    delete user.password;\n\n    return { ...user };\n  }\n\n  /** Finds user by email and returns the user with password.\n   * Used mainly in login to compare if the inputted password matches\n   * the hashed one.\n   */\n  async findByEmail(email: string): Promise {\n    const lowerCaseEmail = email.toLowerCase();\n\n    return this.prisma.user.findUnique({ where: { email: lowerCaseEmail } });\n  }\n\n  /** Updates user information */\n  async update(\n    id: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    await this.hashIfUpdatingPassword(id, updateUserDto);\n\n    const user = await this.prisma.user.update({\n      where: { id },\n      data: { ...updateUserDto, updatedAt: new Date() },\n    });\n\n    delete user.password;\n\n    return { ...user };\n  }\n\n  /** Updates user role */\n  async updateUserRole(\n    updateUserRoleDto: UpdateUserRoleDto,\n  ): Promise {\n    const user = await this.prisma.user.update({\n      where: { email: updateUserRoleDto.email },\n      data: { role: updateUserRoleDto.role },\n    });\n\n    delete user.password;\n\n    return user;\n  }\n\n  /** Removes user from database */\n  async remove(id: string, deleteUserDto: DeleteUserDto): Promise {\n    await this.validateCurrentPassword(id, deleteUserDto.currentPassword);\n\n    await this.prisma.user.delete({ where: { id } });\n  }\n\n  /** If the user inputted both new password and current password\n   * the new password is hashed to be saved in the database replacing\n   * the current one.\n   *\n   * If only the new password or current password were inputted the user\n   * probably forgot about the other one and an error is thrown\n   */\n  private async hashIfUpdatingPassword(\n    id: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    if (updateUserDto.password && updateUserDto.currentPassword) {\n      await this.validateCurrentPassword(id, updateUserDto.currentPassword);\n\n      const hashedPassword = await hash(updateUserDto.password, 10);\n\n      updateUserDto.password = hashedPassword;\n      delete updateUserDto.currentPassword;\n\n      return;\n    }\n\n    if (updateUserDto.password || updateUserDto.currentPassword) {\n      throw new MissingPasswordUpdateError();\n    }\n  }\n\n  /** Compares if the inputted current password matches the\n   * user hashed password saved in the database\n   *\n   * If it doesn't, an error is thrown\n   */\n  private async validateCurrentPassword(\n    id: string,\n    currentPassword: string,\n  ): Promise {\n    const user = await this.prisma.user.findUnique({ where: { id } });\n\n    const isCorrectPassword = await compare(currentPassword, user.password);\n\n    if (!isCorrectPassword) {\n      throw new InvalidPasswordUpdateError();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserWithoutPassword.html":{"url":"classes/UserWithoutPassword.html","title":"class - UserWithoutPassword","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserWithoutPassword\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/entities/user-without-password.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This entity is the same as\nUser\nbut omitting the password field\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { User } from './user.entity';\n\n/** This entity is the same as\n * User\n * but omitting the password field\n */\nexport class UserWithoutPassword extends OmitType(User, [\n  'password',\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidateReturn.html":{"url":"interfaces/ValidateReturn.html","title":"interface - ValidateReturn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidateReturn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                What is returned to the application after JsonWebToken is validated\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                                \n                                        \n                                            userRole\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User ID\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userRole\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userRole:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User role\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { jwtConfig } from 'src/config/jwt.config';\n\n/** Decrypted JsonWebToken content */\ninterface Payload {\n  /** Token subject, user ID used\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  sub: string;\n\n  /** User role\n   * @example \"user\"\n   */\n  role: string;\n}\n\n/** What is returned to the application after JsonWebToken is validated */\ninterface ValidateReturn {\n  /** User ID\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  userId: string;\n\n  /** User role\n   * @example \"user\"\n   */\n  userRole: string;\n}\n\n/** Passport library JsonWebToken configuration */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /** Passport library JsonWebToken configuration */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConfig.secret,\n    });\n  }\n\n  /** Validates and returns data after JsonWebToken is decrypted */\n  async validate(payload: Payload): Promise {\n    return {\n      userId: payload.sub,\n      userRole: payload.role,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/dto/login-credentials.dto.ts\n            \n            class\n            LoginCredentialsDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login.response.ts\n            \n            class\n            LoginResponse\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/errors/invalid-email-or-password.error..ts\n            \n            class\n            InvalidEmailOrPasswordError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            Payload\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            ValidateReturn\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/is-admin.decorator.ts\n            \n            function\n            IsAdmin\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/is-admin.decorator.ts\n            \n            variable\n            IS_ADMIN_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/exceptions/email-in-use.exception.ts\n            \n            class\n            EmailInUseException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/product-name-in-use.exception.ts\n            \n            class\n            ProductNameInUseException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/product-not-found.exception.ts\n            \n            class\n            ProductNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/user-not-found.exception.ts\n            \n            class\n            UserNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/prisma.interceptor.ts\n            \n            injectable\n            PrismaInterceptor\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            jwtConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/product/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/models/product/dto/find-all-products.dto.ts\n            \n            class\n            FindAllProductsDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/models/product/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/product/entities/product.entity.ts\n            \n            class\n            Product\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/models/product/product.controller.ts\n            \n            controller\n            ProductController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/models/product/product.service.ts\n            \n            injectable\n            ProductService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/models/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/models/user/dto/delete-user.dto.ts\n            \n            class\n            DeleteUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/dto/update-user-role.dto.ts\n            \n            class\n            UpdateUserRoleDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/models/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/entities/user-without-password.entity.ts\n            \n            class\n            UserWithoutPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/models/user/errors/invalid-password-update.error.ts\n            \n            class\n            InvalidPasswordUpdateError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/errors/missing-password-update.error.ts\n            \n            class\n            MissingPasswordUpdateError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/models/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                100 %\n                (3/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.4.4\n        \n            @nestjs/core : ^8.4.4\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.4.4\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @prisma/client : 3.12.0\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            prisma-error-enum : ^0.1.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            IsAdmin   (src/.../is-admin.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Starts the application\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    src/common/decorators/is-admin.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsAdmin\n                        \n                    \n                \n            \n            \n                \nIsAdmin()\n                \n            \n\n\n\n\n            \n                \n                    Makes an endpoint accessible only by admin users\nExample: Create, update and remove products\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nE-Commerce Backend\nAPI com endpoints para criação de usuários, produtos, compras e avaliações com autenticação e autorização\n\n\n  \n  \n  \n  \n\n\n📑 Índice\n\n\n📌 Features\n🔧 Instalação\n💻 Tecnologias\n📄 Licença\n\n📌 Features\n\n CRUD de usuários\n Autenticação de usuário\n Autorização de usuário (admin)\n CRUD de produtos\n Upload de imagens\n\n\n CRUD de categorias\n CRUD de compras\n\n🔧 Instalação\n\nVocê precisará ter o Node.js instalado\n\nInstalação\n\n\n  # Clona o projeto para sua máquina\n  git clone https://github.com/alvaromrveiga/ecommerce-backend\n\n  # Entra na pasta do projeto\n  cd ecommerce-backend\n\n  # Instala as dependências\n  yarn\nCrie um arquivo .env na raiz do projeto preenchendo as informações descritas no .env.example\n\nIniciar servidor\n\n\n  # Roda as migrations\n  yarn migrate:dev \n\n  # Inicia o servidor em modo de desenvolvimento\n  yarn start:dev\n\n  # O servidor abrirá na porta 3000. \n  # Você pode acessar a documentação com Swagger em http://localhost:3000/api/\n\n  # Para visualizar o banco de dados\n  yarn prisma studio\nRodar os testes\nCrie um arquivo .env.test na raiz do projeto alterando no mínimo o banco de dados que colocou no .env\nExemplo: postgresql://username:password@localhost:5432/ecommerce-test?schema=public\n\n\n\n\n\n  # Roda as migrations no bando de testes\n  yarn migrate:test \n\n  # Roda todos os testes\n  yarn test:all\n\n  # Roda apenas os testes unitários\n  yarn test\n\n  # Roda apenas os testes de integração\n  yarn test:e2e\n\n  # Para visualizar o banco de dados de testes\n  yarn studio:test💻 Tecnologias\n\nTypescript - minimizar erros e tooling\nNode.js e NestJS com Express - construir o servidor\nPrisma com PostgreSQL - armazenar dados\nPassport e passport-jwt - autenticação com Json Web Token\nClass-validator e class-transformer - validações nos dados de entrada dos endpoints\nBcrypt - hashs de senhas\nPrisma-error-enum - identificar os códigos para tratar as exceções do prisma\nJest, SuperTest e ms - testes\nSwagger UI Express e compodoc - documentação\nESLint e Prettier - linting e formatação de código\n\n📄 Licença\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Álvaro Veiga\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nPrismaModule->ProductModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    19 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : alvaromrveiga\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IS_ADMIN_KEY   (src/.../is-admin.decorator.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            jwtConfig   (src/.../jwt.config.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/is-admin.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_ADMIN_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isAdmin'\n                    \n                \n\n            \n                \n                    Value to verify if @IsAdmin() is being used in the endpoint\nConsult RolesGuard\n\n                \n            \n\n        \n    \n\n    src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n            \n                \n                    Value to verify if @Public() is being used in the endpoint\nConsult JwtAuthGuard\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CustomDecorator => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n            \n                \n                    Makes an endpoint accessible by unauthenticated users\nExample: Create user and Login endpoints\n\n                \n            \n\n        \n    \n\n    src/config/jwt.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.JWT_SECRET,\n  signOptions: { expiresIn: '15m' },\n}\n                    \n                \n\n            \n                \n                    Configurations for the jsonwebtoken library used for authentication\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
