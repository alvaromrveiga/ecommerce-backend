var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.427,1,2.082]],["body/modules/AppModule.html",[0,2.091,1,4.075,2,1.734,3,2.091,4,2.995,5,2.995,6,3.476,7,0.031,8,3.157,9,3.157,10,2.748,11,2.09,12,1.899,13,0.33,14,0.33,15,0.286,16,3.581,17,3.429,18,0.625,19,0.638,20,4.707,21,2.609,22,3.581,23,2.748,24,3.581,25,3.581,26,3.581,27,3.581,28,2.321,29,3.581,30,3.581,31,0.33,32,0.127,33,0.022,34,0.022]],["title/controllers/AuthController.html",[35,1.876,36,2.082]],["body/controllers/AuthController.html",[7,0.031,13,0.3,14,0.3,15,0.26,18,0.609,19,0.58,31,0.3,32,0.115,33,0.021,34,0.021,35,2.579,36,2.863,37,1.902,38,2.725,39,0.431,40,0.911,41,2.863,42,2.863,43,0.58,44,1.963,45,2.228,46,2.927,47,3.258,48,3.484,49,1.727,50,2.725,51,4.419,52,3.258,53,0.635,54,3.258,55,4.419,56,1.447,57,1.227,58,0.635,59,1.132,60,1.132,61,1.535,62,3.696,63,2.725,64,2.725,65,2.725,66,3.696,67,2.725,68,1.902,69,2.659,70,2.725,71,3.258,72,3.258,73,2.111,74,3.258,75,2.579,76,2.725,77,3.258,78,2.111,79,2.111,80,2.725,81,3.258,82,3.258,83,1.227,84,1.207,85,1.331,86,3.258]],["title/modules/AuthModule.html",[0,1.427,6,1.876]],["body/modules/AuthModule.html",[0,2.049,2,1.683,3,2.049,6,3.651,7,0.031,9,3.131,10,2.693,11,2.028,12,1.842,13,0.32,14,0.32,15,0.277,17,3.361,18,0.643,19,0.619,28,2.99,31,0.32,32,0.123,33,0.022,34,0.022,36,3.357,37,2.693,69,3.131,70,2.906,87,2.906,88,3.474,89,2.906,90,2.86,91,3.474,92,4.614,93,1.842,94,3.474,95,3.474,96,3.474,97,2.531,98,3.474,99,2.531,100,3.474,101,3.474]],["title/injectables/AuthService.html",[69,1.704,102,0.809]],["body/injectables/AuthService.html",[3,1.476,7,0.031,13,0.202,14,0.202,15,0.175,18,0.532,19,0.391,31,0.202,32,0.142,33,0.016,34,0.016,39,0.29,40,0.9,43,0.391,44,1.476,45,2.25,46,2.343,53,0.783,56,1.783,57,1.511,58,0.783,59,1.394,60,1.556,61,1.556,69,1.762,79,2.154,83,2.041,84,1.592,85,1.358,97,1.597,102,0.837,103,1.062,104,1.834,105,3.263,106,4.479,107,3.507,108,3.324,109,1.251,110,2.192,111,2.626,112,5.551,113,2.192,114,2.421,115,2.192,116,1.869,117,2.192,118,2.902,119,4.534,120,4.479,121,3.746,122,3.746,123,3.263,124,3.746,125,1.762,126,3.357,127,3.324,128,2.192,129,1.762,130,2.154,131,1.834,132,1.597,133,2.192,134,2.192,135,2.154,136,1.834,137,2.192,138,2.614,139,2.924,140,2.192,141,1.162,142,1.421,143,2.192,144,2.192,145,2.192,146,3.324,147,2.192,148,1.834,149,2.192,150,1.597,151,1.062]],["title/classes/CreateUserDto.html",[32,0.114,152,1.704]],["body/classes/CreateUserDto.html",[7,0.031,13,0.24,14,0.24,15,0.208,18,0.396,31,0.24,32,0.134,33,0.018,34,0.018,39,0.344,40,0.988,43,0.463,49,2.582,53,0.95,57,1.947,58,0.95,59,1.692,83,1.947,84,1.586,116,1.827,123,1.895,152,2,153,0.834,154,4.324,155,1.686,156,2,157,2.749,158,2.445,159,2,160,2.445,161,1.421,162,4.324,163,3.773,164,2.601,165,2.601,166,3.156,167,3.156,168,2.601,169,2.601,170,2.601,171,3.018,172,3.773,173,2.601,174,3.773,175,4.87,176,5.698,177,4.87,178,4.87,179,2.601,180,3.773,181,3.713,182,3.156,183,2.601,184,1.518,185,2.176,186,1.834,187,1.895,188,1.686,189,2.601,190,2.601,191,2.601,192,2.176,193,2.176,194,2.176,195,2.176,196,2.176]],["title/classes/DeleteUserDto.html",[32,0.114,197,1.876]],["body/classes/DeleteUserDto.html",[7,0.031,13,0.362,14,0.362,15,0.314,18,0.413,31,0.362,32,0.177,33,0.024,34,0.024,39,0.52,40,0.938,43,0.7,49,2.084,53,0.767,58,0.767,84,1.365,116,1.603,153,1.261,155,2.548,156,2.651,157,3.642,158,3.24,161,1.882,182,3.24,184,2.295,186,1.48,188,2.548,197,2.918,198,4.182,199,3.642,200,4.005,201,3.931,202,3.931,203,2.918,204,3.642]],["title/classes/EmailInUseError.html",[32,0.114,205,2.082]],["body/classes/EmailInUseError.html",[7,0.031,13,0.322,14,0.322,15,0.279,18,0.367,19,0.623,31,0.322,32,0.124,33,0.022,34,0.022,39,0.463,40,0.897,53,0.682,83,2.083,109,1.957,129,2.934,153,1.121,166,3.876,167,4.347,171,2.705,205,3.003,206,3.376,207,2.925,208,3.23,209,3.586,210,4.031,211,2.261,212,3.586,213,6.036,214,4.628,215,4.031,216,1.61,217,3.786,218,3.498,219,5.197,220,3.498]],["title/classes/InvalidEmailOrPasswordError.html",[32,0.114,135,2.082]],["body/classes/InvalidEmailOrPasswordError.html",[7,0.031,13,0.31,14,0.31,15,0.269,18,0.353,19,0.599,31,0.31,32,0.119,33,0.021,34,0.021,39,0.445,40,0.883,53,0.656,83,2.393,84,1.632,109,1.919,129,2.888,135,2.925,153,1.078,171,2.635,208,3.179,209,3.53,211,2.225,212,3.53,214,5.081,215,3.968,216,1.568,221,3.775,222,2.812,223,5.447,224,4.556,225,5.096,226,3.363,227,3.775,228,2.812]],["title/classes/InvalidPasswordUpdateError.html",[32,0.114,229,2.082]],["body/classes/InvalidPasswordUpdateError.html",[7,0.03,13,0.311,14,0.311,15,0.269,18,0.354,19,0.601,31,0.311,32,0.119,33,0.021,34,0.021,39,0.446,40,0.884,53,0.658,84,1.737,109,1.922,129,2.892,151,2.642,153,1.082,159,2.892,171,2.641,203,3.491,208,3.184,209,3.534,210,3.973,211,2.228,212,3.534,216,1.571,217,3.719,224,4.562,227,3.784,228,2.821,229,2.932,230,3.784,231,2.458,232,5.454,233,3.373]],["title/injectables/JwtAuthGuard.html",[23,1.876,102,0.809]],["body/injectables/JwtAuthGuard.html",[7,0.031,13,0.242,14,0.242,15,0.21,18,0.545,19,0.468,21,1.914,23,2.218,31,0.242,32,0.158,33,0.018,34,0.018,39,0.348,41,3.506,43,0.468,44,1.688,53,0.741,56,1.688,57,1.431,58,0.741,59,1.32,60,0.913,61,1.32,75,2.218,76,2.198,78,1.703,85,1.553,93,1.393,102,0.957,103,1.273,109,0.989,138,1.534,216,0.913,234,3.734,235,2.198,236,4.526,237,2.856,238,2.856,239,5.191,240,4.893,241,4.526,242,4.893,243,4.092,244,3.565,245,4.893,246,4.893,247,4.465,248,2.628,249,5.714,250,2.628,251,3.801,252,2.769,253,2.628,254,4.092,255,2.628,256,3.801,257,3.801,258,3.179,259,3.179,260,3.734,261,1.914,262,1.914,263,2.628,264,1.703,265,3.179,266,2.628,267,2.628,268,2.628,269,2.198,270,2.628]],["title/injectables/JwtStrategy.html",[90,1.556,102,0.809]],["body/injectables/JwtStrategy.html",[7,0.031,13,0.266,14,0.266,15,0.23,18,0.493,19,0.513,31,0.266,32,0.102,33,0.019,34,0.019,39,0.381,40,0.658,43,0.513,44,1.803,45,2.087,53,0.791,56,1.28,57,1.085,58,0.562,59,1.001,60,1.632,61,1.41,85,1.177,90,1.966,93,1.527,102,1.022,103,1.395,109,1.769,116,1.301,118,2.63,125,1.527,141,2.851,142,1.867,186,1.528,211,1.177,216,1.001,237,3.139,238,2.978,264,1.867,271,1.867,272,3.793,273,3.717,274,4.059,275,2.881,276,2.957,277,2.881,278,2.63,279,3.423,280,2.099,281,2.099,282,2.099,283,2.099,284,2.152,285,1.867,286,2.099,287,2.369,288,2.957,289,2.957,290,2.957,291,2.957,292,2.957,293,2.099,294,1.527,295,2.099,296,1.682,297,2.63,298,2.099,299,2.099,300,2.099,301,2.099,302,2.099,303,2.099,304,1.867,305,2.099]],["title/classes/LoginCredentialsDto.html",[32,0.114,48,2.082]],["body/classes/LoginCredentialsDto.html",[7,0.031,13,0.331,14,0.331,15,0.287,18,0.377,31,0.331,32,0.167,33,0.022,34,0.022,39,0.475,40,0.966,43,0.64,48,3.057,49,2.501,53,0.92,58,0.92,83,2.187,84,1.586,116,1.793,153,1.152,156,2.501,158,3.057,161,1.776,182,3.413,184,2.098,186,1.776,187,2.618,188,2.329,204,3.837,294,2.501,306,4.405,307,3.006,308,3.057,309,4.718,310,4.718,311,3.594,312,3.594]],["title/classes/LoginResponse.html",[32,0.114,73,2.082]],["body/classes/LoginResponse.html",[7,0.03,13,0.39,14,0.39,15,0.338,31,0.39,32,0.15,33,0.025,34,0.025,39,0.56,41,3.394,43,0.754,46,2.471,53,0.826,58,0.826,73,3.394,116,1.679,125,2.777,126,4.756,153,1.357,156,2.245,161,1.972,186,1.594,241,3.541,285,3.394,313,3.541,314,4.234,315,4.234,316,4.234,317,4.234,318,4.234,319,4.234]],["title/classes/MissingPasswordUpdateError.html",[32,0.114,320,2.082]],["body/classes/MissingPasswordUpdateError.html",[7,0.031,13,0.294,14,0.294,15,0.255,18,0.335,19,0.568,31,0.294,32,0.113,33,0.021,34,0.021,39,0.422,40,0.864,53,0.622,84,1.773,109,1.867,129,2.825,151,2.855,153,1.022,158,3.453,171,2.542,203,3.441,208,3.111,209,3.453,210,3.882,211,2.177,212,3.453,216,1.513,217,3.613,231,2.323,320,2.822,321,3.642,322,4.93,323,3.882,324,3.188,325,4.355,326,4.959,327,3.188]],["title/interfaces/Payload.html",[141,1.704,284,1.704]],["body/interfaces/Payload.html",[7,0.032,13,0.281,14,0.281,15,0.243,18,0.509,19,0.543,31,0.281,32,0.108,33,0.02,34,0.02,39,0.403,40,0.785,43,0.543,45,1.354,58,0.595,60,1.059,61,1.059,85,1.246,90,1.477,93,1.616,102,1.063,109,1.148,116,1.677,118,1.976,125,1.616,141,2.568,142,3.388,161,1.59,186,1.59,211,1.725,216,1.059,237,2.828,238,2.465,264,1.976,271,1.976,272,3.681,273,3.076,276,2.221,278,1.976,279,3.529,280,2.221,281,2.221,282,2.221,283,3.076,284,2.239,285,2.736,286,3.076,287,2.828,288,3.076,289,3.076,290,3.076,291,3.076,292,3.076,293,2.221,294,1.616,295,2.221,296,1.78,297,2.736,298,2.221,299,2.221,300,2.221,301,2.221,302,2.221,303,2.221,304,1.976,305,2.221,328,2.221]],["title/injectables/PrismaInterceptor.html",[102,0.809,329,2.341]],["body/injectables/PrismaInterceptor.html",[7,0.031,13,0.231,14,0.231,15,0.2,18,0.535,19,0.447,31,0.231,32,0.089,33,0.017,34,0.017,39,0.332,43,0.447,44,1.632,53,0.716,56,1.632,57,1.383,58,0.716,59,1.276,60,1.663,61,1.276,83,1.637,85,1.501,102,0.925,103,1.215,107,3.167,129,1.948,130,3.655,150,3.167,151,1.215,160,1.625,205,2.381,206,1.827,208,2.144,236,3.073,243,4.003,244,3.487,254,4.003,258,3.073,259,3.073,260,3.636,261,1.827,308,2.381,329,2.676,330,2.097,331,3.674,332,2.974,333,4.003,334,4.787,335,3.674,336,4.787,337,4.348,338,3.674,339,2.508,340,4.348,341,4.787,342,2.508,343,3.674,344,3.674,345,2.676,346,3.167,347,3.073,348,3.674,349,3.636,350,2.508,351,3.674,352,3.674,353,2.676,354,2.508,355,3.674,356,3.674,357,2.508,358,2.508,359,2.097,360,2.508,361,2.508,362,2.508,363,2.508,364,2.508,365,2.508,366,2.508,367,2.508,368,2.508,369,2.508,370,2.508,371,2.508]],["title/modules/PrismaModule.html",[0,1.427,8,1.704]],["body/modules/PrismaModule.html",[0,2.27,2,1.971,3,2.27,7,0.03,8,3.315,10,2.983,11,2.375,12,2.157,13,0.375,14,0.375,15,0.325,18,0.537,19,0.725,28,3.311,31,0.375,32,0.144,33,0.024,34,0.024,372,3.403,373,3.403,374,3.403,375,3.443,376,4.069,377,4.273,378,4.069]],["title/injectables/PrismaService.html",[102,0.809,375,1.704]],["body/injectables/PrismaService.html",[7,0.031,12,2.131,13,0.262,14,0.262,15,0.227,18,0.422,19,0.506,31,0.262,32,0.101,33,0.019,34,0.019,39,0.376,43,0.506,44,1.786,45,2.537,53,0.784,56,1.262,57,1.07,58,0.554,59,1.62,60,1.396,61,1.761,102,1.012,103,1.376,105,2.928,139,2.928,160,1.841,216,1.396,244,2.928,294,2.131,332,3.242,333,3.362,345,2.07,347,3.362,375,2.131,379,2.377,380,4.02,381,3.694,382,5.555,383,4.664,384,5.071,385,5.555,386,4.02,387,5.071,388,2.842,389,4.02,390,4.02,391,5.071,392,4.02,393,5.071,394,4.02,395,4.02,396,4.02,397,4.02,398,2.842,399,4.02,400,4.02,401,4.02,402,4.02,403,2.07,404,2.842,405,2.842,406,2.842]],["title/classes/UpdateUserDto.html",[32,0.114,407,1.876]],["body/classes/UpdateUserDto.html",[7,0.031,13,0.325,14,0.325,15,0.281,18,0.548,31,0.325,32,0.165,33,0.022,34,0.022,39,0.466,40,0.899,43,0.627,49,1.867,53,0.687,58,0.687,59,1.927,68,2.055,84,1.271,116,1.493,152,2.765,153,1.129,155,2.282,156,2.468,157,3.391,159,1.867,161,1.753,181,3.893,182,3.016,184,2.055,186,1.326,188,2.282,200,3.799,203,2.717,204,3.391,216,1.223,353,3.391,407,2.717,408,3.893,409,4.655,410,4.655,411,4.655,412,4.655,413,3.521,414,3.521,415,3.521,416,2.565,417,3.521]],["title/classes/User.html",[32,0.114,40,0.521]],["body/classes/User.html",[7,0.031,13,0.238,14,0.238,15,0.206,18,0.271,31,0.238,32,0.091,33,0.018,34,0.018,39,0.342,40,1.019,43,0.46,53,1.082,57,1.941,58,1.082,59,2.045,83,1.941,84,1.408,116,1.968,153,0.828,156,1.99,160,2.432,161,1.827,162,4.312,186,2.09,187,1.881,192,2.16,193,2.16,194,2.16,195,2.16,196,2.16,287,3.009,332,1.507,381,2.734,403,1.881,418,2.16,419,5.155,420,5.155,421,2.582,422,4.853,423,2.582,424,4.853,425,2.582,426,2.582,427,3.753,428,2.582,429,2.582,430,2.582,431,2.582,432,2.582,433,2.582,434,2.582,435,2.582,436,2.582,437,2.582,438,3.753,439,3.753,440,3.753]],["title/controllers/UserController.html",[35,1.876,441,2.082]],["body/controllers/UserController.html",[7,0.031,13,0.18,14,0.18,15,0.156,18,0.563,19,0.348,31,0.18,32,0.108,33,0.014,34,0.014,35,1.139,37,1.139,39,0.258,40,0.953,42,2.418,43,0.348,44,1.35,45,1.658,49,2.234,50,3.121,53,0.822,56,1.871,57,1.586,58,0.822,59,1.463,60,1.68,61,1.814,62,3.121,63,1.632,64,1.632,65,2.541,66,3.818,67,1.632,68,1.139,75,1.774,78,1.264,79,1.264,80,3.523,84,0.83,85,1.721,111,2.04,114,1.421,138,2.178,151,2.04,152,2.564,159,1.611,197,3.048,199,2.214,215,2.214,252,1.421,297,2.418,308,3.133,323,2.719,407,3.048,416,2.719,441,1.969,442,1.632,443,1.951,444,3.732,445,3.121,446,2.541,447,3.121,448,1.632,449,1.951,450,3.523,451,1.951,452,1.951,453,1.951,454,5.932,455,3.039,456,4.213,457,1.951,458,1.951,459,3.732,460,2.418,461,1.951,462,4.213,463,1.951,464,1.951,465,3.039,466,1.951,467,3.523,468,1.951,469,1.951,470,3.039,471,3.732,472,4.213,473,1.632,474,1.951,475,1.632,476,1.632,477,1.632,478,1.139,479,1.632,480,1.632,481,1.632,482,1.951,483,1.951,484,1.951,485,1.951,486,1.951,487,3.732,488,1.951,489,1.951,490,1.951,491,1.951]],["title/modules/UserModule.html",[0,1.427,9,1.704]],["body/modules/UserModule.html",[0,2.139,2,1.796,3,2.139,7,0.031,8,3.188,9,3.325,10,2.811,11,2.165,12,1.966,13,0.342,14,0.342,15,0.296,17,3.508,18,0.594,19,0.661,28,3.121,31,0.342,32,0.131,33,0.023,34,0.023,37,2.811,111,3.105,377,4.028,441,3.465,481,3.101,492,3.101,493,3.101,494,3.708,495,3.101,496,3.708,497,3.708,498,3.708]],["title/injectables/UserService.html",[102,0.809,111,1.556]],["body/injectables/UserService.html",[7,0.031,13,0.114,14,0.114,15,0.099,18,0.495,19,0.22,31,0.114,32,0.096,33,0.01,34,0.01,39,0.163,40,0.947,42,2.079,43,0.22,44,0.93,45,2.506,46,1.222,53,0.853,56,1.942,57,1.646,58,0.853,59,1.519,60,1.686,61,1.799,78,0.8,79,0.8,83,1.208,84,1.586,85,1.311,102,0.527,103,0.598,105,2.337,107,2.842,109,0.465,111,1.014,114,1.525,116,1.809,119,3.657,121,1.75,122,3.657,123,2.337,124,3.262,130,2.079,131,2.278,132,0.9,136,1.033,138,2.277,139,3.536,148,2.278,150,1.525,151,2.284,152,2.068,159,1.11,185,1.033,197,2.427,199,1.985,200,1.985,203,2.552,211,1.311,229,1.356,252,1.525,278,1.356,287,3.023,308,1.356,320,1.356,322,1.75,323,1.985,332,1.222,345,1.525,346,1.525,375,2.068,381,3.435,407,3.073,416,1.985,445,2.683,446,1.75,447,1.75,448,1.75,450,1.75,460,1.765,467,1.75,475,1.033,476,1.033,477,1.033,478,0.721,479,1.033,480,1.033,499,1.033,500,3.208,501,3.657,502,3.208,503,2.093,504,2.724,505,2.724,506,1.235,507,1.235,508,1.235,509,2.093,510,1.235,511,3.208,512,2.093,513,2.093,514,1.235,515,2.093,516,2.093,517,2.093,518,1.235,519,1.235,520,3.208,521,2.093,522,2.093,523,2.093,524,3.208,525,2.093,526,1.235,527,2.093,528,1.235,529,1.235,530,1.235,531,1.235,532,2.093,533,1.235,534,1.235,535,2.093,536,1.235,537,3.208,538,1.235,539,2.093,540,1.235,541,2.724,542,1.235,543,1.235,544,2.093,545,1.235,546,1.235,547,2.724,548,3.208,549,1.235,550,2.093,551,1.235]],["title/classes/UserWithoutPassword.html",[32,0.114,478,1.876]],["body/classes/UserWithoutPassword.html",[7,0.031,13,0.387,14,0.387,15,0.335,18,0.547,31,0.387,32,0.149,33,0.025,34,0.025,39,0.556,40,0.919,68,2.451,84,1.547,138,2.451,153,1.347,216,1.459,353,3.797,460,2.721,478,3.042,552,3.512,553,3.512,554,5.212,555,5.212,556,5.212,557,4.2,558,4.2,559,4.2]],["title/interfaces/ValidateReturn.html",[284,1.704,296,1.876]],["body/interfaces/ValidateReturn.html",[7,0.032,13,0.283,14,0.283,15,0.245,18,0.51,19,0.546,31,0.283,32,0.109,33,0.02,34,0.02,39,0.406,40,0.788,43,0.546,45,1.362,58,0.598,60,1.065,61,1.065,85,1.253,90,1.485,93,1.626,102,1.067,109,1.155,116,1.681,118,1.987,125,1.626,141,2.248,142,1.987,161,1.596,186,1.596,211,1.253,216,1.065,237,2.836,238,2.475,264,1.987,271,1.987,272,3.688,273,3.089,276,2.234,278,1.987,279,3.089,280,2.234,281,2.234,282,2.234,283,2.234,284,2.248,285,1.987,286,2.234,287,2.836,288,3.089,289,3.089,290,3.089,291,3.089,292,3.089,293,3.089,294,2.248,295,3.089,296,2.475,297,3.566,298,2.234,299,2.234,300,2.234,301,2.234,302,2.234,303,2.234,304,1.987,305,2.234,328,2.234]],["title/coverage.html",[560,3.661]],["body/coverage.html",[7,0.031,15,0.222,23,1.619,32,0.214,33,0.019,34,0.019,35,2.306,36,1.797,38,2.32,40,0.45,48,1.797,58,0.541,69,1.471,73,1.797,75,1.619,83,1.044,84,1.079,90,1.343,99,2.021,102,1.387,104,2.32,111,1.343,135,1.797,141,1.471,151,1.343,152,1.471,154,2.32,155,2.982,197,1.619,198,2.32,205,1.797,206,2.021,207,2.32,221,2.32,222,2.32,229,1.797,230,2.32,231,2.879,234,2.32,235,2.32,262,2.021,271,2.982,284,2.095,296,1.619,306,2.32,307,2.32,313,2.32,320,1.797,321,2.32,329,2.021,330,2.32,375,1.471,379,2.32,407,1.619,408,2.32,418,2.32,441,1.797,442,2.32,460,1.797,478,1.619,499,2.32,552,2.32,553,2.32,560,2.32,561,2.774,562,2.774,563,2.774,564,6.483,565,5.983,566,2.774,567,5.302,568,3.305,569,4.603,570,5.302,571,2.32,572,2.32,573,2.774,574,2.32,575,3.951,576,2.774,577,2.774,578,2.774,579,2.774]],["title/dependencies.html",[3,1.716,580,2.247]],["body/dependencies.html",[3,1.727,7,0.031,19,0.693,21,2.832,32,0.176,33,0.024,34,0.024,68,2.269,93,2.061,97,2.832,125,2.061,130,2.519,132,2.832,184,2.269,237,2.898,261,2.832,332,2.269,359,3.251,403,2.832,473,4.152,581,5.762,582,3.888,583,3.888,584,3.888,585,3.888,586,3.888,587,3.888,588,3.888,589,3.888,590,3.888,591,3.888,592,3.888,593,3.888,594,3.888,595,3.888,596,3.888,597,3.888,598,3.888,599,3.888,600,3.888,601,3.888,602,3.888,603,3.888]],["title/miscellaneous/functions.html",[604,1.741,605,3.231]],["body/miscellaneous/functions.html",[7,0.029,33,0.027,34,0.027,43,0.858,60,1.674,61,1.674,294,2.555,572,4.03,574,5.03,604,3.123,605,4.03,606,4.819,607,4.819]],["title/index.html",[43,0.479,608,2.687,609,2.687]],["body/index.html",[7,0.028,33,0.025,34,0.025,610,5.331,611,5.331,612,4.357,613,4.357,614,4.357,615,5.331,616,5.331,617,5.76,618,5.331,619,4.357,620,4.357,621,4.357,622,4.357,623,4.357,624,4.357,625,4.357,626,4.357,627,4.357,628,4.357,629,5.76,630,4.357,631,4.357,632,4.357,633,4.357,634,4.357]],["title/modules.html",[2,2.12]],["body/modules.html",[1,3.012,2,2.251,6,2.713,7,0.026,8,2.464,9,2.464,33,0.026,34,0.026,635,6.134,636,6.134,637,6.134,638,6.134]],["title/overview.html",[639,3.661]],["body/overview.html",[1,3.983,2,1.717,3,2.077,4,2.965,5,2.965,6,3.63,7,0.03,8,3.21,9,3.297,10,2.729,11,2.069,12,1.879,33,0.022,34,0.022,37,2.069,69,2.774,87,2.965,89,2.965,90,2.534,103,1.717,111,2.933,153,1.137,328,2.583,372,2.965,373,2.965,374,2.965,375,3.21,492,2.965,493,2.965,495,2.965,639,2.965,640,3.545,641,4.676,642,3.545,643,3.545]],["title/properties.html",[161,1.454,580,2.247]],["body/properties.html",[7,0.03,33,0.027,34,0.027,39,0.64,161,1.823,644,4.841,645,4.841,646,4.841,647,4.841,648,4.841,649,4.841]],["title/miscellaneous/variables.html",[604,1.741,650,3.231]],["body/miscellaneous/variables.html",[7,0.031,23,2.252,33,0.023,34,0.023,40,0.626,41,2.501,42,2.501,43,0.687,46,2.252,58,0.963,75,3.181,99,3.599,116,1.237,159,2.046,186,1.453,211,2.019,238,2.252,262,3.599,265,3.227,269,3.227,272,2.501,304,2.501,346,3.971,349,3.227,501,3.227,568,3.227,571,3.227,604,2.501,650,3.227,651,4.941,652,3.859,653,5.746,654,3.859,655,3.859,656,4.941,657,3.859,658,3.859,659,3.859,660,3.859,661,3.859,662,3.859,663,3.859,664,3.859,665,3.859,666,3.859,667,3.859]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":196,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["0.0.1",{"_index":645,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":597,"title":{},"body":{"dependencies.html":{}}}],["0.1.2",{"_index":594,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":591,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":590,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":592,"title":{},"body":{"dependencies.html":{}}}],["03",{"_index":439,"title":{},"body":{"classes/User.html":{}}}],["1",{"_index":176,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["1/1",{"_index":570,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":539,"title":{},"body":{"injectables/UserService.html":{}}}],["100",{"_index":564,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":643,"title":{},"body":{"overview.html":{}}}],["12df",{"_index":289,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["151be8d85634",{"_index":436,"title":{},"body":{"classes/User.html":{}}}],["15m",{"_index":666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":641,"title":{},"body":{"overview.html":{}}}],["2/2",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["2022",{"_index":438,"title":{},"body":{"classes/User.html":{}}}],["26t15:41:28.527z",{"_index":440,"title":{},"body":{"classes/User.html":{}}}],["2b$10$1xpzuyu8fuvuabb3sc0xzur9dx7kakbmlt0vlnoz.unlntdmfc4lk",{"_index":437,"title":{},"body":{"classes/User.html":{}}}],["3.0.2",{"_index":599,"title":{},"body":{"dependencies.html":{}}}],["3.10.0",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":567,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":640,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":593,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":603,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":566,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":210,"title":{},"body":{"classes/EmailInUseError.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/MissingPasswordUpdateError.html":{}}}],["401",{"_index":223,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{}}}],["441e",{"_index":434,"title":{},"body":{"classes/User.html":{}}}],["44dd5c499084",{"_index":292,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["4f33",{"_index":290,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["5.0.1",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":575,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":642,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":600,"title":{},"body":{"dependencies.html":{}}}],["7aed",{"_index":433,"title":{},"body":{"classes/User.html":{}}}],["8",{"_index":190,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8'})@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":173,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.0.0",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":576,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":577,"title":{},"body":{"coverage.html":{}}}],["9f7f",{"_index":435,"title":{},"body":{"classes/User.html":{}}}],["9fd6",{"_index":291,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["abc123456",{"_index":188,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{}}}],["accessible",{"_index":661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginResponse.html":{}}}],["address",{"_index":162,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["already",{"_index":213,"title":{},"body":{"classes/EmailInUseError.html":{}}}],["alvaromrveiga",{"_index":649,"title":{},"body":{"properties.html":{}}}],["apibearerauth",{"_index":472,"title":{},"body":{"controllers/UserController.html":{}}}],["apioperation",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":50,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["apitags",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["apitags('authentication",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('user",{"_index":482,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":345,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["app.close",{"_index":406,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app_guard",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["application",{"_index":294,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"interfaces/Payload.html":{},"injectables/PrismaService.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/functions.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["async",{"_index":45,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{}}}],["atualiza",{"_index":614,"title":{},"body":{"index.html":{}}}],["auth.controller",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["auth.guard.ts",{"_index":235,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:13",{"_index":250,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:28",{"_index":255,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":36,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":309,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["authenticates",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticating",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":41,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginResponse.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":239,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":263,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":648,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":69,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":502,"title":{},"body":{"injectables/UserService.html":{}}}],["await",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["badrequestexception",{"_index":217,"title":{},"body":{"classes/EmailInUseError.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/MissingPasswordUpdateError.html":{}}}],["banco",{"_index":616,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["before",{"_index":395,"title":{},"body":{"injectables/PrismaService.html":{}}}],["being",{"_index":655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["body",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["boilerplate",{"_index":347,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{}}}],["boolean",{"_index":259,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/PrismaInterceptor.html":{}}}],["bootstrap",{"_index":574,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":322,"title":{},"body":{"classes/MissingPasswordUpdateError.html":{},"injectables/UserService.html":{}}}],["break",{"_index":370,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["browse",{"_index":638,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":635,"title":{},"body":{"modules.html":{}}}],["call",{"_index":393,"title":{},"body":{"injectables/PrismaService.html":{}}}],["called",{"_index":317,"title":{},"body":{"classes/LoginResponse.html":{}}}],["callhandler",{"_index":341,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["canactivate",{"_index":247,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":253,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["case",{"_index":367,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["catcherror",{"_index":360,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["catcherror((error",{"_index":363,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["catches",{"_index":343,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["check",{"_index":240,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["class",{"_index":32,"title":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserWithoutPassword.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":153,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserWithoutPassword.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":372,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":374,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":373,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":492,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":493,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":494,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":495,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["com",{"_index":619,"title":{},"body":{"index.html":{}}}],["compare",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["compare(currentpassword",{"_index":551,"title":{},"body":{"injectables/UserService.html":{}}}],["compare(password",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["compared",{"_index":517,"title":{},"body":{"injectables/UserService.html":{}}}],["compares",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["configuration",{"_index":273,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["configurations",{"_index":667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connect",{"_index":400,"title":{},"body":{"injectables/PrismaService.html":{}}}],["connecting",{"_index":380,"title":{},"body":{"injectables/PrismaService.html":{}}}],["const",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{}}}],["constructor",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{},"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{}}}],["constructor(prisma",{"_index":506,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(private",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(reflector",{"_index":248,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["constructor(userservice",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{}}}],["consult",{"_index":657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contain",{"_index":175,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["content",{"_index":283,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["context",{"_index":258,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/PrismaInterceptor.html":{}}}],["context.getclass",{"_index":268,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":267,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["controller",{"_index":35,"title":{"controllers/AuthController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('user",{"_index":483,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":37,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":560,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":159,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":484,"title":{},"body":{"controllers/UserController.html":{}}}],["create(createuserdto",{"_index":448,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createdat",{"_index":419,"title":{},"body":{"classes/User.html":{}}}],["creates",{"_index":450,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":152,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["credentials.dto",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":307,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:11",{"_index":311,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["credentials.dto.ts:19",{"_index":312,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["crud",{"_index":445,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["current",{"_index":203,"title":{},"body":{"classes/DeleteUserDto.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/MissingPasswordUpdateError.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["currentpassword",{"_index":200,"title":{},"body":{"classes/DeleteUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["customdecorator",{"_index":658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d31fc56c",{"_index":432,"title":{},"body":{"classes/User.html":{}}}],["d6c24523",{"_index":288,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["dados",{"_index":618,"title":{},"body":{"index.html":{}}}],["data",{"_index":278,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{}}}],["database",{"_index":381,"title":{},"body":{"injectables/PrismaService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["date",{"_index":422,"title":{},"body":{"classes/User.html":{}}}],["datestring",{"_index":424,"title":{},"body":{"classes/User.html":{}}}],["de",{"_index":617,"title":{},"body":{"index.html":{}}}],["decorator",{"_index":256,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["decorators",{"_index":49,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{}}}],["decrypted",{"_index":279,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["default",{"_index":346,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":53,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":199,"title":{},"body":{"classes/DeleteUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deletes",{"_index":462,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuserdto",{"_index":197,"title":{"classes/DeleteUserDto.html":{}},"body":{"classes/DeleteUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["deleteuserdto.currentpassword",{"_index":545,"title":{},"body":{"injectables/UserService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":252,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["desatualizado",{"_index":628,"title":{},"body":{"index.html":{}}}],["describes",{"_index":156,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["description",{"_index":39,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"properties.html":{}}}],["documentation",{"_index":561,"title":{},"body":{"coverage.html":{}}}],["doe",{"_index":193,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["doesn't",{"_index":532,"title":{},"body":{"injectables/UserService.html":{}}}],["dto/create",{"_index":475,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/delete",{"_index":476,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/login",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/login.response",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/update",{"_index":477,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e",{"_index":166,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailInUseError.html":{}}}],["email",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/LoginCredentialsDto.html":{},"injectables/PrismaInterceptor.html":{},"classes/User.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["emailinuseerror",{"_index":205,"title":{"classes/EmailInUseError.html":{}},"body":{"classes/EmailInUseError.html":{},"injectables/PrismaInterceptor.html":{},"coverage.html":{}}}],["enableshutdownhooks",{"_index":384,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":386,"title":{},"body":{"injectables/PrismaService.html":{}}}],["endpoint",{"_index":656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["endpoints",{"_index":42,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["enter",{"_index":326,"title":{},"body":{"classes/MissingPasswordUpdateError.html":{}}}],["entities/user",{"_index":479,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entities/user.entity",{"_index":185,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":554,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["enum",{"_index":359,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"dependencies.html":{}}}],["error",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaInterceptor.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["error.code",{"_index":366,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["errormeta",{"_index":354,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["errors",{"_index":334,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["errors/invalid",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["errors/missing",{"_index":536,"title":{},"body":{"injectables/UserService.html":{}}}],["estiver",{"_index":627,"title":{},"body":{"index.html":{}}}],["example",{"_index":186,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/variables.html":{}}}],["executar",{"_index":625,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":254,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/PrismaInterceptor.html":{}}}],["exists",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{}}}],["exports",{"_index":377,"title":{},"body":{"modules/PrismaModule.html":{},"modules/UserModule.html":{}}}],["exposes",{"_index":444,"title":{},"body":{"controllers/UserController.html":{}}}],["express",{"_index":473,"title":{},"body":{"controllers/UserController.html":{},"dependencies.html":{}}}],["extends",{"_index":216,"title":{},"body":{"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserDto.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{}}}],["extractjwt",{"_index":281,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":300,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjzdwiioii5nwfkmznhns0wyjk4ltq2odytyjfmms1hmtkwnzm0nwjmyzcilcjpyxqioje2ndg0nzu3mzesimv4cci6mty0odq3njyzmx0.h3z3jdvhoi6y5c_n0kt6tdp2nwk_dhbzxioqn7vanno",{"_index":319,"title":{},"body":{"classes/LoginResponse.html":{}}}],["false",{"_index":302,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["field",{"_index":353,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"classes/UpdateUserDto.html":{},"classes/UserWithoutPassword.html":{}}}],["fields",{"_index":157,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["file",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{}}}],["findbyemail",{"_index":503,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyemail(email",{"_index":509,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid",{"_index":446,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findbyid(@req",{"_index":486,"title":{},"body":{"controllers/UserController.html":{}}}],["findbyid(id",{"_index":513,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(request",{"_index":453,"title":{},"body":{"controllers/UserController.html":{}}}],["finds",{"_index":511,"title":{},"body":{"injectables/UserService.html":{}}}],["fire",{"_index":397,"title":{},"body":{"injectables/PrismaService.html":{}}}],["first",{"_index":402,"title":{},"body":{"injectables/PrismaService.html":{}}}],["forgot",{"_index":523,"title":{},"body":{"injectables/UserService.html":{}}}],["function",{"_index":573,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":605,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gets",{"_index":455,"title":{},"body":{"controllers/UserController.html":{}}}],["getting",{"_index":608,"title":{"index.html":{}},"body":{}}],["guards",{"_index":245,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["happened",{"_index":352,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["hash",{"_index":533,"title":{},"body":{"injectables/UserService.html":{}}}],["hash(createuserdto.password",{"_index":538,"title":{},"body":{"injectables/UserService.html":{}}}],["hash(updateuserdto.password",{"_index":549,"title":{},"body":{"injectables/UserService.html":{}}}],["hashed",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["hashedpassword",{"_index":537,"title":{},"body":{"injectables/UserService.html":{}}}],["hashifupdatingpassword",{"_index":504,"title":{},"body":{"injectables/UserService.html":{}}}],["hashifupdatingpassword(id",{"_index":518,"title":{},"body":{"injectables/UserService.html":{}}}],["here",{"_index":412,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["hooks",{"_index":396,"title":{},"body":{"injectables/PrismaService.html":{}}}],["http",{"_index":208,"title":{},"body":{"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/MissingPasswordUpdateError.html":{},"injectables/PrismaInterceptor.html":{}}}],["httpcode",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":490,"title":{},"body":{"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://docs.nestjs.com/guards",{"_index":246,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["https://docs.nestjs.com/interceptors",{"_index":336,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["https://docs.nestjs.com/recipes/prisma",{"_index":382,"title":{},"body":{"injectables/PrismaService.html":{}}}],["httpstatus",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["id",{"_index":287,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"classes/User.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{}}}],["identifier",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":301,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["implements",{"_index":160,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"classes/User.html":{}}}],["import",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{}}}],["imports",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":43,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":387,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{}}}],["information",{"_index":308,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"injectables/PrismaInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":102,"title":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{}}}],["injectables",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["inputs",{"_index":212,"title":{},"body":{"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/MissingPasswordUpdateError.html":{}}}],["inputted",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["instanceof",{"_index":364,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["instantiate",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["instantiates",{"_index":251,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["intercept",{"_index":337,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["intercept(context",{"_index":339,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["interceptor",{"_index":331,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["interceptors",{"_index":335,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["interface",{"_index":284,"title":{"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{}}}],["interfaces",{"_index":328,"title":{},"body":{"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"overview.html":{}}}],["interferes",{"_index":389,"title":{},"body":{"injectables/PrismaService.html":{}}}],["invalid",{"_index":227,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{}}}],["invalidemailorpassworderror",{"_index":135,"title":{"classes/InvalidEmailOrPasswordError.html":{}},"body":{"injectables/AuthService.html":{},"classes/InvalidEmailOrPasswordError.html":{},"coverage.html":{}}}],["invalidpasswordupdateerror",{"_index":229,"title":{"classes/InvalidPasswordUpdateError.html":{}},"body":{"classes/InvalidPasswordUpdateError.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["is_public_key",{"_index":262,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["iscorrectpassword",{"_index":550,"title":{},"body":{"injectables/UserService.html":{}}}],["isemail",{"_index":180,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail({message",{"_index":165,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemailconstraintviolation",{"_index":338,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["isemailconstraintviolation(errormeta",{"_index":348,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["isnotempty",{"_index":204,"title":{},"body":{"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty()@isstring",{"_index":310,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["isoptional",{"_index":181,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["ispasswordvalid",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispublic",{"_index":265,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":182,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":201,"title":{},"body":{"classes/DeleteUserDto.html":{}}}],["isstring()@isnotempty()@isoptional",{"_index":413,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isstring()@isoptional",{"_index":163,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@minlength(8",{"_index":170,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john",{"_index":192,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["jsonwebtoken",{"_index":272,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/variables.html":{}}}],["jwt",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":23,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconfig",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":299,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["jwtmodule",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register(jwtconfig",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":90,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"overview.html":{}}}],["lazily",{"_index":401,"title":{},"body":{"injectables/PrismaService.html":{}}}],["leave",{"_index":399,"title":{},"body":{"injectables/PrismaService.html":{}}}],["length",{"_index":172,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letter",{"_index":178,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["library",{"_index":238,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/variables.html":{}}}],["license",{"_index":646,"title":{},"body":{"properties.html":{}}}],["listens",{"_index":390,"title":{},"body":{"injectables/PrismaService.html":{}}}],["login",{"_index":46,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["login(email",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(undefined",{"_index":47,"title":{},"body":{"controllers/AuthController.html":{}}}],["logincredentialsdto",{"_index":48,"title":{"classes/LoginCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["loginresponse",{"_index":73,"title":{"classes/LoginResponse.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginResponse.html":{},"coverage.html":{}}}],["logs",{"_index":51,"title":{},"body":{"controllers/AuthController.html":{}}}],["mail",{"_index":167,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailInUseError.html":{}}}],["mainly",{"_index":512,"title":{},"body":{"injectables/UserService.html":{}}}],["mais",{"_index":621,"title":{},"body":{"index.html":{}}}],["makes",{"_index":660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["managing",{"_index":500,"title":{},"body":{"injectables/UserService.html":{}}}],["matches",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":191,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":171,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/MissingPasswordUpdateError.html":{}}}],["metadata",{"_index":596,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":44,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["migrate:test",{"_index":630,"title":{},"body":{"index.html":{}}}],["migrations",{"_index":620,"title":{},"body":{"index.html":{}}}],["minlength",{"_index":183,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":189,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":604,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missingpasswordupdateerror",{"_index":320,"title":{"classes/MissingPasswordUpdateError.html":{}},"body":{"classes/MissingPasswordUpdateError.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":243,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/PrismaInterceptor.html":{}}}],["name",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["need",{"_index":257,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["needed",{"_index":158,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateError.html":{}}}],["needs",{"_index":242,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["nestinterceptor",{"_index":355,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["nestjs",{"_index":244,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{}}}],["nestjs/common",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserWithoutPassword.html":{},"dependencies.html":{}}}],["new",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/MissingPasswordUpdateError.html":{},"injectables/PrismaInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["next",{"_index":340,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["next.handle().pipe",{"_index":362,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["note",{"_index":410,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["number",{"_index":177,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["o",{"_index":615,"title":{},"body":{"index.html":{}}}],["object",{"_index":349,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"miscellaneous/variables.html":{}}}],["object.values(errormeta)[0][0",{"_index":371,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["observable",{"_index":260,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/PrismaInterceptor.html":{}}}],["omitting",{"_index":556,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["omittype",{"_index":557,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["omittype(user",{"_index":559,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["one",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["onmoduleinit",{"_index":385,"title":{},"body":{"injectables/PrismaService.html":{}}}],["optional",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["orm",{"_index":333,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{}}}],["os",{"_index":613,"title":{},"body":{"index.html":{}}}],["out",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":639,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":580,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["para",{"_index":611,"title":{},"body":{"index.html":{}}}],["parameters",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["partial",{"_index":411,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype",{"_index":415,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":417,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":237,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":280,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["passportstrategy(strategy",{"_index":298,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["password",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateError.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["password.entity",{"_index":480,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["password.entity.ts",{"_index":553,"title":{},"body":{"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["password.error",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["password.error..ts",{"_index":222,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"coverage.html":{}}}],["password.error..ts:7",{"_index":226,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{}}}],["patch",{"_index":470,"title":{},"body":{"controllers/UserController.html":{}}}],["payload",{"_index":141,"title":{"interfaces/Payload.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{}}}],["payload.sub",{"_index":305,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["please",{"_index":325,"title":{},"body":{"classes/MissingPasswordUpdateError.html":{}}}],["post",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["post('login",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["precisa",{"_index":624,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":443,"title":{},"body":{"controllers/UserController.html":{}}}],["prisma",{"_index":332,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma.service",{"_index":378,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.useruncheckedcreateinput",{"_index":431,"title":{},"body":{"classes/User.html":{}}}],["prisma/client",{"_index":403,"title":{},"body":{"injectables/PrismaService.html":{},"classes/User.html":{},"dependencies.html":{}}}],["prisma/client/runtime",{"_index":357,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["prisma/prisma.module",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":383,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientknownrequesterror",{"_index":356,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["prismaerror",{"_index":358,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["prismaerror.uniqueconstraintviolation",{"_index":368,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["prismainterceptor",{"_index":329,"title":{"injectables/PrismaInterceptor.html":{}},"body":{"injectables/PrismaInterceptor.html":{},"coverage.html":{}}}],["prismamodule",{"_index":8,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":375,"title":{"injectables/PrismaService.html":{}},"body":{"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaInterceptor.html":{},"injectables/UserService.html":{}}}],["probably",{"_index":522,"title":{},"body":{"injectables/UserService.html":{}}}],["process.env.jwt_secret",{"_index":304,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/variables.html":{}}}],["process.exit",{"_index":394,"title":{},"body":{"injectables/PrismaService.html":{}}}],["profile",{"_index":459,"title":{},"body":{"controllers/UserController.html":{}}}],["profile'})@apibearerauth()@get",{"_index":457,"title":{},"body":{"controllers/UserController.html":{}}}],["promise",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":161,"title":{"properties.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/ValidateReturn.html":{},"properties.html":{}}}],["provide",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@apioperation({summary",{"_index":449,"title":{},"body":{"controllers/UserController.html":{}}}],["public.decorator",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["readonly",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["received",{"_index":315,"title":{},"body":{"classes/LoginResponse.html":{}}}],["recentes",{"_index":622,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":595,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":249,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["registered",{"_index":214,"title":{},"body":{"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{}}}],["related",{"_index":465,"title":{},"body":{"controllers/UserController.html":{}}}],["remove",{"_index":447,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(id",{"_index":525,"title":{},"body":{"injectables/UserService.html":{}}}],["remove(request",{"_index":461,"title":{},"body":{"controllers/UserController.html":{}}}],["removes",{"_index":527,"title":{},"body":{"injectables/UserService.html":{}}}],["replacing",{"_index":521,"title":{},"body":{"injectables/UserService.html":{}}}],["req",{"_index":471,"title":{},"body":{"controllers/UserController.html":{}}}],["request",{"_index":454,"title":{},"body":{"controllers/UserController.html":{}}}],["request.user['userid",{"_index":487,"title":{},"body":{"controllers/UserController.html":{}}}],["requests",{"_index":515,"title":{},"body":{"injectables/UserService.html":{}}}],["reset",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["respective",{"_index":344,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["response",{"_index":314,"title":{},"body":{"classes/LoginResponse.html":{}}}],["responsible",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["results",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{}}}],["returned",{"_index":293,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["returns",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":598,"title":{},"body":{"dependencies.html":{}}}],["rodar",{"_index":612,"title":{},"body":{"index.html":{}}}],["route",{"_index":241,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"classes/LoginResponse.html":{}}}],["rxjs",{"_index":261,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/PrismaInterceptor.html":{},"dependencies.html":{}}}],["s",{"_index":623,"title":{},"body":{"index.html":{}}}],["same",{"_index":555,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["saved",{"_index":520,"title":{},"body":{"injectables/UserService.html":{}}}],["se",{"_index":626,"title":{},"body":{"index.html":{}}}],["secret",{"_index":663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":303,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["setmetadata(is_public_key",{"_index":659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shutdown",{"_index":391,"title":{},"body":{"injectables/PrismaService.html":{}}}],["signals",{"_index":392,"title":{},"body":{"injectables/PrismaService.html":{}}}],["signoptions",{"_index":664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{}}}],["src/.../jwt.config.ts",{"_index":652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":606,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../public.decorator.ts",{"_index":651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":16,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":38,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:19",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:10",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:26",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:44",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/login",{"_index":306,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.response.ts",{"_index":313,"title":{},"body":{"classes/LoginResponse.html":{},"coverage.html":{}}}],["src/auth/dto/login.response.ts:7",{"_index":318,"title":{},"body":{"classes/LoginResponse.html":{}}}],["src/auth/errors/invalid",{"_index":221,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"coverage.html":{}}}],["src/auth/jwt",{"_index":234,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":271,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:23",{"_index":275,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:34",{"_index":277,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/public.decorator",{"_index":474,"title":{},"body":{"controllers/UserController.html":{}}}],["src/auth/public.decorator.ts",{"_index":568,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/jwt.config",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/config/jwt.config.ts",{"_index":571,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/errors/email",{"_index":206,"title":{},"body":{"classes/EmailInUseError.html":{},"injectables/PrismaInterceptor.html":{},"coverage.html":{}}}],["src/interceptors/prisma.interceptor.ts",{"_index":330,"title":{},"body":{"injectables/PrismaInterceptor.html":{},"coverage.html":{}}}],["src/interceptors/prisma.interceptor.ts:24",{"_index":342,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["src/interceptors/prisma.interceptor.ts:47",{"_index":350,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["src/main.ts",{"_index":572,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma/prisma.module",{"_index":497,"title":{},"body":{"modules/UserModule.html":{}}}],["src/prisma/prisma.module.ts",{"_index":376,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":534,"title":{},"body":{"injectables/UserService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":379,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:15",{"_index":398,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:25",{"_index":388,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/user/dto/create",{"_index":154,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/delete",{"_index":198,"title":{},"body":{"classes/DeleteUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":408,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/entities/user",{"_index":552,"title":{},"body":{"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["src/user/entities/user.entity",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/user/entities/user.entity.ts",{"_index":418,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:15",{"_index":425,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:21",{"_index":429,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:27",{"_index":428,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:33",{"_index":421,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:39",{"_index":423,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:45",{"_index":430,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:9",{"_index":426,"title":{},"body":{"classes/User.html":{}}}],["src/user/errors/invalid",{"_index":230,"title":{},"body":{"classes/InvalidPasswordUpdateError.html":{},"coverage.html":{}}}],["src/user/errors/missing",{"_index":321,"title":{},"body":{"classes/MissingPasswordUpdateError.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":442,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:35",{"_index":452,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:43",{"_index":458,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:53",{"_index":469,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:67",{"_index":464,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":94,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/user/user.module.ts",{"_index":496,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/user/user.service.ts",{"_index":499,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:112",{"_index":531,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:16",{"_index":507,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:25",{"_index":508,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:40",{"_index":514,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:52",{"_index":510,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:57",{"_index":529,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:74",{"_index":526,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:87",{"_index":519,"title":{},"body":{"injectables/UserService.html":{}}}],["started",{"_index":609,"title":{"index.html":{}},"body":{}}],["starts",{"_index":607,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statements",{"_index":563,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":209,"title":{},"body":{"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/MissingPasswordUpdateError.html":{}}}],["strategy",{"_index":282,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["street",{"_index":195,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["string",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/variables.html":{}}}],["studio:test",{"_index":634,"title":{},"body":{"index.html":{}}}],["sub",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["subject",{"_index":286,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["successfully",{"_index":316,"title":{},"body":{"classes/LoginResponse.html":{}}}],["summary",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":264,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["super('e",{"_index":220,"title":{},"body":{"classes/EmailInUseError.html":{}}}],["super('invalid",{"_index":228,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{}}}],["super('please",{"_index":327,"title":{},"body":{"classes/MissingPasswordUpdateError.html":{}}}],["super.canactivate(context",{"_index":270,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":636,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":637,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":601,"title":{},"body":{"dependencies.html":{}}}],["switch",{"_index":365,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["system",{"_index":215,"title":{},"body":{"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"controllers/UserController.html":{}}}],["table",{"_index":579,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":578,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":631,"title":{},"body":{"index.html":{}}}],["teste",{"_index":633,"title":{},"body":{"index.html":{}}}],["testes",{"_index":610,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":404,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":405,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.authservice.login(email",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.hashifupdatingpassword(id",{"_index":542,"title":{},"body":{"injectables/UserService.html":{}}}],["this.isemailconstraintviolation(error.meta",{"_index":369,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["this.jwtservice.sign(payload",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.user.create",{"_index":540,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.delete",{"_index":546,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":541,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":543,"title":{},"body":{"injectables/UserService.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":266,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.userservice.create(createuserdto",{"_index":485,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyemail(email",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyid(userid",{"_index":488,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(userid",{"_index":491,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(userid",{"_index":489,"title":{},"body":{"controllers/UserController.html":{}}}],["this.validatecurrentpassword(id",{"_index":544,"title":{},"body":{"injectables/UserService.html":{}}}],["this.validateuser(email",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaInterceptor.html":{},"injectables/UserService.html":{}}}],["thrown",{"_index":524,"title":{},"body":{"injectables/UserService.html":{}}}],["throws",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"classes/MissingPasswordUpdateError.html":{},"injectables/PrismaInterceptor.html":{}}}],["token",{"_index":285,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["transformer",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":269,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["trying",{"_index":232,"title":{},"body":{"classes/InvalidPasswordUpdateError.html":{}}}],["type",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"injectables/PrismaInterceptor.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["ui",{"_index":602,"title":{},"body":{"dependencies.html":{}}}],["unauthenticated",{"_index":662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":225,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{}}}],["undefined",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["unlicensed",{"_index":647,"title":{},"body":{"properties.html":{}}}],["updatable",{"_index":409,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["update",{"_index":323,"title":{},"body":{"classes/MissingPasswordUpdateError.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(id",{"_index":528,"title":{},"body":{"injectables/UserService.html":{}}}],["update(request",{"_index":466,"title":{},"body":{"controllers/UserController.html":{}}}],["update.error",{"_index":535,"title":{},"body":{"injectables/UserService.html":{}}}],["update.error.ts",{"_index":231,"title":{},"body":{"classes/InvalidPasswordUpdateError.html":{},"classes/MissingPasswordUpdateError.html":{},"coverage.html":{}}}],["update.error.ts:6",{"_index":233,"title":{},"body":{"classes/InvalidPasswordUpdateError.html":{}}}],["update.error.ts:7",{"_index":324,"title":{},"body":{"classes/MissingPasswordUpdateError.html":{}}}],["updatedat",{"_index":420,"title":{},"body":{"classes/User.html":{}}}],["updates",{"_index":467,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserdto",{"_index":407,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserdto.currentpassword",{"_index":548,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto.password",{"_index":547,"title":{},"body":{"injectables/UserService.html":{}}}],["use",{"_index":219,"title":{},"body":{"classes/EmailInUseError.html":{}}}],["use.error",{"_index":361,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["use.error.ts",{"_index":207,"title":{},"body":{"classes/EmailInUseError.html":{},"coverage.html":{}}}],["use.error.ts:6",{"_index":218,"title":{},"body":{"classes/EmailInUseError.html":{}}}],["useclass",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":211,"title":{},"body":{"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtStrategy.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":40,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateError.html":{},"interfaces/Payload.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":456,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@apibearerauth()@delete()@httpcode(httpstatus.no_content",{"_index":463,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@apibearerauth()@patch",{"_index":468,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@post",{"_index":451,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@public()@post('login')@httpcode(httpstatus.ok",{"_index":52,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.controller",{"_index":498,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":416,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":155,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":202,"title":{},"body":{"classes/DeleteUserDto.html":{}}}],["user.dto.ts:17",{"_index":168,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":414,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:28",{"_index":179,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":169,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:44",{"_index":164,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":558,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["user.id",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.service",{"_index":481,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["user@example.com",{"_index":187,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/User.html":{}}}],["usercontroller",{"_index":441,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":297,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"controllers/UserController.html":{},"interfaces/ValidateReturn.html":{}}}],["usermodule",{"_index":9,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["users",{"_index":501,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":111,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userwithoutpassword",{"_index":478,"title":{"classes/UserWithoutPassword.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["uses",{"_index":236,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/PrismaInterceptor.html":{}}}],["uuid",{"_index":427,"title":{},"body":{"classes/User.html":{}}}],["validate",{"_index":274,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":276,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["validatecurrentpassword",{"_index":505,"title":{},"body":{"injectables/UserService.html":{}}}],["validatecurrentpassword(id",{"_index":530,"title":{},"body":{"injectables/UserService.html":{}}}],["validated",{"_index":295,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["validatereturn",{"_index":296,"title":{"interfaces/ValidateReturn.html":{}},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{}}}],["validates",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["validateuser",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":184,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":569,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":650,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["ver",{"_index":632,"title":{},"body":{"index.html":{}}}],["verify",{"_index":654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":644,"title":{},"body":{"properties.html":{}}}],["wether",{"_index":351,"title":{},"body":{"injectables/PrismaInterceptor.html":{}}}],["without",{"_index":460,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["won't",{"_index":516,"title":{},"body":{"injectables/UserService.html":{}}}],["world",{"_index":194,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["wrong",{"_index":224,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateError.html":{}}}],["yarn",{"_index":629,"title":{},"body":{"index.html":{}}}],["z",{"_index":174,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthModule } from './auth/auth.module';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { UserModule } from './user/user.module';\n\n@Module({\n  imports: [UserModule, AuthModule, PrismaModule],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                User authentication endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(undefined: LoginCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Logs in user'})@Public()@Post('login')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:19\n                \n            \n\n\n            \n                \n                    Authenticates the User\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { LoginCredentialsDto } from './dto/login-credentials.dto';\nimport { LoginResponse } from './dto/login.response';\nimport { Public } from './public.decorator';\n\n/** User authentication endpoints */\n@ApiTags('authentication')\n@Controller()\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  /** Authenticates the User */\n  @ApiOperation({ summary: 'Logs in user' })\n  @Public()\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  async login(\n    @Body() { email, password }: LoginCredentialsDto,\n  ): Promise {\n    return this.authService.login(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { UserModule } from 'src/user/user.module';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './jwt.strategy';\nimport { jwtConfig } from 'src/config/jwt.config';\n\n@Module({\n  imports: [UserModule, PassportModule, JwtModule.register(jwtConfig)],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for authenticating the user\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Private\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            Responsible for authenticating the user\nInstantiate the class and the UserService and\nJwtService dependencies\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:26\n                \n            \n\n\n            \n                \n                    Validates if the inputted email exists and\ncompares if the hashed password matches the inputted one.\nIf so, returns the JWT accessToken\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:44\n                \n            \n\n\n            \n                \n                    Validates if the inputted email exists and\ncompares if the hashed password matches the inputted one.\nIf not, throws an error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { compare } from 'bcrypt';\nimport { User } from 'src/user/entities/user.entity';\nimport { UserService } from 'src/user/user.service';\nimport { InvalidEmailOrPasswordError } from './errors/invalid-email-or-password.error.';\n\n/** Responsible for authenticating the user */\n@Injectable()\nexport class AuthService {\n  /** Responsible for authenticating the user\n   *\n   * Instantiate the class and the UserService and\n   * JwtService dependencies\n   */\n  constructor(\n    private readonly userService: UserService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  /** Validates if the inputted email exists and\n   * compares if the hashed password matches the inputted one.\n   *\n   * If so, returns the JWT accessToken\n   */\n  async login(\n    email: string,\n    password: string,\n  ): Promise {\n    const user = await this.validateUser(email, password);\n\n    const payload = { sub: user.id };\n\n    return {\n      accessToken: this.jwtService.sign(payload),\n    };\n  }\n\n  /** Validates if the inputted email exists and\n   * compares if the hashed password matches the inputted one.\n   *\n   * If not, throws an error\n   */\n  private async validateUser(email: string, password: string): Promise {\n    const user = await this.userService.findByEmail(email);\n\n    if (user) {\n      const isPasswordValid = await compare(password, user.password);\n\n      if (isPasswordValid) {\n        return { ...user, password: undefined };\n      }\n    }\n\n    throw new InvalidEmailOrPasswordError();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create an User\n\n            \n\n\n            \n                Implements\n            \n            \n                            User\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:44\n                        \n                    \n\n            \n                \n                    User address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({message: 'Must be an e-mail'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:17\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:36\n                        \n                    \n\n            \n                \n                    User name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8, {message: 'Password must have length of at least 8'})@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[a-z]).*$/, {message: 'Password must contain at least 1 number and 1 letter'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:28\n                        \n                    \n\n            \n                \n                    User password must contain at least 1 number and 1 letter\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\nimport { User } from '../entities/user.entity';\n\n/** Describes the fields needed to create an User */\nexport class CreateUserDto implements User {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsEmail({ message: 'Must be an e-mail' })\n  email: string;\n\n  /**\n   * User password must contain at least 1 number and 1 letter\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @MinLength(8, { message: 'Password must have length of at least 8' })\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[a-z]).*$/, {\n    message: 'Password must contain at least 1 number and 1 letter',\n  })\n  password: string;\n\n  /**\n   * User name\n   * @example \"John Doe\"\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  /**\n   * User address\n   * @example \"World Street 0\"\n   */\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserDto.html":{"url":"classes/DeleteUserDto.html","title":"class - DeleteUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/delete-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to delete an User\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/delete-user.dto.ts:11\n                        \n                    \n\n            \n                \n                    User current password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/** Describes the fields needed to delete an User */\nexport class DeleteUserDto {\n  /**\n   * User current password\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  currentPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailInUseError.html":{"url":"classes/EmailInUseError.html","title":"class - EmailInUseError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailInUseError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/errors/email-in-use.error.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\nan email that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/errors/email-in-use.error.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'E-mail already in use'. Used when the user inputs\nan email that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * an email that is already registered in the system\n */\nexport class EmailInUseError extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'E-mail already in use'. Used when the user inputs\n   * an email that is already registered in the system\n   */\n  constructor() {\n    super('E-mail already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidEmailOrPasswordError.html":{"url":"classes/InvalidEmailOrPasswordError.html","title":"class - InvalidEmailOrPasswordError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidEmailOrPasswordError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/errors/invalid-email-or-password.error..ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 401. Used when the user inputs\nan email that is not registered in the system\nor the wrong password for a registered email\n\n            \n\n            \n                Extends\n            \n            \n                    UnauthorizedException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/errors/invalid-email-or-password.error..ts:7\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 401 with message 'Invalid email or password'.\nUsed when the user inputs an email that is not registered\nin the system or the wrong password for a registered email\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UnauthorizedException } from '@nestjs/common';\n\n/** Throws HTTP status 401. Used when the user inputs\n * an email that is not registered in the system\n * or the wrong password for a registered email\n */\nexport class InvalidEmailOrPasswordError extends UnauthorizedException {\n  /** Throws HTTP status 401 with message 'Invalid email or password'.\n   * Used when the user inputs an email that is not registered\n   * in the system or the wrong password for a registered email\n   */\n  constructor() {\n    super('Invalid email or password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidPasswordUpdateError.html":{"url":"classes/InvalidPasswordUpdateError.html","title":"class - InvalidPasswordUpdateError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidPasswordUpdateError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/errors/invalid-password-update.error.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs the wrong\ncurrent password when trying to create a new password\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/user/errors/invalid-password-update.error.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message 'Invalid current password'.\nUsed when the user inputs the wrong current password when\ntrying to create a new password\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs the wrong\n * current password when trying to create a new password\n */\nexport class InvalidPasswordUpdateError extends BadRequestException {\n  /** Throws HTTP status 400 with message 'Invalid current password'.\n   * Used when the user inputs the wrong current password when\n   * trying to create a new password\n   */\n  constructor() {\n    super('Invalid current password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Uses the passport library AuthGuard to check\nif the route needs authentication\nFor more on NestJs Guards: https://docs.nestjs.com/guards\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-auth.guard.ts:13\n                            \n                        \n\n                \n                    \n                            Uses the passport library AuthGuard to check\nif the route needs authentication\nFor more on NestJs Guards: https://docs.nestjs.com/guards\nInstantiates the class and the Reflector dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:28\n                \n            \n\n\n            \n                \n                    If the route uses the Public decorator it\ndoes not need authentication, else it does\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Observable } from 'rxjs';\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n/** Uses the passport library AuthGuard to check\n * if the route needs authentication\n *\n * For more on NestJs Guards: https://docs.nestjs.com/guards\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  /** Uses the passport library AuthGuard to check\n   * if the route needs authentication\n   *\n   * For more on NestJs Guards: https://docs.nestjs.com/guards\n   *\n   * Instantiates the class and the Reflector dependency\n   */\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  /** If the route uses the Public decorator it\n   * does not need authentication, else it does\n   */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Passport library JsonWebToken configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:23\n                            \n                        \n\n                \n                    \n                            Passport library JsonWebToken configuration\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: Payload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:34\n                \n            \n\n\n            \n                \n                    Validates and returns data after JsonWebToken is decrypted\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                Payload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\n/** Decrypted JsonWebToken content */\ninterface Payload {\n  /** Token subject, user ID used\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  sub: string;\n}\n\n/** What is returned to the application after JsonWebToken is validated */\ninterface ValidateReturn {\n  /** User ID\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  userId: string;\n}\n\n/** Passport library JsonWebToken configuration */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /** Passport library JsonWebToken configuration */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  /** Validates and returns data after JsonWebToken is decrypted */\n  async validate(payload: Payload): Promise {\n    return {\n      userId: payload.sub,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginCredentialsDto.html":{"url":"classes/LoginCredentialsDto.html","title":"class - LoginCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-credentials.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to authenticate an User to the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-credentials.dto.ts:11\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-credentials.dto.ts:19\n                        \n                    \n\n            \n                \n                    User password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/** Describes the information needed to authenticate an User to the application */\nexport class LoginCredentialsDto {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  email: string;\n\n  /**\n   * User password\n   * @example \"abc123456\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginResponse.html":{"url":"classes/LoginResponse.html","title":"class - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.response.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the response received when the Login route is successfully called\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.response.ts:7\n                        \n                    \n\n            \n                \n                    JWT Authentication token\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LoginResponse {\n  /**\n   * JWT Authentication token\n   * @example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5NWFkMzNhNS0wYjk4LTQ2ODYtYjFmMS1hMTkwNzM0NWJmYzciLCJpYXQiOjE2NDg0NzU3MzEsImV4cCI6MTY0ODQ3NjYzMX0.h3z3JDvHOi6y5C_N0Kt6tdP2nWK_dHBZxioQn7VANNo\"\n   */\n  accessToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MissingPasswordUpdateError.html":{"url":"classes/MissingPasswordUpdateError.html","title":"class - MissingPasswordUpdateError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MissingPasswordUpdateError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/errors/missing-password-update.error.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs only the\ncurrent password or the new password, but both are needed to\nupdate the password\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/user/errors/missing-password-update.error.ts:7\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'Please enter both new password and current password'.\nUsed when the user inputs only the current password or\nthe new password, but both are needed to update the password\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs only the\n * current password or the new password, but both are needed to\n * update the password\n */\nexport class MissingPasswordUpdateError extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'Please enter both new password and current password'.\n   * Used when the user inputs only the current password or\n   * the new password, but both are needed to update the password\n   */\n  constructor() {\n    super('Please enter both new password and current password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Payload.html":{"url":"interfaces/Payload.html","title":"interface - Payload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Payload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Decrypted JsonWebToken content\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Token subject, user ID used\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\n/** Decrypted JsonWebToken content */\ninterface Payload {\n  /** Token subject, user ID used\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  sub: string;\n}\n\n/** What is returned to the application after JsonWebToken is validated */\ninterface ValidateReturn {\n  /** User ID\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  userId: string;\n}\n\n/** Passport library JsonWebToken configuration */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /** Passport library JsonWebToken configuration */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  /** Validates and returns data after JsonWebToken is decrypted */\n  async validate(payload: Payload): Promise {\n    return {\n      userId: payload.sub,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaInterceptor.html":{"url":"injectables/PrismaInterceptor.html","title":"injectable - PrismaInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/prisma.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for Prisma ORM errors\nFor more about NestJs interceptors: https://docs.nestjs.com/interceptors\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                isEmailConstraintViolation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler<>)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/prisma.interceptor.ts:24\n                \n            \n\n\n            \n                \n                    Catches Prisma ORM errors and throws the\nrespective app HTTP error\nUses default NestJs boilerplate, for more\ninformation: https://docs.nestjs.com/interceptors\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler<>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isEmailConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isEmailConstraintViolation(errorMeta: object)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/prisma.interceptor.ts:47\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the email field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorMeta\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { PrismaClientKnownRequestError } from '@prisma/client/runtime';\nimport { PrismaError } from 'prisma-error-enum';\nimport { catchError, Observable } from 'rxjs';\nimport { EmailInUseError } from 'src/errors/email-in-use.error';\n\n/** Interceptor for Prisma ORM errors\n *\n * For more about NestJs interceptors: https://docs.nestjs.com/interceptors\n */\n@Injectable()\nexport class PrismaInterceptor implements NestInterceptor {\n  /** Catches Prisma ORM errors and throws the\n   * respective app HTTP error\n   *\n   * Uses default NestJs boilerplate, for more\n   * information: https://docs.nestjs.com/interceptors\n   */\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | Promise> {\n    return next.handle().pipe(\n      catchError((error) => {\n        if (error instanceof PrismaClientKnownRequestError) {\n          switch (error.code) {\n            case PrismaError.UniqueConstraintViolation:\n              if (this.isEmailConstraintViolation(error.meta)) {\n                throw new EmailInUseError();\n              }\n              break;\n            default:\n              throw error;\n          }\n        }\n        throw error;\n      }),\n    );\n  }\n\n  /** Returns wether the error happened in the email field or not */\n  private isEmailConstraintViolation(errorMeta: object): boolean {\n    return Object.values(errorMeta)[0][0] === 'email';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_PrismaModule_exports\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n            \n                Description\n            \n            \n                ORM responsible for connecting to the database\nBoilerplate from https://docs.nestjs.com/recipes/prisma\n\n            \n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:25\n                \n            \n\n\n            \n                \n                    Prisma interferes with NestJS enableShutdownHooks.\nPrisma listens for shutdown signals and will call process.exit()\nbefore your application shutdown hooks fire.\nhttps://docs.nestjs.com/recipes/prisma\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:15\n                \n            \n\n\n            \n                \n                    Optional — if you leave it out,\nPrisma will connect lazily on its first call to the database.\nhttps://docs.nestjs.com/recipes/prisma\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n/** ORM responsible for connecting to the database\n *\n * Boilerplate from https://docs.nestjs.com/recipes/prisma\n */\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  /** Optional — if you leave it out,\n   * Prisma will connect lazily on its first call to the database.\n   *\n   * https://docs.nestjs.com/recipes/prisma\n   */\n  async onModuleInit(): Promise {\n    await this.$connect();\n  }\n\n  /** Prisma interferes with NestJS enableShutdownHooks.\n   * Prisma listens for shutdown signals and will call process.exit()\n   * before your application shutdown hooks fire.\n   *\n   * https://docs.nestjs.com/recipes/prisma\n   */\n  async enableShutdownHooks(app: INestApplication): Promise {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the User fields that are updatable\nNote that since this is a\nPartial of CreateUserDto,\nany field there is optional here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                currentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/update-user.dto.ts:19\n                        \n                    \n\n            \n                \n                    User current password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\n\n/** Describes the User fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateUserDto,\n * any field there is optional here\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n  /**\n   * User current password\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  currentPassword?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of an User in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:33\n                        \n                    \n\n            \n                \n                    User address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:39\n                        \n                    \n\n            \n                \n                    User createdAt dateString\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:15\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:9\n                        \n                    \n\n            \n                \n                    User ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:27\n                        \n                    \n\n            \n                \n                    User name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:21\n                        \n                    \n\n            \n                \n                    User password\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:45\n                        \n                    \n\n            \n                \n                    User updatedAt dateString\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\n/** Describes the properties of an User in the database */\nexport class User implements Prisma.UserUncheckedCreateInput {\n  /**\n   * User ID as UUID\n   * @example \"d31fc56c-7aed-441e-9f7f-151be8d85634\"\n   */\n  id?: string;\n\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  email: string;\n\n  /**\n   * User password\n   * @example \"$2b$10$1XpzUYu8FuvuaBb3SC0xzuR9DX7KakbMLt0vLNoZ.UnLntDMFc4LK\"\n   */\n  password: string;\n\n  /**\n   * User name\n   * @example \"John Doe\"\n   */\n  name?: string;\n\n  /**\n   * User address\n   * @example \"World Street 0\"\n   */\n  address?: string;\n\n  /**\n   * User createdAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  createdAt?: string | Date;\n\n  /**\n   * User updatedAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  updatedAt?: string | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                Exposes user CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@ApiOperation({summary: 'Creates a new user'})@Post()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:35\n                \n            \n\n\n            \n                \n                    Creates a new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Gets user's own profile'})@ApiBearerAuth()@Get()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:43\n                \n            \n\n\n            \n                \n                    Returns user's own profile information without password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(request: Request, deleteUserDto: DeleteUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes user'})@ApiBearerAuth()@Delete()@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:67\n                \n            \n\n\n            \n                \n                    Deletes user and all user related information from the system\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    deleteUserDto\n                                    \n                                                DeleteUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(request: Request, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates user'})@ApiBearerAuth()@Patch()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:53\n                \n            \n\n\n            \n                \n                    Updates user information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Patch,\n  Post,\n  Req,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { Public } from 'src/auth/public.decorator';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { DeleteUserDto } from './dto/delete-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserWithoutPassword } from './entities/user-without-password.entity';\nimport { UserService } from './user.service';\n\n/** Exposes user CRUD endpoints */\n@ApiTags('user')\n@Controller('user')\nexport class UserController {\n  /** Exposes user CRUD endpoints\n   *\n   * Instantiate class and UserService dependency\n   */\n  constructor(private readonly userService: UserService) {}\n\n  /** Creates a new user */\n  @Public()\n  @ApiOperation({ summary: 'Creates a new user' })\n  @Post()\n  create(@Body() createUserDto: CreateUserDto): Promise {\n    return this.userService.create(createUserDto);\n  }\n\n  /** Returns user's own profile information without password */\n  @ApiOperation({ summary: \"Gets user's own profile\" })\n  @ApiBearerAuth()\n  @Get()\n  async findById(@Req() request: Request): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.findById(userId);\n  }\n\n  /** Updates user information */\n  @ApiOperation({ summary: 'Updates user' })\n  @ApiBearerAuth()\n  @Patch()\n  update(\n    @Req() request: Request,\n    @Body() updateUserDto: UpdateUserDto,\n  ): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.update(userId, updateUserDto);\n  }\n\n  /** Deletes user and all user related information from the system */\n  @ApiOperation({ summary: 'Deletes user' })\n  @ApiBearerAuth()\n  @Delete()\n  @HttpCode(HttpStatus.NO_CONTENT)\n  remove(\n    @Req() request: Request,\n    @Body() deleteUserDto: DeleteUserDto,\n  ): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.remove(userId, deleteUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  controllers: [UserController],\n  providers: [UserService],\n  imports: [PrismaModule],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing users in the database.\nCRUD endpoints are available for users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Private\n                                    Async\n                                hashIfUpdatingPassword\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Private\n                                    Async\n                                validateCurrentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:16\n                            \n                        \n\n                \n                    \n                            Responsible for managing users in the database.\nCRUD endpoints are available for users.\nInstantiate the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:25\n                \n            \n\n\n            \n                \n                    Creates a new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:52\n                \n            \n\n\n            \n                \n                    Finds user by email and returns the user with password.\nUsed mainly in login to compare if the inputted password matches\nthe hashed one.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:40\n                \n            \n\n\n            \n                \n                    Finds user by id and returns the user without password.\nUsed for default in app requests where the hashed password\nwon't be compared\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        hashIfUpdatingPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashIfUpdatingPassword(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:87\n                \n            \n\n\n            \n                \n                    If the user inputted both new password and current password\nthe new password is hashed to be saved in the database replacing\nthe current one.\nIf only the new password or current password were inputted the user\nprobably forgot about the other one and an error is thrown\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string, deleteUserDto: DeleteUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:74\n                \n            \n\n\n            \n                \n                    Removes user from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    deleteUserDto\n                                    \n                                                DeleteUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:57\n                \n            \n\n\n            \n                \n                    Updates user information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateCurrentPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateCurrentPassword(id: string, currentPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:112\n                \n            \n\n\n            \n                \n                    Compares if the inputted current password matches the\nuser hashed password saved in the database\nIf it doesn't, an error is thrown\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { compare, hash } from 'bcrypt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { DeleteUserDto } from './dto/delete-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserWithoutPassword } from './entities/user-without-password.entity';\nimport { User } from './entities/user.entity';\nimport { InvalidPasswordUpdateError } from './errors/invalid-password-update.error';\nimport { MissingPasswordUpdateError } from './errors/missing-password-update.error';\n\n/** Responsible for managing users in the database.\n * CRUD endpoints are available for users.\n */\n@Injectable()\nexport class UserService {\n  /** Responsible for managing users in the database.\n   * CRUD endpoints are available for users.\n   *\n   * Instantiate the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new user */\n  async create(createUserDto: CreateUserDto): Promise {\n    const hashedPassword = await hash(createUserDto.password, 10);\n\n    await this.prisma.user.create({\n      data: {\n        ...createUserDto,\n        password: hashedPassword,\n      },\n    });\n  }\n\n  /** Finds user by id and returns the user without password.\n   * Used for default in app requests where the hashed password\n   * won't be compared\n   */\n  async findById(id: string): Promise {\n    const user = await this.prisma.user.findUnique({ where: { id } });\n\n    delete user.password;\n\n    return { ...user };\n  }\n\n  /** Finds user by email and returns the user with password.\n   * Used mainly in login to compare if the inputted password matches\n   * the hashed one.\n   */\n  async findByEmail(email: string): Promise {\n    return this.prisma.user.findUnique({ where: { email } });\n  }\n\n  /** Updates user information */\n  async update(\n    id: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    await this.hashIfUpdatingPassword(id, updateUserDto);\n\n    const user = await this.prisma.user.update({\n      where: { id },\n      data: { ...updateUserDto },\n    });\n\n    delete user.password;\n\n    return { ...user };\n  }\n\n  /** Removes user from database */\n  async remove(id: string, deleteUserDto: DeleteUserDto): Promise {\n    await this.validateCurrentPassword(id, deleteUserDto.currentPassword);\n\n    await this.prisma.user.delete({ where: { id } });\n  }\n\n  /** If the user inputted both new password and current password\n   * the new password is hashed to be saved in the database replacing\n   * the current one.\n   *\n   * If only the new password or current password were inputted the user\n   * probably forgot about the other one and an error is thrown\n   */\n  private async hashIfUpdatingPassword(\n    id: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    if (updateUserDto.password && updateUserDto.currentPassword) {\n      await this.validateCurrentPassword(id, updateUserDto.currentPassword);\n\n      const hashedPassword = await hash(updateUserDto.password, 10);\n\n      updateUserDto.password = hashedPassword;\n      delete updateUserDto.currentPassword;\n\n      return;\n    }\n\n    if (updateUserDto.password || updateUserDto.currentPassword) {\n      throw new MissingPasswordUpdateError();\n    }\n  }\n\n  /** Compares if the inputted current password matches the\n   * user hashed password saved in the database\n   *\n   * If it doesn't, an error is thrown\n   */\n  private async validateCurrentPassword(\n    id: string,\n    currentPassword: string,\n  ): Promise {\n    const user = await this.prisma.user.findUnique({ where: { id } });\n\n    const isCorrectPassword = await compare(currentPassword, user.password);\n\n    if (!isCorrectPassword) {\n      throw new InvalidPasswordUpdateError();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserWithoutPassword.html":{"url":"classes/UserWithoutPassword.html","title":"class - UserWithoutPassword","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserWithoutPassword\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-without-password.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This entity is the same as\nUser\nbut omitting the password field\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { User } from './user.entity';\n\n/** This entity is the same as\n * User\n * but omitting the password field\n */\nexport class UserWithoutPassword extends OmitType(User, [\n  'password',\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidateReturn.html":{"url":"interfaces/ValidateReturn.html","title":"interface - ValidateReturn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidateReturn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                What is returned to the application after JsonWebToken is validated\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User ID\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\n/** Decrypted JsonWebToken content */\ninterface Payload {\n  /** Token subject, user ID used\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  sub: string;\n}\n\n/** What is returned to the application after JsonWebToken is validated */\ninterface ValidateReturn {\n  /** User ID\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  userId: string;\n}\n\n/** Passport library JsonWebToken configuration */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /** Passport library JsonWebToken configuration */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  /** Validates and returns data after JsonWebToken is decrypted */\n  async validate(payload: Payload): Promise {\n    return {\n      userId: payload.sub,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/dto/login-credentials.dto.ts\n            \n            class\n            LoginCredentialsDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login.response.ts\n            \n            class\n            LoginResponse\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/errors/invalid-email-or-password.error..ts\n            \n            class\n            InvalidEmailOrPasswordError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            Payload\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            ValidateReturn\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            jwtConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/errors/email-in-use.error.ts\n            \n            class\n            EmailInUseError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/interceptors/prisma.interceptor.ts\n            \n            injectable\n            PrismaInterceptor\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/user/dto/delete-user.dto.ts\n            \n            class\n            DeleteUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/user/entities/user-without-password.entity.ts\n            \n            class\n            UserWithoutPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/user/errors/invalid-password-update.error.ts\n            \n            class\n            InvalidPasswordUpdateError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/user/errors/missing-password-update.error.ts\n            \n            class\n            MissingPasswordUpdateError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (9/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @prisma/client : 3.10.0\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            prisma-error-enum : ^0.1.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Starts the application\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nTestes\n\nPara rodar os testes:\n  ## Atualiza o banco de dados com as migrations mais recentes, só precisa executar se estiver desatualizado\n  yarn migrate:test\n\n  yarn test\n\n  ## Para ver o banco de dados de teste\n  yarn studio:test\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : alvaromrveiga\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            jwtConfig   (src/.../jwt.config.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n            \n                \n                    Value to verify if @Public() is being used in the endpoint\nConsult JwtAuthGuard\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CustomDecorator => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n            \n                \n                    Makes an endpoint accessible by unauthenticated users\nExample: Create user and Login endpoints\n\n                \n            \n\n        \n    \n\n    src/config/jwt.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.JWT_SECRET,\n  signOptions: { expiresIn: '15m' },\n}\n                    \n                \n\n            \n                \n                    Configurations for the jsonwebtoken library used for authentication\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
