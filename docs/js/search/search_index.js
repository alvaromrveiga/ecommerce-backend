var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessJwtAuthGuard.html",[0,1.36,1,2.904]],["body/injectables/AccessJwtAuthGuard.html",[0,1.822,1,3.889,2,1.981,3,0.143,4,0.143,5,0.1,6,4.846,7,3.732,8,3.398,9,0.235,10,6.283,11,4.802,12,5.225,13,6.979,14,5.792,15,5.669,16,5.792,17,5.21,18,5.225,19,4.464,20,5.792,21,5.792,22,0.577,23,1.89,24,5.371,25,1.104,26,3.398,27,6.562,28,0.44,29,3.903,30,3.615,31,0.425,32,2.734,33,1.524,34,0.014,35,1.035,36,0.648,37,0.894,38,3.398,39,5.225,40,3.903,41,3.193,42,5.387,43,5.387,44,4.232,45,1.32,46,3.889,47,2.118,48,4.846,49,0.42,50,0.865,51,2.817,52,2.817,53,2.817,54,3.066,55,3.398,56,0.143,57,0.994,58,3.903,59,1.891,60,3.398,61,1.732,62,4.69,63,3.903,64,3.398,65,3.398,66,2.037,67,2.313,68,3.903,69,0.009,70,0.009]],["title/injectables/AccessJwtStrategy.html",[0,1.36,71,2.7]],["body/injectables/AccessJwtStrategy.html",[0,1.981,2,2.241,3,0.162,4,0.162,5,0.113,6,5.162,7,3.286,9,0.266,11,5.258,12,5.498,22,0.653,23,2.055,25,1.859,28,0.478,31,0.304,33,1.25,34,0.014,35,0.849,36,0.531,37,0.733,45,2.222,47,2.303,49,0.45,50,0.979,52,3.188,56,0.162,57,1.125,60,3.845,66,1.67,69,0.01,70,0.01,71,3.931,72,3.845,73,3.895,74,5.404,75,6.094,76,3.184,77,5.857,78,4.416,79,5.857,80,6.094,81,4.416,82,5.1,83,3.683,84,5.1,85,5.1,86,5.857,87,4.416,88,5.857,89,3.188,90,3.845,91,3.845,92,5.857,93,2.838,94,3.845,95,4.416,96,4.416,97,4.416,98,3.469,99,4.416,100,4.416,101,2.353,102,3.845,103,2.964,104,4.416]],["title/modules/AppModule.html",[105,1.713,106,2.904]],["body/modules/AppModule.html",[1,4.301,3,0.166,4,0.166,5,0.116,7,2.542,31,0.312,34,0.014,49,0.474,50,1.004,51,3.272,56,0.166,69,0.01,70,0.01,105,2.537,106,5.935,107,2.3,108,2.886,109,3.946,110,3.946,111,5.06,112,5.06,113,3.826,114,5.06,115,5.06,116,4.741,117,3.342,118,2.542,119,2.195,120,4.531,121,3.747,122,5.957,123,4.531,124,4.531,125,4.531,126,4.531,127,4.531,128,4.531,129,4.531,130,4.531,131,2.686,132,4.531,133,4.531]],["title/controllers/AuthController.html",[134,1.949,135,2.904]],["body/controllers/AuthController.html",[3,0.098,4,0.098,5,0.069,9,0.162,17,4.028,22,0.397,23,1.441,28,0.49,31,0.185,33,1.7,34,0.014,35,1.155,36,0.723,37,0.997,41,2.954,45,2.356,47,2.794,49,0.427,50,0.596,55,2.342,56,0.098,59,1.303,61,2.477,66,2.273,69,0.007,70,0.007,76,3.666,93,2.415,101,2.973,119,3.293,134,1.99,135,2.966,136,1.303,137,2.342,138,1.433,139,1.99,140,3.577,141,3.135,142,2.966,143,3.577,144,4.034,145,2.689,146,5.318,147,1.96,148,4.034,149,4.858,150,2.689,151,2.689,152,2.966,153,4.34,154,2.689,155,4.028,156,7.106,157,2.689,158,2.689,159,4.108,160,2.689,161,4.028,162,2.689,163,2.689,164,2.583,165,4.108,166,2.689,167,2.689,168,2.689,169,4.984,170,2.689,171,4.028,172,4.858,173,2.689,174,2.689,175,4.108,176,3.345,177,1.805,178,1.805,179,1.805,180,3.915,181,4.383,182,4.252,183,1.805,184,1.1,185,2.342,186,1.246,187,1.594,188,3.135,189,2.342,190,2.689,191,2.689,192,1.805,193,2.342,194,2.689,195,2.689,196,2.689,197,2.689,198,1.365,199,4.034,200,2.689,201,5.579,202,1.194,203,1.749,204,4.858,205,4.108,206,4.108,207,4.108,208,4.108,209,4.108,210,4.108,211,2.689,212,2.689,213,2.689,214,2.689,215,2.689,216,2.689,217,2.689,218,2.689,219,3.227,220,0.848,221,2.689,222,2.689,223,2.689,224,2.689]],["title/modules/AuthModule.html",[105,1.713,111,2.7]],["body/modules/AuthModule.html",[3,0.176,4,0.176,5,0.123,31,0.331,34,0.014,49,0.475,50,1.065,52,3.469,56,0.176,69,0.01,70,0.01,71,5.141,73,2.848,105,2.635,107,2.439,108,2.998,111,5.466,113,3.887,116,4.817,117,3.472,118,2.695,119,2.328,121,3.892,131,3.668,135,4.943,136,2.998,188,4.817,189,4.184,225,4.184,226,4.805,227,4.184,228,4.805,229,4.805,230,3.774,231,6.189,232,4.805,233,4.805,234,4.805,235,3.225,236,4.805]],["title/injectables/AuthService.html",[0,1.36,188,2.53]],["body/injectables/AuthService.html",[0,0.821,2,0.716,3,0.052,4,0.052,5,0.036,9,0.085,22,0.208,23,0.851,25,0.687,28,0.518,31,0.22,33,1.797,34,0.014,35,1.22,36,0.831,37,1.053,45,2.255,47,2.851,49,0.382,50,0.312,56,0.052,61,3.034,66,2.089,67,0.836,69,0.004,70,0.004,73,2.769,76,3.719,82,3.304,83,0.887,85,4.355,89,1.752,90,1.228,93,3.311,101,3.238,102,2.113,103,2.546,108,1.176,138,1.062,140,2.113,141,2.009,142,1.752,143,2.113,144,4.764,149,2.113,152,3.814,153,4.6,172,2.113,185,2.113,186,0.653,188,1.526,192,0.946,193,1.228,198,1.621,202,2.345,203,2.588,204,5.805,220,1.65,230,1.108,237,1.228,238,2.386,239,3.794,240,4.589,241,3.194,242,2.427,243,2.427,244,3.194,245,3.194,246,2.427,247,3.194,248,2.427,249,1.41,250,3.131,251,5.523,252,2.539,253,1.41,254,1.526,255,1.41,256,4.068,257,1.41,258,2.022,259,3.628,260,3.794,261,2.698,262,3.794,263,2.427,264,1.41,265,2.427,266,1.41,267,2.427,268,2.427,269,1.41,270,1.41,271,1.41,272,4.6,273,4.672,274,3.304,275,4.068,276,2.98,277,3.373,278,2.427,279,2.427,280,1.41,281,2.546,282,2.427,283,1.41,284,1.41,285,1.41,286,2.427,287,1.41,288,5.002,289,1.41,290,2.546,291,3.794,292,5.732,293,0.763,294,2.427,295,2.427,296,2.427,297,2.113,298,2.427,299,2.427,300,2.427,301,2.427,302,2.427,303,1.41,304,5.523,305,4.6,306,1.41,307,2.427,308,1.767,309,2.427,310,1.41,311,2.427,312,1.41,313,1.41,314,1.906,315,2.113,316,2.427,317,1.41,318,0.884,319,1.077,320,1.228,321,1.018,322,2.509,323,1.41,324,1.41,325,0.946,326,1.906,327,1.41,328,1.41,329,2.427,330,0.836,331,1.752,332,2.113,333,1.41,334,1.752,335,1.41,336,1.41,337,4.499,338,1.41,339,4.672,340,1.41,341,2.427,342,4.068,343,1.41,344,2.427,345,1.41,346,1.41,347,1.41,348,1.41,349,3.794,350,3.794,351,1.41,352,3.794,353,3.194,354,1.41,355,2.427,356,1.41,357,1.228,358,1.228,359,1.438,360,2.427,361,3.194,362,1.41,363,2.427,364,1.41,365,2.427,366,1.41,367,1.629,368,1.41,369,2.427,370,1.41,371,1.41,372,1.228]],["title/classes/AuthServiceInputException.html",[31,0.277,373,2.53]],["body/classes/AuthServiceInputException.html",[3,0.198,4,0.198,5,0.138,9,0.325,25,1.529,28,0.441,31,0.372,33,1.529,34,0.013,35,1.038,36,0.65,37,0.896,56,0.198,57,1.698,69,0.011,70,0.011,220,1.492,293,2.273,319,2.958,373,4.873,374,0.737,375,5.234,376,3.088,377,3.626,378,5.217,379,5.217,380,3.501,381,4.85,382,4.544,383,4.811,384,3.9,385,1.967,386,3.9]],["title/classes/Category.html",[31,0.277,387,1.786]],["body/classes/Category.html",[3,0.189,4,0.189,5,0.132,9,0.31,22,0.762,28,0.528,31,0.355,34,0.014,35,1.469,36,0.778,37,1.073,49,0.31,56,0.189,69,0.011,70,0.011,186,2.389,220,1.532,261,2.873,330,3.836,374,0.703,387,3.554,388,4.488,389,1.965,390,2.253,391,2.999,392,3.126,393,5.154,394,5.154,395,2.389,396,5.154,397,1.965,398,5.154,399,5.154,400,5.154,401,5.154,402,5.154,403,4.488]],["title/controllers/CategoryController.html",[134,1.949,404,2.904]],["body/controllers/CategoryController.html",[3,0.091,4,0.091,5,0.063,9,0.149,22,0.367,23,1.354,28,0.5,31,0.266,32,1.259,33,1.735,34,0.014,35,1.417,36,0.737,37,1.017,41,2.808,45,2.432,47,2.827,49,0.418,50,0.55,56,0.091,59,1.202,66,2.32,69,0.009,70,0.006,76,3.697,134,1.202,136,1.202,139,2.295,147,2,148,4.116,176,3.179,177,1.665,178,1.665,179,2.59,182,4.297,183,1.665,184,1.014,198,1.259,199,4.116,220,1.485,254,1.56,258,2.848,261,1.713,281,3.588,308,2.022,387,3.464,392,2.843,404,2.786,405,2.159,406,1.791,407,3.42,408,2.524,409,1.602,410,2.979,411,3.42,412,4.125,413,2.056,414,2.195,415,2.159,416,3.857,417,3.527,418,2.48,419,2.48,420,4.443,421,2.48,422,4.116,423,2.48,424,2.48,425,3.179,426,2.427,427,1.87,428,2.427,429,2.848,430,1.643,431,2.427,432,1.788,433,1.87,434,3.36,435,2.427,436,1.791,437,4.415,438,2.786,439,2.48,440,2.48,441,3.362,442,2.159,443,2.48,444,2.48,445,1.47,446,2.48,447,2.48,448,1.47,449,4.443,450,2.999,451,2.48,452,2.48,453,1.405,454,1.791,455,1.948,456,1.47,457,3.588,458,1.948,459,3.249,460,1.47,461,1.665,462,2.159,463,1.791,464,3.362,465,2.159,466,1.391,467,3.032,468,1.56,469,2.159,470,1.391,471,1.948,472,2.48,473,2.48,474,2.48,475,2.48,476,2.165,477,2.159,478,3.032,479,2.48,480,2.48,481,2.48,482,2.48,483,1.948,484,2.48,485,1.948,486,1.791,487,1.948,488,2.48]],["title/modules/CategoryModule.html",[105,1.713,112,2.7]],["body/modules/CategoryModule.html",[3,0.195,4,0.195,5,0.136,31,0.367,34,0.014,49,0.452,50,1.18,56,0.195,69,0.011,70,0.011,105,2.813,107,2.703,108,3.2,112,5.407,113,3.991,117,3.706,118,2.988,119,2.581,121,4.154,131,3.915,136,3.2,235,3.575,404,5.184,464,4.946,465,4.638,489,4.638,490,5.327,491,4.638,492,5.327,493,5.327]],["title/classes/CategoryNameInUseException.html",[31,0.277,494,2.904]],["body/classes/CategoryNameInUseException.html",[3,0.178,4,0.178,5,0.124,9,0.293,25,1.949,28,0.397,31,0.335,34,0.013,35,1.536,49,0.293,50,1.078,56,0.178,57,1.59,69,0.01,70,0.01,138,1.346,293,2.286,318,2.646,374,0.664,385,2.272,387,3.412,494,4.504,495,4.504,496,3.513,497,3.52,498,4.305,499,5.707,500,3.366,501,6.139,502,4.305,503,4.075,504,4.972,505,3.822,506,4.972,507,4.237]],["title/classes/CategoryNotFoundException.html",[31,0.277,508,2.904]],["body/classes/CategoryNotFoundException.html",[3,0.186,4,0.186,5,0.13,9,0.305,25,1.987,28,0.414,31,0.349,34,0.014,49,0.305,50,1.124,56,0.186,57,1.632,69,0.01,70,0.01,138,1.367,293,2.321,318,2.686,374,0.692,385,2.333,387,3.449,495,4.625,497,3.574,498,4.372,500,3.418,502,4.372,503,4.138,507,4.417,508,4.625,509,3.404,510,5.326,511,4.713,512,3.662,513,4.416]],["title/injectables/CategoryService.html",[0,1.36,464,2.53]],["body/injectables/CategoryService.html",[0,1.075,2,0.987,3,0.071,4,0.071,5,0.05,9,0.117,22,0.287,23,1.115,25,0.55,28,0.512,30,2.134,31,0.278,32,1.613,33,1.775,34,0.014,35,1.524,36,0.755,37,1.041,45,2.183,47,2.739,49,0.35,50,0.431,56,0.071,59,0.942,61,2.785,66,2.293,67,3.825,69,0.008,70,0.005,76,3.531,83,2.535,138,0.589,139,2.256,198,0.987,220,1.529,238,2.928,240,3.464,252,2.796,258,1.694,261,2.445,277,2.295,290,2.134,293,1,308,1.761,325,1.306,337,3.228,358,2.768,387,3.447,392,2.887,395,1.473,408,2.481,409,1.075,410,2.535,411,2.91,412,3.51,413,1.694,414,1.868,415,2.768,416,3.464,422,3.125,425,4.332,426,1.999,427,1.54,428,1.999,429,3.439,430,2.582,431,1.999,432,2.378,433,1.54,435,1.999,436,1.404,437,3.445,441,2.928,442,1.694,445,1.884,448,1.153,449,4.795,450,3.09,453,1.158,462,1.694,463,1.404,464,1.999,466,1.091,467,2.497,468,1.223,469,1.694,470,1.091,471,1.528,476,3.09,514,1.694,515,3.361,516,3.361,517,3.179,518,4.031,519,1.404,520,1.945,521,3.179,522,1.945,523,3.179,524,2.768,525,2.768,526,1.945,527,1.528,528,1.945,529,2.295,530,1.945,531,3.361,532,1.945,533,1.945,534,1.945,535,1.945,536,1.945,537,2.768,538,1.945,539,1.945,540,2.768,541,3.946,542,3.179,543,1.945,544,3.167,545,3.167,546,3.167,547,3.51,548,3.51,549,1.528,550,1.694,551,3.657,552,4.054,553,3.179,554,2.497,555,2.497,556,1.999,557,1.783,558,2.497,559,1.945,560,1.945,561,1.945,562,3.179,563,1.945,564,1.945,565,1.945,566,1.945]],["title/classes/CreateCategoryDto.html",[31,0.277,416,2.53]],["body/classes/CreateCategoryDto.html",[3,0.194,4,0.194,5,0.136,9,0.319,22,0.783,28,0.432,31,0.453,34,0.014,35,1.481,36,0.637,49,0.396,56,0.194,69,0.011,70,0.011,147,1.728,220,1.359,374,0.723,387,3.535,389,1.999,390,1.999,391,3.051,397,1.608,403,4.612,409,2.226,416,4.14,471,4.161,567,5.732,568,4.161,569,3.341,570,3.051,571,4.161,572,5.297,573,4.418,574,3.341,575,2.083]],["title/classes/CreateProductDto.html",[31,0.277,576,2.53]],["body/classes/CreateProductDto.html",[3,0.125,4,0.125,5,0.087,9,0.416,22,0.504,28,0.564,31,0.337,34,0.014,35,1.275,36,0.831,37,1.208,49,0.377,56,0.125,57,0.869,61,1.513,69,0.008,70,0.008,147,2.253,184,1.394,220,1.503,367,4.205,374,0.465,387,2.174,389,1.487,390,1.487,392,1.394,397,2.097,409,1.656,425,3.847,432,1.58,556,2.144,557,1.912,569,2.485,570,2.269,571,2.678,573,3.847,574,2.909,575,1.34,576,3.08,577,6.197,578,2.678,579,2.627,580,4.99,581,4.99,582,5.778,583,3.506,584,4.79,585,3.409,586,3.409,587,3.535,588,4.264,589,4.264,590,3.287,591,3.535,592,3.535,593,3.535,594,3.409,595,3.409,596,4.264,597,2.678,598,3.409,599,3.409,600,3.409,601,4.264,602,4.264,603,4.205,604,3.409,605,3.409,606,3.409,607,2.609,608,2.678,609,2.678,610,4.897,611,3.287,612,4.99,613,3.722,614,2.678,615,3.409,616,2.144,617,2.968,618,4.264,619,3.535,620,2.968,621,2.968,622,2.968,623,3.409,624,3.409,625,3.409,626,3.409,627,3.409,628,3.409,629,3.409,630,3.409,631,3.409,632,3.409]],["title/classes/CreatePurchaseDto.html",[31,0.277,633,2.53]],["body/classes/CreatePurchaseDto.html",[3,0.15,4,0.15,5,0.105,9,0.246,22,0.604,28,0.516,31,0.383,34,0.014,36,0.76,37,0.922,49,0.408,56,0.15,57,1.041,69,0.009,70,0.009,101,2.177,147,2.061,184,1.671,220,1.4,330,3.295,374,0.557,389,1.688,390,1.688,392,2.584,397,1.918,409,1.88,430,2.367,433,2.693,569,2.821,570,2.576,575,1.606,579,2.475,583,3.442,584,5.121,587,4.013,590,3.731,591,4.013,592,4.013,593,4.013,603,3.731,607,3.989,608,3.21,609,3.21,612,5.501,613,3.119,616,2.57,633,3.496,634,5.905,635,2.95,636,3.061,637,4.241,638,5.501,639,4.086,640,4.086,641,4.013,642,5.559,643,4.086,644,4.086,645,4.086,646,4.84,647,4.84,648,4.562,649,4.086,650,2.95,651,4.086,652,3.21,653,3.21,654,3.558,655,3.558,656,3.558,657,3.558,658,3.558,659,3.558,660,3.558]],["title/classes/CreateUserDto.html",[31,0.277,661,2.53]],["body/classes/CreateUserDto.html",[3,0.143,4,0.143,5,0.1,9,0.235,22,0.577,28,0.543,31,0.371,34,0.014,35,1.341,36,0.8,37,1.103,49,0.324,56,0.143,69,0.009,70,0.009,138,1.472,147,2.169,202,3.098,203,3.257,220,1.556,276,3.066,367,2.619,374,0.532,385,2.542,389,1.636,390,1.636,391,2.496,397,2.02,409,1.822,430,3.209,525,5.792,569,2.734,570,2.496,574,3.376,575,1.534,583,3.376,597,4.232,613,3.461,661,3.388,662,6.077,663,2.817,664,6.077,665,3.903,666,3.903,667,4.232,668,4.69,669,3.903,670,3.903,671,3.903,672,5.387,673,3.903,674,5.387,675,6.652,676,3.903,677,4.69,678,3.903,679,3.398,680,2.817,681,2.817,682,3.903,683,3.903,684,3.903,685,3.398,686,3.398,687,3.398,688,3.398]],["title/classes/DeleteUserDto.html",[31,0.277,689,2.7]],["body/classes/DeleteUserDto.html",[3,0.198,4,0.198,5,0.138,9,0.325,22,0.798,28,0.441,31,0.459,34,0.014,36,0.65,49,0.325,56,0.198,69,0.011,70,0.011,138,1.398,147,1.762,164,4.19,203,2.837,220,1.376,374,0.737,389,2.023,390,2.023,397,1.64,456,3.949,569,3.382,570,3.088,571,4.244,573,4.472,574,3.382,575,2.124,663,3.9,681,3.9,689,4.472,690,5.802,691,5.676,692,5.402]],["title/classes/EmailInUseException.html",[31,0.277,693,2.904]],["body/classes/EmailInUseException.html",[3,0.181,4,0.181,5,0.126,9,0.297,25,1.963,28,0.403,31,0.34,34,0.013,49,0.297,50,1.095,56,0.181,57,1.606,69,0.01,70,0.01,138,1.354,202,3.243,293,2.299,318,2.661,374,0.674,385,2.295,496,3.567,497,3.54,498,4.33,499,5.739,500,3.386,501,6.161,502,4.33,503,4.099,504,5.008,505,3.882,506,5.008,667,4.95,668,6.04,693,4.549,694,4.95,695,4.941]],["title/interfaces/ExceptionHandler.html",[696,2.904,697,2.53]],["body/interfaces/ExceptionHandler.html",[3,0.205,4,0.205,5,0.143,9,0.337,22,0.829,23,2.392,28,0.458,33,1.587,34,0.013,35,1.078,36,0.674,37,0.93,45,1.897,56,0.205,69,0.011,70,0.011,319,3.535,380,2.717,696,4.922,697,4.288,698,5.608,699,4.883,700,5.608,701,5.129,702,4.922,703,5.608,704,5.936,705,6.818,706,5.356,707,4.576]],["title/injectables/ExceptionInterceptor.html",[0,1.36,708,3.16]],["body/injectables/ExceptionInterceptor.html",[0,1.933,2,2.161,3,0.156,4,0.156,5,0.109,9,0.256,10,4.978,18,5.418,19,4.629,22,0.629,23,2.006,28,0.348,31,0.293,33,1.205,34,0.014,35,0.819,36,0.512,37,0.706,39,5.418,44,4.491,45,1.44,47,2.247,48,5.069,49,0.433,50,0.944,53,3.075,56,0.156,66,1.611,69,0.009,70,0.009,308,2.441,318,2.082,319,2.865,359,2.524,391,1.974,427,2.77,453,2.082,497,3.342,708,4.491,709,3.708,710,5.717,711,5.717,712,5.418,713,4.978,714,4.98,715,5.717,716,6.898,717,6.453,718,4.259,719,6.453,720,6.898,721,4.259,722,4.127,723,4.127,724,4.978,725,5.717,726,4.259,727,3.075,728,4.259,729,4.659,730,3.075,731,4.259,732,3.075,733,4.259,734,3.346,735,4.259,736,4.259,737,4.259,738,4.259,739,4.259]],["title/classes/FileTypeError.html",[31,0.277,740,3.16]],["body/classes/FileTypeError.html",[3,0.176,4,0.176,5,0.199,9,0.289,25,1.36,28,0.392,31,0.331,33,1.36,34,0.014,35,0.923,36,0.9,37,0.797,49,0.289,56,0.176,57,1.577,69,0.01,70,0.01,138,1.34,293,2.275,318,2.254,374,0.655,376,2.226,380,2.998,385,2.254,500,3.35,557,4.056,579,1.625,740,4.862,741,5.389,742,4.184,743,5.22,744,7.23,745,4.595,746,6.189,747,6.846,748,4.805,749,4.595,750,6.846,751,5.961,752,7.792,753,2.848,754,4.805]],["title/classes/FileUploadDto.html",[31,0.277,755,3.16]],["body/classes/FileUploadDto.html",[3,0.196,4,0.196,5,0.201,9,0.322,22,0.792,28,0.437,31,0.369,34,0.014,36,0.797,49,0.322,56,0.196,69,0.011,70,0.011,147,1.747,184,2.191,220,1.369,374,0.731,389,2.013,390,2.013,397,1.626,453,2.414,557,3.719,570,3.072,579,2.242,749,4.449,755,5.207,756,5.772,757,4.664,758,5.207,759,5.357,760,5.772,761,6.629,762,5.357,763,6.629,764,5.357]],["title/classes/FindCategoriesDto.html",[31,0.277,422,2.7]],["body/classes/FindCategoriesDto.html",[3,0.162,4,0.162,5,0.114,9,0.267,22,0.656,28,0.538,31,0.454,34,0.014,35,1.129,36,0.901,37,1.243,49,0.353,56,0.162,69,0.01,70,0.01,147,2.148,220,1.448,374,0.605,387,2.608,389,1.784,390,1.784,397,2,422,3.943,425,5.03,429,4.074,430,1.889,432,2.056,433,2.846,453,2.14,529,4.242,531,5.062,540,5.735,541,4.142,574,2.982,575,1.744,583,3.804,607,3.13,611,4.421,613,3.933,648,4.755,765,6.105,766,3.863,767,3.485,768,4.437,769,4.615,770,4.615,771,4.437,772,4.437,773,2.978,774,3.485]],["title/classes/FindProductsDto.html",[31,0.277,437,2.384]],["body/classes/FindProductsDto.html",[3,0.162,4,0.162,5,0.114,9,0.267,22,0.656,28,0.538,31,0.454,34,0.014,35,1.129,36,0.901,37,1.243,49,0.353,56,0.162,69,0.01,70,0.01,147,2.148,220,1.448,374,0.605,389,1.784,390,1.784,397,2,429,4.074,430,1.889,432,2.056,433,2.846,437,3.482,453,2.14,476,4.204,529,4.242,531,5.062,541,4.142,551,5.174,574,2.982,575,1.744,579,1.987,583,3.804,607,3.13,611,4.421,613,3.933,648,4.755,767,3.485,769,4.615,770,4.615,773,2.978,774,3.485,775,6.105,776,3.863,777,4.437,778,4.437,779,4.437]],["title/classes/FindPurchasesDto.html",[31,0.277,780,2.7]],["body/classes/FindPurchasesDto.html",[3,0.149,4,0.149,5,0.104,9,0.245,22,0.603,28,0.553,31,0.435,34,0.014,36,0.9,37,1.263,49,0.334,56,0.149,69,0.009,70,0.012,101,3.363,138,1.029,147,2.21,220,1.572,374,0.556,389,1.685,390,1.685,392,2.771,397,2.057,429,3.987,430,1.736,432,1.889,433,2.689,453,2.022,529,4.008,531,4.892,541,3.969,574,3.203,575,1.603,579,1.877,583,3.712,607,2.958,611,4.236,613,3.976,637,4.236,648,4.556,767,4.361,770,4.361,773,2.737,780,3.726,781,6.172,782,3.55,783,5.745,784,4.077,785,4.077,786,4.077,787,4.077,788,4.077,789,4.077,790,4.077,791,4.077,792,4.077,793,4.077,794,4.077,795,4.077,796,4.077,797,4.077]],["title/classes/InvalidEmailOrPasswordException.html",[31,0.277,331,2.904]],["body/classes/InvalidEmailOrPasswordException.html",[3,0.184,4,0.184,5,0.128,9,0.302,25,1.977,28,0.41,31,0.346,34,0.014,49,0.302,56,0.184,57,1.622,69,0.01,70,0.01,138,1.362,141,4.621,202,3.569,203,3.351,293,2.312,318,2.318,331,4.594,373,4.395,374,0.685,376,2.326,380,3.083,385,2.318,500,3.405,743,4.594,753,2.975,798,4.999,799,4.37,800,6.398,801,6.398,802,5.019,803,4.37,804,3.943]],["title/classes/InvalidPasswordUpdateException.html",[31,0.277,805,2.904]],["body/classes/InvalidPasswordUpdateException.html",[3,0.18,4,0.18,5,0.126,9,0.296,25,1.958,28,0.401,31,0.339,34,0.013,49,0.296,56,0.18,57,1.6,69,0.01,70,0.01,138,1.397,164,4.926,203,3.495,293,2.294,308,2.758,318,2.287,374,0.671,376,2.278,380,3.043,385,2.287,409,2.466,500,3.379,743,4.534,753,2.914,800,6.349,801,6.349,804,3.862,805,4.534,806,5.468,807,3.862,808,4.352,809,4.916]],["title/classes/InvalidRefreshTokenException.html",[31,0.277,334,2.904]],["body/classes/InvalidRefreshTokenException.html",[3,0.188,4,0.188,5,0.131,9,0.308,25,1.997,28,0.418,31,0.353,34,0.014,49,0.308,56,0.188,57,1.643,69,0.01,70,0.01,93,3.831,138,1.373,259,4.281,293,2.33,318,2.349,334,4.656,373,4.438,374,0.699,376,2.376,380,3.125,385,2.349,500,3.431,743,5.624,753,3.039,798,5.067,803,4.464,804,4.027,810,4.464,811,7.405,812,5.127]],["title/classes/JwtExceptionHandler.html",[31,0.277,727,2.904]],["body/classes/JwtExceptionHandler.html",[3,0.149,4,0.149,5,0.104,7,3.114,9,0.245,22,0.603,23,1.948,28,0.515,31,0.281,33,1.571,34,0.014,35,1.067,36,0.759,37,0.921,45,2.291,46,4.008,49,0.334,50,0.903,56,0.149,66,1.542,69,0.009,70,0.009,74,4.892,93,1.975,240,4.599,297,4.833,308,1.542,318,2.467,319,3.604,359,2.417,374,0.556,390,1.685,391,2.572,427,1.975,497,3.283,697,3.969,701,3.726,702,4.008,707,3.726,714,4.892,722,4.892,723,4.892,727,4.008,729,2.944,813,5.899,814,2.944,815,6.311,816,5.551,817,3.55,818,5.551,819,5.551,820,5.551,821,4.077,822,5.551,823,5.551,824,5.551,825,5.551,826,4.077,827,5.551,828,4.077,829,4.833,830,5.551,831,3.55,832,4.077,833,4.077,834,4.077,835,4.077]],["title/classes/LoginCredentialsDto.html",[31,0.277,155,2.904]],["body/classes/LoginCredentialsDto.html",[3,0.185,4,0.185,5,0.129,9,0.304,22,0.746,28,0.521,31,0.44,34,0.014,36,0.768,49,0.304,56,0.185,69,0.01,70,0.01,138,1.438,147,2.082,155,4.61,202,3.371,203,3.234,220,1.52,374,0.688,389,1.939,390,1.939,397,1.939,453,2.325,570,2.959,573,4.702,574,3.555,575,1.984,680,3.643,681,3.643,836,6.099,837,4.393,838,6.385,839,4.016,840,6.385,841,5.046,842,5.046]],["title/classes/LoginResponse.html",[31,0.277,192,2.7]],["body/classes/LoginResponse.html",[3,0.194,4,0.194,5,0.136,7,4.207,9,0.32,15,4.173,17,5.414,22,0.785,28,0.538,31,0.366,34,0.014,36,0.793,56,0.194,69,0.011,70,0.011,73,3.908,93,3.633,141,3.341,144,4.813,192,4.426,220,1.548,259,3.699,342,6.244,374,0.725,389,1.613,390,2.002,397,2.002,843,4.625,844,5.312,845,5.312,846,5.312,847,5.312,848,5.312,849,5.312,850,5.312,851,4.173]],["title/classes/LogoutDto.html",[31,0.277,161,2.904]],["body/classes/LogoutDto.html",[3,0.199,4,0.199,5,0.139,9,0.327,22,0.803,28,0.443,31,0.461,34,0.014,36,0.653,49,0.327,56,0.199,69,0.011,70,0.011,93,3.24,138,1.401,142,4.827,144,4.862,147,1.772,161,4.827,220,1.38,259,3.751,374,0.741,389,2.03,390,2.03,397,1.65,453,2.435,570,3.099,575,2.136,839,4.205,851,4.268,852,4.73,853,6.307,854,5.433]],["title/classes/MissingPasswordUpdateException.html",[31,0.277,855,2.904]],["body/classes/MissingPasswordUpdateException.html",[3,0.172,4,0.172,5,0.12,9,0.282,25,1.914,28,0.383,31,0.323,34,0.014,49,0.282,56,0.172,57,1.552,69,0.01,70,0.01,138,1.376,164,4.872,203,3.55,293,2.254,308,2.93,318,2.218,374,0.639,376,2.172,380,2.951,385,2.218,414,3.319,500,3.319,570,3.319,753,2.778,807,3.682,808,4.255,855,4.397,856,5.303,857,6.745,858,4.687,859,6.09,860,6.765,861,4.687]],["title/classes/NotPurchaseOwnerException.html",[31,0.277,862,2.904]],["body/classes/NotPurchaseOwnerException.html",[3,0.192,4,0.192,5,0.134,9,0.316,25,2.019,28,0.429,31,0.362,34,0.014,49,0.316,56,0.192,57,1.669,69,0.011,70,0.011,293,2.35,318,2.385,374,0.717,376,2.434,380,3.173,385,2.385,513,4.488,636,3.926,753,3.114,862,4.728,863,5.702,864,4.574,865,4.427,866,7.47,867,5.014,868,4.789,869,5.254,870,4.574]],["title/classes/PrismaExceptionHandler.html",[31,0.277,730,2.904]],["body/classes/PrismaExceptionHandler.html",[3,0.073,4,0.073,5,0.051,9,0.12,22,0.296,23,1.142,28,0.532,31,0.138,33,1.844,34,0.014,35,1.409,36,0.762,37,1.081,45,2.605,46,5.293,49,0.392,56,0.073,66,2.398,69,0.005,70,0.005,138,0.603,202,1.826,240,4.865,308,2.572,314,2.557,318,1.725,319,3.568,359,4.098,374,0.273,382,1.259,387,2.313,391,1.508,395,3.366,409,1.101,414,1.508,427,0.97,456,1.929,457,4.373,494,2.35,495,2.35,497,2.295,508,3.419,513,2.586,546,2.557,556,1.259,579,1.99,609,1.573,636,1.992,693,2.35,694,1.573,697,2.586,701,2.185,702,2.35,707,2.185,714,3.419,722,3.419,723,3.419,729,1.446,730,2.35,814,1.446,871,5.805,872,4.124,873,3.255,874,4.112,875,3.255,876,3.255,877,3.255,878,3.255,879,4.112,880,3.255,881,3.255,882,1.743,883,3.255,884,7.59,885,2.002,886,7.191,887,7.191,888,2.002,889,2.002,890,3.511,891,3.255,892,2.002,893,3.255,894,3.581,895,2.002,896,2.002,897,3.255,898,2.002,899,3.255,900,3.255,901,3.255,902,3.255,903,2.002,904,2.002,905,2.002,906,3.255,907,2.002,908,3.255,909,2.002,910,2.002,911,1.573,912,4.112,913,4.736,914,2.35,915,2.35,916,3.419,917,2.969,918,1.573,919,2.35,920,1.573,921,2.002,922,2.002,923,3.581,924,2.002,925,2.002,926,2.002,927,2.002,928,4.112,929,2.002,930,3.255,931,2.002,932,2.002,933,2.002,934,2.002,935,2.002,936,2.002,937,4.112,938,2.002,939,2.002,940,4.112,941,2.002,942,3.255,943,2.002,944,2.002,945,2.002,946,2.002,947,2.002]],["title/modules/PrismaModule.html",[105,1.713,113,2.042]],["body/modules/PrismaModule.html",[3,0.203,4,0.203,5,0.142,31,0.382,34,0.013,49,0.407,50,1.228,56,0.203,69,0.011,70,0.011,105,2.883,107,2.813,108,3.28,113,4.08,117,3.798,118,3.11,119,2.686,131,4.012,252,4.212,948,4.826,949,4.826,950,4.826,951,5.543,952,5.894,953,5.543]],["title/injectables/PrismaService.html",[0,1.36,252,2.042]],["body/injectables/PrismaService.html",[0,1.913,2,2.128,3,0.153,4,0.153,5,0.107,9,0.252,19,3.797,22,0.62,23,1.985,28,0.462,31,0.289,33,1.187,34,0.014,35,0.806,36,0.504,37,1.062,45,1.913,47,2.695,49,0.34,50,0.929,56,0.153,57,1.442,69,0.009,70,0.009,76,3.652,119,2.741,186,1.943,238,3.558,252,2.871,261,3.043,337,3.558,391,1.943,395,3.417,524,4.926,712,3.294,724,4.926,839,3.558,872,4.926,954,3.651,955,5.658,956,7.374,957,6.403,958,6.854,959,7.374,960,5.658,961,6.854,962,4.194,963,5.658,964,5.658,965,6.854,966,5.658,967,6.854,968,5.658,969,5.658,970,5.658,971,5.658,972,4.194,973,5.658,974,4.926,975,5.658,976,4.194,977,4.194,978,4.194]],["title/classes/Product.html",[31,0.277,579,1.36]],["body/classes/Product.html",[3,0.123,4,0.123,5,0.086,9,0.414,22,0.498,28,0.604,31,0.232,34,0.014,35,1.363,36,0.889,37,1.274,49,0.203,56,0.123,69,0.008,70,0.008,186,1.563,220,1.613,261,2.157,330,2.88,367,4.184,374,0.46,389,1.476,390,1.893,391,2.252,392,2.702,395,1.563,397,2.246,432,1.563,556,3.583,557,3.707,579,2.743,580,4.96,581,4.96,582,5.754,583,3.493,584,3.508,587,3.508,588,4.231,589,4.231,590,3.262,591,3.508,592,3.508,593,3.508,601,4.231,602,4.231,603,4.184,607,2.589,616,4.156,617,4.231,618,4.96,619,4.113,620,2.937,621,2.937,622,2.937,979,2.937,980,4.231,981,3.373,982,3.056,983,3.373,984,3.818,985,3.373,986,3.373,987,3.373,988,3.373,989,3.373,990,3.373,991,3.373,992,4.86,993,3.818,994,3.373,995,3.373,996,3.373,997,3.373,998,3.373,999,3.373,1000,3.373,1001,2.435,1002,2.937,1003,2.937]],["title/controllers/ProductController.html",[134,1.949,1004,2.904]],["body/controllers/ProductController.html",[3,0.085,4,0.085,5,0.16,9,0.14,14,3.202,16,3.202,22,0.345,23,1.29,28,0.51,31,0.253,32,1.183,33,1.77,34,0.014,35,1.339,36,0.802,37,1.038,41,2.698,45,2.356,47,2.86,49,0.411,50,0.517,56,0.085,59,1.13,66,2.366,69,0.008,70,0.006,134,1.13,136,1.13,139,2.206,147,2.04,148,4.198,176,2.468,177,1.565,178,1.565,179,2.468,182,4.351,183,1.565,184,0.954,198,1.183,199,4.198,220,1.519,254,1.467,258,2.754,261,1.632,281,3.469,308,2.452,392,2.849,406,1.684,407,3.287,408,2.426,409,1.244,410,2.313,411,2.655,413,1.959,414,2.11,417,3.774,420,4.351,426,2.313,427,1.782,428,2.313,429,2.754,430,1.566,431,2.313,432,1.704,433,1.782,434,3.202,435,2.313,436,1.684,437,3.063,438,3.731,441,3.25,445,1.382,448,1.382,450,2.899,453,1.339,454,1.684,455,1.832,456,1.382,457,1.565,458,1.832,459,3.352,460,1.382,461,1.565,463,1.684,466,1.308,468,1.467,470,1.308,476,2.554,477,2.03,478,2.889,483,1.832,485,1.832,486,1.684,487,1.832,556,2.863,557,2.554,576,3.758,579,2.661,614,1.832,758,3.577,993,2.889,1004,2.655,1005,2.03,1006,3.202,1007,4.553,1008,2.03,1009,2.332,1010,2.332,1011,2.332,1012,2.332,1013,2.332,1014,3.677,1015,2.332,1016,2.332,1017,2.03,1018,2.332,1019,2.332,1020,2.332,1021,2.332,1022,4.351,1023,2.332,1024,2.332,1025,2.332,1026,4.5,1027,2.332,1028,2.332,1029,3.202,1030,3.202,1031,3.202,1032,3.202,1033,3.202,1034,2.655,1035,3.677,1036,3.677,1037,2.889,1038,1.832,1039,2.332,1040,2.889,1041,3.25,1042,2.03,1043,2.332,1044,2.332,1045,2.03,1046,2.332,1047,2.332,1048,2.332,1049,2.332,1050,2.332,1051,2.332,1052,2.332,1053,2.332,1054,2.332,1055,2.332,1056,2.332,1057,2.332]],["title/modules/ProductModule.html",[105,1.713,114,2.7]],["body/modules/ProductModule.html",[3,0.188,4,0.188,5,0.132,31,0.354,34,0.014,49,0.469,50,1.139,56,0.188,69,0.011,70,0.011,105,2.751,107,2.609,108,3.13,113,3.956,114,5.37,117,3.624,118,2.884,119,2.491,121,4.063,131,3.829,136,3.13,187,3.047,235,3.45,1004,5.101,1034,3.711,1041,4.902,1042,4.476,1058,4.476,1059,4.476,1060,5.141,1061,5.141,1062,5.141,1063,5.141,1064,4.476,1065,4.038,1066,5.141,1067,5.141]],["title/classes/ProductNameInUseException.html",[31,0.277,914,2.904]],["body/classes/ProductNameInUseException.html",[3,0.178,4,0.178,5,0.124,9,0.293,25,1.949,28,0.397,31,0.335,34,0.013,35,1.536,49,0.293,50,1.078,56,0.178,57,1.59,69,0.01,70,0.01,138,1.346,293,2.286,318,2.646,374,0.664,385,2.272,496,3.513,497,3.52,498,4.305,499,5.707,500,3.366,501,6.139,502,4.305,503,4.075,504,4.972,505,3.822,506,4.972,579,2.599,914,4.504,915,4.504,1068,4.237]],["title/classes/ProductNotFoundException.html",[31,0.277,916,2.904]],["body/classes/ProductNotFoundException.html",[3,0.186,4,0.186,5,0.13,9,0.305,25,1.987,28,0.414,31,0.349,34,0.014,49,0.305,50,1.124,56,0.186,57,1.632,69,0.01,70,0.01,138,1.367,293,2.321,318,2.686,374,0.692,385,2.333,497,3.574,498,4.372,500,3.418,502,4.372,503,4.138,509,3.404,510,5.326,511,4.713,512,3.662,513,4.416,579,2.627,915,4.625,916,4.625,1068,4.417]],["title/injectables/ProductService.html",[0,1.36,1041,2.53]],["body/injectables/ProductService.html",[0,0.99,2,0.893,3,0.064,4,0.064,5,0.112,9,0.106,22,0.26,23,1.027,25,0.498,28,0.522,30,1.964,31,0.259,32,1.485,33,1.811,34,0.014,35,1.465,36,0.77,37,1.062,45,2.213,47,2.742,49,0.335,50,0.39,56,0.064,59,0.852,61,2.684,66,2.421,67,3.109,69,0.007,70,0.005,76,3.546,83,2.753,138,0.542,139,2.121,186,0.815,198,0.893,220,1.558,238,2.753,240,3.802,252,2.663,258,1.559,261,2.329,277,2.112,290,1.964,293,0.921,308,1.984,325,1.181,337,1.84,381,1.964,387,0.781,392,2.815,395,2.252,397,0.888,408,2.333,409,0.99,410,2.363,411,2.112,413,2.333,414,1.741,425,4.295,426,1.84,427,1.418,428,1.84,429,2.795,430,1.864,431,1.84,432,1.741,433,1.418,435,1.84,436,2.112,437,2.595,441,2.753,445,1.734,448,1.043,450,2.943,453,1.066,457,1.964,463,1.27,466,0.987,468,1.106,470,0.987,476,3.498,515,3.161,516,3.161,519,1.27,527,1.382,537,3.812,541,2.363,544,1.382,545,1.382,546,1.382,547,1.532,548,1.532,549,1.382,550,1.532,551,2.299,552,2.548,554,3.439,555,3.439,556,3.921,557,2.108,558,2.299,576,3.299,579,2.435,596,2.548,614,1.382,758,2.951,760,2.548,774,2.951,923,2.548,974,2.548,993,2.299,1006,2.548,1008,2.548,1017,2.548,1022,4.681,1026,2.548,1040,2.299,1041,1.84,1069,1.532,1070,3.757,1071,2.926,1072,3.757,1073,2.926,1074,1.759,1075,1.759,1076,1.759,1077,2.926,1078,2.926,1079,2.926,1080,1.759,1081,1.759,1082,1.759,1083,1.759,1084,2.926,1085,1.759,1086,2.926,1087,2.299,1088,2.926,1089,2.926,1090,2.926,1091,2.926,1092,5.246,1093,2.926,1094,4.378,1095,2.926,1096,2.926,1097,2.926,1098,2.926,1099,2.926,1100,3.757,1101,2.926,1102,1.759,1103,1.759,1104,1.759,1105,1.759,1106,1.759,1107,1.759,1108,2.926,1109,1.759,1110,1.759,1111,1.759,1112,1.759,1113,3.757,1114,1.759,1115,1.759,1116,2.926,1117,1.759,1118,1.759,1119,1.759,1120,1.759,1121,1.759,1122,1.759,1123,1.759,1124,1.759,1125,1.759,1126,2.926,1127,1.759,1128,1.759,1129,1.759,1130,3.757,1131,1.759]],["title/classes/ProductServiceInputException.html",[31,0.277,745,2.7]],["body/classes/ProductServiceInputException.html",[3,0.198,4,0.198,5,0.138,9,0.325,25,1.529,28,0.441,31,0.372,33,1.529,34,0.013,35,1.038,36,0.65,37,0.896,56,0.198,57,1.698,69,0.011,70,0.011,220,1.492,293,2.273,319,2.958,374,0.737,376,3.088,377,3.626,378,5.217,379,5.217,380,3.501,381,4.85,382,4.544,383,4.811,384,3.9,385,1.967,386,3.9,745,5.201,1132,5.234]],["title/classes/Purchase.html",[31,0.277,636,1.949]],["body/classes/Purchase.html",[3,0.127,4,0.127,5,0.089,9,0.21,22,0.515,28,0.598,31,0.24,34,0.014,36,0.881,37,1.254,49,0.21,56,0.127,69,0.008,70,0.008,101,3.091,138,0.922,186,1.614,220,1.596,261,2.208,330,4.124,374,0.475,389,1.51,390,1.921,391,2.305,392,3.048,395,1.614,397,2.224,430,2.694,433,2.41,579,2.557,583,3.531,584,3.591,587,3.591,590,3.338,591,3.591,592,3.591,593,3.591,603,3.338,607,3.816,616,4.208,619,2.515,636,3.548,637,3.893,638,5.051,641,3.591,646,4.33,647,4.33,652,4.557,653,4.557,654,3.033,655,3.033,656,3.033,657,3.033,658,3.033,659,3.033,660,3.033,867,4.246,980,4.33,982,3.128,984,3.907,1001,2.515,1133,3.033,1134,3.483,1135,3.483,1136,3.483,1137,3.483,1138,3.483,1139,4.33,1140,3.483,1141,3.128,1142,4.557,1143,3.483,1144,3.483,1145,3.483,1146,3.483,1147,3.483,1148,3.483,1149,3.483,1150,3.483,1151,3.483,1152,3.483,1153,3.483,1154,3.483,1155,3.483,1156,3.033,1157,3.483,1158,3.483]],["title/controllers/PurchaseController.html",[134,1.949,1159,2.904]],["body/controllers/PurchaseController.html",[3,0.074,4,0.074,5,0.052,9,0.122,22,0.299,23,1.153,28,0.483,31,0.226,32,1.028,33,1.673,34,0.014,35,1.136,36,0.711,37,0.981,45,2.346,47,2.767,49,0.393,50,0.449,56,0.074,59,0.981,61,2.117,66,2.236,69,0.009,70,0.009,76,3.641,101,3.635,103,2.782,134,0.981,136,0.981,138,0.609,139,2.008,146,5.044,147,1.928,148,3.968,176,3.201,177,1.36,178,1.36,179,2.205,180,4.118,181,4.118,182,4.134,183,1.36,184,0.828,187,1.201,198,1.028,199,3.968,219,3.746,220,1.504,254,1.274,258,2.541,261,1.459,281,3.201,308,1.804,392,2.418,406,1.462,407,2.993,408,2.209,409,1.402,410,2.607,413,1.751,414,1.921,417,2.991,420,4.134,426,2.999,427,2.31,428,2.999,429,3.282,430,2.031,431,2.999,432,2.21,433,2.31,435,2.999,438,3.443,441,2.066,445,1.201,448,1.201,450,2.675,453,1.197,454,1.462,455,1.591,456,1.201,457,2.782,459,2.675,460,1.201,461,1.36,466,1.136,468,1.274,470,1.136,478,3.256,483,1.591,485,1.591,486,1.462,487,1.591,579,1.402,633,3.873,636,3.616,637,3.201,641,3.443,650,1.462,780,4.578,783,4.838,865,3.327,867,2.782,982,2.999,1159,2.372,1160,1.764,1161,4.145,1162,3.609,1163,2.026,1164,2.026,1165,2.026,1166,3.286,1167,2.026,1168,2.026,1169,2.026,1170,2.861,1171,4.769,1172,2.026,1173,2.026,1174,2.026,1175,2.026,1176,5.148,1177,2.026,1178,2.026,1179,2.861,1180,2.026,1181,2.026,1182,2.026,1183,4.134,1184,4.769,1185,2.026,1186,2.026,1187,3.286,1188,4.134,1189,2.026,1190,2.026,1191,3.256,1192,1.764,1193,1.764,1194,2.999,1195,1.764,1196,2.026,1197,2.026,1198,2.026,1199,2.026,1200,3.286,1201,2.026,1202,2.026,1203,2.026,1204,2.026,1205,2.026,1206,2.026,1207,2.026]],["title/modules/PurchaseModule.html",[105,1.713,115,2.7]],["body/modules/PurchaseModule.html",[3,0.195,4,0.195,5,0.136,31,0.367,34,0.014,49,0.452,50,1.18,56,0.195,69,0.011,70,0.011,105,2.813,107,2.703,108,3.2,113,3.991,115,5.407,117,3.706,118,2.988,119,2.581,121,4.154,131,3.915,136,3.2,235,3.575,1159,5.184,1194,4.946,1195,4.638,1208,4.638,1209,5.327,1210,4.638,1211,5.327,1212,5.327]],["title/classes/PurchaseNotFoundException.html",[31,0.277,917,2.904]],["body/classes/PurchaseNotFoundException.html",[3,0.186,4,0.186,5,0.13,9,0.305,25,1.987,28,0.414,31,0.349,34,0.014,49,0.305,50,1.124,56,0.186,57,1.632,69,0.01,70,0.01,138,1.367,293,2.321,318,2.686,374,0.692,385,2.333,497,3.574,498,4.372,500,3.418,502,4.372,503,4.138,509,3.404,510,5.326,511,4.713,512,3.662,513,4.416,636,3.764,870,4.417,917,4.625,918,5.033]],["title/injectables/PurchaseService.html",[0,1.36,1194,2.53]],["body/injectables/PurchaseService.html",[0,1.13,2,1.049,3,0.076,4,0.076,5,0.053,9,0.124,22,0.306,23,1.172,25,0.585,28,0.487,30,2.242,31,0.289,32,1.695,33,1.687,34,0.014,35,1.359,36,0.717,37,0.989,45,2.099,47,2.697,49,0.386,50,0.458,56,0.076,59,1.002,61,2.515,66,2.004,67,4.066,69,0.008,70,0.005,76,3.575,83,2.643,101,3.716,103,3.239,138,0.982,139,2.338,186,0.958,198,1.049,202,2.351,220,1.583,238,3.035,252,2.876,258,1.78,261,2.515,290,2.242,308,1.825,325,1.387,337,3.563,359,1.98,392,2.692,395,1.548,408,2.571,409,1.421,410,2.643,413,1.78,414,1.948,420,2.242,426,2.101,427,1.618,428,2.101,429,3.019,430,2.055,431,2.101,432,1.948,433,1.618,435,2.101,441,2.101,445,1.98,448,1.225,450,1.874,453,1.216,466,1.16,468,1.3,470,1.16,476,1.874,515,3.484,516,3.484,519,1.492,527,1.624,541,2.643,544,1.624,545,1.624,549,1.624,554,4.161,555,5.171,558,2.624,579,1.791,616,1.3,633,3.903,636,3.544,637,2.821,641,2.411,650,1.492,780,3.239,783,5.557,862,3.034,865,2.86,867,3.555,1162,3.659,1176,5.404,1179,2.908,1183,4.165,1188,4.165,1191,3.301,1192,1.8,1193,1.8,1194,2.101,1213,1.8,1214,2.067,1215,2.067,1216,2.067,1217,2.067,1218,2.067,1219,2.067,1220,2.067,1221,2.067,1222,2.067,1223,2.067,1224,1.3,1225,2.067,1226,2.067,1227,2.067,1228,3.34,1229,2.067,1230,3.34,1231,2.067,1232,3.34,1233,1.8,1234,3.34,1235,3.34,1236,2.067]],["title/classes/PurchaseServiceInputException.html",[31,0.277,868,2.7]],["body/classes/PurchaseServiceInputException.html",[3,0.198,4,0.198,5,0.138,9,0.325,25,1.529,28,0.441,31,0.372,33,1.529,34,0.013,35,1.038,36,0.65,37,0.896,56,0.198,57,1.698,69,0.011,70,0.011,220,1.492,293,2.273,319,2.958,374,0.737,376,3.088,377,3.626,378,5.217,379,5.217,380,3.501,381,4.85,382,4.544,383,4.811,384,3.9,385,1.967,386,3.9,868,5.201,1237,5.234]],["title/classes/RefreshTokenDto.html",[31,0.277,171,2.904]],["body/classes/RefreshTokenDto.html",[3,0.198,4,0.198,5,0.138,9,0.325,22,0.798,28,0.441,31,0.459,34,0.014,36,0.65,49,0.325,56,0.198,69,0.011,70,0.011,93,3.228,138,1.398,142,4.811,144,4.85,147,1.762,171,4.811,220,1.376,259,3.738,374,0.737,389,2.023,390,2.023,397,1.64,453,2.427,570,3.088,575,2.124,839,4.19,851,4.244,853,6.291,1238,5.802,1239,4.704,1240,5.402]],["title/classes/ReviewPurchaseDto.html",[31,0.277,1183,2.7]],["body/classes/ReviewPurchaseDto.html",[3,0.172,4,0.172,5,0.121,9,0.283,22,0.696,28,0.499,31,0.421,34,0.014,36,0.735,37,1.013,49,0.408,56,0.172,57,1.2,69,0.01,70,0.01,147,1.993,184,1.926,220,1.261,374,0.643,389,1.855,390,1.855,397,1.855,430,2.602,569,3.101,570,2.831,574,3.101,575,1.852,579,2.427,583,3.101,597,3.7,611,4.101,613,3.428,619,3.4,635,3.4,636,3.286,650,3.4,652,5.637,653,5.637,867,5.114,1139,5.32,1141,3.842,1142,5.327,1156,4.101,1183,4.101,1241,5.905,1242,4.71,1243,4.71,1244,4.71,1245,4.71,1246,4.71,1247,4.71,1248,4.71,1249,4.71,1250,4.71]],["title/guards/RolesGuard.html",[1251,3.16,1252,2.904]],["body/guards/RolesGuard.html",[0,1.853,3,0.146,4,0.146,5,0.102,9,0.241,15,5.28,18,5.28,19,4.511,20,6.131,21,5.853,22,0.591,23,1.922,24,6.131,25,1.132,26,3.483,27,6.601,28,0.447,30,3.678,31,0.43,32,2.781,33,1.55,34,0.014,35,1.053,36,0.659,37,0.909,38,3.483,39,5.28,44,4.304,45,1.353,46,3.956,47,2.154,48,4.909,49,0.424,50,0.886,51,2.888,53,2.888,56,0.146,59,1.938,61,2.774,64,3.483,65,3.483,66,2.073,67,2.371,69,0.009,70,0.009,73,3.247,98,3.143,103,3.678,138,1.348,146,2.685,186,1.854,219,3.143,314,5.28,391,1.854,417,3.875,459,3.074,461,2.685,1224,2.516,1233,3.483,1252,3.956,1253,3.483,1254,6.722,1255,4.001,1256,4.001,1257,5.479,1258,3.143,1259,4.001,1260,4.001,1261,4.001]],["title/classes/UpdateCategoryDto.html",[31,0.277,449,2.7]],["body/classes/UpdateCategoryDto.html",[3,0.204,4,0.204,5,0.143,9,0.335,31,0.384,34,0.014,37,1.127,49,0.409,56,0.204,57,1.421,69,0.011,70,0.011,184,2.28,374,0.761,387,3.016,389,2.063,409,1.886,416,4.608,449,4.56,467,4.38,568,4.38,569,3.448,890,4.272,1141,4.272,1262,4.855,1263,4.905,1264,4.905,1265,4.905,1266,4.025,1267,5.575]],["title/classes/UpdateProductDto.html",[31,0.277,1022,2.7]],["body/classes/UpdateProductDto.html",[3,0.204,4,0.204,5,0.143,9,0.335,31,0.384,34,0.014,37,1.127,49,0.409,56,0.204,57,1.421,69,0.011,70,0.011,184,2.28,374,0.761,389,2.063,409,1.886,569,3.448,576,4.608,578,4.38,579,2.298,890,4.272,1022,4.56,1040,4.38,1141,4.272,1263,4.905,1264,4.905,1265,4.905,1266,4.025,1268,4.855,1269,5.575]],["title/classes/UpdatePurchaseDto.html",[31,0.277,1188,2.7]],["body/classes/UpdatePurchaseDto.html",[3,0.204,4,0.204,5,0.143,9,0.335,31,0.384,34,0.014,37,1.127,49,0.409,56,0.204,57,1.421,69,0.011,70,0.011,184,2.28,374,0.761,389,2.063,409,1.886,569,3.448,633,4.608,635,4.025,636,3.291,890,4.272,1141,4.272,1188,4.56,1191,4.38,1263,4.905,1264,4.905,1265,4.905,1266,4.025,1270,4.855,1271,5.575]],["title/classes/UpdateUserDto.html",[31,0.277,1272,2.7]],["body/classes/UpdateUserDto.html",[3,0.182,4,0.182,5,0.127,9,0.299,22,0.734,28,0.405,31,0.435,34,0.014,36,0.597,37,1.214,49,0.418,56,0.182,57,1.266,69,0.01,70,0.01,138,1.357,147,1.62,164,3.976,184,2.031,203,2.692,220,1.305,374,0.678,389,1.919,390,1.919,397,1.508,409,1.68,569,3.208,573,4.243,574,3.208,575,1.953,613,3.547,661,4.373,663,3.586,681,3.586,691,5.463,890,3.976,1141,3.976,1263,4.564,1264,4.564,1265,4.564,1266,3.586,1272,4.243,1273,4.966,1274,4.967,1275,4.967,1276,3.902,1277,4.967]],["title/classes/UpdateUserRoleDto.html",[31,0.277,1278,2.7]],["body/classes/UpdateUserRoleDto.html",[3,0.181,4,0.181,5,0.126,9,0.297,22,0.73,28,0.514,31,0.434,34,0.014,36,0.758,49,0.379,56,0.181,69,0.01,70,0.01,138,1.486,147,2.055,186,2.29,202,3.35,220,1.301,308,2.383,374,0.674,389,1.913,390,1.913,397,1.913,414,2.92,417,2.633,453,2.295,570,2.92,575,1.943,677,6.04,680,3.567,1224,5.081,1273,5.45,1278,4.229,1279,4.303,1280,4.941,1281,6.301,1282,4.941,1283,4.941]],["title/classes/User.html",[31,0.277,138,0.746]],["body/classes/User.html",[3,0.131,4,0.131,5,0.091,9,0.215,22,0.528,28,0.602,31,0.246,34,0.014,35,1.299,36,0.887,37,1.288,49,0.215,56,0.131,69,0.008,70,0.008,138,1.517,152,3.657,186,1.656,202,3,203,2.877,220,1.628,261,2.249,330,3.002,367,2.399,374,0.488,389,1.538,390,1.944,391,2.347,392,2.763,395,1.656,397,2.239,417,3.411,476,2.842,603,3.4,616,4.25,664,5.884,680,2.58,685,3.112,686,3.112,687,3.112,688,3.112,701,3.4,865,3.002,982,4.026,984,5.028,1001,3.657,1002,4.411,1003,4.411,1224,4.637,1284,3.112,1285,5.884,1286,3.574,1287,3.574,1288,3.574,1289,3.574,1290,3.574,1291,3.574,1292,3.574,1293,3.574,1294,3.574,1295,3.574,1296,3.574,1297,3.574,1298,3.574,1299,3.574,1300,3.574]],["title/controllers/UserController.html",[134,1.949,1301,2.904]],["body/controllers/UserController.html",[3,0.102,4,0.102,5,0.071,9,0.167,22,0.41,23,1.476,28,0.497,31,0.29,32,1.409,33,1.724,34,0.014,35,1.171,36,0.733,37,1.011,41,2.494,45,2.253,47,2.817,49,0.438,50,0.615,56,0.102,59,1.345,61,2.256,66,2.305,69,0.007,70,0.007,76,2.462,101,2.708,134,1.345,136,1.345,138,1.441,139,2.462,146,5.148,147,1.988,148,4.09,152,4.63,176,3.806,177,1.863,178,1.863,179,2.824,180,3.992,181,4.454,182,4.305,183,1.863,184,1.135,187,1.645,198,1.409,199,4.09,203,1.792,250,3.361,254,1.745,258,3.021,281,3.806,308,2.145,372,2.417,406,2.004,407,3.668,408,2.708,409,1.423,413,2.708,414,2.355,417,2.242,420,2.824,438,3.038,450,3.598,453,2.336,454,3.038,456,2.494,458,2.18,459,2.36,460,1.645,461,1.863,466,1.557,470,2.36,486,2.004,503,2.36,661,4.033,689,4.607,1045,2.417,1224,3.196,1272,4.607,1276,3.992,1278,4.305,1301,3.038,1302,2.417,1303,3.663,1304,4.424,1305,2.417,1306,2.775,1307,2.775,1308,2.775,1309,2.775,1310,2.775,1311,5.081,1312,3.41,1313,2.775,1314,2.775,1315,2.775,1316,4.207,1317,2.775,1318,2.775,1319,2.775,1320,2.417,1321,4.207,1322,2.775,1323,2.775,1324,2.417,1325,2.417,1326,1.863,1327,2.417,1328,2.417,1329,2.417,1330,2.775,1331,2.775,1332,2.775,1333,2.775,1334,5.081,1335,2.775,1336,2.775,1337,2.775,1338,2.775]],["title/classes/UserInputExceptionHandler.html",[31,0.277,732,2.904]],["body/classes/UserInputExceptionHandler.html",[3,0.157,4,0.157,5,0.11,9,0.258,22,0.634,23,2.015,28,0.35,31,0.295,33,1.213,34,0.014,35,0.824,36,0.516,37,0.711,45,1.45,49,0.446,50,0.95,56,0.157,69,0.009,70,0.009,138,1.282,308,2.616,318,2.519,319,3.555,359,4.099,373,3.612,374,0.585,375,3.368,376,3.205,382,4.35,391,2.661,497,3.351,504,3.095,511,2.878,697,4.072,701,3.854,702,4.146,707,3.854,714,4.993,722,4.993,723,4.993,729,3.095,732,4.146,734,5.83,745,3.854,753,4.099,808,3.612,814,3.095,831,3.733,868,3.854,882,3.733,1132,3.368,1237,3.368,1339,5,1340,3.368,1341,4.288,1342,5.743,1343,4.288]],["title/modules/UserModule.html",[105,1.713,116,2.53]],["body/modules/UserModule.html",[3,0.189,4,0.189,5,0.132,31,0.356,34,0.014,49,0.447,50,1.145,56,0.189,69,0.011,70,0.011,105,2.76,107,2.623,108,3.141,113,3.962,116,5.082,117,3.637,118,2.899,119,2.504,121,4.077,131,3.842,136,3.141,235,3.469,250,4.875,952,5.644,1301,5.114,1329,4.5,1344,4.5,1345,4.5,1346,5.168,1347,4.5,1348,5.168,1349,5.168]],["title/classes/UserNotFoundException.html",[31,0.277,919,2.904]],["body/classes/UserNotFoundException.html",[3,0.182,4,0.182,5,0.127,9,0.299,25,1.968,28,0.405,31,0.342,34,0.013,49,0.299,50,1.101,56,0.182,57,1.611,69,0.01,70,0.01,138,1.499,202,3.249,293,2.303,318,2.666,374,0.678,385,2.302,392,2.994,497,3.547,498,4.338,500,3.392,502,4.338,503,4.107,509,3.334,510,5.285,511,4.667,512,3.586,513,4.373,919,4.564,920,4.966,1350,4.967]],["title/injectables/UserService.html",[0,1.36,250,2.384]],["body/injectables/UserService.html",[0,1.045,2,0.953,3,0.069,4,0.069,5,0.048,9,0.113,22,0.278,23,1.084,25,0.531,28,0.506,31,0.271,32,1.568,33,1.753,34,0.014,35,1.191,36,0.745,37,1.028,45,2.257,47,2.786,49,0.401,50,0.416,56,0.069,59,0.91,61,2.75,66,1.905,69,0.005,70,0.005,76,3.659,83,2.474,138,1.442,139,2.209,141,1.943,164,3.761,198,0.953,202,2.405,203,3.233,220,1.53,238,2.867,240,3.407,250,1.831,252,2.749,254,1.943,258,1.646,261,2.832,272,5.207,274,2.69,275,5.207,276,3.581,277,3.911,290,2.073,293,1.434,308,2.472,319,2.024,320,3.426,321,1.356,325,1.261,332,1.635,337,4.198,357,3.969,359,1.831,392,2.823,395,1.431,408,2.429,409,1.045,413,1.646,414,1.823,427,1.497,445,1.831,448,1.113,450,2.557,453,1.125,456,2.702,466,1.054,470,1.733,515,3.291,516,3.291,519,1.356,590,3.059,661,3.407,679,1.635,689,3.843,691,3.091,712,2.427,805,2.23,855,2.23,857,2.69,865,3.545,982,1.181,1224,2.474,1272,4.698,1276,3.091,1278,3.636,1285,1.635,1303,2.69,1304,3.426,1305,2.69,1312,2.641,1320,1.635,1324,1.635,1325,1.635,1326,1.261,1327,1.635,1328,1.635,1351,1.635,1352,3.089,1353,3.935,1354,3.935,1355,1.878,1356,1.878,1357,3.089,1358,1.878,1359,4.558,1360,3.089,1361,3.089,1362,1.878,1363,3.089,1364,3.089,1365,3.089,1366,1.878,1367,1.878,1368,3.089,1369,3.089,1370,3.089,1371,4.558,1372,1.878,1373,1.878,1374,1.878,1375,1.878,1376,1.878,1377,3.089,1378,3.935,1379,1.476,1380,1.878,1381,3.089,1382,1.878,1383,4.558,1384,1.878,1385,3.089,1386,4.558,1387,1.878,1388,1.878,1389,3.935,1390,1.878,1391,1.878,1392,3.089,1393,1.878,1394,1.878,1395,3.089,1396,1.878,1397,1.878,1398,4.558,1399,4.558,1400,3.089,1401,1.878]],["title/classes/UserServiceInputException.html",[31,0.277,808,2.53]],["body/classes/UserServiceInputException.html",[3,0.198,4,0.198,5,0.138,9,0.325,25,1.529,28,0.441,31,0.372,33,1.529,34,0.013,35,1.038,36,0.65,37,0.896,56,0.198,57,1.698,69,0.011,70,0.011,220,1.492,293,2.273,319,2.958,374,0.737,376,3.088,377,3.626,378,5.217,379,5.217,380,3.501,381,4.85,382,4.544,383,4.811,384,3.9,385,1.967,386,3.9,808,4.873,1340,5.234]],["title/classes/UserWithoutPassword.html",[31,0.277,1326,2.7]],["body/classes/UserWithoutPassword.html",[3,0.208,4,0.208,5,0.145,9,0.341,31,0.391,34,0.014,49,0.413,56,0.208,57,1.446,61,2.519,69,0.011,70,0.011,138,1.369,184,2.321,203,3.144,374,0.774,608,4.458,890,4.318,1312,3.809,1326,4.609,1402,4.941,1403,4.941,1404,6.867,1405,6.867,1406,6.867,1407,5.675,1408,5.675]],["title/coverage.html",[1409,4.789]],["body/coverage.html",[0,2.268,1,1.713,5,0.061,6,2.928,7,1.331,8,2.066,31,0.565,34,0.014,35,0.716,36,0.285,41,1.406,54,1.864,69,0.006,70,0.006,71,1.592,72,2.066,89,1.713,134,2.748,135,1.713,137,2.066,138,0.691,155,1.713,161,1.713,171,1.713,188,1.492,192,1.592,202,1.053,203,1.587,237,2.066,250,1.406,252,1.204,259,1.331,308,0.897,322,1.864,326,1.864,331,1.713,334,1.713,373,1.492,375,1.864,376,2.418,377,3.502,387,1.053,388,2.066,404,1.713,405,2.066,416,1.492,422,1.592,437,1.406,449,1.592,459,1.331,460,2.209,464,1.492,494,1.713,495,2.691,496,3.324,508,1.713,509,3.502,514,2.066,567,2.066,568,2.928,576,1.492,577,2.066,578,2.928,579,0.802,633,1.492,634,2.066,635,3.324,636,1.806,661,1.492,662,2.066,663,3.324,689,1.592,690,2.066,693,1.713,694,1.864,696,1.713,697,1.492,699,2.066,704,4.938,708,1.864,709,2.066,727,1.713,730,1.713,732,1.713,734,1.864,740,1.864,741,2.066,742,2.066,745,1.592,755,1.864,756,2.066,757,2.066,765,2.066,766,2.066,775,2.066,776,2.066,780,1.592,781,2.066,782,2.066,798,2.928,799,2.066,805,1.713,806,2.066,807,2.928,808,1.492,810,2.066,813,2.066,814,3.324,836,2.066,837,2.066,843,2.066,852,2.066,855,1.713,856,2.066,862,1.713,863,2.066,864,2.066,868,1.592,871,2.066,914,1.713,915,2.691,916,1.713,917,1.713,918,1.864,919,1.713,920,1.864,954,2.066,979,2.066,1004,1.713,1005,2.066,1022,1.592,1034,1.713,1037,1.864,1038,1.864,1041,1.492,1065,3.617,1069,2.066,1132,1.864,1133,2.066,1159,1.713,1160,2.066,1183,1.592,1188,1.592,1194,1.492,1213,2.066,1237,1.864,1238,2.066,1239,2.066,1241,2.066,1251,1.864,1252,1.713,1253,2.066,1258,1.864,1262,2.066,1268,2.066,1270,2.066,1272,1.592,1273,2.928,1278,1.592,1279,2.066,1284,2.066,1301,1.713,1302,2.066,1312,1.592,1326,1.592,1339,2.066,1340,1.864,1351,2.066,1379,1.864,1402,2.066,1403,2.066,1409,2.066,1410,2.066,1411,2.372,1412,2.372,1413,8.387,1414,6.707,1415,3.728,1416,2.372,1417,2.372,1418,7.885,1419,3.246,1420,6.707,1421,7.572,1422,2.066,1423,2.928,1424,5.218,1425,2.372,1426,2.066,1427,3.246,1428,4.009,1429,2.066,1430,2.066,1431,2.066,1432,2.066,1433,3.728,1434,4.604,1435,4.604,1436,2.372,1437,3.728,1438,3.728,1439,3.246,1440,2.066,1441,2.372,1442,2.372]],["title/dependencies.html",[108,2.345,1443,2.921]],["body/dependencies.html",[7,2.955,11,4.736,31,0.452,34,0.014,50,1.167,51,3.803,52,3.803,53,3.803,69,0.011,70,0.011,108,2.552,184,2.154,186,2.441,187,3.888,230,4.138,319,2.339,321,3.803,330,3.122,395,2.441,575,2.071,706,4.138,773,3.536,911,4.138,1064,4.587,1444,7.145,1445,5.268,1446,5.268,1447,5.268,1448,5.268,1449,5.268,1450,5.268,1451,5.268,1452,5.268,1453,4.587,1454,5.268,1455,5.268,1456,5.268,1457,5.268,1458,5.268,1459,5.268,1460,5.268,1461,5.268,1462,5.268,1463,5.268,1464,4.587,1465,4.587,1466,5.268,1467,5.268]],["title/miscellaneous/functions.html",[1468,2.11,1469,4.215]],["body/miscellaneous/functions.html",[5,0.13,22,0.752,33,1.439,34,0.013,35,0.977,36,0.612,37,0.844,45,2.629,47,1.999,69,0.01,70,0.01,93,2.464,147,1.659,326,5.523,397,1.948,409,1.72,413,2.71,414,2.357,417,2.71,459,3.944,460,3.014,476,2.853,557,2.853,579,1.72,583,3.257,607,2.71,707,4.307,749,4.307,839,3.199,865,3.014,982,4.644,1037,5.523,1038,3.995,1087,3.995,1422,5.588,1423,5.041,1431,4.428,1432,6.122,1439,4.428,1440,5.588,1468,3.199,1469,4.428,1470,6.417,1471,5.086,1472,5.086,1473,4.428,1474,5.086,1475,6.417,1476,6.417,1477,5.086,1478,5.086,1479,5.086,1480,5.086,1481,4.428,1482,4.428]],["title/index.html",[22,0.496,1483,2.921,1484,2.921]],["body/index.html",[7,1.856,11,3.46,19,2.22,31,0.33,34,0.013,69,0.008,70,0.008,93,1.603,139,2.322,187,2.84,319,1.469,321,2.388,395,2.863,408,3.292,417,1.763,575,1.301,667,6.013,713,2.881,749,2.22,773,2.22,911,2.599,1453,2.881,1464,4.173,1465,2.881,1485,3.308,1486,5.635,1487,3.308,1488,7.053,1489,6.558,1490,3.308,1491,7.972,1492,4.793,1493,4.793,1494,4.793,1495,3.308,1496,5.635,1497,4.793,1498,5.635,1499,4.793,1500,3.308,1501,3.308,1502,3.308,1503,4.793,1504,5.635,1505,4.793,1506,4.793,1507,4.793,1508,3.308,1509,3.308,1510,4.793,1511,3.308,1512,3.308,1513,7.223,1514,4.793,1515,3.308,1516,3.308,1517,6.179,1518,3.308,1519,3.308,1520,3.308,1521,3.308,1522,3.308,1523,3.308,1524,6.179,1525,3.308,1526,3.308,1527,3.308,1528,3.308,1529,3.308,1530,7.362,1531,4.793,1532,4.793,1533,4.793,1534,4.793,1535,4.793,1536,3.308,1537,3.308,1538,3.308,1539,3.308,1540,3.308,1541,6.179,1542,6.558,1543,4.793,1544,3.308,1545,3.308,1546,4.793,1547,3.308,1548,3.308,1549,3.308,1550,3.308,1551,3.308,1552,3.308,1553,3.308,1554,3.308,1555,3.308,1556,4.793,1557,5.635,1558,6.558,1559,3.308,1560,3.308,1561,6.558,1562,7.053,1563,3.308,1564,3.308,1565,3.308,1566,3.308,1567,3.308,1568,3.308,1569,3.308,1570,3.308,1571,3.308,1572,3.308,1573,3.308,1574,3.308,1575,4.793,1576,3.308,1577,3.308,1578,3.308,1579,3.308,1580,3.308,1581,3.308,1582,3.308,1583,3.308,1584,3.308,1585,3.308,1586,3.308,1587,3.308,1588,3.308,1589,3.308,1590,3.308,1591,3.308,1592,3.308,1593,3.308,1594,3.308,1595,3.308,1596,3.308,1597,3.308,1598,3.308,1599,3.308,1600,3.308,1601,3.308,1602,3.308,1603,3.308,1604,3.308,1605,3.308,1606,2.881]],["title/license.html",[1483,2.921,1484,2.921,1607,2.635]],["body/license.html",[34,0.01,69,0.01,70,0.01,119,2.407,187,2.944,506,4.564,751,4.325,829,4.325,1001,3.586,1170,4.325,1312,4.667,1410,4.325,1606,4.325,1607,3.902,1608,6.954,1609,4.967,1610,4.967,1611,4.967,1612,6.322,1613,4.967,1614,4.967,1615,4.967,1616,4.967,1617,4.967,1618,4.967,1619,6.322,1620,8.024,1621,4.967,1622,4.967,1623,4.967,1624,4.967,1625,6.322,1626,4.967,1627,4.967,1628,4.967,1629,4.967,1630,4.967,1631,4.967,1632,4.967,1633,4.967,1634,6.322,1635,4.967,1636,4.967,1637,4.967,1638,4.967,1639,4.967,1640,4.967,1641,6.322,1642,6.322,1643,4.967,1644,4.967,1645,4.967,1646,4.967,1647,4.967,1648,4.967,1649,4.967,1650,4.967,1651,4.967,1652,4.967,1653,4.967,1654,4.967,1655,4.967,1656,4.967,1657,4.967,1658,4.967,1659,4.967,1660,4.967,1661,4.967,1662,4.967,1663,4.967,1664,4.967,1665,4.967,1666,4.967,1667,4.967,1668,4.967,1669,4.967,1670,4.967]],["title/modules.html",[107,2.791]],["body/modules.html",[34,0.011,69,0.011,70,0.011,106,4.209,107,2.959,111,3.913,112,3.913,113,2.959,114,3.913,115,3.913,116,3.667,1671,8.123,1672,8.123,1673,8.123,1674,8.123]],["title/overview.html",[1675,4.789]],["body/overview.html",[2,2.191,34,0.014,69,0.009,70,0.009,71,4.361,106,5.852,107,2.191,108,2.795,109,3.759,110,3.759,111,5.342,112,5.096,113,4.039,114,5.096,115,5.096,116,4.913,117,3.236,118,2.422,119,2.091,136,2.091,188,4.086,225,3.759,227,3.759,250,4.5,252,3.854,374,0.589,430,2.456,464,4.086,489,3.759,491,3.759,696,3.116,948,3.759,949,3.759,950,3.759,1041,4.086,1058,3.759,1059,3.759,1142,3.391,1194,4.086,1208,3.759,1210,3.759,1251,3.391,1344,3.759,1345,3.759,1347,3.759,1675,3.759,1676,4.317,1677,4.317,1678,4.317]],["title/properties.html",[390,1.47,1443,2.921]],["body/properties.html",[9,0.378,34,0.013,69,0.012,70,0.012,390,1.91,1607,4.942,1679,6.291,1680,6.291,1681,6.291,1682,6.291,1683,6.291]],["title/miscellaneous/typealiases.html",[1468,2.11,1684,4.841]],["body/miscellaneous/typealiases.html",[22,0.834,34,0.011,36,0.921,69,0.011,70,0.011,73,4.055,74,5.317,80,5.958,84,5.958,91,5.958,93,3.863,94,5.958,256,6.413,259,3.165,305,5.958,839,3.548,1468,3.548,1685,5.641,1686,6.842,1687,6.842,1688,7.657,1689,5.641,1690,6.842,1691,5.641,1692,5.641,1693,5.641]],["title/miscellaneous/variables.html",[1468,2.11,1694,4.215]],["body/miscellaneous/variables.html",[5,0.162,12,2.751,17,3.605,22,0.518,34,0.014,36,0.838,41,3.448,54,3.922,61,2.816,62,3.049,66,2.201,67,2.959,69,0.008,70,0.008,73,2.076,74,3.605,75,3.049,89,3.605,98,2.751,138,0.649,139,1.697,141,2.203,146,3.351,220,1.031,259,1.965,293,2.11,315,3.049,322,3.922,397,1.063,409,1.184,427,3.616,432,1.623,453,1.275,459,2.801,460,2.076,607,1.866,706,3.922,749,3.905,769,2.751,817,6.67,865,2.076,894,3.049,1029,3.049,1030,3.049,1031,3.049,1032,3.049,1033,3.049,1034,3.605,1065,2.751,1087,2.751,1252,2.528,1258,3.922,1379,3.922,1419,3.049,1423,3.922,1426,3.049,1427,3.049,1428,5.523,1429,5.066,1430,4.347,1468,2.203,1473,3.049,1481,5.066,1482,3.049,1694,3.049,1695,4.993,1696,3.502,1697,4.993,1698,5.818,1699,4.993,1700,4.993,1701,3.502,1702,4.993,1703,3.502,1704,5.818,1705,3.502,1706,3.502,1707,4.993,1708,3.502,1709,3.502,1710,3.502,1711,4.993,1712,4.993,1713,4.993,1714,3.502,1715,3.502,1716,3.502,1717,3.502,1718,3.502,1719,4.993,1720,4.993,1721,3.502,1722,4.993,1723,4.993,1724,3.502,1725,3.502,1726,3.502,1727,3.502,1728,3.502,1729,5.818,1730,4.993,1731,4.993,1732,3.502,1733,3.502,1734,3.502,1735,3.502,1736,4.993,1737,3.502,1738,4.993,1739,3.502,1740,4.993,1741,3.502,1742,3.502,1743,3.502,1744,3.502,1745,3.502,1746,3.502,1747,3.502,1748,3.502,1749,3.502,1750,3.502,1751,3.502,1752,3.502]]],"invertedIndex":[["",{"_index":34,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["0.0.1",{"_index":1680,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1460,"title":{},"body":{"dependencies.html":{}}}],["0.1.2",{"_index":1457,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1452,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1451,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1455,"title":{},"body":{"dependencies.html":{}}}],["03",{"_index":1002,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["05",{"_index":1157,"title":{},"body":{"classes/Purchase.html":{}}}],["0878",{"_index":629,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["1",{"_index":430,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"overview.html":{}}}],["1/1",{"_index":1421,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":432,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"miscellaneous/variables.html":{}}}],["10/10",{"_index":1434,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1413,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":1719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11/11",{"_index":1425,"title":{},"body":{"coverage.html":{}}}],["12/12",{"_index":1436,"title":{},"body":{"coverage.html":{}}}],["138.75",{"_index":660,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["13t15:41:28.527z",{"_index":1158,"title":{},"body":{"classes/Purchase.html":{}}}],["14/15",{"_index":1417,"title":{},"body":{"coverage.html":{}}}],["151be8d85634",{"_index":1299,"title":{},"body":{"classes/User.html":{}}}],["15m",{"_index":1703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1811c405c0f7",{"_index":1150,"title":{},"body":{"classes/Purchase.html":{}}}],["1e9",{"_index":1734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":659,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["2.1.3",{"_index":1454,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1418,"title":{},"body":{"coverage.html":{}}}],["2022",{"_index":1001,"title":{},"body":{"classes/Product.html":{},"classes/Purchase.html":{},"classes/User.html":{},"license.html":{}}}],["25d18b3976a0",{"_index":658,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["26c3fd79",{"_index":793,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["26t15:41:28.527z",{"_index":1003,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["2b$10$1xpzuyu8fuvuabb3sc0xzur9dx7kakbmlt0vlnoz.unlntdmfc4lk",{"_index":1300,"title":{},"body":{"classes/User.html":{}}}],["2e651e21b871",{"_index":627,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["3",{"_index":1718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":1462,"title":{},"body":{"dependencies.html":{}}}],["3.14.0",{"_index":1449,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1414,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":1552,"title":{},"body":{"index.html":{}}}],["306e52f9e686",{"_index":792,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["32d0226134e2",{"_index":797,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["3mb",{"_index":1033,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":1456,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":1466,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1424,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":499,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["404",{"_index":510,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["42",{"_index":621,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["4302",{"_index":997,"title":{},"body":{"classes/Product.html":{}}}],["4368",{"_index":1148,"title":{},"body":{"classes/Purchase.html":{}}}],["438c",{"_index":399,"title":{},"body":{"classes/Category.html":{}}}],["44",{"_index":1678,"title":{},"body":{"overview.html":{}}}],["441e",{"_index":1297,"title":{},"body":{"classes/User.html":{}}}],["463b",{"_index":790,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["4646",{"_index":795,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["4688",{"_index":630,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["4889",{"_index":1153,"title":{},"body":{"classes/Purchase.html":{}}}],["49f3",{"_index":625,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["4fce",{"_index":400,"title":{},"body":{"classes/Category.html":{}}}],["4fde",{"_index":656,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["5",{"_index":1142,"title":{},"body":{"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{},"overview.html":{}}}],["5.0.1",{"_index":1450,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":1448,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1437,"title":{},"body":{"coverage.html":{}}}],["541c",{"_index":789,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["5c68ae94",{"_index":654,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["6/6",{"_index":1415,"title":{},"body":{"coverage.html":{}}}],["6f4ca8a4",{"_index":995,"title":{},"body":{"classes/Product.html":{}}}],["7",{"_index":1676,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":1463,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1433,"title":{},"body":{"coverage.html":{}}}],["70.00",{"_index":620,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["7aed",{"_index":1296,"title":{},"body":{"classes/User.html":{}}}],["7b5547f01b0a",{"_index":999,"title":{},"body":{"classes/Product.html":{}}}],["8",{"_index":683,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8'})@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":673,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.0.1",{"_index":1445,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":1447,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":1467,"title":{},"body":{"dependencies.html":{}}}],["8.4.6",{"_index":1444,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1435,"title":{},"body":{"coverage.html":{}}}],["857cd575",{"_index":623,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["8aa0",{"_index":996,"title":{},"body":{"classes/Product.html":{}}}],["8d85",{"_index":401,"title":{},"body":{"classes/Category.html":{}}}],["8fd6",{"_index":791,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["9",{"_index":1677,"title":{},"body":{"overview.html":{}}}],["9/9",{"_index":1438,"title":{},"body":{"coverage.html":{}}}],["90d",{"_index":1706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["93",{"_index":1416,"title":{},"body":{"coverage.html":{}}}],["949e",{"_index":1149,"title":{},"body":{"classes/Purchase.html":{}}}],["956b",{"_index":624,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["95f273eb70e1",{"_index":1155,"title":{},"body":{"classes/Purchase.html":{}}}],["979e",{"_index":1154,"title":{},"body":{"classes/Purchase.html":{}}}],["9f7f",{"_index":1298,"title":{},"body":{"classes/User.html":{}}}],["a04bb2db",{"_index":1151,"title":{},"body":{"classes/Purchase.html":{}}}],["a287",{"_index":796,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["a75e",{"_index":626,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["abc123456",{"_index":681,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{}}}],["above",{"_index":1640,"title":{},"body":{"license.html":{}}}],["abrir",{"_index":1550,"title":{},"body":{"index.html":{}}}],["ac1b",{"_index":998,"title":{},"body":{"classes/Product.html":{}}}],["ac63",{"_index":631,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["accepts",{"_index":1748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access",{"_index":73,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"guards/RolesGuard.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["accessible",{"_index":1482,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["accessing",{"_index":1254,"title":{},"body":{"guards/RolesGuard.html":{}}}],["accessjwtauthguard",{"_index":1,"title":{"injectables/AccessJwtAuthGuard.html":{}},"body":{"injectables/AccessJwtAuthGuard.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["accessjwtconfig",{"_index":89,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["accessjwtconfig.secret",{"_index":100,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["accessjwtstrategy",{"_index":71,"title":{"injectables/AccessJwtStrategy.html":{}},"body":{"injectables/AccessJwtStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["accesstoken",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginResponse.html":{}}}],["accesstokencontent",{"_index":91,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["accesstokenpayload",{"_index":80,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["acessar",{"_index":1554,"title":{},"body":{"index.html":{}}}],["action",{"_index":1664,"title":{},"body":{"license.html":{}}}],["active",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["add",{"_index":1475,"title":{},"body":{"miscellaneous/functions.html":{}}}],["adddaysfromnow",{"_index":1440,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["adddaysfromnow(days",{"_index":1474,"title":{},"body":{"miscellaneous/functions.html":{}}}],["address",{"_index":664,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["admin",{"_index":417,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["admin.decorator",{"_index":461,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{}}}],["admin.decorator.ts",{"_index":1423,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["admins",{"_index":420,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{}}}],["agent",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["aliases",{"_index":1685,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed",{"_index":1257,"title":{},"body":{"guards/RolesGuard.html":{}}}],["already",{"_index":501,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["alterando",{"_index":1564,"title":{},"body":{"index.html":{}}}],["alvaromrveiga",{"_index":1683,"title":{},"body":{"properties.html":{}}}],["amazing",{"_index":1156,"title":{},"body":{"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["amount",{"_index":607,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["and/or",{"_index":1170,"title":{},"body":{"controllers/PurchaseController.html":{},"license.html":{}}}],["another",{"_index":379,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["apenas",{"_index":1575,"title":{},"body":{"index.html":{}}}],["api",{"_index":1487,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["apioperation",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":763,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["apiproperty({type",{"_index":759,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["apitags",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["apitags('authentication",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('category",{"_index":472,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apitags('product",{"_index":1043,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags('purchase",{"_index":1196,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["apitags('user",{"_index":1330,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":712,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["app.close",{"_index":978,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app_guard",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["application",{"_index":839,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"injectables/PrismaService.html":{},"classes/RefreshTokenDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["appmodule",{"_index":106,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arising",{"_index":1668,"title":{},"body":{"license.html":{}}}],["armazenar",{"_index":1586,"title":{},"body":{"index.html":{}}}],["arquivo",{"_index":1533,"title":{},"body":{"index.html":{}}}],["array",{"_index":1077,"title":{},"body":{"injectables/ProductService.html":{}}}],["asc",{"_index":550,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["associated",{"_index":1621,"title":{},"body":{"license.html":{}}}],["async",{"_index":76,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["autenticação",{"_index":1496,"title":{},"body":{"index.html":{}}}],["auth",{"_index":803,"title":{},"body":{"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidRefreshTokenException.html":{}}}],["auth.controller",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["auth.guard.ts",{"_index":8,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:13",{"_index":29,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["auth.guard.ts:28",{"_index":40,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["auth.service",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/access",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.module",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":135,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":838,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["authenticates",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticating",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":17,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{},"classes/LoginResponse.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":13,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["authguard('access",{"_index":58,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["authmodule",{"_index":111,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1682,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":834,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["authors",{"_index":1658,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":188,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authserviceinputexception",{"_index":373,"title":{"classes/AuthServiceInputException.html":{}},"body":{"classes/AuthServiceInputException.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["autorização",{"_index":1497,"title":{},"body":{"index.html":{}}}],["available",{"_index":516,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["avaliações",{"_index":1495,"title":{},"body":{"index.html":{}}}],["await",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["b01f",{"_index":657,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["b076f72e",{"_index":1146,"title":{},"body":{"classes/Purchase.html":{}}}],["b0e0c99e",{"_index":788,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["backend",{"_index":1486,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":504,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"classes/UserInputExceptionHandler.html":{}}}],["badrequestexception(error.message",{"_index":1342,"title":{},"body":{"classes/UserInputExceptionHandler.html":{}}}],["banco",{"_index":1557,"title":{},"body":{"index.html":{}}}],["bando",{"_index":1571,"title":{},"body":{"index.html":{}}}],["baseprice",{"_index":580,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["bcrypt",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["becomes",{"_index":1101,"title":{},"body":{"injectables/ProductService.html":{}}}],["before",{"_index":969,"title":{},"body":{"injectables/PrismaService.html":{}}}],["being",{"_index":1712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["between",{"_index":1096,"title":{},"body":{"injectables/ProductService.html":{}}}],["bf3e",{"_index":655,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["binary",{"_index":761,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["black",{"_index":618,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["body",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["boilerplate",{"_index":724,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{}}}],["boolean",{"_index":46,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":1432,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":857,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{},"injectables/UserService.html":{}}}],["brand",{"_index":617,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["brand1",{"_index":1100,"title":{},"body":{"injectables/ProductService.html":{}}}],["break",{"_index":928,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["browse",{"_index":1674,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1671,"title":{},"body":{"modules.html":{}}}],["browserinfo",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["c",{"_index":1609,"title":{},"body":{"license.html":{}}}],["calculations",{"_index":591,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["call",{"_index":967,"title":{},"body":{"injectables/PrismaService.html":{}}}],["callback",{"_index":1730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(new",{"_index":1743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":1736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["called",{"_index":847,"title":{},"body":{"classes/LoginResponse.html":{}}}],["callhandler",{"_index":720,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["canactivate",{"_index":24,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":38,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["capitalize",{"_index":523,"title":{},"body":{"injectables/CategoryService.html":{}}}],["capitalizeonlyfirstletter",{"_index":517,"title":{},"body":{"injectables/CategoryService.html":{}}}],["capitalizeonlyfirstletter(name",{"_index":521,"title":{},"body":{"injectables/CategoryService.html":{}}}],["case",{"_index":923,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{}}}],["catcherror",{"_index":726,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["catcherror((error",{"_index":736,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["catches",{"_index":722,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["categorias",{"_index":1509,"title":{},"body":{"index.html":{}}}],["categories",{"_index":425,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"injectables/ProductService.html":{}}}],["categories'})@public()@get",{"_index":423,"title":{},"body":{"controllers/CategoryController.html":{}}}],["categories.dto",{"_index":469,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["categories.dto.ts",{"_index":766,"title":{},"body":{"classes/FindCategoriesDto.html":{},"coverage.html":{}}}],["categories.dto.ts:11",{"_index":768,"title":{},"body":{"classes/FindCategoriesDto.html":{}}}],["categories.dto.ts:20",{"_index":772,"title":{},"body":{"classes/FindCategoriesDto.html":{}}}],["categories.dto.ts:29",{"_index":771,"title":{},"body":{"classes/FindCategoriesDto.html":{}}}],["categories.map((category",{"_index":1131,"title":{},"body":{"injectables/ProductService.html":{}}}],["categoriesconnection",{"_index":1130,"title":{},"body":{"injectables/ProductService.html":{}}}],["categoriestoskip",{"_index":542,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category",{"_index":387,"title":{"classes/Category.html":{}},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category'})@isadmin()@delete(':id')@httpcode(httpstatus.no_content",{"_index":446,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category'})@isadmin()@patch(':id",{"_index":451,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category'})@isadmin()@post",{"_index":418,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category.controller",{"_index":493,"title":{},"body":{"modules/CategoryModule.html":{}}}],["category.dto",{"_index":467,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts",{"_index":568,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:12",{"_index":572,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.service",{"_index":465,"title":{},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{}}}],["categorycontroller",{"_index":404,"title":{"controllers/CategoryController.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"coverage.html":{}}}],["categorymodule",{"_index":112,"title":{"modules/CategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["categoryname",{"_index":540,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{}}}],["categorynameinuseexception",{"_index":494,"title":{"classes/CategoryNameInUseException.html":{}},"body":{"classes/CategoryNameInUseException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["categorynotfoundexception",{"_index":508,"title":{"classes/CategoryNotFoundException.html":{}},"body":{"classes/CategoryNotFoundException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["categoryservice",{"_index":464,"title":{"injectables/CategoryService.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["cd",{"_index":1526,"title":{},"body":{"index.html":{}}}],["chair",{"_index":774,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"injectables/ProductService.html":{}}}],["chair&quot",{"_index":1103,"title":{},"body":{"injectables/ProductService.html":{}}}],["charge",{"_index":1616,"title":{},"body":{"license.html":{}}}],["check",{"_index":14,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/ProductController.html":{}}}],["checks",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"classes/PrismaExceptionHandler.html":{},"guards/RolesGuard.html":{}}}],["claim",{"_index":1661,"title":{},"body":{"license.html":{}}}],["class",{"_index":31,"title":{"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":374,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"overview.html":{}}}],["clientversion",{"_index":899,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["clona",{"_index":1516,"title":{},"body":{"index.html":{}}}],["clone",{"_index":1521,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categorymodule",{"_index":489,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_imports",{"_index":490,"title":{},"body":{"modules/CategoryModule.html":{}}}],["cluster_categorymodule_providers",{"_index":491,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":948,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":949,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":950,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_productmodule",{"_index":1058,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_productmodule_imports",{"_index":1060,"title":{},"body":{"modules/ProductModule.html":{}}}],["cluster_productmodule_providers",{"_index":1059,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_purchasemodule",{"_index":1208,"title":{},"body":{"modules/PurchaseModule.html":{},"overview.html":{}}}],["cluster_purchasemodule_imports",{"_index":1209,"title":{},"body":{"modules/PurchaseModule.html":{}}}],["cluster_purchasemodule_providers",{"_index":1210,"title":{},"body":{"modules/PurchaseModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1344,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1345,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1346,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1347,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["codes",{"_index":825,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["colocou",{"_index":1567,"title":{},"body":{"index.html":{}}}],["com",{"_index":1488,"title":{},"body":{"index.html":{}}}],["comment",{"_index":1139,"title":{},"body":{"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["commerce",{"_index":1485,"title":{},"body":{"index.html":{}}}],["compare",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["compare(currentpassword",{"_index":1401,"title":{},"body":{"injectables/UserService.html":{}}}],["compare(password",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["compared",{"_index":1365,"title":{},"body":{"injectables/UserService.html":{}}}],["compares",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["compodoc",{"_index":1499,"title":{},"body":{"index.html":{}}}],["compras",{"_index":1494,"title":{},"body":{"index.html":{}}}],["compromised",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["conditions",{"_index":1639,"title":{},"body":{"license.html":{}}}],["configuration",{"_index":75,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["configurations",{"_index":1704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connect",{"_index":974,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/ProductService.html":{}}}],["connectcategoriesbyid",{"_index":1070,"title":{},"body":{"injectables/ProductService.html":{}}}],["connectcategoriesbyid(categories",{"_index":1075,"title":{},"body":{"injectables/ProductService.html":{}}}],["connecting",{"_index":955,"title":{},"body":{"injectables/PrismaService.html":{}}}],["connection",{"_index":1669,"title":{},"body":{"license.html":{}}}],["considering",{"_index":588,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["const",{"_index":61,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":1720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constructor",{"_index":25,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{}}}],["constructor(filetypes",{"_index":746,"title":{},"body":{"classes/FileTypeError.html":{}}}],["constructor(message",{"_index":383,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["constructor(prisma",{"_index":519,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":59,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(reflector",{"_index":26,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["constructor(userservice",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["construir",{"_index":1584,"title":{},"body":{"index.html":{}}}],["consult",{"_index":1713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contain",{"_index":675,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["containing",{"_index":769,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"miscellaneous/variables.html":{}}}],["contains",{"_index":546,"title":{},"body":{"injectables/CategoryService.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{}}}],["content",{"_index":94,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["content.ts",{"_index":1687,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["context",{"_index":44,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":65,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":64,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":1261,"title":{},"body":{"guards/RolesGuard.html":{}}}],["contract",{"_index":1665,"title":{},"body":{"license.html":{}}}],["controller",{"_index":134,"title":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('category",{"_index":473,"title":{},"body":{"controllers/CategoryController.html":{}}}],["controller('product",{"_index":1044,"title":{},"body":{"controllers/ProductController.html":{}}}],["controller('purchase",{"_index":1197,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["controller('user",{"_index":1331,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["copies",{"_index":1634,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1619,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1608,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":1409,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":409,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":1045,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["create(createcategorydto",{"_index":415,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["create(createproductdto",{"_index":1008,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["create(createuserdto",{"_index":1305,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(request",{"_index":1163,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["create(userid",{"_index":1215,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["createcategorydto",{"_index":416,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["createdat",{"_index":616,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{}}}],["createproductdto",{"_index":576,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["createpurchasedto",{"_index":633,"title":{"classes/CreatePurchaseDto.html":{}},"body":{"classes/CreatePurchaseDto.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["createrefreshtoken",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["createrefreshtoken(payload",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["creates",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":661,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email.tolowercase",{"_index":1387,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.password",{"_index":1384,"title":{},"body":{"injectables/UserService.html":{}}}],["credentials.dto",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":837,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:11",{"_index":841,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["credentials.dto.ts:19",{"_index":842,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["criação",{"_index":1490,"title":{},"body":{"index.html":{}}}],["crie",{"_index":1531,"title":{},"body":{"index.html":{}}}],["crud",{"_index":408,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["currency.js",{"_index":593,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["current",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"classes/DeleteUserDto.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["currentpassword",{"_index":691,"title":{},"body":{"classes/DeleteUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["customdecorator",{"_index":1715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["código",{"_index":1605,"title":{},"body":{"index.html":{}}}],["códigos",{"_index":1596,"title":{},"body":{"index.html":{}}}],["d31fc56c",{"_index":1295,"title":{},"body":{"classes/User.html":{}}}],["dados",{"_index":1558,"title":{},"body":{"index.html":{}}}],["damages",{"_index":1662,"title":{},"body":{"license.html":{}}}],["data",{"_index":83,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["database",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["date",{"_index":982,"title":{},"body":{"classes/Product.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["date.now",{"_index":1732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datestring",{"_index":984,"title":{},"body":{"classes/Product.html":{},"classes/Purchase.html":{},"classes/User.html":{}}}],["days",{"_index":1476,"title":{},"body":{"miscellaneous/functions.html":{}}}],["db3d22db270a",{"_index":402,"title":{},"body":{"classes/Category.html":{}}}],["de",{"_index":1491,"title":{},"body":{"index.html":{}}}],["deal",{"_index":1623,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1670,"title":{},"body":{"license.html":{}}}],["decimal",{"_index":584,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["decoration",{"_index":403,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{}}}],["decorator",{"_index":42,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["decorators",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["decorators/is",{"_index":1259,"title":{},"body":{"guards/RolesGuard.html":{}}}],["decrypted",{"_index":84,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["default",{"_index":427,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":603,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/User.html":{}}}],["defined",{"_index":28,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{}}}],["delete",{"_index":456,"title":{},"body":{"controllers/CategoryController.html":{},"classes/DeleteUserDto.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(':id",{"_index":485,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["deletes",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["deleteuserdto",{"_index":689,"title":{"classes/DeleteUserDto.html":{}},"body":{"classes/DeleteUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["deleteuserdto.currentpassword",{"_index":1396,"title":{},"body":{"injectables/UserService.html":{}}}],["dependencies",{"_index":108,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":32,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dependências",{"_index":1529,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1231,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["describes",{"_index":389,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{}}}],["description",{"_index":9,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"properties.html":{}}}],["descritas",{"_index":1538,"title":{},"body":{"index.html":{}}}],["desenvolvimento",{"_index":1548,"title":{},"body":{"index.html":{}}}],["destination",{"_index":1727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["detection",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["discount",{"_index":601,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["discountpercentage",{"_index":581,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["discounts",{"_index":589,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["diskstorage",{"_index":1726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distribute",{"_index":1631,"title":{},"body":{"license.html":{}}}],["docs",{"_index":1035,"title":{},"body":{"controllers/ProductController.html":{}}}],["documentation",{"_index":1410,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["documentação",{"_index":1498,"title":{},"body":{"index.html":{}}}],["doe",{"_index":686,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["doesn't",{"_index":1377,"title":{},"body":{"injectables/UserService.html":{}}}],["dos",{"_index":1592,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":466,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/delete",{"_index":1324,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/find",{"_index":468,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["dto/login",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/login.response",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/logout.dto",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/refresh",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/review",{"_index":1193,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["dto/update",{"_index":470,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e",{"_index":667,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"index.html":{}}}],["e3ecf4939a89",{"_index":632,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["e6cf9a58",{"_index":398,"title":{},"body":{"classes/Category.html":{}}}],["ecommerce",{"_index":1527,"title":{},"body":{"index.html":{}}}],["em",{"_index":1546,"title":{},"body":{"index.html":{}}}],["email",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/LoginCredentialsDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PurchaseService.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["email.tolowercase",{"_index":1390,"title":{},"body":{"injectables/UserService.html":{}}}],["emailinuseexception",{"_index":693,"title":{"classes/EmailInUseException.html":{}},"body":{"classes/EmailInUseException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["enableshutdownhooks",{"_index":958,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":960,"title":{},"body":{"injectables/PrismaService.html":{}}}],["endpoint",{"_index":1481,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["enter",{"_index":860,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["entities/category.entity",{"_index":471,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{}}}],["entities/product.entity",{"_index":614,"title":{},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["entities/purchase.entity",{"_index":650,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{}}}],["entities/user",{"_index":1327,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entities/user.entity",{"_index":679,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":1404,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["entra",{"_index":1523,"title":{},"body":{"index.html":{}}}],["entrada",{"_index":1591,"title":{},"body":{"index.html":{}}}],["enum",{"_index":911,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"dependencies.html":{},"index.html":{}}}],["env",{"_index":1534,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":1539,"title":{},"body":{"index.html":{}}}],["env.test",{"_index":1563,"title":{},"body":{"index.html":{}}}],["equals",{"_index":1230,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["error",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"dependencies.html":{},"index.html":{}}}],["error.clientversion",{"_index":938,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.code",{"_index":922,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message",{"_index":937,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.category",{"_index":942,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product",{"_index":941,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product.create",{"_index":946,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product.delete",{"_index":945,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product.update",{"_index":944,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.purchase",{"_index":947,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.user",{"_index":943,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["errormeta",{"_index":896,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["errors",{"_index":714,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["erros",{"_index":713,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"index.html":{}}}],["eslint",{"_index":1601,"title":{},"body":{"index.html":{}}}],["event",{"_index":1657,"title":{},"body":{"license.html":{}}}],["example",{"_index":397,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["exception",{"_index":380,"title":{},"body":{"classes/AuthServiceInputException.html":{},"interfaces/ExceptionHandler.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["exception.handler",{"_index":729,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["exception.handler.ts",{"_index":814,"title":{},"body":{"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["exception.handler.ts:108",{"_index":889,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:118",{"_index":909,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:12",{"_index":821,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["exception.handler.ts:123",{"_index":903,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:131",{"_index":892,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:136",{"_index":885,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:141",{"_index":907,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:19",{"_index":882,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["exception.handler.ts:21",{"_index":826,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["exception.handler.ts:28",{"_index":828,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["exception.handler.ts:87",{"_index":898,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:92",{"_index":895,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:97",{"_index":905,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exceptionhandler",{"_index":697,"title":{"interfaces/ExceptionHandler.html":{}},"body":{"interfaces/ExceptionHandler.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["exceptioninterceptor",{"_index":708,"title":{"injectables/ExceptionInterceptor.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"coverage.html":{}}}],["exceptions/invalid",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["exceptions/missing",{"_index":1382,"title":{},"body":{"injectables/UserService.html":{}}}],["exceptions/not",{"_index":1225,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["exceções",{"_index":1598,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":39,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{}}}],["exemplo",{"_index":1568,"title":{},"body":{"index.html":{}}}],["exists",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiration",{"_index":1478,"title":{},"body":{"miscellaneous/functions.html":{}}}],["expiresat",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":1702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":56,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}}}],["exports",{"_index":952,"title":{},"body":{"modules/PrismaModule.html":{},"modules/UserModule.html":{}}}],["exposes",{"_index":407,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["express",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"modules/ProductModule.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"dependencies.html":{},"index.html":{},"license.html":{}}}],["express.multer.file",{"_index":758,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["expression",{"_index":1752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extend",{"_index":378,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["extends",{"_index":57,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"classes/AuthServiceInputException.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"injectables/PrismaService.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}}}],["extname",{"_index":1740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":87,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":96,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjzdwiioii5nwfkmznhns0wyjk4ltq2odytyjfmms1hmtkwnzm0nwjmyzcilcjpyxqioje2ndg0nzu3mzesimv4cci6mty0odq3njyzmx0.h3z3jdvhoi6y5c_n0kt6tdp2nwk_dhbzxioqn7vanno",{"_index":850,"title":{},"body":{"classes/LoginResponse.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjzdwiioiixmjm0nty3odkwiiwibmftzsi6ikpvag4grg9liiwiawf0ijoxnte2mjm5mdiyfq.sflkxwrjsmekkf2qt4fwpmejf36pok6yjv_adqssw5c",{"_index":851,"title":{},"body":{"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{}}}],["f5bd",{"_index":794,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["f70b",{"_index":1147,"title":{},"body":{"classes/Purchase.html":{}}}],["fa244865",{"_index":628,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["false",{"_index":98,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["family",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["familytokens",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["familytokens.length",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["features",{"_index":1503,"title":{},"body":{"index.html":{}}}],["fecd",{"_index":1152,"title":{},"body":{"classes/Purchase.html":{}}}],["field",{"_index":890,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserWithoutPassword.html":{}}}],["fields",{"_index":569,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["file.filename",{"_index":1114,"title":{},"body":{"injectables/ProductService.html":{}}}],["file.originalname",{"_index":1735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filefilter",{"_index":1737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filename",{"_index":1729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":1622,"title":{},"body":{"license.html":{}}}],["filesize",{"_index":1746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filetypeerror",{"_index":740,"title":{"classes/FileTypeError.html":{}},"body":{"classes/FileTypeError.html":{},"coverage.html":{}}}],["filetypeerror(validimageuploadtypesregex",{"_index":1744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filetypes",{"_index":752,"title":{},"body":{"classes/FileTypeError.html":{}}}],["fileupload",{"_index":1037,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["fileuploaddto",{"_index":755,"title":{"classes/FileUploadDto.html":{}},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["find",{"_index":441,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["findall",{"_index":410,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["findall(@query",{"_index":1047,"title":{},"body":{"controllers/ProductController.html":{}}}],["findall(findallproductsdto",{"_index":1011,"title":{},"body":{"controllers/ProductController.html":{}}}],["findall(findcategoriesdto",{"_index":421,"title":{},"body":{"controllers/CategoryController.html":{}}}],["findall(findpurchasesdto",{"_index":1167,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["findall(undefined",{"_index":527,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["findallmine",{"_index":1161,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["findallmine(request",{"_index":1172,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["findallproductsdto",{"_index":1014,"title":{},"body":{"controllers/ProductController.html":{}}}],["findalltokens",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["findalltokens(@req",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["findalltokens(request",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["findalltokens(userid",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["findbyemail",{"_index":1352,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyemail(email",{"_index":1357,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid",{"_index":1303,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findbyid(@req",{"_index":1333,"title":{},"body":{"controllers/UserController.html":{}}}],["findbyid(id",{"_index":1361,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(request",{"_index":1308,"title":{},"body":{"controllers/UserController.html":{}}}],["findcategoriesdto",{"_index":422,"title":{"classes/FindCategoriesDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"coverage.html":{}}}],["findone",{"_index":1162,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["findone(purchaseid",{"_index":1218,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["findone(request",{"_index":1175,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["findonebyid",{"_index":411,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyid(@param('id",{"_index":1049,"title":{},"body":{"controllers/ProductController.html":{}}}],["findonebyid(id",{"_index":436,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyname",{"_index":412,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["findonebyname(name",{"_index":442,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["findonebyurlname",{"_index":1006,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyurlname(@param('urlname",{"_index":1052,"title":{},"body":{"controllers/ProductController.html":{}}}],["findonebyurlname(urlname",{"_index":1017,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findproductsdto",{"_index":437,"title":{"classes/FindProductsDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["findpurchasesdto",{"_index":780,"title":{"classes/FindPurchasesDto.html":{}},"body":{"classes/FindPurchasesDto.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"coverage.html":{}}}],["findpurchasesdto.userid",{"_index":1201,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["finds",{"_index":1359,"title":{},"body":{"injectables/UserService.html":{}}}],["fire",{"_index":971,"title":{},"body":{"injectables/PrismaService.html":{}}}],["first",{"_index":524,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/PrismaService.html":{}}}],["fitness",{"_index":1653,"title":{},"body":{"license.html":{}}}],["following",{"_index":751,"title":{},"body":{"classes/FileTypeError.html":{},"license.html":{}}}],["forgot",{"_index":1370,"title":{},"body":{"injectables/UserService.html":{}}}],["format",{"_index":760,"title":{},"body":{"classes/FileUploadDto.html":{},"injectables/ProductService.html":{}}}],["formatação",{"_index":1604,"title":{},"body":{"index.html":{}}}],["formats",{"_index":537,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["formaturlname",{"_index":1071,"title":{},"body":{"injectables/ProductService.html":{}}}],["formaturlname(name",{"_index":1084,"title":{},"body":{"injectables/ProductService.html":{}}}],["found",{"_index":513,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["found.exception",{"_index":913,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["found.exception.ts",{"_index":509,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["found.exception.ts:6",{"_index":512,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["free",{"_index":1615,"title":{},"body":{"license.html":{}}}],["function",{"_index":704,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"coverage.html":{}}}],["functions",{"_index":1469,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1637,"title":{},"body":{"license.html":{}}}],["generate",{"_index":1086,"title":{},"body":{"injectables/ProductService.html":{}}}],["generateaccesstoken",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateaccesstoken(payload",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["generates",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('/admin",{"_index":1199,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["get('/id/:id",{"_index":477,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{}}}],["get(':id",{"_index":1202,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["get(':name",{"_index":480,"title":{},"body":{"controllers/CategoryController.html":{}}}],["get(':urlname",{"_index":1051,"title":{},"body":{"controllers/ProductController.html":{}}}],["get('tokens",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["gets",{"_index":438,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["getting",{"_index":1483,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettokenexpirationdate",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getuserrole",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuserrole(userid",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["git",{"_index":1520,"title":{},"body":{"index.html":{}}}],["github",{"_index":1500,"title":{},"body":{"index.html":{}}}],["global",{"_index":1708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["granted",{"_index":1614,"title":{},"body":{"license.html":{}}}],["guard",{"_index":1251,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":20,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["handle",{"_index":701,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{}}}],["handle(error",{"_index":702,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["handled",{"_index":592,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["handlers",{"_index":700,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["handlers/jwt",{"_index":728,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["handlers/prisma",{"_index":731,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["handlers/user",{"_index":733,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["happened",{"_index":887,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["hash",{"_index":1378,"title":{},"body":{"injectables/UserService.html":{}}}],["hashconfig",{"_index":1379,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hashconfig.saltrounds",{"_index":1385,"title":{},"body":{"injectables/UserService.html":{}}}],["hashed",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["hashedpassword",{"_index":1383,"title":{},"body":{"injectables/UserService.html":{}}}],["hashes",{"_index":1709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashifupdatingpassword",{"_index":1353,"title":{},"body":{"injectables/UserService.html":{}}}],["hashifupdatingpassword(id",{"_index":1366,"title":{},"body":{"injectables/UserService.html":{}}}],["hashs",{"_index":1593,"title":{},"body":{"index.html":{}}}],["here",{"_index":1265,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["hereby",{"_index":1613,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1659,"title":{},"body":{"license.html":{}}}],["hooks",{"_index":970,"title":{},"body":{"injectables/PrismaService.html":{}}}],["http",{"_index":497,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{}}}],["http://localhost:3000/api",{"_index":1555,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":486,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://auth0.com/docs/secure/tokens/refresh",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://docs.nestjs.com/guards",{"_index":21,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["https://docs.nestjs.com/interceptors",{"_index":716,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["https://docs.nestjs.com/recipes/prisma",{"_index":956,"title":{},"body":{"injectables/PrismaService.html":{}}}],["https://github.com/alvaromrveiga/ecommerce",{"_index":1522,"title":{},"body":{"index.html":{}}}],["https://www.npmjs.com/package/jsonwebtoken#errors",{"_index":824,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["httpstatus",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["hyphens",{"_index":1098,"title":{},"body":{"injectables/ProductService.html":{}}}],["id",{"_index":392,"title":{},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{}}}],["id'})@apibearerauth()@get(':id",{"_index":1177,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["id'})@isadmin()@get('/id/:id",{"_index":1015,"title":{},"body":{"controllers/ProductController.html":{}}}],["identificar",{"_index":1595,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":1411,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":596,"title":{},"body":{"classes/CreateProductDto.html":{},"injectables/ProductService.html":{}}}],["ignoreexpiration",{"_index":97,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["image",{"_index":1722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image.jpg",{"_index":1000,"title":{},"body":{"classes/Product.html":{}}}],["imagens",{"_index":1508,"title":{},"body":{"index.html":{}}}],["implements",{"_index":391,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{}}}],["implied",{"_index":1649,"title":{},"body":{"license.html":{}}}],["import",{"_index":49,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{}}}],["imports",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}}}],["include",{"_index":554,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["included",{"_index":1643,"title":{},"body":{"license.html":{}}}],["including",{"_index":1625,"title":{},"body":{"license.html":{}}}],["index",{"_index":22,"title":{"index.html":{}},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":961,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}}}],["information",{"_index":453,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["informações",{"_index":1537,"title":{},"body":{"index.html":{}}}],["inicia",{"_index":1545,"title":{},"body":{"index.html":{}}}],["iniciar",{"_index":1540,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["input",{"_index":734,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["input.exception",{"_index":753,"title":{},"body":{"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/UserInputExceptionHandler.html":{}}}],["input.exception.ts",{"_index":377,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["input.exception.ts:5",{"_index":384,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["inputs",{"_index":500,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["inputted",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["insensitive",{"_index":548,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["instala",{"_index":1528,"title":{},"body":{"index.html":{}}}],["instalado",{"_index":1515,"title":{},"body":{"index.html":{}}}],["instalação",{"_index":1504,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":382,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{}}}],["instantiate",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["instantiates",{"_index":30,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{}}}],["integração",{"_index":1578,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":717,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["intercept(context",{"_index":718,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interceptor",{"_index":710,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interceptors",{"_index":715,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interface",{"_index":696,"title":{"interfaces/ExceptionHandler.html":{}},"body":{"interfaces/ExceptionHandler.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":698,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["interferes",{"_index":963,"title":{},"body":{"injectables/PrismaService.html":{}}}],["invalid",{"_index":743,"title":{},"body":{"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{}}}],["invalidemailorpasswordexception",{"_index":331,"title":{"classes/InvalidEmailOrPasswordException.html":{}},"body":{"injectables/AuthService.html":{},"classes/InvalidEmailOrPasswordException.html":{},"coverage.html":{}}}],["invalidpasswordupdateexception",{"_index":805,"title":{"classes/InvalidPasswordUpdateException.html":{}},"body":{"classes/InvalidPasswordUpdateException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["invalidrefreshtokenexception",{"_index":334,"title":{"classes/InvalidRefreshTokenException.html":{}},"body":{"injectables/AuthService.html":{},"classes/InvalidRefreshTokenException.html":{},"coverage.html":{}}}],["is_admin_key",{"_index":1258,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["is_public_key",{"_index":54,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isadmin",{"_index":459,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["isarray",{"_index":610,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["iscategoryerror",{"_index":873,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscategoryerror(error",{"_index":883,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscategorynameconstraintviolation",{"_index":874,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscategorynameconstraintviolation(error",{"_index":888,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscorrectpassword",{"_index":1400,"title":{},"body":{"injectables/UserService.html":{}}}],["iscreateproducterror",{"_index":875,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscreateproducterror(error",{"_index":891,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isemail",{"_index":677,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserRoleDto.html":{}}}],["isemail({message",{"_index":666,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemailconstraintviolation",{"_index":876,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isemailconstraintviolation(errormeta",{"_index":893,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isenum",{"_index":1283,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["isenum(role",{"_index":1281,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["isint",{"_index":611,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/ReviewPurchaseDto.html":{}}}],["isint()@isoptional",{"_index":605,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isint()@min(1)@max(5",{"_index":1243,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["isjwt",{"_index":853,"title":{},"body":{"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{}}}],["isjwtexception",{"_index":816,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["isjwtexception(error",{"_index":827,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["isnotempty",{"_index":573,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty()@isstring",{"_index":840,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["isnumber",{"_index":612,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{}}}],["isnumber()@isnotempty",{"_index":585,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isnumber()@isoptional",{"_index":599,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isnumber()@ispositive",{"_index":644,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["isnumber()@ispositive()@isoptional",{"_index":639,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["isoptional",{"_index":613,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isarray",{"_index":594,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isoptional()@isstring",{"_index":767,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["isoptional()@type(undefined)@isint()@ispositive",{"_index":770,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["ispasswordvalid",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispositive",{"_index":648,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["isprismaunknownerror",{"_index":877,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isprismaunknownerror(error",{"_index":897,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproducterror",{"_index":878,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproducterror(error",{"_index":902,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproductnameconstraintviolation",{"_index":879,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproductnameconstraintviolation(error",{"_index":904,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["ispublic",{"_index":62,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["ispurchaseerror",{"_index":880,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["ispurchaseerror(error",{"_index":906,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isrefreshtokenvalid",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":574,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":571,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/DeleteUserDto.html":{}}}],["isstring()@isnotempty()@isoptional",{"_index":1274,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isstring()@isoptional",{"_index":597,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/ReviewPurchaseDto.html":{}}}],["isstring()@minlength(8",{"_index":671,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isusererror",{"_index":881,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isusererror(error",{"_index":908,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isuuid",{"_index":649,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["isuuid(4",{"_index":642,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["it's",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["jest",{"_index":1599,"title":{},"body":{"index.html":{}}}],["john",{"_index":685,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["join",{"_index":1128,"title":{},"body":{"injectables/ProductService.html":{}}}],["jpeg",{"_index":1029,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["jpeg|jpg|png",{"_index":1750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jpg",{"_index":1030,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["json",{"_index":1587,"title":{},"body":{"index.html":{}}}],["jsonwebtoken",{"_index":74,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"classes/JwtExceptionHandler.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["jsonwebtokenerror",{"_index":819,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["jwt",{"_index":7,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginResponse.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.strategy",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt.strategy.ts",{"_index":72,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"coverage.html":{}}}],["jwt.strategy.ts:13",{"_index":78,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["jwt.strategy.ts:24",{"_index":81,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["jwtauthguard",{"_index":1714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwterror",{"_index":830,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["jwterrornames",{"_index":815,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["jwtexceptionhandler",{"_index":727,"title":{"classes/JwtExceptionHandler.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"coverage.html":{}}}],["jwtexceptionhandler().handle(error",{"_index":739,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["jwtfromrequest",{"_index":95,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["jwtmodule",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwts",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtservice",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtsignoptions",{"_index":1699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kind",{"_index":1648,"title":{},"body":{"license.html":{}}}],["language']}`.replace",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["lazily",{"_index":975,"title":{},"body":{"injectables/PrismaService.html":{}}}],["leading",{"_index":1089,"title":{},"body":{"injectables/ProductService.html":{}}}],["leave",{"_index":973,"title":{},"body":{"injectables/PrismaService.html":{}}}],["length",{"_index":672,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letter",{"_index":525,"title":{},"body":{"injectables/CategoryService.html":{},"classes/CreateUserDto.html":{}}}],["liability",{"_index":1663,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1660,"title":{},"body":{"license.html":{}}}],["library",{"_index":12,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["license",{"_index":1607,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["licença",{"_index":1506,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":1626,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1650,"title":{},"body":{"license.html":{}}}],["limits",{"_index":1745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linting",{"_index":1603,"title":{},"body":{"index.html":{}}}],["listens",{"_index":964,"title":{},"body":{"injectables/PrismaService.html":{}}}],["literal",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/typealiases.html":{}}}],["logged",{"_index":1166,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["login",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/LoginResponse.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["login(email",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(undefined",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["logincredentialsdto",{"_index":155,"title":{"classes/LoginCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["loginresponse",{"_index":192,"title":{"classes/LoginResponse.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"coverage.html":{}}}],["logout",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{}}}],["logout(@body",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(refreshtoken",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout(undefined",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["logoutall",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logoutall(@req",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["logoutall(request",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["logoutall(userid",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["logoutdto",{"_index":161,"title":{"classes/LogoutDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LogoutDto.html":{},"coverage.html":{}}}],["logs",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["lower",{"_index":1088,"title":{},"body":{"injectables/ProductService.html":{}}}],["lowercaseemail",{"_index":1386,"title":{},"body":{"injectables/UserService.html":{}}}],["lowercaseurlname",{"_index":1120,"title":{},"body":{"injectables/ProductService.html":{}}}],["lowercaseurlname.trim",{"_index":1123,"title":{},"body":{"injectables/ProductService.html":{}}}],["lvaro",{"_index":1610,"title":{},"body":{"license.html":{}}}],["mail",{"_index":668,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{}}}],["mainly",{"_index":1360,"title":{},"body":{"injectables/UserService.html":{}}}],["make",{"_index":381,"title":{},"body":{"classes/AuthServiceInputException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["makes",{"_index":1087,"title":{},"body":{"injectables/ProductService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["making",{"_index":900,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["managing",{"_index":515,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["matches",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":684,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":70,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.round(math.random",{"_index":1733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["max",{"_index":1246,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["max(5",{"_index":1250,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["maximageuploadsize",{"_index":1429,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":1032,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["merchantability",{"_index":1652,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1629,"title":{},"body":{"license.html":{}}}],["message",{"_index":385,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{}}}],["metadata",{"_index":1459,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":23,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{}}}],["migrate:dev",{"_index":1544,"title":{},"body":{"index.html":{}}}],["migrate:test",{"_index":1572,"title":{},"body":{"index.html":{}}}],["migrations",{"_index":1543,"title":{},"body":{"index.html":{}}}],["mimetype",{"_index":1738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["min",{"_index":1247,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["min(1",{"_index":1249,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["minimizar",{"_index":1583,"title":{},"body":{"index.html":{}}}],["minlength",{"_index":678,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":682,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1468,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missingpasswordupdateexception",{"_index":855,"title":{"classes/MissingPasswordUpdateException.html":{}},"body":{"classes/MissingPasswordUpdateException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["mit",{"_index":1606,"title":{},"body":{"index.html":{},"license.html":{}}}],["mode",{"_index":547,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["models/category/category.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["models/product/product.module",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["models/purchase/purchase.module",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["models/user/user.module",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["modify",{"_index":1628,"title":{},"body":{"license.html":{}}}],["modo",{"_index":1547,"title":{},"body":{"index.html":{}}}],["module",{"_index":105,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":107,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":18,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{}}}],["ms",{"_index":1453,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["multer",{"_index":1747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multermodule",{"_index":1063,"title":{},"body":{"modules/ProductModule.html":{}}}],["multermodule.register(multeruploadconfig",{"_index":1067,"title":{},"body":{"modules/ProductModule.html":{}}}],["multeroptions",{"_index":1724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multeruploadconfig",{"_index":1034,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["multiple",{"_index":1095,"title":{},"body":{"injectables/ProductService.html":{}}}],["multiplied",{"_index":647,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["máquina",{"_index":1519,"title":{},"body":{"index.html":{}}}],["mínimo",{"_index":1565,"title":{},"body":{"index.html":{}}}],["na",{"_index":1524,"title":{},"body":{"index.html":{}}}],["name",{"_index":35,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["name.substring(1).tolocalelowercase",{"_index":565,"title":{},"body":{"injectables/CategoryService.html":{}}}],["name.tolocalelowercase",{"_index":1121,"title":{},"body":{"injectables/ProductService.html":{}}}],["name[0].touppercase",{"_index":564,"title":{},"body":{"injectables/CategoryService.html":{}}}],["names",{"_index":823,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["ndice",{"_index":1502,"title":{},"body":{"index.html":{}}}],["need",{"_index":43,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["needed",{"_index":570,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserRoleDto.html":{}}}],["needs",{"_index":16,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/ProductController.html":{}}}],["nestinterceptor",{"_index":725,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["nestjs",{"_index":19,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"index.html":{}}}],["nestjs/common",{"_index":50,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":51,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"modules/AppModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1446,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":52,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1064,"title":{},"body":{"modules/ProductModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/FileUploadDto.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserWithoutPassword.html":{},"dependencies.html":{}}}],["new",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/JwtExceptionHandler.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newrefreshtoken",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":719,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["next.handle().pipe",{"_index":735,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["node.js",{"_index":1514,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":1656,"title":{},"body":{"license.html":{}}}],["normal",{"_index":1179,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["nos",{"_index":1590,"title":{},"body":{"index.html":{}}}],["notbeforeerror",{"_index":820,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["note",{"_index":1141,"title":{},"body":{"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["notfoundexception",{"_index":511,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{}}}],["notfoundexception(error.message",{"_index":1343,"title":{},"body":{"classes/UserInputExceptionHandler.html":{}}}],["notice",{"_index":1641,"title":{},"body":{"license.html":{}}}],["notpurchaseownerexception",{"_index":862,"title":{"classes/NotPurchaseOwnerException.html":{}},"body":{"classes/NotPurchaseOwnerException.html":{},"injectables/PurchaseService.html":{},"coverage.html":{}}}],["number",{"_index":583,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{},"miscellaneous/functions.html":{}}}],["o",{"_index":1513,"title":{},"body":{"index.html":{}}}],["object",{"_index":894,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"miscellaneous/variables.html":{}}}],["object.values(error.meta)[0][0",{"_index":940,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["object.values(errormeta)[0][0",{"_index":939,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["observable",{"_index":48,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{}}}],["obtaining",{"_index":1618,"title":{},"body":{"license.html":{}}}],["offices",{"_index":622,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["offset",{"_index":541,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["old",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["omitting",{"_index":1406,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["omittype",{"_index":608,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/UserWithoutPassword.html":{}}}],["omittype(product",{"_index":615,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["omittype(purchase",{"_index":651,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["omittype(user",{"_index":1408,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["once",{"_index":1480,"title":{},"body":{"miscellaneous/functions.html":{}}}],["one",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["onmoduleinit",{"_index":959,"title":{},"body":{"injectables/PrismaService.html":{}}}],["optional",{"_index":37,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"miscellaneous/functions.html":{}}}],["orderby",{"_index":549,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["ordering",{"_index":435,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["orm",{"_index":872,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{}}}],["os",{"_index":1561,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":1667,"title":{},"body":{"license.html":{}}}],["out",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":1675,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":1187,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["owner.exception",{"_index":1226,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["owner.exception.ts",{"_index":864,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"coverage.html":{}}}],["owner.exception.ts:4",{"_index":869,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{}}}],["package",{"_index":1443,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":429,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["pages",{"_index":1501,"title":{},"body":{"index.html":{}}}],["pagination",{"_index":426,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["para",{"_index":1489,"title":{},"body":{"index.html":{}}}],["param",{"_index":455,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["param('id",{"_index":478,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["param('name",{"_index":481,"title":{},"body":{"controllers/CategoryController.html":{}}}],["parameters",{"_index":33,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"miscellaneous/functions.html":{}}}],["partial",{"_index":1264,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype",{"_index":1266,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createcategorydto",{"_index":1267,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["partialtype(createproductdto",{"_index":1269,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createpurchasedto",{"_index":1271,"title":{},"body":{"classes/UpdatePurchaseDto.html":{}}}],["partialtype(createuserdto",{"_index":1277,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["particular",{"_index":1654,"title":{},"body":{"license.html":{}}}],["passport",{"_index":11,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["passportmodule",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":86,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["password",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["password.entity",{"_index":1328,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["password.entity.ts",{"_index":1403,"title":{},"body":{"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["password.exception",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["password.exception..ts",{"_index":799,"title":{},"body":{"classes/InvalidEmailOrPasswordException.html":{},"coverage.html":{}}}],["password.exception..ts:6",{"_index":802,"title":{},"body":{"classes/InvalidEmailOrPasswordException.html":{}}}],["pasta",{"_index":1525,"title":{},"body":{"index.html":{}}}],["patch",{"_index":454,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["patch('/review/:id",{"_index":1204,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["patch(':id",{"_index":483,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["patch('picture/:id",{"_index":1054,"title":{},"body":{"controllers/ProductController.html":{}}}],["patch('role",{"_index":1336,"title":{},"body":{"controllers/UserController.html":{}}}],["path.extname(file.originalname).tolowercase",{"_index":1742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payed",{"_index":646,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["payload",{"_index":85,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{}}}],["payload.sub",{"_index":102,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{}}}],["payload.tokenfamily",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.ts",{"_index":1688,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["payload.userrole",{"_index":104,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["per",{"_index":433,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreatePurchaseDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["percentage",{"_index":602,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["permission",{"_index":1612,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1635,"title":{},"body":{"license.html":{}}}],["person",{"_index":1617,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1636,"title":{},"body":{"license.html":{}}}],["picktype",{"_index":1245,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["picktype(purchase",{"_index":1248,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["picture",{"_index":557,"title":{},"body":{"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"miscellaneous/functions.html":{}}}],["picture'})@isadmin()@fileupload()@patch('picture/:id",{"_index":1027,"title":{},"body":{"controllers/ProductController.html":{}}}],["picture.png",{"_index":764,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["please",{"_index":859,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["png",{"_index":1031,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["pode",{"_index":1553,"title":{},"body":{"index.html":{}}}],["porta",{"_index":1551,"title":{},"body":{"index.html":{}}}],["portions",{"_index":1645,"title":{},"body":{"license.html":{}}}],["possible",{"_index":822,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["post",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["post('login",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logoutall",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgresql",{"_index":1585,"title":{},"body":{"index.html":{}}}],["postgresql://username:password@localhost:5432/ecommerce",{"_index":1569,"title":{},"body":{"index.html":{}}}],["precisar",{"_index":1511,"title":{},"body":{"index.html":{}}}],["preenchendo",{"_index":1536,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":406,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["prettier",{"_index":1602,"title":{},"body":{"index.html":{}}}],["price",{"_index":587,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["prisma",{"_index":395,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["prisma.categoryuncheckedcreateinput",{"_index":396,"title":{},"body":{"classes/Category.html":{}}}],["prisma.categoryuncheckedcreatenestedmanywithoutproductsinput",{"_index":1079,"title":{},"body":{"injectables/ProductService.html":{}}}],["prisma.decimal",{"_index":980,"title":{},"body":{"classes/Product.html":{},"classes/Purchase.html":{}}}],["prisma.productuncheckedcreateinput",{"_index":994,"title":{},"body":{"classes/Product.html":{}}}],["prisma.purchaseuncheckedcreateinput",{"_index":1145,"title":{},"body":{"classes/Purchase.html":{}}}],["prisma.service",{"_index":953,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.useruncheckedcreateinput",{"_index":1294,"title":{},"body":{"classes/User.html":{}}}],["prisma/client",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"dependencies.html":{}}}],["prisma/client/runtime",{"_index":609,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/PrismaExceptionHandler.html":{}}}],["prisma/prisma.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":957,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientknownrequesterror",{"_index":884,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror",{"_index":910,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror.foreignconstraintviolation",{"_index":929,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror.recordsnotfound",{"_index":931,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror.uniqueconstraintviolation",{"_index":924,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaexceptionhandler",{"_index":730,"title":{"classes/PrismaExceptionHandler.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["prismaexceptionhandler().handle(error",{"_index":738,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["prismamodule",{"_index":113,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":252,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["probably",{"_index":1369,"title":{},"body":{"injectables/UserService.html":{}}}],["process.env.access_jwt_secret",{"_index":1701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.refresh_jwt_secret",{"_index":1705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.exit",{"_index":968,"title":{},"body":{"injectables/PrismaService.html":{}}}],["product",{"_index":579,"title":{"classes/Product.html":{}},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["product'})@apibearerauth()@patch('/review/:id",{"_index":1185,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["product'})@isadmin()@delete(':id')@httpcode(httpstatus.no_content",{"_index":1020,"title":{},"body":{"controllers/ProductController.html":{}}}],["product'})@isadmin()@patch(':id",{"_index":1023,"title":{},"body":{"controllers/ProductController.html":{}}}],["product'})@isadmin()@post",{"_index":1009,"title":{},"body":{"controllers/ProductController.html":{}}}],["product.controller",{"_index":1062,"title":{},"body":{"modules/ProductModule.html":{}}}],["product.dto",{"_index":1040,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts",{"_index":578,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:26",{"_index":604,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:36",{"_index":586,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:44",{"_index":600,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:51",{"_index":606,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:59",{"_index":598,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:67",{"_index":595,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.service",{"_index":1042,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{}}}],["product/dto/find",{"_index":462,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["productcontroller",{"_index":1004,"title":{"controllers/ProductController.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{}}}],["productid",{"_index":637,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["productmodule",{"_index":114,"title":{"modules/ProductModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules.html":{},"overview.html":{}}}],["productname",{"_index":551,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindProductsDto.html":{},"injectables/ProductService.html":{}}}],["productnameinuseexception",{"_index":914,"title":{"classes/ProductNameInUseException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"coverage.html":{}}}],["productnotfoundexception",{"_index":916,"title":{"classes/ProductNotFoundException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductNotFoundException.html":{},"coverage.html":{}}}],["products",{"_index":476,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"miscellaneous/functions.html":{}}}],["products'})@isadmin()@get('/id/:id",{"_index":439,"title":{},"body":{"controllers/CategoryController.html":{}}}],["products'})@public()@get",{"_index":1012,"title":{},"body":{"controllers/ProductController.html":{}}}],["products'})@public()@get(':name",{"_index":443,"title":{},"body":{"controllers/CategoryController.html":{}}}],["products.dto",{"_index":463,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["products.dto.ts",{"_index":776,"title":{},"body":{"classes/FindProductsDto.html":{},"coverage.html":{}}}],["products.dto.ts:11",{"_index":779,"title":{},"body":{"classes/FindProductsDto.html":{}}}],["products.dto.ts:20",{"_index":778,"title":{},"body":{"classes/FindProductsDto.html":{}}}],["products.dto.ts:29",{"_index":777,"title":{},"body":{"classes/FindProductsDto.html":{}}}],["productservice",{"_index":1041,"title":{"injectables/ProductService.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{},"overview.html":{}}}],["productserviceinputexception",{"_index":745,"title":{"classes/ProductServiceInputException.html":{}},"body":{"classes/FileTypeError.html":{},"classes/ProductServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["productstoskip",{"_index":552,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["produtos",{"_index":1493,"title":{},"body":{"index.html":{}}}],["profile",{"_index":1311,"title":{},"body":{"controllers/UserController.html":{}}}],["profile'})@apibearerauth()@get",{"_index":1309,"title":{},"body":{"controllers/UserController.html":{}}}],["projeto",{"_index":1517,"title":{},"body":{"index.html":{}}}],["promise",{"_index":47,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":390,"title":{"properties.html":{}},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"properties.html":{}}}],["provide",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":1646,"title":{},"body":{"license.html":{}}}],["providers",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":41,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public.decorator",{"_index":55,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{}}}],["publish",{"_index":1630,"title":{},"body":{"license.html":{}}}],["purchase",{"_index":636,"title":{"classes/Purchase.html":{}},"body":{"classes/CreatePurchaseDto.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["purchase'})@apibearerauth()@post",{"_index":1164,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchase'})@isadmin()@delete(':id')@httpcode(httpstatus.no_content",{"_index":1180,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchase'})@isadmin()@patch(':id",{"_index":1189,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchase.controller",{"_index":1212,"title":{},"body":{"modules/PurchaseModule.html":{}}}],["purchase.dto",{"_index":1191,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdatePurchaseDto.html":{}}}],["purchase.dto.ts",{"_index":635,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["purchase.dto.ts:16",{"_index":1244,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["purchase.dto.ts:18",{"_index":643,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["purchase.dto.ts:23",{"_index":1242,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["purchase.dto.ts:27",{"_index":640,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["purchase.dto.ts:36",{"_index":645,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["purchase.service",{"_index":1195,"title":{},"body":{"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{}}}],["purchase.userid",{"_index":1234,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["purchasecontroller",{"_index":1159,"title":{"controllers/PurchaseController.html":{}},"body":{"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"coverage.html":{}}}],["purchased",{"_index":641,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["purchaseid",{"_index":1176,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["purchasemodule",{"_index":115,"title":{"modules/PurchaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PurchaseModule.html":{},"modules.html":{},"overview.html":{}}}],["purchasenotfoundexception",{"_index":917,"title":{"classes/PurchaseNotFoundException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/PurchaseNotFoundException.html":{},"coverage.html":{}}}],["purchases",{"_index":783,"title":{},"body":{"classes/FindPurchasesDto.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["purchases'})@apibearerauth()@get",{"_index":1173,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchases'})@isadmin()@get('/admin",{"_index":1168,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchases.dto",{"_index":1192,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["purchases.dto.ts",{"_index":782,"title":{},"body":{"classes/FindPurchasesDto.html":{},"coverage.html":{}}}],["purchases.dto.ts:11",{"_index":787,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["purchases.dto.ts:18",{"_index":786,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["purchases.dto.ts:27",{"_index":785,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["purchases.dto.ts:36",{"_index":784,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["purchaseservice",{"_index":1194,"title":{"injectables/PurchaseService.html":{}},"body":{"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"injectables/PurchaseService.html":{},"coverage.html":{},"overview.html":{}}}],["purchaseserviceinputexception",{"_index":868,"title":{"classes/PurchaseServiceInputException.html":{}},"body":{"classes/NotPurchaseOwnerException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["purchasestoskip",{"_index":1228,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["purpose",{"_index":1655,"title":{},"body":{"license.html":{}}}],["que",{"_index":1566,"title":{},"body":{"index.html":{}}}],["query",{"_index":457,"title":{},"body":{"controllers/CategoryController.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{}}}],["quot",{"_index":1099,"title":{},"body":{"injectables/ProductService.html":{}}}],["quot;brand1",{"_index":1102,"title":{},"body":{"injectables/ProductService.html":{}}}],["raiz",{"_index":1535,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["received",{"_index":845,"title":{},"body":{"classes/LoginResponse.html":{}}}],["recent",{"_index":1171,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["refer",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtExceptionHandler.html":{}}}],["reflect",{"_index":1458,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":27,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["refreshes",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshing",{"_index":811,"title":{},"body":{"classes/InvalidRefreshTokenException.html":{}}}],["refreshjwtconfig",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refreshtoken",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtoken(refreshtoken",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtoken(undefined",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokencontent",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokencontent.sub",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokencontent.tokenfamily",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokencredentials",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokendto",{"_index":171,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["refreshtokenpayload",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/typealiases.html":{}}}],["regexp",{"_index":747,"title":{},"body":{"classes/FileTypeError.html":{}}}],["registered",{"_index":502,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["regular",{"_index":1751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rejectonnotfound",{"_index":558,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["related",{"_index":1316,"title":{},"body":{"controllers/UserController.html":{}}}],["remove",{"_index":413,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["remove(@param('id",{"_index":487,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["remove(id",{"_index":445,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["remove(request",{"_index":1313,"title":{},"body":{"controllers/UserController.html":{}}}],["removed",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["removerefreshtokenfamilyifcompromised",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["removerefreshtokenfamilyifcompromised(userid",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["removes",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["replacing",{"_index":1368,"title":{},"body":{"injectables/UserService.html":{}}}],["req",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["request",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["request.headers['accept",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["request.headers['user",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["request.ip",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["request.user",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{}}}],["request.user['userid",{"_index":1334,"title":{},"body":{"controllers/UserController.html":{}}}],["requests",{"_index":1363,"title":{},"body":{"injectables/UserService.html":{}}}],["reset",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["respective",{"_index":723,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["response",{"_index":844,"title":{},"body":{"classes/LoginResponse.html":{}}}],["responsible",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["restriction",{"_index":1624,"title":{},"body":{"license.html":{}}}],["results",{"_index":69,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":66,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1691,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["returns",{"_index":45,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["reuse",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["review",{"_index":867,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{}}}],["review(request",{"_index":1182,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["review(userid",{"_index":1221,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["reviewcomment",{"_index":653,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["reviewnote",{"_index":652,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["reviewpurchasedto",{"_index":1183,"title":{"classes/ReviewPurchaseDto.html":{}},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"coverage.html":{}}}],["reviews",{"_index":1184,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["rights",{"_index":1627,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1461,"title":{},"body":{"dependencies.html":{}}}],["roda",{"_index":1542,"title":{},"body":{"index.html":{}}}],["rodar",{"_index":1560,"title":{},"body":{"index.html":{}}}],["role",{"_index":1224,"title":{},"body":{"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role'})@isadmin()@patch('role",{"_index":1322,"title":{},"body":{"controllers/UserController.html":{}}}],["role.admin",{"_index":1233,"title":{},"body":{"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{}}}],["role.dto",{"_index":1325,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role.dto.ts",{"_index":1279,"title":{},"body":{"classes/UpdateUserRoleDto.html":{},"coverage.html":{}}}],["role.dto.ts:11",{"_index":1280,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["role.dto.ts:18",{"_index":1282,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["rolesguard",{"_index":1252,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rotaterefreshtoken",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["rotaterefreshtoken(refreshtoken",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["rotates",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["rotation#automatic",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["route",{"_index":15,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"classes/LoginResponse.html":{},"guards/RolesGuard.html":{}}}],["rxjs",{"_index":53,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["saltrounds",{"_index":1707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["same",{"_index":1405,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["saved",{"_index":590,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"injectables/UserService.html":{}}}],["saverefreshtoken",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["saverefreshtoken(refreshtokencredentials",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["saves",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["search",{"_index":529,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["searching",{"_index":434,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{}}}],["secret",{"_index":1700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":99,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["select",{"_index":555,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["sell",{"_index":1633,"title":{},"body":{"license.html":{}}}],["senhas",{"_index":1594,"title":{},"body":{"index.html":{}}}],["sensitive",{"_index":1710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["service",{"_index":376,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["servidor",{"_index":1541,"title":{},"body":{"index.html":{}}}],["session",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessions",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessions'})@apibearerauth()@post('logoutall')@httpcode(httpstatus.ok",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["set",{"_index":1321,"title":{},"body":{"controllers/UserController.html":{}}}],["setmetadata(is_public_key",{"_index":1716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sets",{"_index":1721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":1642,"title":{},"body":{"license.html":{}}}],["show",{"_index":531,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["showing",{"_index":431,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["shutdown",{"_index":965,"title":{},"body":{"injectables/PrismaService.html":{}}}],["signals",{"_index":966,"title":{},"body":{"injectables/PrismaService.html":{}}}],["silent",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["single",{"_index":1094,"title":{},"body":{"injectables/ProductService.html":{}}}],["singlespaceurlname",{"_index":1124,"title":{},"body":{"injectables/ProductService.html":{}}}],["singlespaceurlname.split",{"_index":1127,"title":{},"body":{"injectables/ProductService.html":{}}}],["size",{"_index":1723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skip",{"_index":544,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["software",{"_index":1620,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}}}],["spaces",{"_index":1092,"title":{},"body":{"injectables/ProductService.html":{}}}],["spacetohyphenurlname",{"_index":1126,"title":{},"body":{"injectables/ProductService.html":{}}}],["specific",{"_index":705,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["src/.../access",{"_index":1686,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../file",{"_index":1472,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../gettokenexpirationdate.ts",{"_index":1470,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../hash.config.ts",{"_index":1696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../is",{"_index":1473,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../jwt.config.ts",{"_index":1695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1471,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../multer",{"_index":1698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":1697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../refresh",{"_index":1689,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.module.ts",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/access",{"_index":6,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:31",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:49",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:67",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:76",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:86",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:110",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:125",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:138",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:165",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:179",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:18",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:208",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:224",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:242",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:35",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:58",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:87",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:92",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:97",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/login",{"_index":836,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.response.ts",{"_index":843,"title":{},"body":{"classes/LoginResponse.html":{},"coverage.html":{}}}],["src/auth/dto/login.response.ts:13",{"_index":849,"title":{},"body":{"classes/LoginResponse.html":{}}}],["src/auth/dto/login.response.ts:7",{"_index":848,"title":{},"body":{"classes/LoginResponse.html":{}}}],["src/auth/dto/logout.dto.ts",{"_index":852,"title":{},"body":{"classes/LogoutDto.html":{},"coverage.html":{}}}],["src/auth/dto/logout.dto.ts:10",{"_index":854,"title":{},"body":{"classes/LogoutDto.html":{}}}],["src/auth/dto/refresh",{"_index":1238,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/exceptions/auth",{"_index":375,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["src/auth/exceptions/invalid",{"_index":798,"title":{},"body":{"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidRefreshTokenException.html":{},"coverage.html":{}}}],["src/auth/public.decorator",{"_index":458,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["src/auth/public.decorator.ts",{"_index":1419,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/types/access",{"_index":1690,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/auth/types/refresh",{"_index":1693,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/common/decorators/file",{"_index":1038,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/decorators/is",{"_index":460,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/common/exceptions/category/category",{"_index":495,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["src/common/exceptions/product/product",{"_index":915,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"coverage.html":{}}}],["src/common/exceptions/purchase/purchase",{"_index":918,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/PurchaseNotFoundException.html":{},"coverage.html":{}}}],["src/common/exceptions/user/email",{"_index":694,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["src/common/exceptions/user/user",{"_index":920,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts",{"_index":1253,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts:12",{"_index":1255,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/guards/roles.guard.ts:22",{"_index":1256,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/interceptors/exception.interceptor.ts",{"_index":709,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/exception.interceptor.ts:24",{"_index":721,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["src/common/interceptors/handlers/exception.handler.ts",{"_index":699,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"coverage.html":{}}}],["src/common/interceptors/handlers/exception.handler.ts:4",{"_index":703,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["src/common/interceptors/handlers/jwt",{"_index":813,"title":{},"body":{"classes/JwtExceptionHandler.html":{},"coverage.html":{}}}],["src/common/interceptors/handlers/prisma",{"_index":871,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["src/common/interceptors/handlers/user",{"_index":1339,"title":{},"body":{"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["src/config/hash.config",{"_index":1380,"title":{},"body":{"injectables/UserService.html":{}}}],["src/config/hash.config.ts",{"_index":1426,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/jwt.config",{"_index":90,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{}}}],["src/config/jwt.config.ts",{"_index":1427,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/multer",{"_index":1065,"title":{},"body":{"modules/ProductModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1431,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/models/category/category.controller.ts",{"_index":405,"title":{},"body":{"controllers/CategoryController.html":{},"coverage.html":{}}}],["src/models/category/category.controller.ts:37",{"_index":419,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:51",{"_index":424,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:61",{"_index":440,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:72",{"_index":444,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:83",{"_index":452,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:95",{"_index":447,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.module.ts",{"_index":492,"title":{},"body":{"modules/CategoryModule.html":{}}}],["src/models/category/category.service.ts",{"_index":514,"title":{},"body":{"injectables/CategoryService.html":{},"coverage.html":{}}}],["src/models/category/category.service.ts:102",{"_index":534,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:119",{"_index":533,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:124",{"_index":522,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:13",{"_index":520,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:132",{"_index":536,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:22",{"_index":526,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:36",{"_index":528,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:54",{"_index":530,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:77",{"_index":532,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/dto/create",{"_index":567,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/models/category/dto/find",{"_index":765,"title":{},"body":{"classes/FindCategoriesDto.html":{},"coverage.html":{}}}],["src/models/category/dto/update",{"_index":1262,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/models/category/entities/category.entity.ts",{"_index":388,"title":{},"body":{"classes/Category.html":{},"coverage.html":{}}}],["src/models/category/entities/category.entity.ts:15",{"_index":394,"title":{},"body":{"classes/Category.html":{}}}],["src/models/category/entities/category.entity.ts:9",{"_index":393,"title":{},"body":{"classes/Category.html":{}}}],["src/models/product/dto/create",{"_index":577,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/models/product/dto/file",{"_index":756,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["src/models/product/dto/find",{"_index":775,"title":{},"body":{"classes/FindProductsDto.html":{},"coverage.html":{}}}],["src/models/product/dto/update",{"_index":1268,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/models/product/entities/product.entity.ts",{"_index":979,"title":{},"body":{"classes/Product.html":{},"coverage.html":{}}}],["src/models/product/entities/product.entity.ts:15",{"_index":988,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:21",{"_index":991,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:27",{"_index":989,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:35",{"_index":981,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:41",{"_index":986,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:46",{"_index":990,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:52",{"_index":985,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:58",{"_index":983,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:9",{"_index":987,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/exceptions/file",{"_index":741,"title":{},"body":{"classes/FileTypeError.html":{},"coverage.html":{}}}],["src/models/product/exceptions/product",{"_index":1132,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["src/models/product/product.controller.ts",{"_index":1005,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{}}}],["src/models/product/product.controller.ts:104",{"_index":1021,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:38",{"_index":1010,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:50",{"_index":1013,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:58",{"_index":1016,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:66",{"_index":1019,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:81",{"_index":1028,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:92",{"_index":1024,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.module.ts",{"_index":1061,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/models/product/product.service.ts",{"_index":1069,"title":{},"body":{"injectables/ProductService.html":{},"coverage.html":{}}}],["src/models/product/product.service.ts:103",{"_index":1104,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:115",{"_index":1085,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:128",{"_index":1107,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:13",{"_index":1074,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:143",{"_index":1076,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:22",{"_index":1080,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:40",{"_index":1109,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:51",{"_index":1081,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:70",{"_index":1082,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:79",{"_index":1083,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:88",{"_index":1105,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/purchase/dto/create",{"_index":634,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"coverage.html":{}}}],["src/models/purchase/dto/find",{"_index":781,"title":{},"body":{"classes/FindPurchasesDto.html":{},"coverage.html":{}}}],["src/models/purchase/dto/review",{"_index":1241,"title":{},"body":{"classes/ReviewPurchaseDto.html":{},"coverage.html":{}}}],["src/models/purchase/dto/update",{"_index":1270,"title":{},"body":{"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["src/models/purchase/entities/purchase.entity.ts",{"_index":1133,"title":{},"body":{"classes/Purchase.html":{},"coverage.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:13",{"_index":1144,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:18",{"_index":1137,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:24",{"_index":1134,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:31",{"_index":1143,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:36",{"_index":1140,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:41",{"_index":1138,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:46",{"_index":1135,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:8",{"_index":1136,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/exceptions/not",{"_index":863,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"coverage.html":{}}}],["src/models/purchase/exceptions/purchase",{"_index":1237,"title":{},"body":{"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["src/models/purchase/purchase.controller.ts",{"_index":1160,"title":{},"body":{"controllers/PurchaseController.html":{},"coverage.html":{}}}],["src/models/purchase/purchase.controller.ts:101",{"_index":1186,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:115",{"_index":1190,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:127",{"_index":1181,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:38",{"_index":1165,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:55",{"_index":1169,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:69",{"_index":1174,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:85",{"_index":1178,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.module.ts",{"_index":1211,"title":{},"body":{"modules/PurchaseModule.html":{}}}],["src/models/purchase/purchase.service.ts",{"_index":1213,"title":{},"body":{"injectables/PurchaseService.html":{},"coverage.html":{}}}],["src/models/purchase/purchase.service.ts:118",{"_index":1223,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:135",{"_index":1220,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:15",{"_index":1214,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:24",{"_index":1216,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:43",{"_index":1217,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:71",{"_index":1219,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:93",{"_index":1222,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/user/dto/create",{"_index":662,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/models/user/dto/delete",{"_index":690,"title":{},"body":{"classes/DeleteUserDto.html":{},"coverage.html":{}}}],["src/models/user/dto/update",{"_index":1273,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"coverage.html":{}}}],["src/models/user/entities/user",{"_index":1402,"title":{},"body":{"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["src/models/user/entities/user.entity",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/models/user/entities/user.entity.ts",{"_index":1284,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/models/user/entities/user.entity.ts:19",{"_index":1292,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:25",{"_index":1288,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:31",{"_index":1291,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:37",{"_index":1290,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:43",{"_index":1286,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:49",{"_index":1287,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:55",{"_index":1293,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:9",{"_index":1289,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/exceptions/invalid",{"_index":806,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{},"coverage.html":{}}}],["src/models/user/exceptions/missing",{"_index":856,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{},"coverage.html":{}}}],["src/models/user/exceptions/user",{"_index":1340,"title":{},"body":{"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["src/models/user/user.controller.ts",{"_index":1302,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/models/user/user.controller.ts:37",{"_index":1307,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:45",{"_index":1310,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:55",{"_index":1319,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:68",{"_index":1323,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:79",{"_index":1315,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.module",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/models/user/user.module.ts",{"_index":1348,"title":{},"body":{"modules/UserModule.html":{}}}],["src/models/user/user.service",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/models/user/user.service.ts",{"_index":1351,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/models/user/user.service.ts:111",{"_index":1367,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:139",{"_index":1376,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:18",{"_index":1355,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:27",{"_index":1356,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:48",{"_index":1362,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:60",{"_index":1358,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:67",{"_index":1373,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:84",{"_index":1374,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:98",{"_index":1372,"title":{},"body":{"injectables/UserService.html":{}}}],["src/prisma/prisma.module",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}}}],["src/prisma/prisma.module.ts",{"_index":951,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":954,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:15",{"_index":972,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:25",{"_index":962,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/util/gettokenexpirationdate",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/util/gettokenexpirationdate.ts",{"_index":1439,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start:dev",{"_index":1549,"title":{},"body":{"index.html":{}}}],["started",{"_index":1484,"title":{"index.html":{},"license.html":{}},"body":{}}],["starting",{"_index":428,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["starts",{"_index":1479,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statements",{"_index":1412,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":498,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["stock",{"_index":582,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["storage",{"_index":1725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategy",{"_index":88,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["street",{"_index":688,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["string",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"miscellaneous/variables.html":{}}}],["studio",{"_index":1559,"title":{},"body":{"index.html":{}}}],["studio:test",{"_index":1580,"title":{},"body":{"index.html":{}}}],["sua",{"_index":1518,"title":{},"body":{"index.html":{}}}],["sub",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":1638,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1632,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1644,"title":{},"body":{"license.html":{}}}],["successfully",{"_index":846,"title":{},"body":{"classes/LoginResponse.html":{}}}],["summary",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":60,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{}}}],["super('category",{"_index":507,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{}}}],["super('e",{"_index":695,"title":{},"body":{"classes/EmailInUseException.html":{}}}],["super('invalid",{"_index":804,"title":{},"body":{"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{}}}],["super('please",{"_index":861,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["super('product",{"_index":1068,"title":{},"body":{"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{}}}],["super('purchase",{"_index":870,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"classes/PurchaseNotFoundException.html":{}}}],["super('user",{"_index":1350,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["super(`file",{"_index":754,"title":{},"body":{"classes/FileTypeError.html":{}}}],["super(message",{"_index":386,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["super.canactivate(context",{"_index":68,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["supertest",{"_index":1600,"title":{},"body":{"index.html":{}}}],["support",{"_index":1672,"title":{},"body":{"modules.html":{}}}],["supports",{"_index":750,"title":{},"body":{"classes/FileTypeError.html":{}}}],["svg",{"_index":1673,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1464,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["switch",{"_index":921,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["system",{"_index":503,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"controllers/UserController.html":{},"classes/UserNotFoundException.html":{}}}],["table",{"_index":1442,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1441,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":545,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["tecnologias",{"_index":1505,"title":{},"body":{"index.html":{}}}],["ter",{"_index":1512,"title":{},"body":{"index.html":{}}}],["test",{"_index":1577,"title":{},"body":{"index.html":{}}}],["test:all",{"_index":1574,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1579,"title":{},"body":{"index.html":{}}}],["test?schema=public",{"_index":1570,"title":{},"body":{"index.html":{}}}],["testes",{"_index":1562,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":976,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":977,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.authservice.findalltokens(userid",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(email",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(refreshtoken",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logoutall(userid",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken(refreshtoken",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.capitalizeonlyfirstletter(createcategorydto.name",{"_index":538,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.capitalizeonlyfirstletter(name",{"_index":559,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.capitalizeonlyfirstletter(updatecategorydto.name",{"_index":566,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryservice.create(createcategorydto",{"_index":474,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findall(findcategoriesdto",{"_index":475,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findonebyid(id",{"_index":479,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findonebyname(name",{"_index":482,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.remove(id",{"_index":488,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.update(id",{"_index":484,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.connectcategoriesbyid(createproductdto.categories",{"_index":1111,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.createrefreshtoken",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.formaturlname(createproductdto.name",{"_index":1110,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.formaturlname(updateproductdto.name",{"_index":1129,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.generateaccesstoken",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generateaccesstoken(payload",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getuserrole(refreshtokencontent.sub",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashifupdatingpassword(id",{"_index":1391,"title":{},"body":{"injectables/UserService.html":{}}}],["this.iscategoryerror(error",{"_index":935,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.iscategorynameconstraintviolation(error",{"_index":927,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.iscreateproducterror(error",{"_index":934,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isemailconstraintviolation(error.meta",{"_index":925,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isjwtexception(error",{"_index":832,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["this.isprismaunknownerror(error",{"_index":936,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isproducterror(error",{"_index":933,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isproductnameconstraintviolation(error",{"_index":926,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.ispurchaseerror(error",{"_index":930,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isusererror(error",{"_index":932,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.jwterrornames.includes(error.name",{"_index":835,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["this.jwtservice.signasync",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(refreshtoken",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.category.create",{"_index":539,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.delete",{"_index":563,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.findmany",{"_index":543,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.findunique",{"_index":553,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.update",{"_index":562,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.product.create",{"_index":1112,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.delete",{"_index":1119,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.findmany",{"_index":1115,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.findunique",{"_index":1116,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.update",{"_index":1113,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.purchase.create",{"_index":1227,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.purchase.delete",{"_index":1236,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.purchase.findmany",{"_index":1229,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.purchase.findunique",{"_index":1232,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.purchase.update",{"_index":1235,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.user.create",{"_index":1388,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.delete",{"_index":1397,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":1389,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":1392,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prismaservice.usertokens.create",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.usertokens.deletemany",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.usertokens.findmany",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.productservice.create(createproductdto",{"_index":1046,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findall(findallproductsdto",{"_index":1048,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findonebyid(id",{"_index":1050,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findonebyurlname(urlname",{"_index":1053,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.remove(id",{"_index":1057,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.update(id",{"_index":1056,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.uploadpicture(id",{"_index":1055,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.purchaseservice.create(userid",{"_index":1198,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.findall(findpurchasesdto",{"_index":1200,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.findone(purchaseid",{"_index":1203,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.remove(id",{"_index":1207,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.review(userid",{"_index":1205,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.update(id",{"_index":1206,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.reflector.getallandoverride(is_admin_key",{"_index":1260,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":63,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["this.removerefreshtokenfamilyifcompromised",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rotaterefreshtoken",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.saverefreshtoken",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatecategoryandname(id",{"_index":561,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.updateproductandurlname(id",{"_index":1118,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.userservice.create(createuserdto",{"_index":1332,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyemail(email",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyid(userid",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["this.userservice.remove(userid",{"_index":1338,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(userid",{"_index":1335,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateuserrole(updateuserroledto",{"_index":1337,"title":{},"body":{"controllers/UserController.html":{}}}],["this.validatecurrentpassword(id",{"_index":1395,"title":{},"body":{"injectables/UserService.html":{}}}],["this.validaterefreshtoken(refreshtoken",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validateuser(email",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PurchaseService.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{}}}],["thrown",{"_index":1371,"title":{},"body":{"injectables/UserService.html":{}}}],["throws",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{}}}],["tmp",{"_index":1728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["today's",{"_index":1477,"title":{},"body":{"miscellaneous/functions.html":{}}}],["todos",{"_index":1573,"title":{},"body":{"index.html":{}}}],["token",{"_index":93,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["token'})@public()@post('refresh')@httpcode(httpstatus.ok",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["token.dto",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["token.dto.ts",{"_index":1239,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:10",{"_index":1240,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.exception",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["token.exception.ts",{"_index":810,"title":{},"body":{"classes/InvalidRefreshTokenException.html":{},"coverage.html":{}}}],["token.exception.ts:6",{"_index":812,"title":{},"body":{"classes/InvalidRefreshTokenException.html":{}}}],["tokenexpirederror",{"_index":818,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["tokenfamily",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["tokens'})@apibearerauth()@get('tokens",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens/refresh",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["tooling",{"_index":1582,"title":{},"body":{"index.html":{}}}],["tort",{"_index":1666,"title":{},"body":{"license.html":{}}}],["totalprice",{"_index":638,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["trailing",{"_index":1090,"title":{},"body":{"injectables/ProductService.html":{}}}],["transform",{"_index":711,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["transformer",{"_index":773,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"dependencies.html":{},"index.html":{}}}],["tratar",{"_index":1597,"title":{},"body":{"index.html":{}}}],["trimmedurlname",{"_index":1122,"title":{},"body":{"injectables/ProductService.html":{}}}],["trimmedurlname.replace(/\\s\\s+/g",{"_index":1125,"title":{},"body":{"injectables/ProductService.html":{}}}],["true",{"_index":67,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":866,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{}}}],["trying",{"_index":801,"title":{},"body":{"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{}}}],["turn",{"_index":1093,"title":{},"body":{"injectables/ProductService.html":{}}}],["turned",{"_index":992,"title":{},"body":{"classes/Product.html":{}}}],["type",{"_index":36,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.exception.ts",{"_index":742,"title":{},"body":{"classes/FileTypeError.html":{},"coverage.html":{}}}],["type.exception.ts:6",{"_index":748,"title":{},"body":{"classes/FileTypeError.html":{}}}],["typealiases",{"_index":1684,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":706,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["types/access",{"_index":92,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["types/refresh",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["typescript",{"_index":1581,"title":{},"body":{"index.html":{}}}],["ui",{"_index":1465,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["um",{"_index":1532,"title":{},"body":{"index.html":{}}}],["unauthenticated",{"_index":1717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":831,"title":{},"body":{"classes/JwtExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["unauthorizedexception('invalid",{"_index":833,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["unauthorizedexception(error.message",{"_index":1341,"title":{},"body":{"classes/UserInputExceptionHandler.html":{}}}],["undefined",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{}}}],["undefined/g",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["uniquesuffix",{"_index":1731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unitários",{"_index":1576,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":901,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["unlicensed",{"_index":1681,"title":{},"body":{"properties.html":{}}}],["up",{"_index":1749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updatable",{"_index":1263,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["update",{"_index":414,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["update(id",{"_index":448,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["update(request",{"_index":1317,"title":{},"body":{"controllers/UserController.html":{}}}],["update.exception",{"_index":1381,"title":{},"body":{"injectables/UserService.html":{}}}],["update.exception.ts",{"_index":807,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"coverage.html":{}}}],["update.exception.ts:6",{"_index":809,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{}}}],["update.exception.ts:7",{"_index":858,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["updatecategoryandname",{"_index":518,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatecategoryandname(id",{"_index":535,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatecategorydto",{"_index":449,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatecategorydto.name",{"_index":560,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatedat",{"_index":1285,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{}}}],["updateproductandurlname",{"_index":1072,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateproductandurlname(id",{"_index":1106,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateproductdto",{"_index":1022,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updateproductdto.name",{"_index":1117,"title":{},"body":{"injectables/ProductService.html":{}}}],["updatepurchasedto",{"_index":1188,"title":{"classes/UpdatePurchaseDto.html":{}},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["updates",{"_index":450,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserdto",{"_index":1272,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserdto.currentpassword",{"_index":1399,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto.password",{"_index":1398,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserrole",{"_index":1304,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserrole(updateuserroledto",{"_index":1320,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserroledto",{"_index":1278,"title":{"classes/UpdateUserRoleDto.html":{}},"body":{"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserroledto.email",{"_index":1393,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserroledto.role",{"_index":1394,"title":{},"body":{"injectables/UserService.html":{}}}],["upload",{"_index":749,"title":{},"body":{"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["upload.config",{"_index":1066,"title":{},"body":{"modules/ProductModule.html":{}}}],["upload.config.ts",{"_index":1428,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["upload.decorator",{"_index":1039,"title":{},"body":{"controllers/ProductController.html":{}}}],["upload.decorator.ts",{"_index":1422,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["upload.dto.ts",{"_index":757,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["upload.dto.ts:10",{"_index":762,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["uploadedfile",{"_index":1036,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploading",{"_index":744,"title":{},"body":{"classes/FileTypeError.html":{}}}],["uploadphoto",{"_index":1007,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploadphoto(id",{"_index":1025,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploadpicture",{"_index":1073,"title":{},"body":{"injectables/ProductService.html":{}}}],["uploadpicture(id",{"_index":1108,"title":{},"body":{"injectables/ProductService.html":{}}}],["uploads",{"_index":1026,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["url",{"_index":993,"title":{},"body":{"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["urlname",{"_index":556,"title":{},"body":{"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["urlname'})@public()@get(':urlname",{"_index":1018,"title":{},"body":{"controllers/ProductController.html":{}}}],["use",{"_index":506,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"license.html":{}}}],["use.exception",{"_index":912,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["use.exception.ts",{"_index":496,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"coverage.html":{}}}],["use.exception.ts:6",{"_index":505,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["useclass",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":138,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["user'})@apibearerauth()@delete()@httpcode(httpstatus.no_content",{"_index":1314,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@apibearerauth()@patch",{"_index":1318,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@apibearerauth()@post('logout')@httpcode(httpstatus.ok",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["user'})@public()@post",{"_index":1306,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@public()@post('login')@httpcode(httpstatus.ok",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.controller",{"_index":1349,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":1276,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":663,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":692,"title":{},"body":{"classes/DeleteUserDto.html":{}}}],["user.dto.ts:17",{"_index":669,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":1275,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:28",{"_index":676,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":670,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:44",{"_index":665,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":1407,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["user.id",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.role",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":1329,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user@example.com",{"_index":680,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{}}}],["usercontroller",{"_index":1301,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":101,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePurchaseDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{}}}],["userinputexceptionhandler",{"_index":732,"title":{"classes/UserInputExceptionHandler.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["userinputexceptionhandler().handle(error",{"_index":737,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["usermodule",{"_index":116,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["usernotfoundexception",{"_index":919,"title":{"classes/UserNotFoundException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["userrole",{"_index":103,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{}}}],["users",{"_index":865,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":250,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userserviceinputexception",{"_index":808,"title":{"classes/UserServiceInputException.html":{}},"body":{"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["usertokens",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["usertokens.length",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["userwithoutpassword",{"_index":1326,"title":{"classes/UserWithoutPassword.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["uses",{"_index":10,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{}}}],["usuário",{"_index":1507,"title":{},"body":{"index.html":{}}}],["usuários",{"_index":1492,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"classes/Category.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/User.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["v4",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["valid",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":77,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["validate(payload",{"_index":79,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["validatecurrentpassword",{"_index":1354,"title":{},"body":{"injectables/UserService.html":{}}}],["validatecurrentpassword(id",{"_index":1375,"title":{},"body":{"injectables/UserService.html":{}}}],["validated",{"_index":1692,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["validaterefreshtoken",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["validaterefreshtoken(refreshtoken",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["validates",{"_index":82,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{}}}],["validateuser",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":575,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"dependencies.html":{},"index.html":{}}}],["validações",{"_index":1589,"title":{},"body":{"index.html":{}}}],["validimageuploadtypesregex",{"_index":1430,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["validimageuploadtypesregex.test",{"_index":1741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validimageuploadtypesregex.test(file.mimetype",{"_index":1739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["value",{"_index":817,"title":{},"body":{"classes/JwtExceptionHandler.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1420,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1694,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["veiga",{"_index":1611,"title":{},"body":{"license.html":{}}}],["verify",{"_index":1711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1679,"title":{},"body":{"properties.html":{}}}],["visualizar",{"_index":1556,"title":{},"body":{"index.html":{}}}],["voc",{"_index":1510,"title":{},"body":{"index.html":{}}}],["void",{"_index":707,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"miscellaneous/functions.html":{}}}],["warranties",{"_index":1651,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1647,"title":{},"body":{"license.html":{}}}],["way",{"_index":1078,"title":{},"body":{"injectables/ProductService.html":{}}}],["web",{"_index":1588,"title":{},"body":{"index.html":{}}}],["wether",{"_index":886,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["wheelchair",{"_index":619,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["whether",{"_index":829,"title":{},"body":{"classes/JwtExceptionHandler.html":{},"license.html":{}}}],["white",{"_index":1091,"title":{},"body":{"injectables/ProductService.html":{}}}],["without",{"_index":1312,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"license.html":{}}}],["won't",{"_index":1364,"title":{},"body":{"injectables/UserService.html":{}}}],["words",{"_index":1097,"title":{},"body":{"injectables/ProductService.html":{}}}],["world",{"_index":687,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["wrong",{"_index":800,"title":{},"body":{"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{}}}],["yarn",{"_index":1530,"title":{},"body":{"index.html":{}}}],["yes",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["z",{"_index":674,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessJwtAuthGuard.html":{"url":"injectables/AccessJwtAuthGuard.html","title":"injectable - AccessJwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessJwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/access-jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Uses the passport library AuthGuard to check\nif the route needs authentication\nFor more on NestJs Guards: https://docs.nestjs.com/guards\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/access-jwt-auth.guard.ts:13\n                            \n                        \n\n                \n                    \n                            Uses the passport library AuthGuard to check\nif the route needs authentication\nFor more on NestJs Guards: https://docs.nestjs.com/guards\nInstantiates the class and the Reflector dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/access-jwt-auth.guard.ts:28\n                \n            \n\n\n            \n                \n                    If the route uses the Public decorator it\ndoes not need authentication, else it does\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Observable } from 'rxjs';\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n/** Uses the passport library AuthGuard to check\n * if the route needs authentication\n *\n * For more on NestJs Guards: https://docs.nestjs.com/guards\n */\n@Injectable()\nexport class AccessJwtAuthGuard extends AuthGuard('access-jwt') {\n  /** Uses the passport library AuthGuard to check\n   * if the route needs authentication\n   *\n   * For more on NestJs Guards: https://docs.nestjs.com/guards\n   *\n   * Instantiates the class and the Reflector dependency\n   */\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  /** If the route uses the Public decorator it\n   * does not need authentication, else it does\n   */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessJwtStrategy.html":{"url":"injectables/AccessJwtStrategy.html","title":"injectable - AccessJwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessJwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/access-jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Passport library Access JsonWebToken configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/access-jwt.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            Passport library JsonWebToken configuration\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: AccessTokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/access-jwt.strategy.ts:24\n                \n            \n\n\n            \n                \n                    Validates and returns data after JsonWebToken is decrypted\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                AccessTokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { accessJwtConfig } from 'src/config/jwt.config';\nimport { AccessTokenContent } from './types/access-token-content';\nimport { AccessTokenPayload } from './types/access-token-payload';\n\n/** Passport library Access JsonWebToken configuration */\n@Injectable()\nexport class AccessJwtStrategy extends PassportStrategy(\n  Strategy,\n  'access-jwt',\n) {\n  /** Passport library JsonWebToken configuration */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: accessJwtConfig.secret,\n    });\n  }\n\n  /** Validates and returns data after JsonWebToken is decrypted */\n  async validate(payload: AccessTokenPayload): Promise {\n    return {\n      userId: payload.sub,\n      userRole: payload.userRole,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nPurchaseModule\n\nPurchaseModule\n\nAppModule -->\n\nPurchaseModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CategoryModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            ProductModule\n                        \n                        \n                            PurchaseModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthModule } from './auth/auth.module';\nimport { AccessJwtAuthGuard } from './auth/access-jwt-auth.guard';\nimport { UserModule } from './models/user/user.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { ProductModule } from './models/product/product.module';\nimport { CategoryModule } from './models/category/category.module';\nimport { PurchaseModule } from './models/purchase/purchase.module';\n\n@Module({\n  imports: [\n    UserModule,\n    AuthModule,\n    PrismaModule,\n    ProductModule,\n    CategoryModule,\n    PurchaseModule,\n  ],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: AccessJwtAuthGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                User authentication endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllTokens\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                logoutAll\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTokens(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns all user active tokens'})@ApiBearerAuth()@Get('tokens')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:86\n                \n            \n\n\n            \n                \n                    Returns all user's active tokens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(undefined: LoginCredentialsDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Logs in user'})@Public()@Post('login')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:31\n                \n            \n\n\n            \n                \n                    Authenticates the User\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(undefined: LogoutDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Logs out user'})@ApiBearerAuth()@Post('logout')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:67\n                \n            \n\n\n            \n                \n                    Logs out the User from the current session\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LogoutDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logoutAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    logoutAll(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Logs out user of all sessions'})@ApiBearerAuth()@Post('logoutAll')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:76\n                \n            \n\n\n            \n                \n                    Logs out the User from all sessions\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(undefined: RefreshTokenDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Refreshes user token'})@Public()@Post('refresh')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:49\n                \n            \n\n\n            \n                \n                    Refreshes the user token for silent authentication\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                RefreshTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Req,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { UserTokens } from '@prisma/client';\nimport { Request } from 'express';\nimport { AuthService } from './auth.service';\nimport { LoginCredentialsDto } from './dto/login-credentials.dto';\nimport { LoginResponse } from './dto/login.response';\nimport { LogoutDto } from './dto/logout.dto';\nimport { RefreshTokenDto } from './dto/refresh-token.dto';\nimport { Public } from './public.decorator';\n\n/** User authentication endpoints */\n@ApiTags('authentication')\n@Controller()\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  /** Authenticates the User */\n  @ApiOperation({ summary: 'Logs in user' })\n  @Public()\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  async login(\n    @Body() { email, password }: LoginCredentialsDto,\n    @Req() request: Request,\n  ): Promise {\n    const browserInfo =\n      `${request.ip} ${request.headers['user-agent']} ${request.headers['accept-language']}`.replace(\n        / undefined/g,\n        '',\n      );\n\n    return this.authService.login(email, password, browserInfo);\n  }\n\n  /** Refreshes the user token for silent authentication */\n  @ApiOperation({ summary: 'Refreshes user token' })\n  @Public()\n  @Post('refresh')\n  @HttpCode(HttpStatus.OK)\n  async refreshToken(\n    @Body() { refreshToken }: RefreshTokenDto,\n    @Req() request: Request,\n  ): Promise {\n    const browserInfo =\n      `${request.ip} ${request.headers['user-agent']} ${request.headers['accept-language']}`.replace(\n        / undefined/g,\n        '',\n      );\n\n    return this.authService.refreshToken(refreshToken, browserInfo);\n  }\n\n  /** Logs out the User from the current session */\n  @ApiOperation({ summary: 'Logs out user' })\n  @ApiBearerAuth()\n  @Post('logout')\n  @HttpCode(HttpStatus.OK)\n  async logout(@Body() { refreshToken }: LogoutDto): Promise {\n    return this.authService.logout(refreshToken);\n  }\n\n  /** Logs out the User from all sessions */\n  @ApiOperation({ summary: 'Logs out user of all sessions' })\n  @ApiBearerAuth()\n  @Post('logoutAll')\n  @HttpCode(HttpStatus.OK)\n  async logoutAll(@Req() request: Request): Promise {\n    const { userId } = request.user as { userId: string };\n\n    return this.authService.logoutAll(userId);\n  }\n\n  /** Returns all user's active tokens */\n  @ApiOperation({ summary: 'Returns all user active tokens' })\n  @ApiBearerAuth()\n  @Get('tokens')\n  async findAllTokens(@Req() request: Request): Promise {\n    const { userId } = request.user as { userId: string };\n\n    return this.authService.findAllTokens(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAccessJwtStrategy\n\nAccessJwtStrategy\n\nAuthModule -->\n\nAccessJwtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessJwtStrategy\n                        \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { UserModule } from 'src/models/user/user.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AccessJwtStrategy } from './access-jwt.strategy';\nimport { PrismaModule } from 'src/prisma/prisma.module';\n\n@Module({\n  imports: [UserModule, PrismaModule, PassportModule, JwtModule.register({})],\n  providers: [AuthService, AccessJwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for authenticating the user\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                createRefreshToken\n                            \n                            \n                                    Async\n                                findAllTokens\n                            \n                            \n                                    Private\n                                    Async\n                                generateAccessToken\n                            \n                            \n                                    Private\n                                    Async\n                                getUserRole\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                logoutAll\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Private\n                                    Async\n                                removeRefreshTokenFamilyIfCompromised\n                            \n                            \n                                    Private\n                                    Async\n                                rotateRefreshToken\n                            \n                            \n                                    Private\n                                    Async\n                                saveRefreshToken\n                            \n                            \n                                    Private\n                                    Async\n                                validateRefreshToken\n                            \n                            \n                                    Private\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:18\n                            \n                        \n\n                \n                    \n                            Responsible for authenticating the user\nInstantiate the class and the UserService and\nJwtService dependencies\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        createRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createRefreshToken(payload: literal type, browserInfo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:138\n                \n            \n\n\n            \n                \n                    Creates the refresh token and saves it in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    browserInfo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTokens(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:97\n                \n            \n\n\n            \n                \n                    Returns all user's active tokens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateAccessToken(payload: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:125\n                \n            \n\n\n            \n                \n                    Generates user's access token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getUserRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserRole(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:242\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(email: string, password: string, browserInfo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:35\n                \n            \n\n\n            \n                \n                    Validates if the inputted email exists and\ncompares if the hashed password matches the inputted one.\nIf so, returns the access and refresh JWTs\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    browserInfo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:87\n                \n            \n\n\n            \n                \n                    Deletes the refreshToken from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logoutAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    logoutAll(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:92\n                \n            \n\n\n            \n                \n                    Deletes all user's refresh tokens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(refreshToken: string, browserInfo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:58\n                \n            \n\n\n            \n                \n                    Refreshes and rotates user's access and refresh tokens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    browserInfo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        removeRefreshTokenFamilyIfCompromised\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRefreshTokenFamilyIfCompromised(userId: string, tokenFamily: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:208\n                \n            \n\n\n            \n                \n                    Removes a compromised refresh token family from the database\nIf a token that is not in the database is used but it's family exists\nthat means the token has been compromised and the family should me removed\nRefer to https://auth0.com/docs/secure/tokens/refresh-tokens/refresh-token-rotation#automatic-reuse-detection\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenFamily\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        rotateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    rotateRefreshToken(refreshToken: string, refreshTokenContent: RefreshTokenPayload, browserInfo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:224\n                \n            \n\n\n            \n                \n                    Removes the old token from the database and creates a new one\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshTokenContent\n                                    \n                                                RefreshTokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    browserInfo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        saveRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveRefreshToken(refreshTokenCredentials: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:165\n                \n            \n\n\n            \n                \n                    Saves the new refresh token hashed in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshTokenCredentials\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateRefreshToken(refreshToken: string, refreshTokenContent: RefreshTokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:179\n                \n            \n\n\n            \n                \n                    Checks if the refresh token is valid\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshTokenContent\n                                    \n                                                RefreshTokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:110\n                \n            \n\n\n            \n                \n                    Validates if the inputted email exists and\ncompares if the hashed password matches the inputted one.\nIf not, throws an error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserTokens } from '@prisma/client';\nimport { compare } from 'bcrypt';\nimport { accessJwtConfig, refreshJwtConfig } from 'src/config/jwt.config';\nimport { User } from 'src/models/user/entities/user.entity';\nimport { UserService } from 'src/models/user/user.service';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { getTokenExpirationDate } from 'src/util/getTokenExpirationDate';\nimport { v4 as uuidV4 } from 'uuid';\nimport { LoginResponse } from './dto/login.response';\nimport { InvalidEmailOrPasswordException } from './exceptions/invalid-email-or-password.exception.';\nimport { InvalidRefreshTokenException } from './exceptions/invalid-refresh-token.exception';\nimport { RefreshTokenPayload } from './types/refresh-token-payload';\n\n/** Responsible for authenticating the user */\n@Injectable()\nexport class AuthService {\n  /** Responsible for authenticating the user\n   *\n   * Instantiate the class and the UserService and\n   * JwtService dependencies\n   */\n  constructor(\n    private readonly userService: UserService,\n    private readonly jwtService: JwtService,\n    private readonly prismaService: PrismaService,\n  ) {}\n\n  /** Validates if the inputted email exists and\n   * compares if the hashed password matches the inputted one.\n   *\n   * If so, returns the access and refresh JWTs\n   */\n  async login(\n    email: string,\n    password: string,\n    browserInfo?: string,\n  ): Promise {\n    const user = await this.validateUser(email, password);\n\n    const payload = { sub: user.id, userRole: user.role };\n\n    const accessToken = await this.generateAccessToken(payload);\n\n    const refreshToken = await this.createRefreshToken(\n      { sub: payload.sub },\n      browserInfo,\n    );\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  /** Refreshes and rotates user's access and refresh tokens */\n  async refreshToken(\n    refreshToken: string,\n    browserInfo?: string,\n  ): Promise {\n    const refreshTokenContent: RefreshTokenPayload =\n      await this.jwtService.verifyAsync(refreshToken, refreshJwtConfig);\n\n    await this.validateRefreshToken(refreshToken, refreshTokenContent);\n\n    const userRole = await this.getUserRole(refreshTokenContent.sub);\n\n    const accessToken = await this.generateAccessToken({\n      sub: refreshTokenContent.sub,\n      userRole,\n    });\n\n    const newRefreshToken = await this.rotateRefreshToken(\n      refreshToken,\n      refreshTokenContent,\n      browserInfo,\n    );\n\n    return {\n      accessToken,\n      refreshToken: newRefreshToken,\n    };\n  }\n\n  /** Deletes the refreshToken from the database*/\n  async logout(refreshToken: string): Promise {\n    await this.prismaService.userTokens.deleteMany({ where: { refreshToken } });\n  }\n\n  /** Deletes all user's refresh tokens */\n  async logoutAll(userId: string): Promise {\n    await this.prismaService.userTokens.deleteMany({ where: { userId } });\n  }\n\n  /** Returns all user's active tokens */\n  async findAllTokens(userId: string): Promise {\n    const tokens = await this.prismaService.userTokens.findMany({\n      where: { userId },\n    });\n\n    return tokens;\n  }\n\n  /** Validates if the inputted email exists and\n   * compares if the hashed password matches the inputted one.\n   *\n   * If not, throws an error\n   */\n  private async validateUser(email: string, password: string): Promise {\n    const user = await this.userService.findByEmail(email);\n\n    if (user) {\n      const isPasswordValid = await compare(password, user.password);\n\n      if (isPasswordValid) {\n        return { ...user, password: undefined };\n      }\n    }\n\n    throw new InvalidEmailOrPasswordException();\n  }\n\n  /** Generates user's access token */\n  private async generateAccessToken(payload: {\n    sub: string;\n    userRole: string;\n  }): Promise {\n    const accessToken = await this.jwtService.signAsync(\n      payload,\n      accessJwtConfig,\n    );\n\n    return accessToken;\n  }\n\n  /** Creates the refresh token and saves it in the database */\n  private async createRefreshToken(\n    payload: {\n      sub: string;\n      tokenFamily?: string;\n    },\n    browserInfo?: string,\n  ): Promise {\n    if (!payload.tokenFamily) {\n      payload.tokenFamily = uuidV4();\n    }\n\n    const refreshToken = await this.jwtService.signAsync(\n      { ...payload },\n      refreshJwtConfig,\n    );\n\n    await this.saveRefreshToken({\n      userId: payload.sub,\n      refreshToken,\n      family: payload.tokenFamily,\n      browserInfo,\n    });\n\n    return refreshToken;\n  }\n\n  /** Saves the new refresh token hashed in the database */\n  private async saveRefreshToken(refreshTokenCredentials: {\n    userId: string;\n    refreshToken: string;\n    family: string;\n    browserInfo?: string;\n  }): Promise {\n    const expiresAt = getTokenExpirationDate();\n\n    await this.prismaService.userTokens.create({\n      data: { ...refreshTokenCredentials, expiresAt },\n    });\n  }\n\n  /** Checks if the refresh token is valid */\n  private async validateRefreshToken(\n    refreshToken: string,\n    refreshTokenContent: RefreshTokenPayload,\n  ): Promise {\n    const userTokens = await this.prismaService.userTokens.findMany({\n      where: { userId: refreshTokenContent.sub, refreshToken },\n    });\n\n    const isRefreshTokenValid = userTokens.length > 0;\n\n    if (!isRefreshTokenValid) {\n      await this.removeRefreshTokenFamilyIfCompromised(\n        refreshTokenContent.sub,\n        refreshTokenContent.tokenFamily,\n      );\n\n      throw new InvalidRefreshTokenException();\n    }\n\n    return true;\n  }\n\n  /** Removes a compromised refresh token family from the database\n   *\n   * If a token that is not in the database is used but it's family exists\n   * that means the token has been compromised and the family should me removed\n   *\n   * Refer to https://auth0.com/docs/secure/tokens/refresh-tokens/refresh-token-rotation#automatic-reuse-detection\n   */\n  private async removeRefreshTokenFamilyIfCompromised(\n    userId: string,\n    tokenFamily: string,\n  ): Promise {\n    const familyTokens = await this.prismaService.userTokens.findMany({\n      where: { userId, family: tokenFamily },\n    });\n\n    if (familyTokens.length > 0) {\n      await this.prismaService.userTokens.deleteMany({\n        where: { userId, family: tokenFamily },\n      });\n    }\n  }\n\n  /** Removes the old token from the database and creates a new one */\n  private async rotateRefreshToken(\n    refreshToken: string,\n    refreshTokenContent: RefreshTokenPayload,\n    browserInfo?: string,\n  ): Promise {\n    await this.prismaService.userTokens.deleteMany({ where: { refreshToken } });\n\n    const newRefreshToken = await this.createRefreshToken(\n      {\n        sub: refreshTokenContent.sub,\n        tokenFamily: refreshTokenContent.tokenFamily,\n      },\n      browserInfo,\n    );\n\n    return newRefreshToken;\n  }\n\n  private async getUserRole(userId: string): Promise {\n    const user = await this.userService.findById(userId);\n\n    return user.role;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthServiceInputException.html":{"url":"classes/AuthServiceInputException.html","title":"class - AuthServiceInputException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthServiceInputException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/exceptions/auth-service-input.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to extend another exception to make it\ninstanceof AuthServiceInputException\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/auth/exceptions/auth-service-input.exception.ts:5\n                            \n                        \n\n                \n                    \n                            Used to extend another exception to make it\ninstanceof AuthServiceInputException\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class AuthServiceInputException extends Error {\n  /**\n   * Used to extend another exception to make it\n   * instanceof AuthServiceInputException\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/entities/category.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of a Category in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/category/entities/category.entity.ts:9\n                        \n                    \n\n            \n                \n                    Category ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/category/entities/category.entity.ts:15\n                        \n                    \n\n            \n                \n                    Category name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\n/** Describes the properties of a Category in the database */\nexport class Category implements Prisma.CategoryUncheckedCreateInput {\n  /**\n   * Category ID as UUID\n   * @example \"e6cf9a58-438c-4fce-8d85-db3d22db270a\"\n   */\n  id?: string;\n\n  /**\n   * Category name\n   * @example \"Decoration\"\n   */\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoryController.html":{"url":"controllers/CategoryController.html","title":"controller - CategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                category\n            \n\n\n            \n                Description\n            \n            \n                Exposes category CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByName\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin creates a new category'})@IsAdmin()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:37\n                \n            \n\n\n            \n                \n                    Creates a new category, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(findCategoriesDto: FindCategoriesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns all categories'})@Public()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:51\n                \n            \n\n\n            \n                \n                    Returns all categories with pagination\nDefault is starting on page 1 showing 10 results per page,\nsearching and ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findCategoriesDto\n                                    \n                                                FindCategoriesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string, findProductsDto: FindProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin gets category by ID and its products'})@IsAdmin()@Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:61\n                \n            \n\n\n            \n                \n                    Find category by ID, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    findProductsDto\n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByName(name: string, findProductsDto: FindProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns category by name and its products'})@Public()@Get(':name')\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:72\n                \n            \n\n\n            \n                \n                    Find category by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    findProductsDto\n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin deletes category'})@IsAdmin()@Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:95\n                \n            \n\n\n            \n                \n                    Deletes category from database, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin updates category'})@IsAdmin()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:83\n                \n            \n\n\n            \n                \n                    Updates category information, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Public } from 'src/auth/public.decorator';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { FindProductsDto } from '../product/dto/find-products.dto';\nimport { CategoryService } from './category.service';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { FindCategoriesDto } from './dto/find-categories.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { Category } from './entities/category.entity';\n\n/** Exposes category CRUD endpoints */\n@ApiTags('category')\n@Controller('category')\nexport class CategoryController {\n  /** Exposes category CRUD endpoints\n   *\n   * Instantiate class and CategoryService dependency\n   */\n  constructor(private readonly categoryService: CategoryService) {}\n\n  /** Creates a new category, only for admins */\n  @ApiOperation({ summary: 'Admin creates a new category' })\n  @IsAdmin()\n  @Post()\n  async create(\n    @Body() createCategoryDto: CreateCategoryDto,\n  ): Promise {\n    return this.categoryService.create(createCategoryDto);\n  }\n\n  /** Returns all categories with pagination\n   *\n   * Default is starting on page 1 showing 10 results per page,\n   * searching and ordering by name\n   */\n  @ApiOperation({ summary: 'Returns all categories' })\n  @Public()\n  @Get()\n  async findAll(\n    @Query() findCategoriesDto: FindCategoriesDto,\n  ): Promise {\n    return this.categoryService.findAll(findCategoriesDto);\n  }\n\n  /** Find category by ID, only for admins */\n  @ApiOperation({ summary: 'Admin gets category by ID and its products' })\n  @IsAdmin()\n  @Get('/id/:id')\n  async findOneById(\n    @Param('id') id: string,\n    @Query() findProductsDto: FindProductsDto,\n  ): Promise {\n    return this.categoryService.findOneById(id, findProductsDto);\n  }\n\n  /** Find category by name */\n  @ApiOperation({ summary: 'Returns category by name and its products' })\n  @Public()\n  @Get(':name')\n  async findOneByName(\n    @Param('name') name: string,\n    @Query() findProductsDto: FindProductsDto,\n  ): Promise {\n    return this.categoryService.findOneByName(name, findProductsDto);\n  }\n\n  /** Updates category information, only for admins */\n  @ApiOperation({ summary: 'Admin updates category' })\n  @IsAdmin()\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updateCategoryDto: UpdateCategoryDto,\n  ): Promise {\n    return this.categoryService.update(id, updateCategoryDto);\n  }\n\n  /** Deletes category from database, only for admins */\n  @ApiOperation({ summary: 'Admin deletes category' })\n  @IsAdmin()\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async remove(@Param('id') id: string): Promise {\n    return this.categoryService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoryModule.html":{"url":"modules/CategoryModule.html","title":"module - CategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_imports\n\n\n\ncluster_CategoryModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nPrismaModule->CategoryModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/category/category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoryService } from './category.service';\nimport { CategoryController } from './category.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\n\n@Module({\n  controllers: [CategoryController],\n  imports: [PrismaModule],\n  providers: [CategoryService],\n})\nexport class CategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryNameInUseException.html":{"url":"classes/CategoryNameInUseException.html","title":"class - CategoryNameInUseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryNameInUseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/category/category-name-in-use.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\na category name that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/category/category-name-in-use.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'Category name already in use'. Used when the user inputs\na category name that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * a category name that is already registered in the system\n */\nexport class CategoryNameInUseException extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'Category name already in use'. Used when the user inputs\n   * a category name that is already registered in the system\n   */\n  constructor() {\n    super('Category name already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryNotFoundException.html":{"url":"classes/CategoryNotFoundException.html","title":"class - CategoryNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/category/category-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\na category that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/category/category-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'Category not found'. Used when the user inputs\na category that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * a category that is not registered in the system\n */\nexport class CategoryNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'Category not found'. Used when the user inputs\n   * a category that is not registered in the system\n   */\n  constructor() {\n    super('Category not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/category.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing categories in the database.\nCRUD endpoints are available for categories.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                capitalizeOnlyFirstLetter\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByName\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Private\n                                updateCategoryAndName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/category/category.service.ts:13\n                            \n                        \n\n                \n                    \n                            Responsible for managing categories in the database.\nCRUD endpoints are available for categories.\nInstantiates the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        capitalizeOnlyFirstLetter\n                        \n                    \n                \n            \n            \n                \n                    \n                    capitalizeOnlyFirstLetter(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:124\n                \n            \n\n\n            \n                \n                    Capitalize only the first letter of the category name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:22\n                \n            \n\n\n            \n                \n                    Creates a new category\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: FindCategoriesDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:36\n                \n            \n\n\n            \n                \n                    Returns all categories with pagination and can search by name\nDefault is starting on page 1 showing 10 results per page\nand ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindCategoriesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string, undefined: FindProductsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:54\n                \n            \n\n\n            \n                \n                    Find category by ID and show the products that have this category\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByName(name: string, undefined: FindProductsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:77\n                \n            \n\n\n            \n                \n                    Find category by name and show the products that have this category\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:119\n                \n            \n\n\n            \n                \n                    Removes category from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:102\n                \n            \n\n\n            \n                \n                    Updates category information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        updateCategoryAndName\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCategoryAndName(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:132\n                \n            \n\n\n            \n                \n                    Formats name and updates the category with the new one.\nUsed when the user updates the category name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { FindProductsDto } from '../product/dto/find-products.dto';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { FindCategoriesDto } from './dto/find-categories.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { Category } from './entities/category.entity';\n\n/** Responsible for managing categories in the database.\n * CRUD endpoints are available for categories.\n */\n@Injectable()\nexport class CategoryService {\n  /** Responsible for managing categories in the database.\n   * CRUD endpoints are available for categories.\n   *\n   * Instantiates the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new category */\n  async create(createCategoryDto: CreateCategoryDto): Promise {\n    const name = this.capitalizeOnlyFirstLetter(createCategoryDto.name);\n\n    const category = await this.prisma.category.create({\n      data: { ...createCategoryDto, name },\n    });\n\n    return category;\n  }\n\n  /** Returns all categories with pagination and can search by name\n   * Default is starting on page 1 showing 10 results per page\n   * and ordering by name\n   */\n  async findAll({\n    categoryName = '',\n    page = 1,\n    offset = 10,\n  }: FindCategoriesDto): Promise {\n    const categoriesToSkip = (page - 1) * offset;\n\n    return this.prisma.category.findMany({\n      skip: categoriesToSkip,\n      take: offset,\n      where: {\n        name: { contains: categoryName, mode: 'insensitive' },\n      },\n      orderBy: { name: 'asc' },\n    });\n  }\n\n  /** Find category by ID and show the products that have this category */\n  async findOneById(\n    id: string,\n    { productName = '', page = 1, offset = 10 }: FindProductsDto,\n  ): Promise {\n    const productsToSkip = (page - 1) * offset;\n\n    const category = await this.prisma.category.findUnique({\n      where: { id },\n      include: {\n        products: {\n          select: { id: true, name: true, urlName: true, picture: true },\n          where: { name: { contains: productName, mode: 'insensitive' } },\n          skip: productsToSkip,\n          take: offset,\n        },\n      },\n      rejectOnNotFound: true,\n    });\n\n    return category;\n  }\n\n  /** Find category by name and show the products that have this category */\n  async findOneByName(\n    name: string,\n    { productName = '', page = 1, offset = 10 }: FindProductsDto,\n  ): Promise {\n    const productsToSkip = (page - 1) * offset;\n\n    name = this.capitalizeOnlyFirstLetter(name);\n\n    const category = await this.prisma.category.findUnique({\n      where: { name },\n      include: {\n        products: {\n          select: { id: true, name: true, urlName: true, picture: true },\n          where: { name: { contains: productName, mode: 'insensitive' } },\n          skip: productsToSkip,\n          take: offset,\n        },\n      },\n      rejectOnNotFound: true,\n    });\n\n    return category;\n  }\n\n  /** Updates category information */\n  async update(\n    id: string,\n    updateCategoryDto: UpdateCategoryDto,\n  ): Promise {\n    if (updateCategoryDto.name) {\n      return this.updateCategoryAndName(id, updateCategoryDto);\n    }\n\n    const category = await this.prisma.category.update({\n      where: { id },\n      data: { ...updateCategoryDto },\n    });\n\n    return category;\n  }\n\n  /** Removes category from database */\n  async remove(id: string): Promise {\n    await this.prisma.category.delete({ where: { id } });\n  }\n\n  /** Capitalize only the first letter of the category name */\n  private capitalizeOnlyFirstLetter(name: string): string {\n    return name[0].toUpperCase() + name.substring(1).toLocaleLowerCase();\n  }\n\n  /** Formats name and updates the category with the new one.\n   *\n   * Used when the user updates the category name.\n   */\n  private updateCategoryAndName(\n    id: string,\n    updateCategoryDto: UpdateCategoryDto,\n  ): Promise {\n    const name = this.capitalizeOnlyFirstLetter(updateCategoryDto.name);\n\n    return this.prisma.category.update({\n      where: { id },\n      data: { ...updateCategoryDto, name },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/dto/create-category.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create a Category\n\n            \n\n\n            \n                Implements\n            \n            \n                            Category\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/create-category.dto.ts:12\n                        \n                    \n\n            \n                \n                    Category name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { Category } from '../entities/category.entity';\n\n/** Describes the fields needed to create a Category */\nexport class CreateCategoryDto implements Category {\n  /**\n   * Category name\n   * @example \"Decoration\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/create-product.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create a Product\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                basePrice\n                            \n                            \n                                    Optional\n                                categories\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                discountPercentage\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                stock\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        basePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Decimal\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:36\n                        \n                    \n\n            \n                \n                    Product price not considering discounts.\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:67\n                        \n                    \n\n            \n                \n                    Category IDs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:59\n                        \n                    \n\n            \n                \n                    Product description\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        discountPercentage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:44\n                        \n                    \n\n            \n                \n                    Product discount in percentage. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:26\n                        \n                    \n\n            \n                \n                    Product name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:51\n                        \n                    \n\n            \n                \n                    Product stock amount. Defaults to 0\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { Decimal } from '@prisma/client/runtime';\nimport {\n  IsArray,\n  IsInt,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { Product } from '../entities/product.entity';\n\n/** Describes the fields needed to create a Product */\nexport class CreateProductDto extends OmitType(Product, [\n  'id',\n  'createdAt',\n  'urlName',\n  'picture',\n] as const) {\n  /**\n   * Product name\n   * @example \"Brand black wheelchair\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Product price not considering discounts.\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 70.00\n   */\n  @IsNumber()\n  @IsNotEmpty()\n  basePrice: string | number | Decimal;\n\n  /**\n   * Product discount in percentage. Defaults to 0\n   * @example 10\n   */\n  @IsNumber()\n  @IsOptional()\n  discountPercentage?: number;\n\n  /** Product stock amount. Defaults to 0\n   * @example 42\n   */\n  @IsInt()\n  @IsOptional()\n  stock?: number;\n\n  /**\n   * Product description\n   * @example \"Black wheelchair for offices\"\n   */\n  @IsString()\n  @IsOptional()\n  description?: string;\n\n  /**\n   * Category IDs\n   * @example [\"857cd575-956b-49f3-a75e-2e651e21b871\", \"fa244865-0878-4688-ac63-e3ecf4939a89\"]\n   */\n  @IsOptional()\n  @IsArray()\n  categories?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePurchaseDto.html":{"url":"classes/CreatePurchaseDto.html","title":"class - CreatePurchaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePurchaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/dto/create-purchase.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create a Purchase\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                amount\n                            \n                            \n                                productId\n                            \n                            \n                                totalPrice\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsPositive()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/create-purchase.dto.ts:27\n                        \n                    \n\n            \n                \n                    Amount purchased of the product\nDefaults to 1\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/create-purchase.dto.ts:18\n                        \n                    \n\n            \n                \n                    Product ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Decimal\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/create-purchase.dto.ts:36\n                        \n                    \n\n            \n                \n                    Price payed per product multiplied by the amount\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { Decimal } from '@prisma/client/runtime';\nimport { IsNumber, IsOptional, IsPositive, IsUUID } from 'class-validator';\nimport { Purchase } from '../entities/purchase.entity';\n\n/** Describes the fields needed to create a Purchase */\nexport class CreatePurchaseDto extends OmitType(Purchase, [\n  'id',\n  'userId',\n  'createdAt',\n  'reviewNote',\n  'reviewComment',\n]) {\n  /** Product ID as UUID\n   * @example \"5c68ae94-bf3e-4fde-b01f-25d18b3976a0\"\n   */\n  @IsUUID(4)\n  productId: string;\n\n  /** Amount purchased of the product\n   * Defaults to 1\n   * @example 2\n   */\n  @IsNumber()\n  @IsPositive()\n  @IsOptional()\n  amount?: number;\n\n  /** Price payed per product multiplied by the amount\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 138.75\n   */\n  @IsNumber()\n  @IsPositive()\n  totalPrice: string | number | Decimal;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create an User\n\n            \n\n\n            \n                Implements\n            \n            \n                            User\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:44\n                        \n                    \n\n            \n                \n                    User address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({message: 'Must be an e-mail'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:17\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:36\n                        \n                    \n\n            \n                \n                    User name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8, {message: 'Password must have length of at least 8'})@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[a-z]).*$/, {message: 'Password must contain at least 1 number and 1 letter'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:28\n                        \n                    \n\n            \n                \n                    User password must contain at least 1 number and 1 letter\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\nimport { User } from '../entities/user.entity';\n\n/** Describes the fields needed to create an User */\nexport class CreateUserDto implements User {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsEmail({ message: 'Must be an e-mail' })\n  email: string;\n\n  /**\n   * User password must contain at least 1 number and 1 letter\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @MinLength(8, { message: 'Password must have length of at least 8' })\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[a-z]).*$/, {\n    message: 'Password must contain at least 1 number and 1 letter',\n  })\n  password: string;\n\n  /**\n   * User name\n   * @example \"John Doe\"\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  /**\n   * User address\n   * @example \"World Street 0\"\n   */\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserDto.html":{"url":"classes/DeleteUserDto.html","title":"class - DeleteUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/delete-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to delete an User\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/delete-user.dto.ts:11\n                        \n                    \n\n            \n                \n                    User current password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/** Describes the fields needed to delete an User */\nexport class DeleteUserDto {\n  /**\n   * User current password\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  currentPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailInUseException.html":{"url":"classes/EmailInUseException.html","title":"class - EmailInUseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailInUseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/user/email-in-use.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\nan email that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/user/email-in-use.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'E-mail already in use'. Used when the user inputs\nan email that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * an email that is already registered in the system\n */\nexport class EmailInUseException extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'E-mail already in use'. Used when the user inputs\n   * an email that is already registered in the system\n   */\n  constructor() {\n    super('E-mail already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExceptionHandler.html":{"url":"interfaces/ExceptionHandler.html","title":"interface - ExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for Exception Handlers\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        handle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/exception.handler.ts:4\n                \n            \n\n\n            \n                \n                    Function to handle specific error types\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface ExceptionHandler {\n  /** Function to handle specific error types */\n  handle(error: Error): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExceptionInterceptor.html":{"url":"injectables/ExceptionInterceptor.html","title":"injectable - ExceptionInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExceptionInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/exception.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor to transform app erros into HTTP errors\nFor more about NestJs interceptors: https://docs.nestjs.com/interceptors\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler<>)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/exception.interceptor.ts:24\n                \n            \n\n\n            \n                \n                    Catches app errors and throws the\nrespective HTTP error\nUses default NestJs boilerplate, for more\ninformation: https://docs.nestjs.com/interceptors\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler<>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { catchError, Observable } from 'rxjs';\nimport { JwtExceptionHandler } from './handlers/jwt-exception.handler';\nimport { PrismaExceptionHandler } from './handlers/prisma-exception.handler';\nimport { UserInputExceptionHandler } from './handlers/user-input-exception.handler';\n\n/** Interceptor to transform app erros into HTTP errors\n *\n * For more about NestJs interceptors: https://docs.nestjs.com/interceptors\n */\n@Injectable()\nexport class ExceptionInterceptor implements NestInterceptor {\n  /** Catches app errors and throws the\n   * respective HTTP error\n   *\n   * Uses default NestJs boilerplate, for more\n   * information: https://docs.nestjs.com/interceptors\n   */\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | Promise> {\n    return next.handle().pipe(\n      catchError((error) => {\n        new UserInputExceptionHandler().handle(error);\n\n        new PrismaExceptionHandler().handle(error);\n\n        new JwtExceptionHandler().handle(error);\n\n        throw error;\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileTypeError.html":{"url":"classes/FileTypeError.html","title":"class - FileTypeError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileTypeError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/exceptions/file-type.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs an invalid file type\nuploading a picture\n\n            \n\n            \n                Extends\n            \n            \n                        ProductServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fileTypes: RegExp)\n                    \n                \n                        \n                            \n                                Defined in src/models/product/exceptions/file-type.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'File upload only supports the following\nfiletypes - {fileTypes}'.\nUsed when the user inputs an invalid file type\nuploading a picture\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileTypes\n                                                  \n                                                        \n                                                                    RegExp\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ProductServiceInputException } from './product-service-input.exception';\n\n/** Used when the user inputs an invalid file type\n * uploading a picture\n */\nexport class FileTypeError extends ProductServiceInputException {\n  /** Throws exception with message 'File upload only supports the following\n   * filetypes - {fileTypes}'.\n   *\n   * Used when the user inputs an invalid file type\n   * uploading a picture\n   */\n  constructor(fileTypes: RegExp) {\n    super(`File upload only supports the following filetypes - ${fileTypes}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/file-upload.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to upload a file\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', format: 'binary'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/file-upload.dto.ts:10\n                        \n                    \n\n            \n                \n                    Product picture\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\n/** Describes the information needed to upload a file */\nexport class FileUploadDto {\n  /**\n   * Product picture\n   * @example \"picture.png\"\n   */\n  @ApiProperty({ type: 'string', format: 'binary' })\n  file: Express.Multer.File;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindCategoriesDto.html":{"url":"classes/FindCategoriesDto.html","title":"class - FindCategoriesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindCategoriesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/dto/find-categories.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information to search for categories\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                categoryName\n                            \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        categoryName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/find-categories.dto.ts:11\n                        \n                    \n\n            \n                \n                    String containing in category name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/find-categories.dto.ts:29\n                        \n                    \n\n            \n                \n                    Show this amount of categories per page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/find-categories.dto.ts:20\n                        \n                    \n\n            \n                \n                    Show categories in this page\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsInt, IsOptional, IsPositive, IsString } from 'class-validator';\n\n/** Describes the information to search for categories */\nexport class FindCategoriesDto {\n  /** String containing in category name\n   * @example \"chair\"\n   */\n  @IsOptional()\n  @IsString()\n  categoryName?: string;\n\n  /** Show categories in this page\n   * @example 1\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  page?: number;\n\n  /** Show this amount of categories per page\n   * @example 10\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  offset?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindProductsDto.html":{"url":"classes/FindProductsDto.html","title":"class - FindProductsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindProductsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/find-products.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information to search for products\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                page\n                            \n                            \n                                    Optional\n                                productName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-products.dto.ts:29\n                        \n                    \n\n            \n                \n                    Show this amount of products per page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-products.dto.ts:20\n                        \n                    \n\n            \n                \n                    Show products in this page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        productName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-products.dto.ts:11\n                        \n                    \n\n            \n                \n                    String containing in product name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsInt, IsOptional, IsPositive, IsString } from 'class-validator';\n\n/** Describes the information to search for products */\nexport class FindProductsDto {\n  /** String containing in product name\n   * @example \"chair\"\n   */\n  @IsOptional()\n  @IsString()\n  productName?: string;\n\n  /** Show products in this page\n   * @example 1\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  page?: number;\n\n  /** Show this amount of products per page\n   * @example 10\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  offset?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindPurchasesDto.html":{"url":"classes/FindPurchasesDto.html","title":"class - FindPurchasesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindPurchasesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/dto/find-purchases.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information to search for purchases\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                page\n                            \n                            \n                                    Optional\n                                productId\n                            \n                            \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/find-purchases.dto.ts:36\n                        \n                    \n\n            \n                \n                    Show this amount of purchases per page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/find-purchases.dto.ts:27\n                        \n                    \n\n            \n                \n                    Show purchases in this page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/find-purchases.dto.ts:18\n                        \n                    \n\n            \n                \n                    String matching product ID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/find-purchases.dto.ts:11\n                        \n                    \n\n            \n                \n                    String matching user ID\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsInt, IsOptional, IsPositive, IsString } from 'class-validator';\n\n/** Describes the information to search for purchases */\nexport class FindPurchasesDto {\n  /** String matching user ID\n   * @example \"b0e0c99e-541c-463b-8fd6-306e52f9e686\"\n   */\n  @IsOptional()\n  @IsString()\n  userId?: string;\n\n  /** String matching product ID\n   * @example \"26c3fd79-f5bd-4646-a287-32d0226134e2\"\n   */\n  @IsOptional()\n  @IsString()\n  productId?: string;\n\n  /** Show purchases in this page\n   * @example 1\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  page?: number;\n\n  /** Show this amount of purchases per page\n   * @example 10\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  offset?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidEmailOrPasswordException.html":{"url":"classes/InvalidEmailOrPasswordException.html","title":"class - InvalidEmailOrPasswordException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidEmailOrPasswordException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/exceptions/invalid-email-or-password.exception..ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs the wrong email\nor password when trying to login\n\n            \n\n            \n                Extends\n            \n            \n                        AuthServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/exceptions/invalid-email-or-password.exception..ts:6\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Invalid email or password'.\nUsed when the user inputs the wrong email\nor password when trying to login\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthServiceInputException } from './auth-service-input.exception';\n\n/** Used when the user inputs the wrong email\n * or password when trying to login\n */\nexport class InvalidEmailOrPasswordException extends AuthServiceInputException {\n  /** Throws exception with message 'Invalid email or password'.\n   *\n   * Used when the user inputs the wrong email\n   * or password when trying to login\n   */\n  constructor() {\n    super('Invalid email or password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidPasswordUpdateException.html":{"url":"classes/InvalidPasswordUpdateException.html","title":"class - InvalidPasswordUpdateException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidPasswordUpdateException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/exceptions/invalid-password-update.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs the wrong\ncurrent password when trying to create a new password\n\n            \n\n            \n                Extends\n            \n            \n                        UserServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/models/user/exceptions/invalid-password-update.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Invalid current password'.\nUsed when the user inputs the wrong current password when\ntrying to create a new password\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserServiceInputException } from './user-service-input.exception';\n\n/** Used when the user inputs the wrong\n * current password when trying to create a new password\n */\nexport class InvalidPasswordUpdateException extends UserServiceInputException {\n  /** Throws exception with message 'Invalid current password'.\n   *\n   * Used when the user inputs the wrong current password when\n   * trying to create a new password\n   */\n  constructor() {\n    super('Invalid current password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidRefreshTokenException.html":{"url":"classes/InvalidRefreshTokenException.html","title":"class - InvalidRefreshTokenException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidRefreshTokenException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/exceptions/invalid-refresh-token.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs an invalid token\nwhen refreshing\n\n            \n\n            \n                Extends\n            \n            \n                        AuthServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/exceptions/invalid-refresh-token.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Invalid refresh token'.\nUsed when the user inputs an invalid token\nwhen refreshing\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthServiceInputException } from './auth-service-input.exception';\n\n/** Used when the user inputs an invalid token\n * when refreshing\n */\nexport class InvalidRefreshTokenException extends AuthServiceInputException {\n  /** Throws exception with message 'Invalid refresh token'.\n   *\n   * Used when the user inputs an invalid token\n   * when refreshing\n   */\n  constructor() {\n    super('Invalid refresh token');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtExceptionHandler.html":{"url":"classes/JwtExceptionHandler.html","title":"class - JwtExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/jwt-exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Catches JsonWebToken Errors and throws the\nrespective HTTP error\n\n            \n\n\n            \n                Implements\n            \n            \n                            ExceptionHandler\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                jwtErrorNames\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                            \n                                    Private\n                                isJwtException\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        jwtErrorNames\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    'TokenExpiredError',\n    'JsonWebTokenError',\n    'NotBeforeError',\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/common/interceptors/handlers/jwt-exception.handler.ts:12\n                        \n                    \n\n            \n                \n                    Possible Jwt Error names\nRefer to https://www.npmjs.com/package/jsonwebtoken#errors--codes\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/jwt-exception.handler.ts:21\n                \n            \n\n\n            \n                \n                    Catches JsonWebToken Errors and throws the\nrespective HTTP error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isJwtException\n                        \n                    \n                \n            \n            \n                \n                    \n                    isJwtException(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/jwt-exception.handler.ts:28\n                \n            \n\n\n            \n                \n                    Returns whether the error is a JwtError or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UnauthorizedException } from '@nestjs/common';\nimport { ExceptionHandler } from './exception.handler';\n\n/** Catches JsonWebToken Errors and throws the\n * respective HTTP error\n */\nexport class JwtExceptionHandler implements ExceptionHandler {\n  /** Possible Jwt Error names\n   *\n   * Refer to https://www.npmjs.com/package/jsonwebtoken#errors--codes\n   */\n  private jwtErrorNames = [\n    'TokenExpiredError',\n    'JsonWebTokenError',\n    'NotBeforeError',\n  ];\n\n  /** Catches JsonWebToken Errors and throws the\n   * respective HTTP error\n   */\n  handle(error: Error): void {\n    if (this.isJwtException(error)) {\n      throw new UnauthorizedException('Invalid authorization token');\n    }\n  }\n\n  /** Returns whether the error is a JwtError or not */\n  private isJwtException(error: Error): boolean {\n    return this.jwtErrorNames.includes(error.name);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginCredentialsDto.html":{"url":"classes/LoginCredentialsDto.html","title":"class - LoginCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-credentials.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to authenticate an User to the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-credentials.dto.ts:11\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-credentials.dto.ts:19\n                        \n                    \n\n            \n                \n                    User password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/** Describes the information needed to authenticate an User to the application */\nexport class LoginCredentialsDto {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  email: string;\n\n  /**\n   * User password\n   * @example \"abc123456\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginResponse.html":{"url":"classes/LoginResponse.html","title":"class - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.response.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the response received when the Login route is successfully called\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                            \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.response.ts:7\n                        \n                    \n\n            \n                \n                    Access JWT Authentication token\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.response.ts:13\n                        \n                    \n\n            \n                \n                    Refresh JWT Authentication token\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LoginResponse {\n  /**\n   * Access JWT Authentication token\n   * @example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5NWFkMzNhNS0wYjk4LTQ2ODYtYjFmMS1hMTkwNzM0NWJmYzciLCJpYXQiOjE2NDg0NzU3MzEsImV4cCI6MTY0ODQ3NjYzMX0.h3z3JDvHOi6y5C_N0Kt6tdP2nWK_dHBZxioQn7VANNo\"\n   */\n  accessToken: string;\n\n  /**\n   * Refresh JWT Authentication token\n   * @example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n   */\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogoutDto.html":{"url":"classes/LogoutDto.html","title":"class - LogoutDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogoutDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/logout.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to logout an User of the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsJWT()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/logout.dto.ts:10\n                        \n                    \n\n            \n                \n                    User refresh token\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJWT } from 'class-validator';\n\n/** Describes the information needed to logout an User of the application */\nexport class LogoutDto {\n  /**\n   * User refresh token\n   * @example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n   */\n  @IsJWT()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MissingPasswordUpdateException.html":{"url":"classes/MissingPasswordUpdateException.html","title":"class - MissingPasswordUpdateException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MissingPasswordUpdateException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/exceptions/missing-password-update.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs only the current password\nor the new password, but both are needed to update\nthe password\n\n            \n\n            \n                Extends\n            \n            \n                        UserServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/models/user/exceptions/missing-password-update.exception.ts:7\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Please enter both new\npassword and current password'.\nUsed when the user inputs only the current password\nor the new password, but both are needed to update\nthe password\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserServiceInputException } from './user-service-input.exception';\n\n/** Used when the user inputs only the current password\n * or the new password, but both are needed to update\n * the password\n */\nexport class MissingPasswordUpdateException extends UserServiceInputException {\n  /** Throws exception with message 'Please enter both new\n   * password and current password'.\n   *\n   * Used when the user inputs only the current password\n   * or the new password, but both are needed to update\n   * the password\n   */\n  constructor() {\n    super('Please enter both new password and current password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotPurchaseOwnerException.html":{"url":"classes/NotPurchaseOwnerException.html","title":"class - NotPurchaseOwnerException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotPurchaseOwnerException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/exceptions/not-purchase-owner.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used if the users try to review a purchase that they do not own\n\n            \n\n            \n                Extends\n            \n            \n                        PurchaseServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/models/purchase/exceptions/not-purchase-owner.exception.ts:4\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Purchase not found'.\nUsed if the users try to review a purchase that they do not own\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PurchaseServiceInputException } from './purchase-service-input.exception';\n\n/** Used if the users try to review a purchase that they do not own */\nexport class NotPurchaseOwnerException extends PurchaseServiceInputException {\n  /** Throws exception with message 'Purchase not found'.\n   *\n   * Used if the users try to review a purchase that they do not own\n   */\n  constructor() {\n    super('Purchase not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrismaExceptionHandler.html":{"url":"classes/PrismaExceptionHandler.html","title":"class - PrismaExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrismaExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/prisma-exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Catches Prisma ORM errors and throws the\nrespective HTTP error\n\n            \n\n\n            \n                Implements\n            \n            \n                            ExceptionHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                            \n                                    Private\n                                isCategoryError\n                            \n                            \n                                    Private\n                                isCategoryNameConstraintViolation\n                            \n                            \n                                    Private\n                                isCreateProductError\n                            \n                            \n                                    Private\n                                isEmailConstraintViolation\n                            \n                            \n                                    Private\n                                isPrismaUnknownError\n                            \n                            \n                                    Private\n                                isProductError\n                            \n                            \n                                    Private\n                                isProductNameConstraintViolation\n                            \n                            \n                                    Private\n                                isPurchaseError\n                            \n                            \n                                    Private\n                                isUserError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:19\n                \n            \n\n\n            \n                \n                    Catches Prisma ORM errors and throws the\nrespective HTTP error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isCategoryError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isCategoryError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:136\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an category prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isCategoryNameConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isCategoryNameConstraintViolation(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:108\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the category name field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isCreateProductError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isCreateProductError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:131\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an create product prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isEmailConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isEmailConstraintViolation(errorMeta: object)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:92\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the email field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorMeta\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isPrismaUnknownError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isPrismaUnknownError(error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:87\n                \n            \n\n\n            \n                \n                    Checks if the error contains clientVersion,\nmaking it an unknown prisma error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isProductError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isProductError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:123\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an update or delete product prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isProductNameConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isProductNameConstraintViolation(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:97\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the product name field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isPurchaseError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isPurchaseError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:141\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an purchase prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isUserError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isUserError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:118\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an user prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PrismaClientKnownRequestError } from '@prisma/client/runtime';\nimport { PrismaError } from 'prisma-error-enum';\nimport { CategoryNameInUseException } from 'src/common/exceptions/category/category-name-in-use.exception';\nimport { CategoryNotFoundException } from 'src/common/exceptions/category/category-not-found.exception';\nimport { ProductNameInUseException } from 'src/common/exceptions/product/product-name-in-use.exception';\nimport { ProductNotFoundException } from 'src/common/exceptions/product/product-not-found.exception';\nimport { PurchaseNotFoundException } from 'src/common/exceptions/purchase/purchase-not-found.exception';\nimport { EmailInUseException } from 'src/common/exceptions/user/email-in-use.exception';\nimport { UserNotFoundException } from 'src/common/exceptions/user/user-not-found.exception';\nimport { ExceptionHandler } from './exception.handler';\n\n/** Catches Prisma ORM errors and throws the\n * respective HTTP error\n */\nexport class PrismaExceptionHandler implements ExceptionHandler {\n  /** Catches Prisma ORM errors and throws the\n   * respective HTTP error\n   */\n  handle(error: Error): void {\n    if (error instanceof PrismaClientKnownRequestError) {\n      switch (error.code) {\n        case PrismaError.UniqueConstraintViolation:\n          if (this.isEmailConstraintViolation(error.meta)) {\n            throw new EmailInUseException();\n          }\n\n          if (this.isProductNameConstraintViolation(error)) {\n            throw new ProductNameInUseException();\n          }\n\n          if (this.isCategoryNameConstraintViolation(error)) {\n            throw new CategoryNameInUseException();\n          }\n          break;\n\n        case PrismaError.ForeignConstraintViolation:\n          if (this.isPurchaseError(error)) {\n            throw new ProductNotFoundException();\n          }\n          break;\n\n        case PrismaError.RecordsNotFound:\n          if (this.isUserError(error)) {\n            throw new UserNotFoundException();\n          }\n\n          if (this.isProductError(error)) {\n            throw new ProductNotFoundException();\n          }\n\n          if (this.isCreateProductError(error)) {\n            throw new CategoryNotFoundException();\n          }\n\n          if (this.isCategoryError(error)) {\n            throw new CategoryNotFoundException();\n          }\n\n          if (this.isPurchaseError(error)) {\n            throw new PurchaseNotFoundException();\n          }\n          break;\n\n        default:\n          throw error;\n      }\n    }\n\n    if (this.isPrismaUnknownError(error)) {\n      if (error.message === 'No Product found') {\n        throw new ProductNotFoundException();\n      }\n\n      if (error.message === 'No Category found') {\n        throw new CategoryNotFoundException();\n      }\n\n      if (error.message === 'No Purchase found') {\n        throw new PurchaseNotFoundException();\n      }\n    }\n  }\n\n  /** Checks if the error contains clientVersion,\n   * making it an unknown prisma error\n   * */\n  private isPrismaUnknownError(error): boolean {\n    return !!error.clientVersion;\n  }\n\n  /** Returns wether the error happened in the email field or not */\n  private isEmailConstraintViolation(errorMeta: object): boolean {\n    return Object.values(errorMeta)[0][0] === 'email';\n  }\n\n  /** Returns wether the error happened in the product name field or not */\n  private isProductNameConstraintViolation(\n    error: PrismaClientKnownRequestError,\n  ): boolean {\n    return (\n      (Object.values(error.meta)[0][0] === 'name' ||\n        Object.values(error.meta)[0][0] === 'urlName') &&\n      error.message.includes('prisma.product')\n    );\n  }\n\n  /** Returns wether the error happened in the category name field or not */\n  private isCategoryNameConstraintViolation(\n    error: PrismaClientKnownRequestError,\n  ): boolean {\n    return (\n      Object.values(error.meta)[0][0] === 'name' &&\n      error.message.includes('prisma.category')\n    );\n  }\n\n  /** Returns wether the error happened on an user prisma query or not */\n  private isUserError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.user');\n  }\n\n  /** Returns wether the error happened on an update or delete product prisma query or not */\n  private isProductError(error: PrismaClientKnownRequestError): boolean {\n    return (\n      error.message.includes('prisma.product.update') ||\n      error.message.includes('prisma.product.delete')\n    );\n  }\n\n  /** Returns wether the error happened on an create product prisma query or not */\n  private isCreateProductError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.product.create');\n  }\n\n  /** Returns wether the error happened on an category prisma query or not */\n  private isCategoryError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.category');\n  }\n\n  /** Returns wether the error happened on an purchase prisma query or not */\n  private isPurchaseError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.purchase');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n            \n                Description\n            \n            \n                ORM responsible for connecting to the database\nBoilerplate from https://docs.nestjs.com/recipes/prisma\n\n            \n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:25\n                \n            \n\n\n            \n                \n                    Prisma interferes with NestJS enableShutdownHooks.\nPrisma listens for shutdown signals and will call process.exit()\nbefore your application shutdown hooks fire.\nhttps://docs.nestjs.com/recipes/prisma\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:15\n                \n            \n\n\n            \n                \n                    Optional — if you leave it out,\nPrisma will connect lazily on its first call to the database.\nhttps://docs.nestjs.com/recipes/prisma\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n/** ORM responsible for connecting to the database\n *\n * Boilerplate from https://docs.nestjs.com/recipes/prisma\n */\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  /** Optional — if you leave it out,\n   * Prisma will connect lazily on its first call to the database.\n   *\n   * https://docs.nestjs.com/recipes/prisma\n   */\n  async onModuleInit(): Promise {\n    await this.$connect();\n  }\n\n  /** Prisma interferes with NestJS enableShutdownHooks.\n   * Prisma listens for shutdown signals and will call process.exit()\n   * before your application shutdown hooks fire.\n   *\n   * https://docs.nestjs.com/recipes/prisma\n   */\n  async enableShutdownHooks(app: INestApplication): Promise {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Product.html":{"url":"classes/Product.html","title":"class - Product","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/entities/product.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of a Product in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                basePrice\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                discountPercentage\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                picture\n                            \n                            \n                                    Optional\n                                stock\n                            \n                            \n                                urlName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        basePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Prisma.Decimal\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:35\n                        \n                    \n\n            \n                \n                    Product price not considering discounts.\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:58\n                        \n                    \n\n            \n                \n                    Product createdAt dateString\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:52\n                        \n                    \n\n            \n                \n                    Product description\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        discountPercentage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:41\n                        \n                    \n\n            \n                \n                    Product discount in percentage. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:9\n                        \n                    \n\n            \n                \n                    Product ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:15\n                        \n                    \n\n            \n                \n                    Product name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:27\n                        \n                    \n\n            \n                \n                    Product picture\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:46\n                        \n                    \n\n            \n                \n                    Product stock amount. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        urlName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:21\n                        \n                    \n\n            \n                \n                    Product name turned to url\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\n/** Describes the properties of a Product in the database */\nexport class Product implements Prisma.ProductUncheckedCreateInput {\n  /**\n   * Product ID as UUID\n   * @example \"6f4ca8a4-8aa0-4302-ac1b-7b5547f01b0a\"\n   */\n  id?: string;\n\n  /**\n   * Product name\n   * @example \"Brand black wheelchair\"\n   */\n  name: string;\n\n  /**\n   * Product name turned to url\n   * @example \"brand-black-wheelchair\"\n   */\n  urlName: string;\n\n  /**\n   * Product picture\n   * @example \"image.jpg\"\n   */\n  picture?: string;\n\n  /**\n   * Product price not considering discounts.\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 70.00\n   */\n  basePrice: string | number | Prisma.Decimal;\n\n  /**\n   * Product discount in percentage. Defaults to 0\n   * @example 10\n   */\n  discountPercentage?: number;\n\n  /** Product stock amount. Defaults to 0\n   * @example 42\n   */\n  stock?: number;\n\n  /**\n   * Product description\n   * @example \"Black wheelchair for offices\"\n   */\n  description?: string;\n\n  /**\n   * Product createdAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  createdAt?: string | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductController.html":{"url":"controllers/ProductController.html","title":"controller - ProductController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                product\n            \n\n\n            \n                Description\n            \n            \n                Exposes product CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOneById\n                            \n                            \n                                findOneByUrlName\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                uploadPhoto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createProductDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin creates a new product'})@IsAdmin()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:38\n                \n            \n\n\n            \n                \n                    Creates a new product, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(findAllProductsDto: FindProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns all products'})@Public()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:50\n                \n            \n\n\n            \n                \n                    Returns all products with pagination\nDefault is starting on page 1 showing 10 results per page,\nsearching and ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findAllProductsDto\n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin gets product by ID'})@IsAdmin()@Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:58\n                \n            \n\n\n            \n                \n                    Find product by ID, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByUrlName\n                        \n                    \n                \n            \n            \n                \nfindOneByUrlName(urlName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Gets product by urlName'})@Public()@Get(':urlName')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:66\n                \n            \n\n\n            \n                \n                    Find product by Url Name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    urlName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin deletes product'})@IsAdmin()@Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:104\n                \n            \n\n\n            \n                \n                    Deletes product from database, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin updates product'})@IsAdmin()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:92\n                \n            \n\n\n            \n                \n                    Updates product information, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadPhoto\n                        \n                    \n                \n            \n            \n                \nuploadPhoto(id: string, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin uploads a new product picture'})@IsAdmin()@FileUpload()@Patch('picture/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:81\n                \n            \n\n\n            \n                \n                    Admin uploads a new picture for the product.\nNeeds to be type jpeg, jpg or png and maximum 3MB.\nCheck \nmulterUploadConfig file in the docs.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UploadedFile,\n} from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Public } from 'src/auth/public.decorator';\nimport { FileUpload } from 'src/common/decorators/file-upload.decorator';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { FindProductsDto } from './dto/find-products.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { Product } from './entities/product.entity';\nimport { ProductService } from './product.service';\n\n/** Exposes product CRUD endpoints */\n@ApiTags('product')\n@Controller('product')\nexport class ProductController {\n  /** Exposes product CRUD endpoints\n   *\n   * Instantiate class and ProductService dependency\n   */\n  constructor(private readonly productService: ProductService) {}\n\n  /** Creates a new product, only for admins */\n  @ApiOperation({ summary: 'Admin creates a new product' })\n  @IsAdmin()\n  @Post()\n  create(@Body() createProductDto: CreateProductDto): Promise {\n    return this.productService.create(createProductDto);\n  }\n\n  /** Returns all products with pagination\n   *\n   * Default is starting on page 1 showing 10 results per page,\n   * searching and ordering by name\n   */\n  @ApiOperation({ summary: 'Returns all products' })\n  @Public()\n  @Get()\n  findAll(@Query() findAllProductsDto: FindProductsDto): Promise {\n    return this.productService.findAll(findAllProductsDto);\n  }\n\n  /** Find product by ID, only for admins */\n  @ApiOperation({ summary: 'Admin gets product by ID' })\n  @IsAdmin()\n  @Get('/id/:id')\n  findOneById(@Param('id') id: string): Promise {\n    return this.productService.findOneById(id);\n  }\n\n  /** Find product by Url Name */\n  @ApiOperation({ summary: 'Gets product by urlName' })\n  @Public()\n  @Get(':urlName')\n  findOneByUrlName(@Param('urlName') urlName: string): Promise {\n    return this.productService.findOneByUrlName(urlName);\n  }\n\n  /**\n   * Admin uploads a new picture for the product.\n   * Needs to be type jpeg, jpg or png and maximum 3MB.\n   *\n   * Check \n   * multerUploadConfig file in the docs.\n   */\n  @ApiOperation({ summary: 'Admin uploads a new product picture' })\n  @IsAdmin()\n  @FileUpload()\n  @Patch('picture/:id')\n  uploadPhoto(\n    @Param('id') id: string,\n    @UploadedFile() file: Express.Multer.File,\n  ): Promise {\n    return this.productService.uploadPicture(id, file);\n  }\n\n  /** Updates product information, only for admins */\n  @ApiOperation({ summary: 'Admin updates product' })\n  @IsAdmin()\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateProductDto: UpdateProductDto,\n  ): Promise {\n    return this.productService.update(id, updateProductDto);\n  }\n\n  /** Deletes product from database, only for admins */\n  @ApiOperation({ summary: 'Admin deletes product' })\n  @IsAdmin()\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  remove(@Param('id') id: string): Promise {\n    return this.productService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductModule.html":{"url":"modules/ProductModule.html","title":"module - ProductModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_ProductModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nPrismaModule->ProductModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/product/product.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductService } from './product.service';\nimport { ProductController } from './product.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { multerUploadConfig } from 'src/config/multer-upload.config';\n\n@Module({\n  controllers: [ProductController],\n  imports: [PrismaModule, MulterModule.register(multerUploadConfig)],\n  providers: [ProductService],\n})\nexport class ProductModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductNameInUseException.html":{"url":"classes/ProductNameInUseException.html","title":"class - ProductNameInUseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductNameInUseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/product/product-name-in-use.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\na product name that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/product/product-name-in-use.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'Product name already in use'. Used when the user inputs\na product name that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * a product name that is already registered in the system\n */\nexport class ProductNameInUseException extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'Product name already in use'. Used when the user inputs\n   * a product name that is already registered in the system\n   */\n  constructor() {\n    super('Product name already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductNotFoundException.html":{"url":"classes/ProductNotFoundException.html","title":"class - ProductNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/product/product-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\na product that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/product/product-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'Product not found'. Used when the user inputs\na product that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * a product that is not registered in the system\n */\nexport class ProductNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'Product not found'. Used when the user inputs\n   * a product that is not registered in the system\n   */\n  constructor() {\n    super('Product not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductService.html":{"url":"injectables/ProductService.html","title":"injectable - ProductService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/product.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing products in the database.\nCRUD endpoints are available for products.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                connectCategoriesById\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUrlName\n                            \n                            \n                                    Private\n                                formatUrlName\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Private\n                                updateProductAndUrlName\n                            \n                            \n                                    Async\n                                uploadPicture\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/product/product.service.ts:13\n                            \n                        \n\n                \n                    \n                            Responsible for managing products in the database.\nCRUD endpoints are available for products.\nInstantiates the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        connectCategoriesById\n                        \n                    \n                \n            \n            \n                \n                    \n                    connectCategoriesById(categories: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:143\n                \n            \n\n\n            \n                \n                    Format the categories IDs array into the prisma query way\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categories\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Prisma.CategoryUncheckedCreateNestedManyWithoutProductsInput\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createProductDto: CreateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:22\n                \n            \n\n\n            \n                \n                    Creates a new product\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: FindProductsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:51\n                \n            \n\n\n            \n                \n                    Returns all products with pagination\nDefault is starting on page 1 showing 10 results per page\nand ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:70\n                \n            \n\n\n            \n                \n                    Find product by ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUrlName(urlName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:79\n                \n            \n\n\n            \n                \n                    Find product by Url Name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    urlName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        formatUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    formatUrlName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:115\n                \n            \n\n\n            \n                \n                    Formats the name to generate an urlName.\nMakes the name lower case, remove leading and trailing white spaces,\nturn to single the multiple spaces between words and make\nsingle spaces hyphens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            &quot; BraNd1    chAir   &quot; becomes &quot;brand1-chair&quot;\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:103\n                \n            \n\n\n            \n                \n                    Removes product from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:88\n                \n            \n\n\n            \n                \n                    Updates product information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        updateProductAndUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProductAndUrlName(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:128\n                \n            \n\n\n            \n                \n                    Formats UrlName and updates the product with the new one.\nUsed when the user updates the product name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPicture\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPicture(id: string, file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:40\n                \n            \n\n\n            \n                \n                    Uploads new product picture\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { FindProductsDto } from './dto/find-products.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { Product } from './entities/product.entity';\n\n/** Responsible for managing products in the database.\n * CRUD endpoints are available for products.\n */\n@Injectable()\nexport class ProductService {\n  /** Responsible for managing products in the database.\n   * CRUD endpoints are available for products.\n   *\n   * Instantiates the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new product */\n  async create(createProductDto: CreateProductDto): Promise {\n    const urlName = this.formatUrlName(createProductDto.name);\n\n    const categories = this.connectCategoriesById(createProductDto.categories);\n\n    const product = await this.prisma.product.create({\n      data: {\n        ...createProductDto,\n        urlName,\n        categories,\n      },\n      include: { categories: { select: { name: true } } },\n    });\n\n    return product;\n  }\n\n  /** Uploads new product picture */\n  async uploadPicture(id: string, file: Express.Multer.File): Promise {\n    return this.prisma.product.update({\n      where: { id },\n      data: { picture: file.filename },\n    });\n  }\n\n  /** Returns all products with pagination\n   * Default is starting on page 1 showing 10 results per page\n   * and ordering by name\n   */\n  async findAll({\n    productName = '',\n    page = 1,\n    offset = 10,\n  }: FindProductsDto): Promise {\n    const productsToSkip = (page - 1) * offset;\n\n    return this.prisma.product.findMany({\n      skip: productsToSkip,\n      take: offset,\n      where: {\n        name: { contains: productName, mode: 'insensitive' },\n      },\n      orderBy: { name: 'asc' },\n      include: { categories: { select: { name: true } } },\n    });\n  }\n\n  /** Find product by ID */\n  async findOneById(id: string): Promise {\n    return this.prisma.product.findUnique({\n      where: { id },\n      include: { categories: { select: { name: true } } },\n      rejectOnNotFound: true,\n    });\n  }\n\n  /** Find product by Url Name */\n  async findOneByUrlName(urlName: string): Promise {\n    return this.prisma.product.findUnique({\n      where: { urlName },\n      include: { categories: { select: { name: true } } },\n      rejectOnNotFound: true,\n    });\n  }\n\n  /** Updates product information */\n  async update(\n    id: string,\n    updateProductDto: UpdateProductDto,\n  ): Promise {\n    if (updateProductDto.name) {\n      return this.updateProductAndUrlName(id, updateProductDto);\n    }\n\n    return this.prisma.product.update({\n      where: { id },\n      data: { ...updateProductDto },\n    });\n  }\n\n  /** Removes product from database */\n  async remove(id: string): Promise {\n    await this.prisma.product.delete({ where: { id } });\n  }\n\n  /** Formats the name to generate an urlName.\n   *\n   * Makes the name lower case, remove leading and trailing white spaces,\n   * turn to single the multiple spaces between words and make\n   * single spaces hyphens\n   *\n   * @example \" BraNd1    chAir   \" becomes \"brand1-chair\"\n   */\n  private formatUrlName(name: string): string {\n    const lowerCaseUrlName = name.toLocaleLowerCase();\n    const trimmedUrlName = lowerCaseUrlName.trim();\n    const singleSpaceUrlName = trimmedUrlName.replace(/\\s\\s+/g, ' ');\n    const spaceToHyphenUrlName = singleSpaceUrlName.split(' ').join('-');\n\n    return spaceToHyphenUrlName;\n  }\n\n  /** Formats UrlName and updates the product with the new one.\n   *\n   * Used when the user updates the product name.\n   */\n  private updateProductAndUrlName(\n    id: string,\n    updateProductDto: UpdateProductDto,\n  ): Promise {\n    const urlName = this.formatUrlName(updateProductDto.name);\n\n    return this.prisma.product.update({\n      where: { id },\n      data: { ...updateProductDto, urlName },\n    });\n  }\n\n  /**\n   * Format the categories IDs array into the prisma query way\n   */\n  private connectCategoriesById(\n    categories: string[],\n  ): Prisma.CategoryUncheckedCreateNestedManyWithoutProductsInput {\n    let categoriesConnection = { connect: [] };\n\n    if (categories) {\n      categoriesConnection = {\n        connect: categories.map((category) => {\n          return { id: category };\n        }),\n      };\n    }\n\n    return categoriesConnection;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductServiceInputException.html":{"url":"classes/ProductServiceInputException.html","title":"class - ProductServiceInputException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductServiceInputException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/exceptions/product-service-input.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to extend another exception to make it\ninstanceof ProductServiceInputException\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/product/exceptions/product-service-input.exception.ts:5\n                            \n                        \n\n                \n                    \n                            Used to extend another exception to make it\ninstanceof ProductServiceInputException\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ProductServiceInputException extends Error {\n  /**\n   * Used to extend another exception to make it\n   * instanceof ProductServiceInputException\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Purchase.html":{"url":"classes/Purchase.html","title":"class - Purchase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Purchase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/entities/purchase.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of a Purchase in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                amount\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                productId\n                            \n                            \n                                    Optional\n                                reviewComment\n                            \n                            \n                                    Optional\n                                reviewNote\n                            \n                            \n                                totalPrice\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:24\n                        \n                    \n\n            \n                \n                    Amount purchased of the product\nDefaults to 1\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:46\n                        \n                    \n\n            \n                \n                    Purchase createdAt dateString\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:8\n                        \n                    \n\n            \n                \n                    Purchase ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:18\n                        \n                    \n\n            \n                \n                    Product ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        reviewComment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:41\n                        \n                    \n\n            \n                \n                    Product review comment\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        reviewNote\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:36\n                        \n                    \n\n            \n                \n                    Product review note, from 1 to 5\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Prisma.Decimal\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:31\n                        \n                    \n\n            \n                \n                    Price payed per product multiplied by the amount\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:13\n                        \n                    \n\n            \n                \n                    User ID as UUID\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\n/** Describes the properties of a Purchase in the database */\nexport class Purchase implements Prisma.PurchaseUncheckedCreateInput {\n  /** Purchase ID as UUID\n   * @example \"b076f72e-f70b-4368-949e-1811c405c0f7\"\n   */\n  id?: string;\n\n  /** User ID as UUID\n   * @example \"a04bb2db-fecd-4889-979e-95f273eb70e1\"\n   */\n  userId: string;\n\n  /** Product ID as UUID\n   * @example \"5c68ae94-bf3e-4fde-b01f-25d18b3976a0\"\n   */\n  productId: string;\n\n  /** Amount purchased of the product\n   * Defaults to 1\n   * @example 2\n   */\n  amount?: number;\n\n  /** Price payed per product multiplied by the amount\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 138.75\n   */\n  totalPrice: string | number | Prisma.Decimal;\n\n  /** Product review note, from 1 to 5\n   * @example 5\n   */\n  reviewNote?: number;\n\n  /** Product review comment\n   * @example \"Amazing wheelchair!\"\n   */\n  reviewComment?: string;\n\n  /** Purchase createdAt dateString\n   * @example \"2022-05-13T15:41:28.527Z\"\n   */\n  createdAt?: string | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PurchaseController.html":{"url":"controllers/PurchaseController.html","title":"controller - PurchaseController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PurchaseController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/purchase.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                purchase\n            \n\n\n            \n                Description\n            \n            \n                Exposes purchase CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllMine\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                review\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(request: Request, createPurchaseDto: CreatePurchaseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new purchase'})@ApiBearerAuth()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:38\n                \n            \n\n\n            \n                \n                    Creates a new purchase, only for logged users\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPurchaseDto\n                                    \n                                                CreatePurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(findPurchasesDto: FindPurchasesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin gets all purchases'})@IsAdmin()@Get('/admin')\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:55\n                \n            \n\n\n            \n                \n                    Returns all purchases with pagination, only for admins\nDefault is starting on page 1 showing 10 results per page,\nmatching by userId and/or productId and ordering by most recent date\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findPurchasesDto\n                                    \n                                                FindPurchasesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllMine\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllMine(request: Request, findPurchasesDto: FindPurchasesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'User gets all their purchases'})@ApiBearerAuth()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:69\n                \n            \n\n\n            \n                \n                    Returns all users' purchases with pagination,\nDefault is starting on page 1 showing 10 results per page,\nmatching by productId and ordering by most recent date\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    findPurchasesDto\n                                    \n                                                FindPurchasesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(request: Request, purchaseId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns purchase by ID'})@ApiBearerAuth()@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:85\n                \n            \n\n\n            \n                \n                    Find purchase by ID, normal users can only get their purchases,\nAdmins can get any.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    purchaseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin deletes purchase'})@IsAdmin()@Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:127\n                \n            \n\n\n            \n                \n                    Deletes purchase from database, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        review\n                        \n                    \n                \n            \n            \n                \n                    \n                    review(request: Request, purchaseId: string, reviewPurchaseDto: ReviewPurchaseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Reviews purchased product'})@ApiBearerAuth()@Patch('/review/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:101\n                \n            \n\n\n            \n                \n                    Reviews purchased product, must be purchase owner\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    purchaseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reviewPurchaseDto\n                                    \n                                                ReviewPurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updatePurchaseDto: UpdatePurchaseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin updates purchase'})@IsAdmin()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:115\n                \n            \n\n\n            \n                \n                    Updates purchase information, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePurchaseDto\n                                    \n                                                UpdatePurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  Query,\n  Req,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { CreatePurchaseDto } from './dto/create-purchase.dto';\nimport { FindPurchasesDto } from './dto/find-purchases.dto';\nimport { ReviewPurchaseDto } from './dto/review-purchase.dto';\nimport { UpdatePurchaseDto } from './dto/update-purchase.dto';\nimport { Purchase } from './entities/purchase.entity';\nimport { PurchaseService } from './purchase.service';\n\n/** Exposes purchase CRUD endpoints */\n@ApiTags('purchase')\n@Controller('purchase')\nexport class PurchaseController {\n  /** Exposes purchase CRUD endpoints\n   *\n   * Instantiate class and PurchaseService dependency\n   */\n  constructor(private readonly purchaseService: PurchaseService) {}\n\n  /** Creates a new purchase, only for logged users */\n  @ApiOperation({ summary: 'Creates a new purchase' })\n  @ApiBearerAuth()\n  @Post()\n  async create(\n    @Req() request: Request,\n    @Body() createPurchaseDto: CreatePurchaseDto,\n  ): Promise {\n    const { userId } = request.user as { userId: string };\n\n    return this.purchaseService.create(userId, createPurchaseDto);\n  }\n\n  /** Returns all purchases with pagination, only for admins\n   *\n   * Default is starting on page 1 showing 10 results per page,\n   * matching by userId and/or productId and ordering by most recent date\n   */\n  @ApiOperation({ summary: 'Admin gets all purchases' })\n  @IsAdmin()\n  @Get('/admin')\n  async findAll(\n    @Query() findPurchasesDto: FindPurchasesDto,\n  ): Promise {\n    return this.purchaseService.findAll(findPurchasesDto);\n  }\n\n  /** Returns all users' purchases with pagination,\n   *\n   * Default is starting on page 1 showing 10 results per page,\n   * matching by productId and ordering by most recent date\n   */\n  @ApiOperation({ summary: 'User gets all their purchases' })\n  @ApiBearerAuth()\n  @Get()\n  async findAllMine(\n    @Req() request: Request,\n    @Query() findPurchasesDto: FindPurchasesDto,\n  ): Promise {\n    const { userId } = request.user as { userId: string };\n    findPurchasesDto.userId = userId;\n\n    return this.purchaseService.findAll(findPurchasesDto);\n  }\n\n  /** Find purchase by ID, normal users can only get their purchases,\n   * Admins can get any.\n   */\n  @ApiOperation({ summary: 'Returns purchase by ID' })\n  @ApiBearerAuth()\n  @Get(':id')\n  async findOne(\n    @Req() request: Request,\n    @Param('id') purchaseId: string,\n  ): Promise {\n    const { userId, userRole } = request.user as {\n      userId: string;\n      userRole: string;\n    };\n\n    return this.purchaseService.findOne(purchaseId, userId, userRole);\n  }\n\n  /** Reviews purchased product, must be purchase owner */\n  @ApiOperation({ summary: 'Reviews purchased product' })\n  @ApiBearerAuth()\n  @Patch('/review/:id')\n  async review(\n    @Req() request: Request,\n    @Param('id') purchaseId: string,\n    @Body() reviewPurchaseDto: ReviewPurchaseDto,\n  ): Promise {\n    const { userId } = request.user as { userId: string };\n\n    return this.purchaseService.review(userId, purchaseId, reviewPurchaseDto);\n  }\n\n  /** Updates purchase information, only for admins */\n  @ApiOperation({ summary: 'Admin updates purchase' })\n  @IsAdmin()\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updatePurchaseDto: UpdatePurchaseDto,\n  ): Promise {\n    return this.purchaseService.update(id, updatePurchaseDto);\n  }\n\n  /** Deletes purchase from database, only for admins */\n  @ApiOperation({ summary: 'Admin deletes purchase' })\n  @IsAdmin()\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async remove(@Param('id') id: string): Promise {\n    return this.purchaseService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PurchaseModule.html":{"url":"modules/PurchaseModule.html","title":"module - PurchaseModule","body":"\n                   \n\n\n\n\n    Modules\n    PurchaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PurchaseModule\n\n\n\ncluster_PurchaseModule_imports\n\n\n\ncluster_PurchaseModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPurchaseModule\n\nPurchaseModule\n\nPurchaseModule -->\n\nPrismaModule->PurchaseModule\n\n\n\n\n\nPurchaseService\n\nPurchaseService\n\nPurchaseModule -->\n\nPurchaseService->PurchaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/purchase/purchase.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PurchaseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PurchaseController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PurchaseService } from './purchase.service';\nimport { PurchaseController } from './purchase.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\n\n@Module({\n  controllers: [PurchaseController],\n  imports: [PrismaModule],\n  providers: [PurchaseService],\n})\nexport class PurchaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PurchaseNotFoundException.html":{"url":"classes/PurchaseNotFoundException.html","title":"class - PurchaseNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PurchaseNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/purchase/purchase-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\na purchase that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/purchase/purchase-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'Purchase not found'. Used when the user inputs\na purchase that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * a purchase that is not registered in the system\n */\nexport class PurchaseNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'Purchase not found'. Used when the user inputs\n   * a purchase that is not registered in the system\n   */\n  constructor() {\n    super('Purchase not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PurchaseService.html":{"url":"injectables/PurchaseService.html","title":"injectable - PurchaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PurchaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/purchase.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing purchases in the database.\nCRUD endpoints are available for purchases.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                review\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/purchase/purchase.service.ts:15\n                            \n                        \n\n                \n                    \n                            Responsible for managing purchases in the database.\nCRUD endpoints are available for purchases.\nInstantiates the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userId: string, createPurchaseDto: CreatePurchaseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:24\n                \n            \n\n\n            \n                \n                    Creates a new purchase\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPurchaseDto\n                                    \n                                                CreatePurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: FindPurchasesDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:43\n                \n            \n\n\n            \n                \n                    Returns all purchases with pagination\nDefault is starting on page 1 showing 10 results per page\nand ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindPurchasesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(purchaseId: string, userId: string, userRole: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:71\n                \n            \n\n\n            \n                \n                    Find purchase by ID, normal users can only get their purchases,\nAdmins can get any.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    purchaseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userRole\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:135\n                \n            \n\n\n            \n                \n                    Removes purchase from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        review\n                        \n                    \n                \n            \n            \n                \n                    \n                    review(userId: string, purchaseId: string, reviewPurchaseDto: ReviewPurchaseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:93\n                \n            \n\n\n            \n                \n                    Users review products purchased by them\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    purchaseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reviewPurchaseDto\n                                    \n                                                ReviewPurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updatePurchaseDto: UpdatePurchaseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:118\n                \n            \n\n\n            \n                \n                    Updates purchase information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePurchaseDto\n                                    \n                                                UpdatePurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Role } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreatePurchaseDto } from './dto/create-purchase.dto';\nimport { FindPurchasesDto } from './dto/find-purchases.dto';\nimport { ReviewPurchaseDto } from './dto/review-purchase.dto';\nimport { UpdatePurchaseDto } from './dto/update-purchase.dto';\nimport { Purchase } from './entities/purchase.entity';\nimport { NotPurchaseOwnerException } from './exceptions/not-purchase-owner.exception';\n\n/** Responsible for managing purchases in the database.\n * CRUD endpoints are available for purchases.\n */\n@Injectable()\nexport class PurchaseService {\n  /** Responsible for managing purchases in the database.\n   * CRUD endpoints are available for purchases.\n   *\n   * Instantiates the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new purchase */\n  async create(\n    userId: string,\n    createPurchaseDto: CreatePurchaseDto,\n  ): Promise {\n    const purchase = await this.prisma.purchase.create({\n      data: { ...createPurchaseDto, userId },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n    });\n\n    return purchase;\n  }\n\n  /** Returns all purchases with pagination\n   * Default is starting on page 1 showing 10 results per page\n   * and ordering by name\n   */\n  async findAll({\n    userId,\n    productId,\n    page = 1,\n    offset = 10,\n  }: FindPurchasesDto): Promise {\n    const purchasesToSkip = (page - 1) * offset;\n\n    const purchases = await this.prisma.purchase.findMany({\n      skip: purchasesToSkip,\n      take: offset,\n      where: {\n        userId: { equals: userId },\n        productId: { equals: productId },\n      },\n      orderBy: { createdAt: 'desc' },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n    });\n\n    return purchases;\n  }\n\n  /** Find purchase by ID, normal users can only get their purchases,\n   * Admins can get any.\n   */\n  async findOne(\n    purchaseId: string,\n    userId: string,\n    userRole: string,\n  ): Promise {\n    const purchase = await this.prisma.purchase.findUnique({\n      where: { id: purchaseId },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n      rejectOnNotFound: true,\n    });\n\n    if (userRole !== Role.ADMIN && purchase.userId !== userId) {\n      throw new NotPurchaseOwnerException();\n    }\n\n    return purchase;\n  }\n\n  /** Users review products purchased by them */\n  async review(\n    userId: string,\n    purchaseId: string,\n    reviewPurchaseDto: ReviewPurchaseDto,\n  ): Promise {\n    const purchase = await this.prisma.purchase.findUnique({\n      where: { id: purchaseId },\n      rejectOnNotFound: true,\n    });\n\n    if (userId !== purchase.userId) {\n      throw new NotPurchaseOwnerException();\n    }\n\n    return this.prisma.purchase.update({\n      where: { id: purchaseId },\n      data: { ...reviewPurchaseDto },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n    });\n  }\n\n  /** Updates purchase information */\n  async update(\n    id: string,\n    updatePurchaseDto: UpdatePurchaseDto,\n  ): Promise {\n    const purchase = await this.prisma.purchase.update({\n      where: { id },\n      data: { ...updatePurchaseDto },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n    });\n\n    return purchase;\n  }\n\n  /** Removes purchase from database */\n  async remove(id: string): Promise {\n    await this.prisma.purchase.delete({ where: { id } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PurchaseServiceInputException.html":{"url":"classes/PurchaseServiceInputException.html","title":"class - PurchaseServiceInputException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PurchaseServiceInputException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/exceptions/purchase-service-input.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to extend another exception to make it\ninstanceof PurchaseServiceInputException\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/purchase/exceptions/purchase-service-input.exception.ts:5\n                            \n                        \n\n                \n                    \n                            Used to extend another exception to make it\ninstanceof PurchaseServiceInputException\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PurchaseServiceInputException extends Error {\n  /**\n   * Used to extend another exception to make it\n   * instanceof PurchaseServiceInputException\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/refresh-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to logout an User of the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsJWT()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/refresh-token.dto.ts:10\n                        \n                    \n\n            \n                \n                    User refresh token\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJWT } from 'class-validator';\n\n/** Describes the information needed to logout an User of the application */\nexport class RefreshTokenDto {\n  /**\n   * User refresh token\n   * @example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n   */\n  @IsJWT()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReviewPurchaseDto.html":{"url":"classes/ReviewPurchaseDto.html","title":"class - ReviewPurchaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReviewPurchaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/dto/review-purchase.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to review a Purchase\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                reviewComment\n                            \n                            \n                                reviewNote\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        reviewComment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/review-purchase.dto.ts:23\n                        \n                    \n\n            \n                \n                    Product review comment\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reviewNote\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)@Max(5)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/review-purchase.dto.ts:16\n                        \n                    \n\n            \n                \n                    Product review note, from 1 to 5\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { IsInt, IsOptional, IsString, Max, Min } from 'class-validator';\nimport { Purchase } from '../entities/purchase.entity';\n\n/** Describes the fields needed to review a Purchase */\nexport class ReviewPurchaseDto extends PickType(Purchase, [\n  'reviewNote',\n  'reviewComment',\n]) {\n  /** Product review note, from 1 to 5\n   * @example 5\n   */\n  @IsInt()\n  @Min(1)\n  @Max(5)\n  reviewNote: number;\n\n  /** Product review comment\n   * @example \"Amazing wheelchair!\"\n   */\n  @IsString()\n  @IsOptional()\n  reviewComment?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/roles.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Checks if the user accessing the route is an admin\nFor more on NestJs Guards: https://docs.nestjs.com/guards\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/roles.guard.ts:12\n                            \n                        \n\n                \n                    \n                            Checks if the user accessing the route is an admin\nFor more on NestJs Guards: https://docs.nestjs.com/guards\nInstantiates the class and the Reflector dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guards/roles.guard.ts:22\n                \n            \n\n\n            \n                \n                    If the user is an Admin, access is allowed\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '@prisma/client';\nimport { Observable } from 'rxjs';\nimport { IS_ADMIN_KEY } from '../decorators/is-admin.decorator';\n\n/** Checks if the user accessing the route is an admin\n *\n * For more on NestJs Guards: https://docs.nestjs.com/guards\n */\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  /** Checks if the user accessing the route is an admin\n   *\n   * For more on NestJs Guards: https://docs.nestjs.com/guards\n   *\n   * Instantiates the class and the Reflector dependency\n   */\n  constructor(private reflector: Reflector) {}\n\n  /** If the user is an Admin, access is allowed */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const isAdmin = this.reflector.getAllAndOverride(IS_ADMIN_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    const request = context.switchToHttp().getRequest();\n    const { userRole } = request.user;\n\n    if (isAdmin && userRole === Role.ADMIN) {\n      return true;\n    }\n\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/dto/update-category.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the Category fields that are updatable\nNote that since this is a\nPartial of CreateCategoryDto,\nany field there is optional here\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCategoryDto } from './create-category.dto';\n\n/** Describes the Category fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateCategoryDto,\n * any field there is optional here\n */\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/update-product.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the Product fields that are updatable\nNote that since this is a\nPartial of CreateProductDto,\nany field there is optional here\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateProductDto } from './create-product.dto';\n\n/** Describes the Product fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateProductDto,\n * any field there is optional here\n */\nexport class UpdateProductDto extends PartialType(CreateProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePurchaseDto.html":{"url":"classes/UpdatePurchaseDto.html","title":"class - UpdatePurchaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePurchaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/dto/update-purchase.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the Purchase fields that are updatable\nNote that since this is a\nPartial of CreatePurchaseDto,\nany field there is optional here\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreatePurchaseDto } from './create-purchase.dto';\n\n/** Describes the Purchase fields that are updatable\n *\n * Note that since this is a\n * Partial of CreatePurchaseDto,\n * any field there is optional here\n */\nexport class UpdatePurchaseDto extends PartialType(CreatePurchaseDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the User fields that are updatable\nNote that since this is a\nPartial of CreateUserDto,\nany field there is optional here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                currentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user.dto.ts:19\n                        \n                    \n\n            \n                \n                    User current password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\n\n/** Describes the User fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateUserDto,\n * any field there is optional here\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n  /**\n   * User current password\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  currentPassword?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserRoleDto.html":{"url":"classes/UpdateUserRoleDto.html","title":"class - UpdateUserRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/update-user-role.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to update an User role\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user-role.dto.ts:11\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user-role.dto.ts:18\n                        \n                    \n\n            \n                \n                    User new role\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Role } from '@prisma/client';\nimport { IsEmail, IsEnum } from 'class-validator';\n\n/** Describes the information needed to update an User role */\nexport class UpdateUserRoleDto {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsEmail()\n  email: string;\n\n  /**\n   * User new role\n   * @example \"ADMIN\"\n   */\n  @IsEnum(Role)\n  role: Role;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of an User in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                role\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:43\n                        \n                    \n\n            \n                \n                    User address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:49\n                        \n                    \n\n            \n                \n                    User createdAt dateString\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:25\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:9\n                        \n                    \n\n            \n                \n                    User ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:37\n                        \n                    \n\n            \n                \n                    User name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:31\n                        \n                    \n\n            \n                \n                    User password\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:19\n                        \n                    \n\n            \n                \n                    User's Role.\nCan be \"USER\" or \"ADMIN\".\nAdmin users can handle products\nDefaults to \"USER\"\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:55\n                        \n                    \n\n            \n                \n                    User updatedAt dateString\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma, Role } from '@prisma/client';\n\n/** Describes the properties of an User in the database */\nexport class User implements Prisma.UserUncheckedCreateInput {\n  /**\n   * User ID as UUID\n   * @example \"d31fc56c-7aed-441e-9f7f-151be8d85634\"\n   */\n  id?: string;\n\n  /**\n   * User's Role.\n   * Can be \"USER\" or \"ADMIN\".\n   * Admin users can handle products\n   *\n   * Defaults to \"USER\"\n   * @example \"USER\"\n   */\n  role?: Role;\n\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  email: string;\n\n  /**\n   * User password\n   * @example \"$2b$10$1XpzUYu8FuvuaBb3SC0xzuR9DX7KakbMLt0vLNoZ.UnLntDMFc4LK\"\n   */\n  password: string;\n\n  /**\n   * User name\n   * @example \"John Doe\"\n   */\n  name?: string;\n\n  /**\n   * User address\n   * @example \"World Street 0\"\n   */\n  address?: string;\n\n  /**\n   * User createdAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  createdAt?: string | Date;\n\n  /**\n   * User updatedAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  updatedAt?: string | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                Exposes user CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                updateUserRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new user'})@Public()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:37\n                \n            \n\n\n            \n                \n                    Creates a new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Gets user's own profile'})@ApiBearerAuth()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:45\n                \n            \n\n\n            \n                \n                    Returns user's own profile information without password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(request: Request, deleteUserDto: DeleteUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes user'})@ApiBearerAuth()@Delete()@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:79\n                \n            \n\n\n            \n                \n                    Deletes user and all user related information from the system\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    deleteUserDto\n                                    \n                                                DeleteUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(request: Request, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates user'})@ApiBearerAuth()@Patch()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:55\n                \n            \n\n\n            \n                \n                    Updates user information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserRole\n                        \n                    \n                \n            \n            \n                \nupdateUserRole(updateUserRoleDto: UpdateUserRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin set user's role'})@IsAdmin()@Patch('role')\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:68\n                \n            \n\n\n            \n                \n                    Updates user role, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserRoleDto\n                                    \n                                                UpdateUserRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Patch,\n  Post,\n  Req,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { Public } from 'src/auth/public.decorator';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { DeleteUserDto } from './dto/delete-user.dto';\nimport { UpdateUserRoleDto } from './dto/update-user-role.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserWithoutPassword } from './entities/user-without-password.entity';\nimport { UserService } from './user.service';\n\n/** Exposes user CRUD endpoints */\n@ApiTags('user')\n@Controller('user')\nexport class UserController {\n  /** Exposes user CRUD endpoints\n   *\n   * Instantiate class and UserService dependency\n   */\n  constructor(private readonly userService: UserService) {}\n\n  /** Creates a new user */\n  @ApiOperation({ summary: 'Creates a new user' })\n  @Public()\n  @Post()\n  create(@Body() createUserDto: CreateUserDto): Promise {\n    return this.userService.create(createUserDto);\n  }\n\n  /** Returns user's own profile information without password */\n  @ApiOperation({ summary: \"Gets user's own profile\" })\n  @ApiBearerAuth()\n  @Get()\n  async findById(@Req() request: Request): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.findById(userId);\n  }\n\n  /** Updates user information */\n  @ApiOperation({ summary: 'Updates user' })\n  @ApiBearerAuth()\n  @Patch()\n  update(\n    @Req() request: Request,\n    @Body() updateUserDto: UpdateUserDto,\n  ): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.update(userId, updateUserDto);\n  }\n\n  /** Updates user role, only for admins */\n  @ApiOperation({ summary: \"Admin set user's role\" })\n  @IsAdmin()\n  @Patch('role')\n  updateUserRole(\n    @Body() updateUserRoleDto: UpdateUserRoleDto,\n  ): Promise {\n    return this.userService.updateUserRole(updateUserRoleDto);\n  }\n\n  /** Deletes user and all user related information from the system */\n  @ApiOperation({ summary: 'Deletes user' })\n  @ApiBearerAuth()\n  @Delete()\n  @HttpCode(HttpStatus.NO_CONTENT)\n  remove(\n    @Req() request: Request,\n    @Body() deleteUserDto: DeleteUserDto,\n  ): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.remove(userId, deleteUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserInputExceptionHandler.html":{"url":"classes/UserInputExceptionHandler.html","title":"class - UserInputExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserInputExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/user-input-exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Catches user input errors and throws the\nrespective HTTP error\n\n            \n\n\n            \n                Implements\n            \n            \n                            ExceptionHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/user-input-exception.handler.ts:19\n                \n            \n\n\n            \n                \n                    Catches user input errors and throws the\nrespective HTTP error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthServiceInputException } from 'src/auth/exceptions/auth-service-input.exception';\nimport { ProductServiceInputException } from 'src/models/product/exceptions/product-service-input.exception';\nimport { PurchaseServiceInputException } from 'src/models/purchase/exceptions/purchase-service-input.exception';\nimport { UserServiceInputException } from 'src/models/user/exceptions/user-service-input.exception';\nimport { ExceptionHandler } from './exception.handler';\n\n/** Catches user input errors and throws the\n * respective HTTP error\n */\nexport class UserInputExceptionHandler implements ExceptionHandler {\n  /** Catches user input errors and throws the\n   * respective HTTP error\n   */\n  handle(error: Error): void {\n    if (error instanceof AuthServiceInputException) {\n      throw new UnauthorizedException(error.message);\n    }\n\n    if (error instanceof UserServiceInputException) {\n      throw new BadRequestException(error.message);\n    }\n\n    if (error instanceof ProductServiceInputException) {\n      throw new BadRequestException(error.message);\n    }\n\n    if (error instanceof PurchaseServiceInputException) {\n      throw new NotFoundException(error.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  controllers: [UserController],\n  providers: [UserService],\n  imports: [PrismaModule],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotFoundException.html":{"url":"classes/UserNotFoundException.html","title":"class - UserNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/user/user-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\nan user email or id that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/user/user-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'User not found'. Used when the user inputs an user\nemail or id that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * an user email or id that is not registered in the system\n */\nexport class UserNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'User not found'. Used when the user inputs an user\n   * email or id that is not registered in the system\n   */\n  constructor() {\n    super('User not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing users in the database.\nCRUD endpoints are available for users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Private\n                                    Async\n                                hashIfUpdatingPassword\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateUserRole\n                            \n                            \n                                    Private\n                                    Async\n                                validateCurrentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/user/user.service.ts:18\n                            \n                        \n\n                \n                    \n                            Responsible for managing users in the database.\nCRUD endpoints are available for users.\nInstantiate the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:27\n                \n            \n\n\n            \n                \n                    Creates a new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:60\n                \n            \n\n\n            \n                \n                    Finds user by email and returns the user with password.\nUsed mainly in login to compare if the inputted password matches\nthe hashed one.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:48\n                \n            \n\n\n            \n                \n                    Finds user by id and returns the user without password.\nUsed for default in app requests where the hashed password\nwon't be compared\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        hashIfUpdatingPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashIfUpdatingPassword(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:111\n                \n            \n\n\n            \n                \n                    If the user inputted both new password and current password\nthe new password is hashed to be saved in the database replacing\nthe current one.\nIf only the new password or current password were inputted the user\nprobably forgot about the other one and an error is thrown\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string, deleteUserDto: DeleteUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:98\n                \n            \n\n\n            \n                \n                    Removes user from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    deleteUserDto\n                                    \n                                                DeleteUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:67\n                \n            \n\n\n            \n                \n                    Updates user information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserRole(updateUserRoleDto: UpdateUserRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:84\n                \n            \n\n\n            \n                \n                    Updates user role\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserRoleDto\n                                    \n                                                UpdateUserRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateCurrentPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateCurrentPassword(id: string, currentPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:139\n                \n            \n\n\n            \n                \n                    Compares if the inputted current password matches the\nuser hashed password saved in the database\nIf it doesn't, an error is thrown\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { compare, hash } from 'bcrypt';\nimport { hashConfig } from 'src/config/hash.config';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { DeleteUserDto } from './dto/delete-user.dto';\nimport { UpdateUserRoleDto } from './dto/update-user-role.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserWithoutPassword } from './entities/user-without-password.entity';\nimport { User } from './entities/user.entity';\nimport { InvalidPasswordUpdateException } from './exceptions/invalid-password-update.exception';\nimport { MissingPasswordUpdateException } from './exceptions/missing-password-update.exception';\n\n/** Responsible for managing users in the database.\n * CRUD endpoints are available for users.\n */\n@Injectable()\nexport class UserService {\n  /** Responsible for managing users in the database.\n   * CRUD endpoints are available for users.\n   *\n   * Instantiate the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new user */\n  async create(createUserDto: CreateUserDto): Promise {\n    const hashedPassword = await hash(\n      createUserDto.password,\n      hashConfig.saltRounds,\n    );\n\n    const lowerCaseEmail = createUserDto.email.toLowerCase();\n\n    await this.prisma.user.create({\n      data: {\n        ...createUserDto,\n        email: lowerCaseEmail,\n        password: hashedPassword,\n      },\n    });\n  }\n\n  /** Finds user by id and returns the user without password.\n   * Used for default in app requests where the hashed password\n   * won't be compared\n   */\n  async findById(id: string): Promise {\n    const user = await this.prisma.user.findUnique({ where: { id } });\n\n    delete user.password;\n\n    return { ...user };\n  }\n\n  /** Finds user by email and returns the user with password.\n   * Used mainly in login to compare if the inputted password matches\n   * the hashed one.\n   */\n  async findByEmail(email: string): Promise {\n    const lowerCaseEmail = email.toLowerCase();\n\n    return this.prisma.user.findUnique({ where: { email: lowerCaseEmail } });\n  }\n\n  /** Updates user information */\n  async update(\n    id: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    await this.hashIfUpdatingPassword(id, updateUserDto);\n\n    const user = await this.prisma.user.update({\n      where: { id },\n      data: { ...updateUserDto, updatedAt: new Date() },\n    });\n\n    delete user.password;\n\n    return { ...user };\n  }\n\n  /** Updates user role */\n  async updateUserRole(\n    updateUserRoleDto: UpdateUserRoleDto,\n  ): Promise {\n    const user = await this.prisma.user.update({\n      where: { email: updateUserRoleDto.email },\n      data: { role: updateUserRoleDto.role },\n    });\n\n    delete user.password;\n\n    return user;\n  }\n\n  /** Removes user from database */\n  async remove(id: string, deleteUserDto: DeleteUserDto): Promise {\n    await this.validateCurrentPassword(id, deleteUserDto.currentPassword);\n\n    await this.prisma.user.delete({ where: { id } });\n  }\n\n  /** If the user inputted both new password and current password\n   * the new password is hashed to be saved in the database replacing\n   * the current one.\n   *\n   * If only the new password or current password were inputted the user\n   * probably forgot about the other one and an error is thrown\n   */\n  private async hashIfUpdatingPassword(\n    id: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    if (updateUserDto.password && updateUserDto.currentPassword) {\n      await this.validateCurrentPassword(id, updateUserDto.currentPassword);\n\n      const hashedPassword = await hash(\n        updateUserDto.password,\n        hashConfig.saltRounds,\n      );\n\n      updateUserDto.password = hashedPassword;\n      delete updateUserDto.currentPassword;\n\n      return;\n    }\n\n    if (updateUserDto.password || updateUserDto.currentPassword) {\n      throw new MissingPasswordUpdateException();\n    }\n  }\n\n  /** Compares if the inputted current password matches the\n   * user hashed password saved in the database\n   *\n   * If it doesn't, an error is thrown\n   */\n  private async validateCurrentPassword(\n    id: string,\n    currentPassword: string,\n  ): Promise {\n    const user = await this.prisma.user.findUnique({ where: { id } });\n\n    const isCorrectPassword = await compare(currentPassword, user.password);\n\n    if (!isCorrectPassword) {\n      throw new InvalidPasswordUpdateException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserServiceInputException.html":{"url":"classes/UserServiceInputException.html","title":"class - UserServiceInputException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserServiceInputException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/exceptions/user-service-input.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to extend another exception to make it\ninstanceof UserServiceInputException\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/user/exceptions/user-service-input.exception.ts:5\n                            \n                        \n\n                \n                    \n                            Used to extend another exception to make it\ninstanceof UserServiceInputException\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserServiceInputException extends Error {\n  /**\n   * Used to extend another exception to make it\n   * instanceof UserServiceInputException\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserWithoutPassword.html":{"url":"classes/UserWithoutPassword.html","title":"class - UserWithoutPassword","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserWithoutPassword\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/entities/user-without-password.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This entity is the same as\nUser\nbut omitting the password field\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { User } from './user.entity';\n\n/** This entity is the same as\n * User\n * but omitting the password field\n */\nexport class UserWithoutPassword extends OmitType(User, [\n  'password',\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/access-jwt-auth.guard.ts\n            \n            injectable\n            AccessJwtAuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/access-jwt.strategy.ts\n            \n            injectable\n            AccessJwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                93 %\n                (14/15)\n            \n        \n        \n            \n                \n                src/auth/dto/login-credentials.dto.ts\n            \n            class\n            LoginCredentialsDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login.response.ts\n            \n            class\n            LoginResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dto/logout.dto.ts\n            \n            class\n            LogoutDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/dto/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/exceptions/auth-service-input.exception.ts\n            \n            class\n            AuthServiceInputException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/exceptions/invalid-email-or-password.exception..ts\n            \n            class\n            InvalidEmailOrPasswordException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/exceptions/invalid-refresh-token.exception.ts\n            \n            class\n            InvalidRefreshTokenException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/file-upload.decorator.ts\n            \n            function\n            FileUpload\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/is-admin.decorator.ts\n            \n            function\n            IsAdmin\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/is-admin.decorator.ts\n            \n            variable\n            IS_ADMIN_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/exceptions/category/category-name-in-use.exception.ts\n            \n            class\n            CategoryNameInUseException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/category/category-not-found.exception.ts\n            \n            class\n            CategoryNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/product/product-name-in-use.exception.ts\n            \n            class\n            ProductNameInUseException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/product/product-not-found.exception.ts\n            \n            class\n            ProductNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/purchase/purchase-not-found.exception.ts\n            \n            class\n            PurchaseNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/user/email-in-use.exception.ts\n            \n            class\n            EmailInUseException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/user/user-not-found.exception.ts\n            \n            class\n            UserNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/exception.interceptor.ts\n            \n            injectable\n            ExceptionInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/exception.handler.ts\n            \n            interface\n            ExceptionHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/jwt-exception.handler.ts\n            \n            class\n            JwtExceptionHandler\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/prisma-exception.handler.ts\n            \n            class\n            PrismaExceptionHandler\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/user-input-exception.handler.ts\n            \n            class\n            UserInputExceptionHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/config/hash.config.ts\n            \n            variable\n            hashConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            accessJwtConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            refreshJwtConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer-upload.config.ts\n            \n            variable\n            maxImageUploadSize\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer-upload.config.ts\n            \n            variable\n            multerUploadConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer-upload.config.ts\n            \n            variable\n            validImageUploadTypesRegex\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/category/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/models/category/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/models/category/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/category/dto/find-categories.dto.ts\n            \n            class\n            FindCategoriesDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/models/category/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/category/entities/category.entity.ts\n            \n            class\n            Category\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/models/product/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/models/product/dto/file-upload.dto.ts\n            \n            class\n            FileUploadDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/product/dto/find-products.dto.ts\n            \n            class\n            FindProductsDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/models/product/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/product/entities/product.entity.ts\n            \n            class\n            Product\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/models/product/exceptions/file-type.exception.ts\n            \n            class\n            FileTypeError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/product/exceptions/product-service-input.exception.ts\n            \n            class\n            ProductServiceInputException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/product/product.controller.ts\n            \n            controller\n            ProductController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/models/product/product.service.ts\n            \n            injectable\n            ProductService\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/models/purchase/dto/create-purchase.dto.ts\n            \n            class\n            CreatePurchaseDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/models/purchase/dto/find-purchases.dto.ts\n            \n            class\n            FindPurchasesDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/models/purchase/dto/review-purchase.dto.ts\n            \n            class\n            ReviewPurchaseDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/models/purchase/dto/update-purchase.dto.ts\n            \n            class\n            UpdatePurchaseDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/purchase/entities/purchase.entity.ts\n            \n            class\n            Purchase\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/models/purchase/exceptions/not-purchase-owner.exception.ts\n            \n            class\n            NotPurchaseOwnerException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/purchase/exceptions/purchase-service-input.exception.ts\n            \n            class\n            PurchaseServiceInputException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/purchase/purchase.controller.ts\n            \n            controller\n            PurchaseController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/models/purchase/purchase.service.ts\n            \n            injectable\n            PurchaseService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/models/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/models/user/dto/delete-user.dto.ts\n            \n            class\n            DeleteUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/dto/update-user-role.dto.ts\n            \n            class\n            UpdateUserRoleDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/models/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/entities/user-without-password.entity.ts\n            \n            class\n            UserWithoutPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/models/user/exceptions/invalid-password-update.exception.ts\n            \n            class\n            InvalidPasswordUpdateException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/exceptions/missing-password-update.exception.ts\n            \n            class\n            MissingPasswordUpdateException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/exceptions/user-service-input.exception.ts\n            \n            class\n            UserServiceInputException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/models/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/util/getTokenExpirationDate.ts\n            \n            function\n            addDaysFromNow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/util/getTokenExpirationDate.ts\n            \n            function\n            getTokenExpirationDate\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.4.6\n        \n            @nestjs/core : ^8.4.6\n        \n            @nestjs/jwt : ^8.0.1\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.4.6\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @prisma/client : 3.14.0\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            ms : ^2.1.3\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            prisma-error-enum : ^0.1.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.4.0\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addDaysFromNow   (src/.../getTokenExpirationDate.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            FileUpload   (src/.../file-upload.decorator.ts)\n                        \n                        \n                            getTokenExpirationDate   (src/.../getTokenExpirationDate.ts)\n                        \n                        \n                            IsAdmin   (src/.../is-admin.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/util/getTokenExpirationDate.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        addDaysFromNow\n                        \n                    \n                \n            \n            \n                \naddDaysFromNow(days: number)\n                \n            \n\n\n\n\n            \n                \n                    Add amount of days from today's date\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    days\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Date\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTokenExpirationDate\n                        \n                    \n                \n            \n            \n                \ngetTokenExpirationDate()\n                \n            \n\n\n\n\n            \n                \n                    Returns the token expiration date\n\n\n                    \n                        Returns :         Date\n\n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Starts the application\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    src/common/decorators/file-upload.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FileUpload\n                        \n                    \n                \n            \n            \n                \nFileUpload()\n                \n            \n\n\n\n\n            \n                \n                    Add all file upload decorators at once\nExample: Upload product picture\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    src/common/decorators/is-admin.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsAdmin\n                        \n                    \n                \n            \n            \n                \nIsAdmin()\n                \n            \n\n\n\n\n            \n                \n                    Makes an endpoint accessible only by admin users\nExample: Create, update and remove products\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nE-Commerce Backend\nAPI com endpoints para criação de usuários, produtos, compras e avaliações com autenticação e autorização\n🔗 Documentação com Compodoc e GitHub Pages\n\n\n  \n  \n  \n  \n\n\n📑 Índice\n\n\n📌 Features\n🔧 Instalação\n💻 Tecnologias\n📄 Licença\n\n📌 Features\n\n CRUD de usuários\n Autenticação de usuário\n Autorização de usuário (admin)\n CRUD de produtos\n Upload de imagens\n\n\n CRUD de categorias\n CRUD de compras\n\n🔧 Instalação\n\nVocê precisará ter o Node.js instalado\n\nInstalação\n\n\n  # Clona o projeto para sua máquina\n  git clone https://github.com/alvaromrveiga/ecommerce-backend\n\n  # Entra na pasta do projeto\n  cd ecommerce-backend\n\n  # Instala as dependências\n  yarn\nCrie um arquivo .env na raiz do projeto preenchendo as informações descritas no .env.example\n\nIniciar servidor\n\n\n  # Roda as migrations\n  yarn migrate:dev \n\n  # Inicia o servidor em modo de desenvolvimento\n  yarn start:dev\n\n  # O servidor abrirá na porta 3000. \n  # Você pode acessar a documentação com Swagger em http://localhost:3000/api/\n\n  # Para visualizar o banco de dados\n  yarn prisma studio\nRodar os testes\nCrie um arquivo .env.test na raiz do projeto alterando no mínimo o banco de dados que colocou no .env\nExemplo: postgresql://username:password@localhost:5432/ecommerce-test?schema=public\n\n\n\n\n\n  # Roda as migrations no bando de testes\n  yarn migrate:test \n\n  # Roda todos os testes\n  yarn test:all\n\n  # Roda apenas os testes unitários\n  yarn test\n\n  # Roda apenas os testes de integração\n  yarn test:e2e\n\n  # Para visualizar o banco de dados de testes\n  yarn studio:test💻 Tecnologias\n\nTypescript - tooling e minimizar erros\nNode.js e NestJS com Express - construir o servidor\nPrisma com PostgreSQL - armazenar dados\nPassport e passport-jwt - autenticação com Json Web Token\nClass-validator e class-transformer - validações nos dados de entrada dos endpoints\nBcrypt - hashs de senhas\nPrisma-error-enum - identificar os códigos para tratar as exceções do prisma\nJest, SuperTest e ms - testes\nSwagger UI Express e compodoc - documentação\nESLint e Prettier - linting e formatação de código\n\n📄 Licença\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Álvaro Veiga\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PurchaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_PurchaseModule\n\n\n\ncluster_PurchaseModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nCategoryModule -->\n\nPrismaModule->CategoryModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nPrismaModule->ProductModule\n\n\n\n\n\nPurchaseModule\n\nPurchaseModule\n\nPurchaseModule -->\n\nPrismaModule->PurchaseModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\nAppModule -->\n\nPurchaseModule->AppModule\n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAccessJwtStrategy\n\nAccessJwtStrategy\n\nAuthModule -->\n\nAccessJwtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nPurchaseService\n\nPurchaseService\n\nPurchaseModule -->\n\nPurchaseService->PurchaseModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    44 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : alvaromrveiga\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AccessTokenContent   (src/.../access-token-content.ts)\n                        \n                        \n                            AccessTokenPayload   (src/.../access-token-payload.ts)\n                        \n                        \n                            RefreshTokenPayload   (src/.../refresh-token-payload.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/types/access-token-content.ts\n    \n    \n        \n            \n                \n                    \n                    AccessTokenContent\n                \n            \n            \n                \n                    What is returned to the application after Access JsonWebToken is validated\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/auth/types/access-token-payload.ts\n    \n    \n        \n            \n                \n                    \n                    AccessTokenPayload\n                \n            \n            \n                \n                    Decrypted Access JsonWebToken content\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/auth/types/refresh-token-payload.ts\n    \n    \n        \n            \n                \n                    \n                    RefreshTokenPayload\n                \n            \n            \n                \n                    Decrypted Refresh JsonWebToken content\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            accessJwtConfig   (src/.../jwt.config.ts)\n                        \n                        \n                            hashConfig   (src/.../hash.config.ts)\n                        \n                        \n                            IS_ADMIN_KEY   (src/.../is-admin.decorator.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            maxImageUploadSize   (src/.../multer-upload.config.ts)\n                        \n                        \n                            multerUploadConfig   (src/.../multer-upload.config.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            refreshJwtConfig   (src/.../jwt.config.ts)\n                        \n                        \n                            validImageUploadTypesRegex   (src/.../multer-upload.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/jwt.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        accessJwtConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JwtSignOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.ACCESS_JWT_SECRET,\n  expiresIn: '15m',\n}\n                    \n                \n\n            \n                \n                    Configurations for the access jsonwebtoken used for authentication\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshJwtConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JwtSignOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.REFRESH_JWT_SECRET,\n  expiresIn: '90d',\n}\n                    \n                \n\n            \n                \n                    Configurations for the refresh jsonwebtoken used for authentication\n\n                \n            \n\n        \n    \n\n    src/config/hash.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        hashConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  saltRounds: 10,\n}\n                    \n                \n\n            \n                \n                    Global configuration for amount of saltRounds on hashes of sensitive information\n\n                \n            \n\n        \n    \n\n    src/common/decorators/is-admin.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_ADMIN_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isAdmin'\n                    \n                \n\n            \n                \n                    Value to verify if @IsAdmin() is being used in the endpoint\nConsult RolesGuard\n\n                \n            \n\n        \n    \n\n    src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n            \n                \n                    Value to verify if @Public() is being used in the endpoint\nConsult JwtAuthGuard\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CustomDecorator => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n            \n                \n                    Makes an endpoint accessible by unauthenticated users\nExample: Create user and Login endpoints\n\n                \n            \n\n        \n    \n\n    src/config/multer-upload.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        maxImageUploadSize\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 3 * 1024 * 1024\n                    \n                \n\n            \n                \n                    Constant that sets the maximum image upload file size\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        multerUploadConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MulterOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  storage: diskStorage({\n    destination: './tmp',\n    filename: (request, file, callback) => {\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);\n      const fileName = `${uniqueSuffix}-${file.originalname}`;\n\n      return callback(null, fileName);\n    },\n  }),\n\n  fileFilter: (request, file, callback) => {\n    const mimetype = validImageUploadTypesRegex.test(file.mimetype);\n    const extname = validImageUploadTypesRegex.test(\n      path.extname(file.originalname).toLowerCase(),\n    );\n\n    if (mimetype && extname) {\n      return callback(null, true);\n    }\n\n    return callback(new FileTypeError(validImageUploadTypesRegex), false);\n  },\n\n  limits: {\n    fileSize: maxImageUploadSize,\n  },\n}\n                    \n                \n\n            \n                \n                    Configurations for the multer library used for file upload.\nAccepts types jpeg, jpg and png of size up to 3MB\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validImageUploadTypesRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /jpeg|jpg|png/\n                    \n                \n\n            \n                \n                    Constant containing a Regular Expression\nwith the valid image upload types\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
