var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessJwtAuthGuard.html",[0,1.36,1,2.904]],["body/injectables/AccessJwtAuthGuard.html",[0,1.82,1,3.885,2,1.978,3,0.143,4,0.143,5,0.1,6,4.842,7,3.729,8,3.393,9,0.234,10,6.281,11,4.799,12,5.222,13,6.976,14,5.788,15,5.666,16,5.788,17,5.208,18,5.222,19,4.461,20,5.788,21,5.788,22,0.576,23,1.888,24,5.367,25,1.103,26,3.393,27,6.56,28,0.439,29,3.897,30,3.612,31,0.425,32,2.731,33,1.523,34,0.014,35,1.034,36,0.647,37,0.893,38,3.393,39,5.222,40,3.897,41,3.189,42,5.381,43,5.381,44,4.227,45,1.318,46,3.885,47,2.115,48,4.842,49,0.42,50,0.863,51,2.813,52,2.813,53,2.813,54,3.061,55,3.393,56,0.143,57,0.993,58,3.897,59,1.888,60,3.393,61,1.73,62,4.685,63,3.897,64,3.393,65,3.393,66,2.035,67,2.309,68,3.897,69,0.009,70,0.009]],["title/injectables/AccessJwtStrategy.html",[0,1.36,71,2.7]],["body/injectables/AccessJwtStrategy.html",[0,1.979,2,2.239,3,0.161,4,0.161,5,0.113,6,5.159,7,3.283,9,0.265,11,5.255,12,5.495,22,0.652,23,2.053,25,1.858,28,0.478,31,0.304,33,1.248,34,0.014,35,0.848,36,0.53,37,0.732,45,2.221,47,2.301,49,0.45,50,0.977,52,3.184,56,0.161,57,1.124,60,3.841,66,1.668,69,0.01,70,0.01,71,3.928,72,3.841,73,3.892,74,5.402,75,6.091,76,3.182,77,5.852,78,4.411,79,5.852,80,6.091,81,4.411,82,5.096,83,3.68,84,5.096,85,5.096,86,5.852,87,4.411,88,5.852,89,3.184,90,3.841,91,3.841,92,5.852,93,2.835,94,3.841,95,4.411,96,4.411,97,4.411,98,3.465,99,4.411,100,4.411,101,2.35,102,3.841,103,2.96,104,4.411]],["title/modules/AppModule.html",[105,1.713,106,2.904]],["body/modules/AppModule.html",[1,4.298,3,0.166,4,0.166,5,0.116,7,2.539,31,0.312,34,0.014,49,0.474,50,1.003,51,3.268,56,0.166,69,0.01,70,0.01,105,2.535,106,5.934,107,2.297,108,2.884,109,3.941,110,3.941,111,5.058,112,5.058,113,3.825,114,5.058,115,5.058,116,4.74,117,3.34,118,2.539,119,2.193,120,4.526,121,3.744,122,5.953,123,4.526,124,4.526,125,4.526,126,4.526,127,4.526,128,4.526,129,4.526,130,4.526,131,2.683,132,4.526,133,4.526]],["title/controllers/AuthController.html",[134,1.949,135,2.904]],["body/controllers/AuthController.html",[3,0.098,4,0.098,5,0.069,9,0.161,17,4.023,22,0.397,23,1.439,28,0.49,31,0.185,33,1.699,34,0.014,35,1.154,36,0.722,37,0.996,41,2.95,45,2.354,47,2.792,49,0.427,50,0.595,55,2.337,56,0.098,59,1.3,61,2.474,66,2.271,69,0.007,70,0.007,76,3.665,93,2.412,101,2.97,119,3.291,134,1.987,135,2.961,136,1.3,137,2.337,138,1.433,139,1.987,140,3.571,141,3.13,142,2.961,143,3.571,144,4.03,145,2.684,146,5.317,147,1.958,148,4.03,149,4.852,150,2.684,151,2.684,152,2.961,153,4.334,154,2.684,155,4.023,156,7.102,157,2.684,158,2.684,159,4.101,160,2.684,161,4.023,162,2.684,163,2.684,164,2.579,165,4.101,166,2.684,167,2.684,168,2.684,169,4.978,170,2.684,171,4.023,172,4.852,173,2.684,174,2.684,175,4.101,176,3.341,177,1.801,178,1.801,179,1.801,180,3.91,181,4.378,182,4.249,183,1.801,184,1.097,185,2.337,186,1.244,187,1.591,188,3.13,189,2.337,190,2.684,191,2.684,192,1.801,193,2.337,194,2.684,195,2.684,196,2.684,197,2.684,198,1.362,199,4.03,200,2.684,201,5.573,202,1.191,203,1.746,204,4.852,205,4.101,206,4.101,207,4.101,208,4.101,209,4.101,210,4.101,211,2.684,212,2.684,213,2.684,214,2.684,215,2.684,216,2.684,217,2.684,218,2.684,219,3.222,220,0.847,221,2.684,222,2.684,223,2.684,224,2.684]],["title/modules/AuthModule.html",[105,1.713,111,2.7]],["body/modules/AuthModule.html",[3,0.176,4,0.176,5,0.123,31,0.331,34,0.014,49,0.475,50,1.063,52,3.465,56,0.176,69,0.01,70,0.01,71,5.14,73,2.845,105,2.634,107,2.436,108,2.996,111,5.465,113,3.886,116,4.816,117,3.47,118,2.693,119,2.326,121,3.89,131,3.666,135,4.94,136,2.996,188,4.816,189,4.179,225,4.179,226,4.8,227,4.179,228,4.8,229,4.8,230,3.771,231,6.185,232,4.8,233,4.8,234,4.8,235,3.222,236,4.8]],["title/injectables/AuthService.html",[0,1.36,188,2.53]],["body/injectables/AuthService.html",[0,0.848,2,0.744,3,0.054,4,0.054,5,0.037,9,0.088,22,0.217,23,0.88,25,0.71,28,0.514,31,0.226,33,1.783,34,0.014,35,1.211,36,0.83,37,1.045,45,2.247,47,2.835,49,0.387,50,0.325,56,0.054,61,2.904,66,2.034,67,0.869,69,0.004,70,0.004,73,2.828,76,3.704,82,3.39,83,0.922,85,4.683,89,1.811,90,1.276,93,3.344,101,3.102,102,1.276,103,2.937,108,1.215,138,1.041,140,2.184,141,2.068,142,1.811,143,2.184,144,4.804,149,2.184,152,3.883,153,4.683,172,2.184,185,1.276,186,0.679,188,1.577,192,0.984,193,1.276,198,1.669,202,2.387,203,2.624,204,5.867,220,1.652,230,1.151,237,1.276,238,2.448,239,3.893,240,4.535,241,3.288,242,2.508,243,3.288,244,3.288,245,2.508,246,3.288,247,2.508,248,1.466,249,3.187,250,5.616,251,2.588,252,1.466,253,1.577,254,1.466,255,4.154,256,1.466,257,2.074,258,3.67,259,3.893,260,2.735,261,3.893,262,2.508,263,1.466,264,2.508,265,1.466,266,2.508,267,1.466,268,1.466,269,4.683,270,4.771,271,3.39,272,4.154,273,3.058,274,3.445,275,2.508,276,2.508,277,1.466,278,2.613,279,2.508,280,1.466,281,1.466,282,1.466,283,2.508,284,1.466,285,4.771,286,1.466,287,2.613,288,3.893,289,5.616,290,0.789,291,2.508,292,2.508,293,2.508,294,2.184,295,2.508,296,2.508,297,2.508,298,2.508,299,2.508,300,1.466,301,5.616,302,4.683,303,1.466,304,2.508,305,1.805,306,2.508,307,1.466,308,2.508,309,1.466,310,1.466,311,1.97,312,2.184,313,2.508,314,1.466,315,0.913,316,1.113,317,1.276,318,1.058,319,2.583,320,1.466,321,1.466,322,0.984,323,1.97,324,1.466,325,1.466,326,2.508,327,0.869,328,1.811,329,2.184,330,1.466,331,1.811,332,1.466,333,1.466,334,4.427,335,1.466,336,4.376,337,1.466,338,1.466,339,4.154,340,1.466,341,2.508,342,1.466,343,1.466,344,1.466,345,3.893,346,2.508,347,3.893,348,1.466,349,3.893,350,2.508,351,1.466,352,2.508,353,1.466,354,1.276,355,1.276,356,1.487,357,2.508,358,3.288,359,1.466,360,2.508,361,1.466,362,1.466,363,1.466,364,0.984,365,1.466,366,2.508]],["title/classes/AuthServiceInputException.html",[31,0.277,367,2.53]],["body/classes/AuthServiceInputException.html",[3,0.198,4,0.198,5,0.138,9,0.325,25,1.527,28,0.441,31,0.372,33,1.527,34,0.013,35,1.038,36,0.649,37,0.895,56,0.198,57,1.697,69,0.011,70,0.011,220,1.491,290,2.273,316,2.957,367,4.872,368,0.736,369,5.232,370,3.086,371,3.623,372,5.215,373,5.215,374,3.5,375,4.848,376,4.543,377,4.809,378,3.897,379,1.966,380,3.897]],["title/classes/Category.html",[31,0.277,381,1.786]],["body/classes/Category.html",[3,0.188,4,0.188,5,0.132,9,0.31,22,0.761,28,0.528,31,0.355,34,0.014,35,1.469,36,0.778,37,1.073,49,0.31,56,0.188,69,0.011,70,0.011,186,2.387,220,1.531,260,2.871,327,3.834,368,0.703,381,3.553,382,4.484,383,1.964,384,2.252,385,2.997,386,3.125,387,5.15,388,5.15,389,2.387,390,5.15,391,1.964,392,5.15,393,5.15,394,5.15,395,5.15,396,5.15,397,4.484]],["title/controllers/CategoryController.html",[134,1.949,398,2.904]],["body/controllers/CategoryController.html",[3,0.091,4,0.091,5,0.063,9,0.149,22,0.366,23,1.352,28,0.5,31,0.265,32,1.256,33,1.734,34,0.014,35,1.416,36,0.737,37,1.016,41,2.804,45,2.431,47,2.826,49,0.418,50,0.548,56,0.091,59,1.199,66,2.317,69,0.009,70,0.006,76,3.696,134,1.199,136,1.199,139,2.292,147,1.998,148,4.112,176,3.175,177,1.661,178,1.661,179,2.586,182,4.293,183,1.661,184,1.012,198,1.256,199,4.112,220,1.484,253,1.556,257,2.845,260,1.71,278,3.583,305,2.019,381,3.463,386,2.841,398,2.781,399,2.155,400,1.786,401,3.415,402,2.521,403,1.6,404,2.975,405,3.415,406,4.119,407,2.053,408,2.192,409,2.155,410,3.853,411,3.525,412,2.474,413,2.474,414,4.44,415,2.474,416,4.112,417,2.474,418,2.474,419,3.175,420,2.423,421,1.866,422,2.423,423,2.845,424,1.64,425,2.423,426,1.785,427,1.866,428,3.354,429,2.423,430,1.786,431,4.413,432,2.781,433,2.474,434,2.474,435,3.357,436,2.155,437,2.474,438,2.474,439,1.467,440,2.474,441,2.474,442,1.467,443,4.44,444,2.995,445,2.474,446,2.474,447,1.403,448,1.786,449,1.944,450,1.467,451,3.583,452,1.944,453,3.245,454,1.467,455,1.661,456,2.155,457,1.786,458,3.357,459,2.155,460,1.388,461,3.026,462,1.556,463,2.155,464,1.388,465,1.944,466,2.474,467,2.474,468,2.474,469,2.474,470,2.161,471,2.155,472,3.026,473,2.474,474,2.474,475,2.474,476,2.474,477,1.944,478,2.474,479,1.944,480,1.786,481,1.944,482,2.474]],["title/modules/CategoryModule.html",[105,1.713,112,2.7]],["body/modules/CategoryModule.html",[3,0.195,4,0.195,5,0.136,31,0.367,34,0.014,49,0.451,50,1.179,56,0.195,69,0.011,70,0.011,105,2.812,107,2.701,108,3.199,112,5.406,113,3.991,117,3.704,118,2.986,119,2.579,121,4.152,131,3.913,136,3.199,235,3.573,398,5.182,458,4.945,459,4.635,483,4.635,484,5.323,485,4.635,486,5.323,487,5.323]],["title/classes/CategoryNameInUseException.html",[31,0.277,488,2.904]],["body/classes/CategoryNameInUseException.html",[3,0.178,4,0.178,5,0.124,9,0.292,25,1.948,28,0.397,31,0.335,34,0.013,35,1.536,49,0.292,50,1.077,56,0.178,57,1.589,69,0.01,70,0.01,138,1.346,290,2.285,315,2.645,368,0.663,379,2.271,381,3.411,488,4.502,489,4.502,490,3.51,491,3.518,492,4.304,493,5.705,494,3.365,495,6.138,496,4.304,497,4.074,498,4.97,499,3.819,500,4.97,501,4.233]],["title/classes/CategoryNotFoundException.html",[31,0.277,502,2.904]],["body/classes/CategoryNotFoundException.html",[3,0.185,4,0.185,5,0.13,9,0.305,25,1.986,28,0.414,31,0.349,34,0.014,49,0.305,50,1.123,56,0.185,57,1.632,69,0.01,70,0.01,138,1.367,290,2.32,315,2.685,368,0.691,379,2.332,381,3.448,489,4.623,491,3.573,492,4.371,494,3.417,496,4.371,497,4.137,501,4.413,502,4.623,503,3.402,504,5.324,505,4.711,506,3.659,507,4.414]],["title/injectables/CategoryService.html",[0,1.36,458,2.53]],["body/injectables/CategoryService.html",[0,1.073,2,0.985,3,0.071,4,0.071,5,0.05,9,0.117,22,0.287,23,1.113,25,0.549,28,0.512,30,2.129,31,0.277,32,1.61,33,1.774,34,0.014,35,1.523,36,0.754,37,1.04,45,2.181,47,2.737,49,0.349,50,0.43,56,0.071,59,0.94,61,2.783,66,2.291,67,3.822,69,0.008,70,0.005,76,3.529,83,2.531,138,0.588,139,2.252,198,0.985,220,1.529,238,2.923,240,3.46,251,2.792,257,1.69,260,2.442,274,2.29,287,2.129,290,0.998,305,1.758,322,1.302,334,3.223,355,2.762,381,3.445,386,2.885,389,1.47,402,2.477,403,1.073,404,2.531,405,2.905,406,3.504,407,1.69,408,1.865,409,2.762,410,3.46,416,3.12,419,4.328,420,1.995,421,1.537,422,1.995,423,3.436,424,2.579,425,1.995,426,2.375,427,1.537,429,1.995,430,1.401,431,3.441,435,2.923,436,1.689,439,1.88,442,1.15,443,4.792,444,3.086,447,1.155,456,1.689,457,1.401,458,1.995,460,1.088,461,2.492,462,1.22,463,1.689,464,1.088,465,1.524,470,3.086,508,1.689,509,3.356,510,3.356,511,3.172,512,4.024,513,1.401,514,1.94,515,3.172,516,1.94,517,3.172,518,2.762,519,2.762,520,1.94,521,1.524,522,1.94,523,2.29,524,1.94,525,3.356,526,1.94,527,1.94,528,1.94,529,1.94,530,1.94,531,2.762,532,1.94,533,1.94,534,2.762,535,3.942,536,3.172,537,1.94,538,3.161,539,3.161,540,3.161,541,3.504,542,3.504,543,1.524,544,1.689,545,3.652,546,4.047,547,3.172,548,2.492,549,2.492,550,1.995,551,1.78,552,2.492,553,1.94,554,1.94,555,1.94,556,3.172,557,1.94,558,1.94,559,1.94,560,1.94]],["title/classes/CreateCategoryDto.html",[31,0.277,410,2.53]],["body/classes/CreateCategoryDto.html",[3,0.194,4,0.194,5,0.135,9,0.318,22,0.782,28,0.432,31,0.453,34,0.014,35,1.481,36,0.637,49,0.396,56,0.194,69,0.011,70,0.011,147,1.726,220,1.358,368,0.722,381,3.535,383,1.998,384,1.998,385,3.049,391,1.607,397,4.609,403,2.225,410,4.138,465,4.158,561,5.729,562,4.158,563,3.339,564,3.049,565,4.158,566,5.293,567,4.416,568,3.339,569,2.081]],["title/classes/CreateProductDto.html",[31,0.277,570,2.53]],["body/classes/CreateProductDto.html",[3,0.125,4,0.125,5,0.087,9,0.415,22,0.503,28,0.563,31,0.337,34,0.014,35,1.274,36,0.83,37,1.207,49,0.377,56,0.125,57,0.867,61,1.51,69,0.008,70,0.008,147,2.252,184,1.391,220,1.503,364,4.201,368,0.464,381,2.171,383,1.485,384,1.485,386,1.391,391,2.096,403,1.654,419,3.843,426,1.577,550,2.14,551,1.909,563,2.482,564,2.266,565,2.673,567,3.843,568,2.906,569,1.338,570,3.076,571,6.193,572,2.673,573,2.626,574,4.985,575,4.985,576,5.774,577,3.504,578,4.787,579,3.403,580,3.403,581,3.531,582,4.258,583,4.258,584,3.283,585,3.531,586,3.531,587,3.531,588,3.403,589,3.403,590,4.258,591,2.673,592,3.403,593,3.403,594,3.403,595,4.258,596,4.258,597,4.201,598,3.403,599,3.403,600,3.403,601,2.606,602,2.673,603,2.673,604,4.891,605,3.283,606,4.985,607,3.72,608,2.673,609,3.403,610,2.14,611,2.963,612,4.258,613,3.531,614,2.963,615,2.963,616,2.963,617,3.403,618,3.403,619,3.403,620,3.403,621,3.403,622,3.403,623,3.403,624,3.403,625,3.403,626,3.403]],["title/classes/CreatePurchaseDto.html",[31,0.277,627,2.53]],["body/classes/CreatePurchaseDto.html",[3,0.149,4,0.149,5,0.104,9,0.245,22,0.603,28,0.515,31,0.383,34,0.014,36,0.759,37,0.921,49,0.408,56,0.149,57,1.04,69,0.009,70,0.009,101,2.174,147,2.059,184,1.669,220,1.399,327,3.292,368,0.557,383,1.686,384,1.686,386,2.582,391,1.917,403,1.878,424,2.365,427,2.691,563,2.819,564,2.574,569,1.604,573,2.474,577,3.44,578,5.119,581,4.01,584,3.727,585,4.01,586,4.01,587,4.01,597,3.727,601,3.988,602,3.205,603,3.205,606,5.497,607,3.116,610,2.566,627,3.493,628,5.901,629,2.946,630,3.059,631,4.238,632,5.497,633,4.08,634,4.08,635,4.01,636,5.554,637,4.08,638,4.08,639,4.08,640,4.836,641,4.836,642,4.558,643,4.08,644,2.946,645,4.08,646,3.205,647,3.205,648,3.553,649,3.553,650,3.553,651,3.553,652,3.553,653,3.553,654,3.553]],["title/classes/CreateUserDto.html",[31,0.277,655,2.53]],["body/classes/CreateUserDto.html",[3,0.143,4,0.143,5,0.1,9,0.234,22,0.576,28,0.543,31,0.371,34,0.014,35,1.341,36,0.799,37,1.103,49,0.324,56,0.143,69,0.009,70,0.009,138,1.472,147,2.168,202,3.097,203,3.256,220,1.555,273,3.061,364,2.615,368,0.532,379,2.54,383,1.634,384,1.634,385,2.494,391,2.018,403,1.82,424,3.208,519,5.788,563,2.731,564,2.494,568,3.374,569,1.532,577,3.374,591,4.227,607,3.458,655,3.384,656,6.074,657,2.813,658,6.074,659,3.897,660,3.897,661,4.227,662,4.685,663,3.897,664,3.897,665,3.897,666,5.381,667,3.897,668,5.381,669,6.647,670,3.897,671,4.685,672,3.897,673,3.393,674,2.813,675,2.813,676,3.897,677,3.897,678,3.897,679,3.393,680,3.393,681,3.393,682,3.393]],["title/classes/DeleteUserDto.html",[31,0.277,683,2.7]],["body/classes/DeleteUserDto.html",[3,0.198,4,0.198,5,0.138,9,0.325,22,0.798,28,0.441,31,0.459,34,0.014,36,0.649,49,0.325,56,0.198,69,0.011,70,0.011,138,1.398,147,1.761,164,4.189,203,2.836,220,1.375,368,0.736,383,2.022,384,2.022,391,1.639,450,3.947,563,3.38,564,3.086,565,4.241,567,4.47,568,3.38,569,2.122,657,3.897,675,3.897,683,4.47,684,5.799,685,5.674,686,5.398]],["title/classes/EmailInUseException.html",[31,0.277,687,2.904]],["body/classes/EmailInUseException.html",[3,0.181,4,0.181,5,0.126,9,0.297,25,1.962,28,0.403,31,0.34,34,0.013,49,0.297,50,1.094,56,0.181,57,1.605,69,0.01,70,0.01,138,1.354,202,3.242,290,2.298,315,2.66,368,0.673,379,2.293,490,3.564,491,3.539,492,4.329,493,5.737,494,3.384,495,6.159,496,4.329,497,4.097,498,5.006,499,3.878,500,5.006,661,4.947,662,6.038,687,4.546,688,4.947,689,4.937]],["title/interfaces/ExceptionHandler.html",[690,2.904,691,2.53]],["body/interfaces/ExceptionHandler.html",[3,0.205,4,0.205,5,0.143,9,0.337,22,0.828,23,2.391,28,0.457,33,1.586,34,0.013,35,1.077,36,0.674,37,0.93,45,1.895,56,0.205,69,0.011,70,0.011,316,3.534,374,2.715,690,4.92,691,4.286,692,5.605,693,4.88,694,5.605,695,5.128,696,4.92,697,5.605,698,5.934,699,6.815,700,5.354,701,4.574]],["title/injectables/ExceptionInterceptor.html",[0,1.36,702,3.16]],["body/injectables/ExceptionInterceptor.html",[0,1.932,2,2.159,3,0.156,4,0.156,5,0.109,9,0.256,10,4.973,18,5.416,19,4.627,22,0.629,23,2.004,28,0.347,31,0.293,33,1.204,34,0.014,35,0.817,36,0.511,37,0.706,39,5.416,44,4.487,45,1.438,47,2.246,48,5.066,49,0.433,50,0.942,53,3.071,56,0.156,66,1.609,69,0.009,70,0.009,305,2.439,315,2.08,316,2.863,356,2.521,385,1.971,421,2.767,447,2.08,491,3.34,702,4.487,703,3.703,704,5.712,705,5.712,706,5.416,707,4.973,708,4.977,709,5.712,710,6.894,711,6.449,712,4.253,713,6.449,714,6.894,715,4.253,716,4.124,717,4.124,718,4.973,719,5.712,720,4.253,721,3.071,722,4.253,723,4.656,724,3.071,725,4.253,726,3.071,727,4.253,728,3.341,729,4.253,730,4.253,731,4.253,732,4.253,733,4.253]],["title/classes/FileTypeError.html",[31,0.277,734,3.16]],["body/classes/FileTypeError.html",[3,0.176,4,0.176,5,0.199,9,0.289,25,1.358,28,0.392,31,0.331,33,1.358,34,0.014,35,0.922,36,0.899,37,0.796,49,0.289,56,0.176,57,1.576,69,0.01,70,0.01,138,1.34,290,2.274,315,2.252,368,0.655,370,2.224,374,2.996,379,2.252,494,3.349,551,4.055,573,1.623,734,4.858,735,5.385,736,4.179,737,5.218,738,7.227,739,4.593,740,6.185,741,6.843,742,4.8,743,4.593,744,6.843,745,5.958,746,7.79,747,2.845,748,4.8]],["title/classes/FileUploadDto.html",[31,0.277,749,3.16]],["body/classes/FileUploadDto.html",[3,0.196,4,0.196,5,0.201,9,0.322,22,0.791,28,0.437,31,0.369,34,0.014,36,0.797,49,0.322,56,0.196,69,0.011,70,0.011,147,1.746,184,2.189,220,1.368,368,0.73,383,2.012,384,2.012,391,1.625,447,2.413,551,3.717,564,3.07,573,2.241,743,4.447,749,5.205,750,5.769,751,4.661,752,5.205,753,5.353,754,5.769,755,6.626,756,5.353,757,6.626,758,5.353]],["title/classes/FindCategoriesDto.html",[31,0.277,416,2.7]],["body/classes/FindCategoriesDto.html",[3,0.162,4,0.162,5,0.113,9,0.267,22,0.655,28,0.537,31,0.453,34,0.014,35,1.128,36,0.901,37,1.243,49,0.353,56,0.162,69,0.01,70,0.01,147,2.147,220,1.447,368,0.605,381,2.606,383,1.782,384,1.782,391,1.999,416,3.94,419,5.028,423,4.072,424,1.887,426,2.053,427,2.844,447,2.138,523,4.238,525,5.059,534,5.732,535,4.14,568,2.979,569,1.742,577,3.802,601,3.128,605,4.418,607,3.931,642,4.752,759,6.102,760,3.859,761,3.481,762,4.431,763,4.611,764,4.611,765,4.431,766,4.431,767,2.974,768,3.481]],["title/classes/FindProductsDto.html",[31,0.277,431,2.384]],["body/classes/FindProductsDto.html",[3,0.162,4,0.162,5,0.113,9,0.267,22,0.655,28,0.537,31,0.453,34,0.014,35,1.128,36,0.901,37,1.243,49,0.353,56,0.162,69,0.01,70,0.01,147,2.147,220,1.447,368,0.605,383,1.782,384,1.782,391,1.999,423,4.072,424,1.887,426,2.053,427,2.844,431,3.479,447,2.138,470,4.203,523,4.238,525,5.059,535,4.14,545,5.171,568,2.979,569,1.742,573,1.985,577,3.802,601,3.128,605,4.418,607,3.931,642,4.752,761,3.481,763,4.611,764,4.611,767,2.974,768,3.481,769,6.102,770,3.859,771,4.431,772,4.431,773,4.431]],["title/classes/FindPurchasesDto.html",[31,0.277,774,2.7]],["body/classes/FindPurchasesDto.html",[3,0.149,4,0.149,5,0.104,9,0.245,22,0.602,28,0.553,31,0.434,34,0.014,36,0.899,37,1.263,49,0.334,56,0.149,69,0.009,70,0.012,101,3.361,138,1.028,147,2.208,220,1.572,368,0.555,383,1.684,384,1.684,386,2.769,391,2.056,423,3.986,424,1.734,426,1.887,427,2.687,447,2.02,523,4.004,525,4.889,535,3.966,568,3.201,569,1.601,573,1.875,577,3.71,601,2.955,605,4.233,607,3.974,631,4.233,642,4.553,761,4.356,764,4.356,767,2.733,774,3.722,775,6.169,776,3.545,777,5.742,778,4.072,779,4.072,780,4.072,781,4.072,782,4.072,783,4.072,784,4.072,785,4.072,786,4.072,787,4.072,788,4.072,789,4.072,790,4.072,791,4.072]],["title/classes/InvalidEmailOrPasswordException.html",[31,0.277,328,2.904]],["body/classes/InvalidEmailOrPasswordException.html",[3,0.183,4,0.183,5,0.128,9,0.302,25,1.976,28,0.409,31,0.345,34,0.014,49,0.302,56,0.183,57,1.621,69,0.01,70,0.01,138,1.362,141,4.62,202,3.568,203,3.351,290,2.311,315,2.316,328,4.592,367,4.393,368,0.684,370,2.324,374,3.082,379,2.316,494,3.404,737,4.592,747,2.972,792,4.996,793,4.366,794,6.396,795,6.396,796,5.015,797,4.366,798,3.939]],["title/classes/InvalidPasswordUpdateException.html",[31,0.277,799,2.904]],["body/classes/InvalidPasswordUpdateException.html",[3,0.18,4,0.18,5,0.126,9,0.295,25,1.957,28,0.401,31,0.338,34,0.013,49,0.295,56,0.18,57,1.599,69,0.01,70,0.01,138,1.396,164,4.925,203,3.495,290,2.294,305,2.757,315,2.286,368,0.67,370,2.276,374,3.041,379,2.286,403,2.465,494,3.378,737,4.531,747,2.911,794,6.347,795,6.347,798,3.858,799,4.531,800,5.465,801,3.858,802,4.35,803,4.911]],["title/classes/InvalidRefreshTokenException.html",[31,0.277,331,2.904]],["body/classes/InvalidRefreshTokenException.html",[3,0.187,4,0.187,5,0.131,9,0.308,25,1.996,28,0.418,31,0.353,34,0.014,49,0.308,56,0.187,57,1.643,69,0.01,70,0.01,93,3.83,138,1.372,258,4.28,290,2.329,315,2.348,331,4.654,367,4.436,368,0.699,370,2.374,374,3.123,379,2.348,494,3.43,737,5.623,747,3.036,792,5.064,797,4.46,798,4.024,804,4.46,805,7.403,806,5.123]],["title/classes/JwtExceptionHandler.html",[31,0.277,721,2.904]],["body/classes/JwtExceptionHandler.html",[3,0.149,4,0.149,5,0.104,7,3.111,9,0.245,22,0.602,23,1.946,28,0.515,31,0.28,33,1.569,34,0.014,35,1.066,36,0.758,37,0.92,45,2.29,46,4.004,49,0.334,50,0.902,56,0.149,66,1.54,69,0.009,70,0.009,74,4.889,93,1.973,240,4.597,294,4.829,305,1.54,315,2.466,316,3.603,356,2.413,368,0.555,384,1.684,385,2.57,421,1.973,491,3.281,691,3.966,695,3.722,696,4.004,701,3.722,708,4.889,716,4.889,717,4.889,721,4.004,723,2.939,807,5.896,808,2.939,809,6.307,810,5.546,811,3.545,812,5.546,813,5.546,814,5.546,815,4.072,816,5.546,817,5.546,818,5.546,819,5.546,820,4.072,821,5.546,822,4.072,823,4.829,824,5.546,825,3.545,826,4.072,827,4.072,828,4.072,829,4.072]],["title/classes/LoginCredentialsDto.html",[31,0.277,155,2.904]],["body/classes/LoginCredentialsDto.html",[3,0.184,4,0.184,5,0.129,9,0.303,22,0.745,28,0.521,31,0.44,34,0.014,36,0.767,49,0.303,56,0.184,69,0.01,70,0.01,138,1.438,147,2.081,155,4.607,202,3.371,203,3.233,220,1.519,368,0.688,383,1.938,384,1.938,391,1.938,447,2.324,564,2.957,567,4.7,568,3.554,569,1.982,674,3.64,675,3.64,830,6.097,831,4.389,832,6.382,833,4.013,834,6.382,835,5.041,836,5.041]],["title/classes/LoginResponse.html",[31,0.277,192,2.7]],["body/classes/LoginResponse.html",[3,0.194,4,0.194,5,0.136,7,4.206,9,0.319,15,4.17,17,5.413,22,0.784,28,0.538,31,0.366,34,0.014,36,0.793,56,0.194,69,0.011,70,0.011,73,3.906,93,3.633,141,3.338,144,4.812,192,4.424,220,1.548,258,3.698,339,6.242,368,0.724,383,1.612,384,2.001,391,2.001,837,4.622,838,5.308,839,5.308,840,5.308,841,5.308,842,5.308,843,5.308,844,5.308,845,4.17]],["title/classes/LogoutDto.html",[31,0.277,161,2.904]],["body/classes/LogoutDto.html",[3,0.199,4,0.199,5,0.139,9,0.327,22,0.802,28,0.443,31,0.46,34,0.014,36,0.653,49,0.327,56,0.199,69,0.011,70,0.011,93,3.238,138,1.401,142,4.825,144,4.86,147,1.771,161,4.825,220,1.38,258,3.75,368,0.741,383,2.029,384,2.029,391,1.648,447,2.434,564,3.097,569,2.134,833,4.203,845,4.265,846,4.727,847,6.305,848,5.429]],["title/classes/MissingPasswordUpdateException.html",[31,0.277,849,2.904]],["body/classes/MissingPasswordUpdateException.html",[3,0.171,4,0.171,5,0.12,9,0.282,25,1.913,28,0.382,31,0.322,34,0.014,49,0.282,56,0.171,57,1.551,69,0.01,70,0.01,138,1.376,164,4.871,203,3.55,290,2.253,305,2.929,315,2.216,368,0.639,370,2.17,374,2.949,379,2.216,408,3.318,494,3.318,564,3.318,747,2.775,801,3.678,802,4.252,849,4.394,850,5.299,851,6.744,852,4.682,853,6.086,854,6.762,855,4.682]],["title/classes/NotPurchaseOwnerException.html",[31,0.277,856,2.904]],["body/classes/NotPurchaseOwnerException.html",[3,0.192,4,0.192,5,0.134,9,0.316,25,2.018,28,0.428,31,0.362,34,0.014,49,0.316,56,0.192,57,1.668,69,0.011,70,0.011,290,2.35,315,2.384,368,0.716,370,2.433,374,3.172,379,2.384,507,4.486,630,3.926,747,3.111,856,4.726,857,5.7,858,4.571,859,4.426,860,7.468,861,5.012,862,4.788,863,5.25,864,4.571]],["title/classes/PrismaExceptionHandler.html",[31,0.277,724,2.904]],["body/classes/PrismaExceptionHandler.html",[3,0.073,4,0.073,5,0.051,9,0.12,22,0.295,23,1.14,28,0.531,31,0.138,33,1.842,34,0.014,35,1.408,36,0.762,37,1.08,45,2.604,46,5.29,49,0.392,56,0.073,66,2.396,69,0.005,70,0.005,138,0.602,202,1.822,240,4.863,305,2.57,311,2.552,315,1.722,316,3.567,356,4.096,368,0.272,376,1.256,381,2.31,385,1.505,389,3.365,403,1.098,408,1.505,421,0.968,450,1.925,451,4.369,488,2.345,489,2.345,491,2.291,502,3.414,507,2.582,540,2.552,550,1.256,573,1.988,603,1.569,630,1.989,687,2.345,688,1.569,691,2.582,695,2.18,696,2.345,701,2.18,708,3.414,716,3.414,717,3.414,723,1.442,724,2.345,808,1.442,865,5.801,866,4.118,867,3.248,868,4.105,869,3.248,870,3.248,871,3.248,872,3.248,873,4.105,874,3.248,875,3.248,876,1.739,877,3.248,878,7.587,879,1.997,880,7.187,881,7.187,882,1.997,883,1.997,884,3.507,885,3.248,886,1.997,887,3.248,888,3.574,889,1.997,890,1.997,891,3.248,892,1.997,893,3.248,894,3.248,895,3.248,896,3.248,897,1.997,898,1.997,899,1.997,900,3.248,901,1.997,902,3.248,903,1.997,904,1.997,905,1.569,906,4.105,907,4.729,908,2.345,909,2.345,910,3.414,911,2.964,912,1.569,913,2.345,914,1.569,915,1.997,916,1.997,917,3.574,918,1.997,919,1.997,920,1.997,921,1.997,922,4.105,923,1.997,924,3.248,925,1.997,926,1.997,927,1.997,928,1.997,929,1.997,930,1.997,931,4.105,932,1.997,933,1.997,934,4.105,935,1.997,936,3.248,937,1.997,938,1.997,939,1.997,940,1.997,941,1.997]],["title/modules/PrismaModule.html",[105,1.713,113,2.042]],["body/modules/PrismaModule.html",[3,0.203,4,0.203,5,0.142,31,0.382,34,0.013,49,0.407,50,1.227,56,0.203,69,0.011,70,0.011,105,2.882,107,2.811,108,3.279,113,4.08,117,3.796,118,3.108,119,2.684,131,4.011,251,4.212,942,4.823,943,4.823,944,4.823,945,5.54,946,5.892,947,5.54]],["title/injectables/PrismaService.html",[0,1.36,251,2.042]],["body/injectables/PrismaService.html",[0,1.912,2,2.125,3,0.153,4,0.153,5,0.107,9,0.252,19,3.794,22,0.619,23,1.983,28,0.461,31,0.288,33,1.185,34,0.014,35,0.805,36,0.504,37,1.061,45,1.912,47,2.693,49,0.34,50,0.928,56,0.153,57,1.44,69,0.009,70,0.009,76,3.651,119,2.739,186,1.941,238,3.555,251,2.869,260,3.041,334,3.555,385,1.941,389,3.416,518,4.922,706,3.29,718,4.922,833,3.555,866,4.922,948,3.646,949,5.653,950,7.371,951,6.398,952,6.851,953,7.371,954,5.653,955,6.851,956,4.188,957,5.653,958,5.653,959,6.851,960,5.653,961,6.851,962,5.653,963,5.653,964,5.653,965,5.653,966,4.188,967,5.653,968,4.922,969,5.653,970,4.188,971,4.188,972,4.188]],["title/classes/Product.html",[31,0.277,573,1.36]],["body/classes/Product.html",[3,0.123,4,0.123,5,0.086,9,0.414,22,0.498,28,0.603,31,0.232,34,0.014,35,1.363,36,0.889,37,1.274,49,0.202,56,0.123,69,0.008,70,0.008,186,1.56,220,1.612,260,2.154,327,2.876,364,4.181,368,0.459,383,1.474,384,1.891,385,2.249,386,2.7,389,1.56,391,2.245,426,1.56,550,3.579,551,3.704,573,2.743,574,4.955,575,4.955,576,5.75,577,3.491,578,3.504,581,3.504,582,4.226,583,4.226,584,3.257,585,3.504,586,3.504,587,3.504,595,4.226,596,4.226,597,4.181,601,2.586,610,4.153,611,4.226,612,4.955,613,4.109,614,2.931,615,2.931,616,2.931,973,2.931,974,4.226,975,3.366,976,3.052,977,3.366,978,3.813,979,3.366,980,3.366,981,3.366,982,3.366,983,3.366,984,3.366,985,3.366,986,4.853,987,3.813,988,3.366,989,3.366,990,3.366,991,3.366,992,3.366,993,3.366,994,3.366,995,2.43,996,2.931,997,2.931]],["title/controllers/ProductController.html",[134,1.949,998,2.904]],["body/controllers/ProductController.html",[3,0.085,4,0.085,5,0.16,9,0.14,14,3.196,16,3.196,22,0.344,23,1.288,28,0.51,31,0.253,32,1.181,33,1.768,34,0.014,35,1.338,36,0.802,37,1.037,41,2.694,45,2.354,47,2.859,49,0.411,50,0.515,56,0.085,59,1.127,66,2.364,69,0.008,70,0.006,134,1.127,136,1.127,139,2.203,147,2.038,148,4.195,176,2.464,177,1.561,178,1.561,179,2.464,182,4.347,183,1.561,184,0.951,198,1.181,199,4.195,220,1.518,253,1.463,257,2.75,260,1.629,278,3.464,305,2.45,386,2.847,400,1.68,401,3.282,402,2.422,403,1.241,404,2.308,405,2.65,407,1.956,408,2.107,411,3.772,414,4.347,420,2.308,421,1.778,422,2.308,423,2.75,424,1.563,425,2.308,426,1.701,427,1.778,428,3.196,429,2.308,430,1.68,431,3.059,432,3.726,435,3.246,439,1.379,442,1.379,444,2.896,447,1.337,448,1.68,449,1.828,450,1.379,451,1.561,452,1.828,453,3.349,454,1.379,455,1.561,457,1.68,460,1.305,462,1.463,464,1.305,470,2.55,471,2.026,472,2.883,477,1.828,479,1.828,480,1.68,481,1.828,550,2.859,551,2.55,570,3.754,573,2.66,608,1.828,752,3.571,987,2.883,998,2.65,999,2.026,1000,3.196,1001,4.546,1002,2.026,1003,2.326,1004,2.326,1005,2.326,1006,2.326,1007,2.326,1008,3.67,1009,2.326,1010,2.326,1011,2.026,1012,2.326,1013,2.326,1014,2.326,1015,2.326,1016,4.347,1017,2.326,1018,2.326,1019,2.326,1020,4.494,1021,2.326,1022,2.326,1023,3.196,1024,3.196,1025,3.196,1026,3.196,1027,3.196,1028,2.65,1029,3.67,1030,3.67,1031,2.883,1032,1.828,1033,2.326,1034,2.883,1035,3.246,1036,2.026,1037,2.326,1038,2.326,1039,2.026,1040,2.326,1041,2.326,1042,2.326,1043,2.326,1044,2.326,1045,2.326,1046,2.326,1047,2.326,1048,2.326,1049,2.326,1050,2.326,1051,2.326]],["title/modules/ProductModule.html",[105,1.713,114,2.7]],["body/modules/ProductModule.html",[3,0.188,4,0.188,5,0.131,31,0.354,34,0.014,49,0.469,50,1.138,56,0.188,69,0.011,70,0.011,105,2.75,107,2.607,108,3.129,113,3.955,114,5.37,117,3.623,118,2.881,119,2.489,121,4.061,131,3.827,136,3.129,187,3.044,235,3.447,998,5.099,1028,3.708,1035,4.901,1036,4.472,1052,4.472,1053,4.472,1054,5.136,1055,5.136,1056,5.136,1057,5.136,1058,4.472,1059,4.035,1060,5.136,1061,5.136]],["title/classes/ProductNameInUseException.html",[31,0.277,908,2.904]],["body/classes/ProductNameInUseException.html",[3,0.178,4,0.178,5,0.124,9,0.292,25,1.948,28,0.397,31,0.335,34,0.013,35,1.536,49,0.292,50,1.077,56,0.178,57,1.589,69,0.01,70,0.01,138,1.346,290,2.285,315,2.645,368,0.663,379,2.271,490,3.51,491,3.518,492,4.304,493,5.705,494,3.365,495,6.138,496,4.304,497,4.074,498,4.97,499,3.819,500,4.97,573,2.598,908,4.502,909,4.502,1062,4.233]],["title/classes/ProductNotFoundException.html",[31,0.277,910,2.904]],["body/classes/ProductNotFoundException.html",[3,0.185,4,0.185,5,0.13,9,0.305,25,1.986,28,0.414,31,0.349,34,0.014,49,0.305,50,1.123,56,0.185,57,1.632,69,0.01,70,0.01,138,1.367,290,2.32,315,2.685,368,0.691,379,2.332,491,3.573,492,4.371,494,3.417,496,4.371,497,4.137,503,3.402,504,5.324,505,4.711,506,3.659,507,4.414,573,2.627,909,4.623,910,4.623,1062,4.413]],["title/injectables/ProductService.html",[0,1.36,1035,2.53]],["body/injectables/ProductService.html",[0,0.987,2,0.89,3,0.064,4,0.064,5,0.112,9,0.106,22,0.259,23,1.024,25,0.496,28,0.522,30,1.96,31,0.258,32,1.482,33,1.809,34,0.014,35,1.464,36,0.769,37,1.061,45,2.211,47,2.74,49,0.334,50,0.389,56,0.064,59,0.85,61,2.681,66,2.418,67,3.105,69,0.007,70,0.005,76,3.544,83,2.749,138,0.541,139,2.118,186,0.813,198,0.89,220,1.558,238,2.749,240,3.798,251,2.659,257,1.556,260,2.326,274,2.108,287,1.96,290,0.919,305,1.982,322,1.178,334,1.836,375,1.96,381,0.779,386,2.813,389,2.249,391,0.886,402,2.329,403,0.987,404,2.358,405,2.108,407,2.329,408,1.738,419,4.291,420,1.836,421,1.415,422,1.836,423,2.792,424,1.861,425,1.836,426,1.738,427,1.415,429,1.836,430,2.108,431,2.591,435,2.749,439,1.73,442,1.04,444,2.939,447,1.063,451,1.96,457,1.267,460,0.984,462,1.103,464,0.984,470,3.495,509,3.156,510,3.156,513,1.267,521,1.378,531,3.806,535,2.358,538,1.378,539,1.378,540,1.378,541,1.528,542,1.528,543,1.378,544,1.528,545,2.293,546,2.542,548,3.434,549,3.434,550,3.917,551,2.104,552,2.293,570,3.295,573,2.433,590,2.542,608,1.378,752,2.946,754,2.542,768,2.946,917,2.542,968,2.542,987,2.293,1000,2.542,1002,2.542,1011,2.542,1016,4.678,1020,2.542,1034,2.293,1035,1.836,1063,1.528,1064,3.75,1065,2.92,1066,3.75,1067,2.92,1068,1.754,1069,1.754,1070,1.754,1071,2.92,1072,2.92,1073,2.92,1074,1.754,1075,1.754,1076,1.754,1077,1.754,1078,2.92,1079,1.754,1080,2.92,1081,2.293,1082,2.92,1083,2.92,1084,2.92,1085,2.92,1086,5.239,1087,2.92,1088,4.371,1089,2.92,1090,2.92,1091,2.92,1092,2.92,1093,2.92,1094,3.75,1095,2.92,1096,1.754,1097,1.754,1098,1.754,1099,1.754,1100,1.754,1101,1.754,1102,2.92,1103,1.754,1104,1.754,1105,1.754,1106,1.754,1107,3.75,1108,1.754,1109,1.754,1110,2.92,1111,1.754,1112,1.754,1113,1.754,1114,1.754,1115,1.754,1116,1.754,1117,1.754,1118,1.754,1119,1.754,1120,2.92,1121,1.754,1122,1.754,1123,1.754,1124,3.75,1125,1.754]],["title/classes/ProductServiceInputException.html",[31,0.277,739,2.7]],["body/classes/ProductServiceInputException.html",[3,0.198,4,0.198,5,0.138,9,0.325,25,1.527,28,0.441,31,0.372,33,1.527,34,0.013,35,1.038,36,0.649,37,0.895,56,0.198,57,1.697,69,0.011,70,0.011,220,1.491,290,2.273,316,2.957,368,0.736,370,3.086,371,3.623,372,5.215,373,5.215,374,3.5,375,4.848,376,4.543,377,4.809,378,3.897,379,1.966,380,3.897,739,5.2,1126,5.232]],["title/classes/Purchase.html",[31,0.277,630,1.949]],["body/classes/Purchase.html",[3,0.127,4,0.127,5,0.089,9,0.209,22,0.514,28,0.597,31,0.239,34,0.014,36,0.88,37,1.254,49,0.209,56,0.127,69,0.008,70,0.008,101,3.088,138,0.921,186,1.611,220,1.595,260,2.205,327,4.122,368,0.474,383,1.508,384,1.92,385,2.302,386,3.047,389,1.611,391,2.223,424,2.692,427,2.407,573,2.556,577,3.529,578,3.586,581,3.586,584,3.334,585,3.586,586,3.586,587,3.586,597,3.334,601,3.815,610,4.205,613,2.51,630,3.547,631,3.89,632,5.046,635,3.586,640,4.325,641,4.325,646,4.552,647,4.552,648,3.028,649,3.028,650,3.028,651,3.028,652,3.028,653,3.028,654,3.028,861,4.243,974,4.325,976,3.124,978,3.902,995,2.51,1127,3.028,1128,3.477,1129,3.477,1130,3.477,1131,3.477,1132,3.477,1133,4.325,1134,3.477,1135,3.124,1136,4.552,1137,3.477,1138,3.477,1139,3.477,1140,3.477,1141,3.477,1142,3.477,1143,3.477,1144,3.477,1145,3.477,1146,3.477,1147,3.477,1148,3.477,1149,3.477,1150,3.028,1151,3.477,1152,3.477]],["title/controllers/PurchaseController.html",[134,1.949,1153,2.904]],["body/controllers/PurchaseController.html",[3,0.074,4,0.074,5,0.052,9,0.122,22,0.299,23,1.15,28,0.482,31,0.226,32,1.025,33,1.671,34,0.014,35,1.135,36,0.71,37,0.98,45,2.344,47,2.765,49,0.393,50,0.448,56,0.074,59,0.979,61,2.114,66,2.234,69,0.009,70,0.009,76,3.639,101,3.632,103,2.777,134,0.979,136,0.979,138,0.608,139,2.005,146,5.042,147,1.926,148,3.964,176,3.196,177,1.356,178,1.356,179,2.201,180,4.113,181,4.113,182,4.13,183,1.356,184,0.826,187,1.197,198,1.025,199,3.964,219,3.741,220,1.503,253,1.271,257,2.537,260,1.456,278,3.196,305,1.801,386,2.415,400,1.459,401,2.987,402,2.205,403,1.399,404,2.602,407,1.747,408,1.917,411,2.988,414,4.13,420,2.995,421,2.307,422,2.995,423,3.279,424,2.028,425,2.995,426,2.207,427,2.307,429,2.995,432,3.438,435,2.062,439,1.197,442,1.197,444,2.671,447,1.194,448,1.459,449,1.587,450,1.197,451,2.777,453,2.671,454,1.197,455,1.356,460,1.133,462,1.271,464,1.133,472,3.251,477,1.587,479,1.587,480,1.459,481,1.587,573,1.399,627,3.869,630,3.615,631,3.196,635,3.438,644,1.459,774,4.575,777,4.833,859,3.323,861,2.777,976,2.995,1153,2.367,1154,1.759,1155,4.138,1156,3.603,1157,2.02,1158,2.02,1159,2.02,1160,3.279,1161,2.02,1162,2.02,1163,2.02,1164,2.855,1165,4.762,1166,2.02,1167,2.02,1168,2.02,1169,2.02,1170,5.143,1171,2.02,1172,2.02,1173,2.855,1174,2.02,1175,2.02,1176,2.02,1177,4.13,1178,4.762,1179,2.02,1180,2.02,1181,3.279,1182,4.13,1183,2.02,1184,2.02,1185,3.251,1186,1.759,1187,1.759,1188,2.995,1189,1.759,1190,2.02,1191,2.02,1192,2.02,1193,2.02,1194,3.279,1195,2.02,1196,2.02,1197,2.02,1198,2.02,1199,2.02,1200,2.02,1201,2.02]],["title/modules/PurchaseModule.html",[105,1.713,115,2.7]],["body/modules/PurchaseModule.html",[3,0.195,4,0.195,5,0.136,31,0.367,34,0.014,49,0.451,50,1.179,56,0.195,69,0.011,70,0.011,105,2.812,107,2.701,108,3.199,113,3.991,115,5.406,117,3.704,118,2.986,119,2.579,121,4.152,131,3.913,136,3.199,235,3.573,1153,5.182,1188,4.945,1189,4.635,1202,4.635,1203,5.323,1204,4.635,1205,5.323,1206,5.323]],["title/classes/PurchaseNotFoundException.html",[31,0.277,911,2.904]],["body/classes/PurchaseNotFoundException.html",[3,0.185,4,0.185,5,0.13,9,0.305,25,1.986,28,0.414,31,0.349,34,0.014,49,0.305,50,1.123,56,0.185,57,1.632,69,0.01,70,0.01,138,1.367,290,2.32,315,2.685,368,0.691,379,2.332,491,3.573,492,4.371,494,3.417,496,4.371,497,4.137,503,3.402,504,5.324,505,4.711,506,3.659,507,4.414,630,3.763,864,4.413,911,4.623,912,5.03]],["title/injectables/PurchaseService.html",[0,1.36,1188,2.53]],["body/injectables/PurchaseService.html",[0,1.127,2,1.047,3,0.075,4,0.075,5,0.053,9,0.124,22,0.305,23,1.17,25,0.583,28,0.486,30,2.237,31,0.289,32,1.692,33,1.685,34,0.014,35,1.359,36,0.716,37,0.988,45,2.097,47,2.695,49,0.385,50,0.457,56,0.075,59,0.999,61,2.512,66,2.001,67,4.063,69,0.008,70,0.005,76,3.573,83,2.639,101,3.713,103,3.234,138,0.981,139,2.335,186,0.956,198,1.047,202,2.348,220,1.583,238,3.031,251,2.872,257,1.776,260,2.512,287,2.237,305,1.823,322,1.384,334,3.559,356,1.976,386,2.69,389,1.545,402,2.568,403,1.419,404,2.639,407,1.776,408,1.944,414,2.237,420,2.096,421,1.615,422,2.096,423,3.016,424,2.052,425,2.096,426,1.944,427,1.615,429,2.096,435,2.096,439,1.976,442,1.222,444,1.87,447,1.214,460,1.157,462,1.297,464,1.157,470,1.87,509,3.479,510,3.479,513,1.489,521,1.62,535,2.639,538,1.62,539,1.62,543,1.62,548,4.156,549,5.167,552,2.619,573,1.789,610,1.297,627,3.899,630,3.542,631,2.816,635,2.407,644,1.489,774,3.234,777,5.553,856,3.029,859,2.856,861,3.551,1156,3.653,1170,5.399,1173,2.902,1177,4.162,1182,4.162,1185,3.296,1186,1.795,1187,1.795,1188,2.096,1207,1.795,1208,2.062,1209,2.062,1210,2.062,1211,2.062,1212,2.062,1213,2.062,1214,2.062,1215,2.062,1216,2.062,1217,2.062,1218,1.297,1219,2.062,1220,2.062,1221,2.062,1222,3.333,1223,2.062,1224,3.333,1225,2.062,1226,3.333,1227,1.795,1228,3.333,1229,3.333,1230,2.062]],["title/classes/PurchaseServiceInputException.html",[31,0.277,862,2.7]],["body/classes/PurchaseServiceInputException.html",[3,0.198,4,0.198,5,0.138,9,0.325,25,1.527,28,0.441,31,0.372,33,1.527,34,0.013,35,1.038,36,0.649,37,0.895,56,0.198,57,1.697,69,0.011,70,0.011,220,1.491,290,2.273,316,2.957,368,0.736,370,3.086,371,3.623,372,5.215,373,5.215,374,3.5,375,4.848,376,4.543,377,4.809,378,3.897,379,1.966,380,3.897,862,5.2,1231,5.232]],["title/classes/RefreshTokenDto.html",[31,0.277,171,2.904]],["body/classes/RefreshTokenDto.html",[3,0.198,4,0.198,5,0.138,9,0.325,22,0.798,28,0.441,31,0.459,34,0.014,36,0.649,49,0.325,56,0.198,69,0.011,70,0.011,93,3.227,138,1.398,142,4.809,144,4.848,147,1.761,171,4.809,220,1.375,258,3.736,368,0.736,383,2.022,384,2.022,391,1.639,447,2.426,564,3.086,569,2.122,833,4.189,845,4.241,847,6.289,1232,5.799,1233,4.7,1234,5.398]],["title/classes/ReviewPurchaseDto.html",[31,0.277,1177,2.7]],["body/classes/ReviewPurchaseDto.html",[3,0.172,4,0.172,5,0.12,9,0.283,22,0.695,28,0.498,31,0.421,34,0.014,36,0.734,37,1.013,49,0.408,56,0.172,57,1.199,69,0.01,70,0.01,147,1.991,184,1.924,220,1.26,368,0.642,383,1.854,384,1.854,391,1.854,424,2.6,563,3.099,564,2.829,568,3.099,569,1.85,573,2.426,577,3.099,591,3.696,605,4.098,607,3.425,613,3.397,629,3.397,630,3.284,644,3.397,646,5.635,647,5.635,861,5.112,1133,5.316,1135,3.84,1136,5.324,1150,4.097,1177,4.098,1235,5.902,1236,4.705,1237,4.705,1238,4.705,1239,4.705,1240,4.705,1241,4.705,1242,4.705,1243,4.705,1244,4.705]],["title/guards/RolesGuard.html",[1245,3.16,1246,2.904]],["body/guards/RolesGuard.html",[0,1.851,3,0.146,4,0.146,5,0.102,9,0.24,15,5.277,18,5.277,19,4.509,20,6.128,21,5.849,22,0.59,23,1.921,24,6.128,25,1.13,26,3.478,27,6.599,28,0.447,30,3.674,31,0.43,32,2.778,33,1.549,34,0.014,35,1.052,36,0.658,37,0.908,38,3.478,39,5.277,44,4.3,45,1.351,46,3.952,47,2.152,48,4.906,49,0.423,50,0.885,51,2.884,53,2.884,56,0.146,59,1.935,61,2.772,64,3.478,65,3.478,66,2.07,67,2.368,69,0.009,70,0.009,73,3.244,98,3.138,103,3.674,138,1.347,146,2.681,186,1.851,219,3.138,311,5.277,385,1.851,411,3.873,453,3.071,455,2.681,1218,2.512,1227,3.478,1246,3.952,1247,3.478,1248,6.718,1249,3.995,1250,3.995,1251,5.474,1252,3.138,1253,3.995,1254,3.995,1255,3.995]],["title/classes/UpdateCategoryDto.html",[31,0.277,443,2.7]],["body/classes/UpdateCategoryDto.html",[3,0.204,4,0.204,5,0.143,9,0.335,31,0.384,34,0.014,37,1.126,49,0.408,56,0.204,57,1.42,69,0.011,70,0.011,184,2.279,368,0.76,381,3.015,383,2.062,403,1.884,410,4.607,443,4.558,461,4.377,562,4.377,563,3.447,884,4.271,1135,4.271,1256,4.852,1257,4.903,1258,4.903,1259,4.903,1260,4.023,1261,5.572]],["title/classes/UpdateProductDto.html",[31,0.277,1016,2.7]],["body/classes/UpdateProductDto.html",[3,0.204,4,0.204,5,0.143,9,0.335,31,0.384,34,0.014,37,1.126,49,0.408,56,0.204,57,1.42,69,0.011,70,0.011,184,2.279,368,0.76,383,2.062,403,1.884,563,3.447,570,4.607,572,4.377,573,2.297,884,4.271,1016,4.558,1034,4.377,1135,4.271,1257,4.903,1258,4.903,1259,4.903,1260,4.023,1262,4.852,1263,5.572]],["title/classes/UpdatePurchaseDto.html",[31,0.277,1182,2.7]],["body/classes/UpdatePurchaseDto.html",[3,0.204,4,0.204,5,0.143,9,0.335,31,0.384,34,0.014,37,1.126,49,0.408,56,0.204,57,1.42,69,0.011,70,0.011,184,2.279,368,0.76,383,2.062,403,1.884,563,3.447,627,4.607,629,4.023,630,3.29,884,4.271,1135,4.271,1182,4.558,1185,4.377,1257,4.903,1258,4.903,1259,4.903,1260,4.023,1264,4.852,1265,5.572]],["title/classes/UpdateUserDto.html",[31,0.277,1266,2.7]],["body/classes/UpdateUserDto.html",[3,0.182,4,0.182,5,0.127,9,0.298,22,0.733,28,0.405,31,0.435,34,0.014,36,0.597,37,1.214,49,0.418,56,0.182,57,1.264,69,0.01,70,0.01,138,1.356,147,1.618,164,3.973,184,2.029,203,2.69,220,1.304,368,0.677,383,1.918,384,1.918,391,1.507,403,1.678,563,3.207,567,4.24,568,3.207,569,1.951,607,3.544,655,4.371,657,3.583,675,3.583,685,5.46,884,3.973,1135,3.973,1257,4.561,1258,4.561,1259,4.561,1260,3.583,1266,4.24,1267,4.963,1268,4.962,1269,4.962,1270,3.898,1271,4.962]],["title/classes/UpdateUserRoleDto.html",[31,0.277,1272,2.7]],["body/classes/UpdateUserRoleDto.html",[3,0.181,4,0.181,5,0.126,9,0.297,22,0.73,28,0.514,31,0.434,34,0.014,36,0.757,49,0.379,56,0.181,69,0.01,70,0.01,138,1.486,147,2.054,186,2.288,202,3.349,220,1.3,305,2.382,368,0.673,383,1.912,384,1.912,391,1.912,408,2.918,411,2.631,447,2.293,564,2.918,569,1.941,671,6.038,674,3.564,1218,5.08,1267,5.447,1272,4.226,1273,4.298,1274,4.937,1275,6.297,1276,4.937,1277,4.937]],["title/classes/User.html",[31,0.277,138,0.746]],["body/classes/User.html",[3,0.131,4,0.131,5,0.091,9,0.215,22,0.527,28,0.601,31,0.246,34,0.014,35,1.298,36,0.886,37,1.288,49,0.215,56,0.131,69,0.008,70,0.008,138,1.517,152,3.653,186,1.653,202,2.998,203,2.876,220,1.628,260,2.246,327,2.999,364,2.395,368,0.487,383,1.536,384,1.942,385,2.345,386,2.762,389,1.653,391,2.238,411,3.408,470,2.838,597,3.396,610,4.247,658,5.88,674,2.576,679,3.107,680,3.107,681,3.107,682,3.107,695,3.396,859,2.999,976,4.023,978,5.025,995,3.653,996,4.405,997,4.405,1218,4.635,1278,3.107,1279,5.88,1280,3.568,1281,3.568,1282,3.568,1283,3.568,1284,3.568,1285,3.568,1286,3.568,1287,3.568,1288,3.568,1289,3.568,1290,3.568,1291,3.568,1292,3.568,1293,3.568,1294,3.568]],["title/controllers/UserController.html",[134,1.949,1295,2.904]],["body/controllers/UserController.html",[3,0.101,4,0.101,5,0.071,9,0.167,22,0.409,23,1.474,28,0.497,31,0.289,32,1.406,33,1.723,34,0.014,35,1.17,36,0.732,37,1.01,41,2.49,45,2.252,47,2.815,49,0.438,50,0.614,56,0.101,59,1.342,61,2.253,66,2.303,69,0.007,70,0.007,76,2.459,101,2.704,134,1.342,136,1.342,138,1.44,139,2.459,146,5.146,147,1.986,148,4.086,152,4.627,176,3.802,177,1.859,178,1.859,179,2.819,180,3.987,181,4.45,182,4.301,183,1.859,184,1.133,187,1.641,198,1.406,199,4.086,203,1.789,249,3.357,253,1.742,257,3.018,278,3.802,305,2.142,400,1.999,401,3.664,402,2.704,403,1.421,407,2.704,408,2.352,411,2.238,414,2.819,432,3.033,444,3.595,447,2.334,448,3.033,450,2.49,452,2.176,453,2.357,454,1.641,455,1.859,460,1.554,464,2.357,480,1.999,497,2.357,655,4.03,683,4.604,1039,2.411,1218,3.191,1266,4.604,1270,3.987,1272,4.301,1295,3.033,1296,2.411,1297,3.658,1298,4.419,1299,2.411,1300,2.769,1301,2.769,1302,2.769,1303,2.769,1304,2.769,1305,5.075,1306,3.406,1307,2.769,1308,2.769,1309,2.769,1310,4.201,1311,2.769,1312,2.769,1313,2.769,1314,2.411,1315,4.201,1316,2.769,1317,2.769,1318,2.411,1319,2.411,1320,1.859,1321,2.411,1322,2.411,1323,2.411,1324,2.769,1325,2.769,1326,2.769,1327,2.769,1328,5.075,1329,2.769,1330,2.769,1331,2.769,1332,2.769,1333,2.769]],["title/classes/UserInputExceptionHandler.html",[31,0.277,726,2.904]],["body/classes/UserInputExceptionHandler.html",[3,0.157,4,0.157,5,0.11,9,0.258,22,0.633,23,2.013,28,0.349,31,0.295,33,1.212,34,0.014,35,0.823,36,0.515,37,0.71,45,1.448,49,0.446,50,0.949,56,0.157,69,0.009,70,0.009,138,1.281,305,2.615,315,2.517,316,3.554,356,4.097,367,3.608,368,0.584,369,3.364,370,3.203,376,4.347,385,2.659,491,3.349,498,3.091,505,2.874,691,4.07,695,3.851,696,4.142,701,3.851,708,4.991,716,4.991,717,4.991,723,3.091,726,4.142,728,5.828,739,3.851,747,4.097,802,3.608,808,3.091,825,3.728,862,3.851,876,3.728,1126,3.364,1231,3.364,1334,4.996,1335,3.364,1336,4.282,1337,5.738,1338,4.282]],["title/modules/UserModule.html",[105,1.713,116,2.53]],["body/modules/UserModule.html",[3,0.189,4,0.189,5,0.132,31,0.356,34,0.014,49,0.447,50,1.144,56,0.189,69,0.011,70,0.011,105,2.759,107,2.621,108,3.139,113,3.961,116,5.081,117,3.635,118,2.897,119,2.502,121,4.075,131,3.84,136,3.139,235,3.466,249,4.874,946,5.642,1295,5.112,1323,4.497,1339,4.497,1340,4.497,1341,5.164,1342,4.497,1343,5.164,1344,5.164]],["title/classes/UserNotFoundException.html",[31,0.277,913,2.904]],["body/classes/UserNotFoundException.html",[3,0.182,4,0.182,5,0.127,9,0.298,25,1.967,28,0.405,31,0.342,34,0.013,49,0.298,50,1.1,56,0.182,57,1.61,69,0.01,70,0.01,138,1.499,202,3.248,290,2.302,315,2.665,368,0.677,379,2.301,386,2.993,491,3.545,492,4.337,494,3.391,496,4.337,497,4.105,503,3.331,504,5.283,505,4.665,506,3.583,507,4.371,913,4.561,914,4.963,1345,4.962]],["title/injectables/UserService.html",[0,1.36,249,2.384]],["body/injectables/UserService.html",[0,1.042,2,0.951,3,0.069,4,0.069,5,0.048,9,0.113,22,0.277,23,1.082,25,0.53,28,0.505,31,0.271,32,1.564,33,1.751,34,0.014,35,1.19,36,0.744,37,1.027,45,2.256,47,2.784,49,0.401,50,0.415,56,0.069,59,0.908,61,2.748,66,1.903,69,0.005,70,0.005,76,3.657,83,2.47,138,1.442,139,2.205,141,1.939,164,3.757,198,0.951,202,2.402,203,3.231,220,1.53,238,2.862,240,3.403,249,1.827,251,2.746,253,1.939,257,1.643,260,2.829,269,5.202,271,2.684,272,5.202,273,3.575,274,3.906,287,2.069,290,1.432,305,2.47,316,2.02,317,3.42,318,1.353,322,1.257,329,1.631,334,4.194,354,3.963,356,1.827,386,2.821,389,1.428,402,2.425,403,1.042,407,1.643,408,1.82,421,1.493,439,1.827,442,1.11,444,2.553,447,1.123,450,2.697,460,1.051,464,1.729,509,3.286,510,3.286,513,1.353,584,3.055,655,3.403,673,1.631,683,3.838,685,3.085,706,2.422,799,2.225,849,2.225,851,2.684,859,3.541,976,1.178,1218,2.47,1266,4.695,1270,3.085,1272,3.631,1279,1.631,1297,2.684,1298,3.42,1299,2.684,1306,2.636,1314,1.631,1318,1.631,1319,1.631,1320,1.257,1321,1.631,1322,1.631,1346,1.631,1347,3.083,1348,3.927,1349,3.927,1350,1.873,1351,1.873,1352,3.083,1353,1.873,1354,4.551,1355,3.083,1356,3.083,1357,1.873,1358,3.083,1359,3.083,1360,3.083,1361,1.873,1362,1.873,1363,3.083,1364,3.083,1365,3.083,1366,4.551,1367,1.873,1368,1.873,1369,1.873,1370,1.873,1371,1.873,1372,3.083,1373,3.927,1374,1.472,1375,1.873,1376,3.083,1377,1.873,1378,4.551,1379,1.873,1380,3.083,1381,4.551,1382,1.873,1383,1.873,1384,3.927,1385,1.873,1386,1.873,1387,3.083,1388,1.873,1389,1.873,1390,3.083,1391,1.873,1392,1.873,1393,4.551,1394,4.551,1395,3.083,1396,1.873]],["title/classes/UserServiceInputException.html",[31,0.277,802,2.53]],["body/classes/UserServiceInputException.html",[3,0.198,4,0.198,5,0.138,9,0.325,25,1.527,28,0.441,31,0.372,33,1.527,34,0.013,35,1.038,36,0.649,37,0.895,56,0.198,57,1.697,69,0.011,70,0.011,220,1.491,290,2.273,316,2.957,368,0.736,370,3.086,371,3.623,372,5.215,373,5.215,374,3.5,375,4.848,376,4.543,377,4.809,378,3.897,379,1.966,380,3.897,802,4.872,1335,5.232]],["title/classes/UserWithoutPassword.html",[31,0.277,1320,2.7]],["body/classes/UserWithoutPassword.html",[3,0.208,4,0.208,5,0.145,9,0.341,31,0.391,34,0.014,49,0.413,56,0.208,57,1.445,61,2.518,69,0.011,70,0.011,138,1.368,184,2.319,203,3.143,368,0.774,602,4.455,884,4.317,1306,3.807,1320,4.607,1397,4.938,1398,4.938,1399,6.864,1400,6.864,1401,6.864,1402,5.672,1403,5.672]],["title/coverage.html",[1404,4.789]],["body/coverage.html",[0,2.267,1,1.709,5,0.061,6,2.923,7,1.328,8,2.061,31,0.564,34,0.014,35,0.715,36,0.285,41,1.403,54,1.859,69,0.006,70,0.006,71,1.589,72,2.061,89,1.709,134,2.745,135,1.709,137,2.061,138,0.69,155,1.709,161,1.709,171,1.709,188,1.489,192,1.589,202,1.051,203,1.584,237,2.061,249,1.403,251,1.201,258,1.328,305,0.895,319,1.859,323,1.859,328,1.709,331,1.709,367,1.489,369,1.859,370,2.415,371,3.497,381,1.051,382,2.061,398,1.709,399,2.061,410,1.489,416,1.589,431,1.403,443,1.589,453,1.328,454,2.205,458,1.489,488,1.709,489,2.686,490,3.319,502,1.709,503,3.497,508,2.061,561,2.061,562,2.923,570,1.489,571,2.061,572,2.923,573,0.8,627,1.489,628,2.061,629,3.319,630,1.803,655,1.489,656,2.061,657,3.319,683,1.589,684,2.061,687,1.709,688,1.859,690,1.709,691,1.489,693,2.061,698,4.932,702,1.859,703,2.061,721,1.709,724,1.709,726,1.709,728,1.859,734,1.859,735,2.061,736,2.061,739,1.589,749,1.859,750,2.061,751,2.061,759,2.061,760,2.061,769,2.061,770,2.061,774,1.589,775,2.061,776,2.061,792,2.923,793,2.061,799,1.709,800,2.061,801,2.923,802,1.489,804,2.061,807,2.061,808,3.319,830,2.061,831,2.061,837,2.061,846,2.061,849,1.709,850,2.061,856,1.709,857,2.061,858,2.061,862,1.589,865,2.061,908,1.709,909,2.686,910,1.709,911,1.709,912,1.859,913,1.709,914,1.859,948,2.061,973,2.061,998,1.709,999,2.061,1016,1.589,1028,1.709,1031,1.859,1032,1.859,1035,1.489,1059,3.611,1063,2.061,1126,1.859,1127,2.061,1153,1.709,1154,2.061,1177,1.589,1182,1.589,1188,1.489,1207,2.061,1231,1.859,1232,2.061,1233,2.061,1235,2.061,1245,1.859,1246,1.709,1247,2.061,1252,1.859,1256,2.061,1262,2.061,1264,2.061,1266,1.589,1267,2.923,1272,1.589,1273,2.061,1278,2.061,1295,1.709,1296,2.061,1306,1.589,1320,1.589,1334,2.061,1335,1.859,1346,2.061,1374,1.859,1397,2.061,1398,2.061,1404,2.061,1405,2.061,1406,2.367,1407,2.367,1408,8.39,1409,6.702,1410,3.721,1411,2.367,1412,7.882,1413,3.24,1414,6.702,1415,7.569,1416,2.061,1417,2.923,1418,5.211,1419,2.367,1420,2.061,1421,3.24,1422,4.003,1423,2.061,1424,2.061,1425,2.061,1426,2.061,1427,3.721,1428,4.597,1429,4.597,1430,2.367,1431,3.721,1432,3.721,1433,3.24,1434,2.061,1435,2.367,1436,2.367]],["title/dependencies.html",[108,2.345,1437,2.921]],["body/dependencies.html",[7,2.953,11,4.734,31,0.452,34,0.014,50,1.166,51,3.8,52,3.8,53,3.8,69,0.011,70,0.011,108,2.55,184,2.153,186,2.439,187,3.886,230,4.135,316,2.337,318,3.8,327,3.12,389,2.439,569,2.069,700,4.135,767,3.533,905,4.135,1058,4.584,1438,7.142,1439,5.264,1440,5.264,1441,5.264,1442,5.264,1443,5.264,1444,5.264,1445,5.264,1446,5.264,1447,4.584,1448,5.264,1449,5.264,1450,5.264,1451,5.264,1452,5.264,1453,5.264,1454,5.264,1455,5.264,1456,5.264,1457,5.264,1458,4.584,1459,4.584,1460,5.264,1461,5.264]],["title/miscellaneous/functions.html",[1462,2.11,1463,4.215]],["body/miscellaneous/functions.html",[5,0.13,22,0.751,33,1.438,34,0.013,35,0.977,36,0.611,37,0.843,45,2.628,47,1.998,69,0.01,70,0.01,93,2.462,147,1.657,323,5.521,391,1.947,403,1.719,407,2.708,408,2.355,411,2.708,453,3.943,454,3.012,470,2.851,551,2.851,573,1.719,577,3.255,601,2.708,701,4.305,743,4.305,833,3.196,859,3.012,976,4.642,1031,5.521,1032,3.992,1081,3.992,1416,5.585,1417,5.038,1425,4.425,1426,6.119,1433,4.425,1434,5.585,1462,3.196,1463,4.425,1464,6.414,1465,5.082,1466,5.082,1467,4.425,1468,5.082,1469,6.414,1470,6.414,1471,5.082,1472,5.082,1473,5.082,1474,5.082,1475,4.425,1476,4.425]],["title/index.html",[22,0.496,1477,2.921,1478,2.921]],["body/index.html",[7,1.853,11,3.456,19,2.216,31,0.33,34,0.013,69,0.008,70,0.008,93,1.6,139,2.319,187,2.837,316,1.466,318,2.384,389,2.861,402,3.29,411,1.76,569,1.298,661,6.011,707,2.875,743,2.216,767,2.216,905,2.594,1447,2.875,1458,4.168,1459,2.875,1479,3.302,1480,5.63,1481,3.302,1482,7.049,1483,6.553,1484,3.302,1485,7.97,1486,4.786,1487,4.786,1488,4.786,1489,3.302,1490,5.63,1491,4.786,1492,5.63,1493,4.786,1494,3.302,1495,3.302,1496,3.302,1497,4.786,1498,5.63,1499,4.786,1500,4.786,1501,4.786,1502,3.302,1503,3.302,1504,4.786,1505,3.302,1506,3.302,1507,7.22,1508,4.786,1509,3.302,1510,3.302,1511,6.173,1512,3.302,1513,3.302,1514,3.302,1515,3.302,1516,3.302,1517,3.302,1518,6.173,1519,3.302,1520,3.302,1521,3.302,1522,3.302,1523,3.302,1524,7.358,1525,4.786,1526,4.786,1527,4.786,1528,4.786,1529,4.786,1530,3.302,1531,3.302,1532,3.302,1533,3.302,1534,3.302,1535,6.173,1536,6.553,1537,4.786,1538,3.302,1539,3.302,1540,4.786,1541,3.302,1542,3.302,1543,3.302,1544,3.302,1545,3.302,1546,3.302,1547,3.302,1548,3.302,1549,3.302,1550,4.786,1551,5.63,1552,6.553,1553,3.302,1554,3.302,1555,6.553,1556,7.049,1557,3.302,1558,3.302,1559,3.302,1560,3.302,1561,3.302,1562,3.302,1563,3.302,1564,3.302,1565,3.302,1566,3.302,1567,3.302,1568,3.302,1569,4.786,1570,3.302,1571,3.302,1572,3.302,1573,3.302,1574,3.302,1575,3.302,1576,3.302,1577,3.302,1578,3.302,1579,3.302,1580,3.302,1581,3.302,1582,3.302,1583,3.302,1584,3.302,1585,3.302,1586,3.302,1587,3.302,1588,3.302,1589,3.302,1590,3.302,1591,3.302,1592,3.302,1593,3.302,1594,3.302,1595,3.302,1596,3.302,1597,3.302,1598,3.302,1599,3.302,1600,2.875]],["title/license.html",[1477,2.921,1478,2.921,1601,2.635]],["body/license.html",[34,0.01,69,0.01,70,0.01,119,2.404,187,2.941,500,4.561,745,4.321,823,4.321,995,3.583,1164,4.321,1306,4.665,1405,4.321,1600,4.321,1601,3.898,1602,6.951,1603,4.962,1604,4.962,1605,4.962,1606,6.318,1607,4.962,1608,4.962,1609,4.962,1610,4.962,1611,4.962,1612,4.962,1613,6.318,1614,8.023,1615,4.962,1616,4.962,1617,4.962,1618,4.962,1619,6.318,1620,4.962,1621,4.962,1622,4.962,1623,4.962,1624,4.962,1625,4.962,1626,4.962,1627,4.962,1628,6.318,1629,4.962,1630,4.962,1631,4.962,1632,4.962,1633,4.962,1634,4.962,1635,6.318,1636,6.318,1637,4.962,1638,4.962,1639,4.962,1640,4.962,1641,4.962,1642,4.962,1643,4.962,1644,4.962,1645,4.962,1646,4.962,1647,4.962,1648,4.962,1649,4.962,1650,4.962,1651,4.962,1652,4.962,1653,4.962,1654,4.962,1655,4.962,1656,4.962,1657,4.962,1658,4.962,1659,4.962,1660,4.962,1661,4.962,1662,4.962,1663,4.962,1664,4.962]],["title/modules.html",[107,2.791]],["body/modules.html",[34,0.011,69,0.011,70,0.011,106,4.207,107,2.958,111,3.911,112,3.911,113,2.958,114,3.911,115,3.911,116,3.665,1665,8.122,1666,8.122,1667,8.122,1668,8.122]],["title/overview.html",[1669,4.789]],["body/overview.html",[2,2.188,34,0.014,69,0.009,70,0.009,71,4.358,106,5.851,107,2.188,108,2.793,109,3.754,110,3.754,111,5.341,112,5.095,113,4.039,114,5.095,115,5.095,116,4.912,117,3.233,118,2.419,119,2.089,136,2.089,188,4.083,225,3.754,227,3.754,249,4.499,251,3.852,368,0.588,424,2.454,458,4.083,483,3.754,485,3.754,690,3.112,942,3.754,943,3.754,944,3.754,1035,4.083,1052,3.754,1053,3.754,1136,3.387,1188,4.083,1202,3.754,1204,3.754,1245,3.387,1339,3.754,1340,3.754,1342,3.754,1669,3.754,1670,4.311,1671,4.311,1672,4.311]],["title/properties.html",[384,1.47,1437,2.921]],["body/properties.html",[9,0.378,34,0.013,69,0.012,70,0.012,384,1.91,1601,4.941,1673,6.289,1674,6.289,1675,6.289,1676,6.289,1677,6.289]],["title/miscellaneous/typealiases.html",[1462,2.11,1678,4.841]],["body/miscellaneous/typealiases.html",[22,0.833,34,0.011,36,0.921,69,0.011,70,0.011,73,4.054,74,5.316,80,5.955,84,5.955,91,5.955,93,3.863,94,5.955,255,6.411,258,3.163,302,5.955,833,3.546,1462,3.546,1679,5.638,1680,6.84,1681,6.84,1682,7.656,1683,5.638,1684,6.84,1685,5.638,1686,5.638,1687,5.638]],["title/miscellaneous/variables.html",[1462,2.11,1688,4.215]],["body/miscellaneous/variables.html",[5,0.162,12,2.746,17,3.6,22,0.517,34,0.014,36,0.838,41,3.445,54,3.917,61,2.813,62,3.044,66,2.199,67,2.956,69,0.008,70,0.008,73,2.072,74,3.6,75,3.044,89,3.6,98,2.746,138,0.648,139,1.694,141,2.199,146,3.347,220,1.03,258,1.961,290,2.108,312,3.044,319,3.917,391,1.062,403,1.182,421,3.615,426,1.62,447,1.273,453,2.798,454,2.072,601,1.863,700,3.917,743,3.901,763,2.746,811,6.668,859,2.072,888,3.044,1023,3.044,1024,3.044,1025,3.044,1026,3.044,1027,3.044,1028,3.6,1059,2.746,1081,2.746,1246,2.524,1252,3.917,1374,3.917,1413,3.044,1417,3.917,1420,3.044,1421,3.044,1422,5.518,1423,5.061,1424,4.342,1462,2.199,1467,3.044,1475,5.061,1476,3.044,1688,3.044,1689,4.987,1690,3.496,1691,4.987,1692,5.813,1693,4.987,1694,4.987,1695,3.496,1696,4.987,1697,3.496,1698,5.813,1699,3.496,1700,3.496,1701,4.987,1702,3.496,1703,3.496,1704,3.496,1705,4.987,1706,4.987,1707,4.987,1708,3.496,1709,3.496,1710,3.496,1711,3.496,1712,3.496,1713,4.987,1714,4.987,1715,3.496,1716,4.987,1717,4.987,1718,3.496,1719,3.496,1720,3.496,1721,3.496,1722,3.496,1723,5.813,1724,4.987,1725,4.987,1726,3.496,1727,3.496,1728,3.496,1729,3.496,1730,4.987,1731,3.496,1732,4.987,1733,3.496,1734,4.987,1735,3.496,1736,3.496,1737,3.496,1738,3.496,1739,3.496,1740,3.496,1741,3.496,1742,3.496,1743,3.496,1744,3.496,1745,3.496,1746,3.496]]],"invertedIndex":[["",{"_index":34,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["0.0.1",{"_index":1674,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1454,"title":{},"body":{"dependencies.html":{}}}],["0.1.2",{"_index":1451,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1446,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1445,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1449,"title":{},"body":{"dependencies.html":{}}}],["03",{"_index":996,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["05",{"_index":1151,"title":{},"body":{"classes/Purchase.html":{}}}],["0878",{"_index":623,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["1",{"_index":424,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"overview.html":{}}}],["1/1",{"_index":1415,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":426,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"miscellaneous/variables.html":{}}}],["10/10",{"_index":1428,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1408,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":1713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11/11",{"_index":1419,"title":{},"body":{"coverage.html":{}}}],["12/12",{"_index":1430,"title":{},"body":{"coverage.html":{}}}],["138.75",{"_index":654,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["13t15:41:28.527z",{"_index":1152,"title":{},"body":{"classes/Purchase.html":{}}}],["14/14",{"_index":1411,"title":{},"body":{"coverage.html":{}}}],["151be8d85634",{"_index":1293,"title":{},"body":{"classes/User.html":{}}}],["15m",{"_index":1697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1811c405c0f7",{"_index":1144,"title":{},"body":{"classes/Purchase.html":{}}}],["1e9",{"_index":1728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":653,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["2.1.3",{"_index":1448,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1412,"title":{},"body":{"coverage.html":{}}}],["2022",{"_index":995,"title":{},"body":{"classes/Product.html":{},"classes/Purchase.html":{},"classes/User.html":{},"license.html":{}}}],["25d18b3976a0",{"_index":652,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["26c3fd79",{"_index":787,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["26t15:41:28.527z",{"_index":997,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["2b$10$1xpzuyu8fuvuabb3sc0xzur9dx7kakbmlt0vlnoz.unlntdmfc4lk",{"_index":1294,"title":{},"body":{"classes/User.html":{}}}],["2e651e21b871",{"_index":621,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["3",{"_index":1712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":1456,"title":{},"body":{"dependencies.html":{}}}],["3.14.0",{"_index":1443,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1409,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":1546,"title":{},"body":{"index.html":{}}}],["306e52f9e686",{"_index":786,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["32d0226134e2",{"_index":791,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["3mb",{"_index":1027,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":1450,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":1460,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1418,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":493,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["404",{"_index":504,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["42",{"_index":615,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["4302",{"_index":991,"title":{},"body":{"classes/Product.html":{}}}],["4368",{"_index":1142,"title":{},"body":{"classes/Purchase.html":{}}}],["438c",{"_index":393,"title":{},"body":{"classes/Category.html":{}}}],["44",{"_index":1672,"title":{},"body":{"overview.html":{}}}],["441e",{"_index":1291,"title":{},"body":{"classes/User.html":{}}}],["463b",{"_index":784,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["4646",{"_index":789,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["4688",{"_index":624,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["4889",{"_index":1147,"title":{},"body":{"classes/Purchase.html":{}}}],["49f3",{"_index":619,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["4fce",{"_index":394,"title":{},"body":{"classes/Category.html":{}}}],["4fde",{"_index":650,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["5",{"_index":1136,"title":{},"body":{"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{},"overview.html":{}}}],["5.0.1",{"_index":1444,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":1442,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1431,"title":{},"body":{"coverage.html":{}}}],["541c",{"_index":783,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["5c68ae94",{"_index":648,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["6/6",{"_index":1410,"title":{},"body":{"coverage.html":{}}}],["6f4ca8a4",{"_index":989,"title":{},"body":{"classes/Product.html":{}}}],["7",{"_index":1670,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":1457,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1427,"title":{},"body":{"coverage.html":{}}}],["70.00",{"_index":614,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["7aed",{"_index":1290,"title":{},"body":{"classes/User.html":{}}}],["7b5547f01b0a",{"_index":993,"title":{},"body":{"classes/Product.html":{}}}],["8",{"_index":677,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8'})@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":667,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.0.1",{"_index":1439,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":1441,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":1461,"title":{},"body":{"dependencies.html":{}}}],["8.4.6",{"_index":1438,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1429,"title":{},"body":{"coverage.html":{}}}],["857cd575",{"_index":617,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["8aa0",{"_index":990,"title":{},"body":{"classes/Product.html":{}}}],["8d85",{"_index":395,"title":{},"body":{"classes/Category.html":{}}}],["8fd6",{"_index":785,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["9",{"_index":1671,"title":{},"body":{"overview.html":{}}}],["9/9",{"_index":1432,"title":{},"body":{"coverage.html":{}}}],["90d",{"_index":1700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["949e",{"_index":1143,"title":{},"body":{"classes/Purchase.html":{}}}],["956b",{"_index":618,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["95f273eb70e1",{"_index":1149,"title":{},"body":{"classes/Purchase.html":{}}}],["979e",{"_index":1148,"title":{},"body":{"classes/Purchase.html":{}}}],["9f7f",{"_index":1292,"title":{},"body":{"classes/User.html":{}}}],["a04bb2db",{"_index":1145,"title":{},"body":{"classes/Purchase.html":{}}}],["a287",{"_index":790,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["a75e",{"_index":620,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["abc123456",{"_index":675,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{}}}],["above",{"_index":1634,"title":{},"body":{"license.html":{}}}],["abrir",{"_index":1544,"title":{},"body":{"index.html":{}}}],["ac1b",{"_index":992,"title":{},"body":{"classes/Product.html":{}}}],["ac63",{"_index":625,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["accepts",{"_index":1742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access",{"_index":73,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"guards/RolesGuard.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["accessible",{"_index":1476,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["accessing",{"_index":1248,"title":{},"body":{"guards/RolesGuard.html":{}}}],["accessjwtauthguard",{"_index":1,"title":{"injectables/AccessJwtAuthGuard.html":{}},"body":{"injectables/AccessJwtAuthGuard.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["accessjwtconfig",{"_index":89,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["accessjwtconfig.secret",{"_index":100,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["accessjwtstrategy",{"_index":71,"title":{"injectables/AccessJwtStrategy.html":{}},"body":{"injectables/AccessJwtStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["accesstoken",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginResponse.html":{}}}],["accesstokencontent",{"_index":91,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["accesstokenpayload",{"_index":80,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["acessar",{"_index":1548,"title":{},"body":{"index.html":{}}}],["action",{"_index":1658,"title":{},"body":{"license.html":{}}}],["active",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["add",{"_index":1469,"title":{},"body":{"miscellaneous/functions.html":{}}}],["adddaysfromnow",{"_index":1434,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["adddaysfromnow(days",{"_index":1468,"title":{},"body":{"miscellaneous/functions.html":{}}}],["address",{"_index":658,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["admin",{"_index":411,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["admin.decorator",{"_index":455,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{}}}],["admin.decorator.ts",{"_index":1417,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["admins",{"_index":414,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{}}}],["agent",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["aliases",{"_index":1679,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed",{"_index":1251,"title":{},"body":{"guards/RolesGuard.html":{}}}],["already",{"_index":495,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["alterando",{"_index":1558,"title":{},"body":{"index.html":{}}}],["alvaromrveiga",{"_index":1677,"title":{},"body":{"properties.html":{}}}],["amazing",{"_index":1150,"title":{},"body":{"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["amount",{"_index":601,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["and/or",{"_index":1164,"title":{},"body":{"controllers/PurchaseController.html":{},"license.html":{}}}],["another",{"_index":373,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["apenas",{"_index":1569,"title":{},"body":{"index.html":{}}}],["api",{"_index":1481,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["apioperation",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":757,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["apiproperty({type",{"_index":753,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["apitags",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["apitags('authentication",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('category",{"_index":466,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apitags('product",{"_index":1037,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags('purchase",{"_index":1190,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["apitags('user",{"_index":1324,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":706,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["app.close",{"_index":972,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app_guard",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["application",{"_index":833,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"injectables/PrismaService.html":{},"classes/RefreshTokenDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["appmodule",{"_index":106,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arising",{"_index":1662,"title":{},"body":{"license.html":{}}}],["armazenar",{"_index":1580,"title":{},"body":{"index.html":{}}}],["arquivo",{"_index":1527,"title":{},"body":{"index.html":{}}}],["array",{"_index":1071,"title":{},"body":{"injectables/ProductService.html":{}}}],["asc",{"_index":544,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["associated",{"_index":1615,"title":{},"body":{"license.html":{}}}],["async",{"_index":76,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["autenticação",{"_index":1490,"title":{},"body":{"index.html":{}}}],["auth",{"_index":797,"title":{},"body":{"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidRefreshTokenException.html":{}}}],["auth.controller",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["auth.guard.ts",{"_index":8,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:13",{"_index":29,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["auth.guard.ts:28",{"_index":40,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["auth.service",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/access",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.module",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":135,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":832,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["authenticates",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticating",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":17,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{},"classes/LoginResponse.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":13,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["authguard('access",{"_index":58,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["authmodule",{"_index":111,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1676,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":828,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["authors",{"_index":1652,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":188,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authserviceinputexception",{"_index":367,"title":{"classes/AuthServiceInputException.html":{}},"body":{"classes/AuthServiceInputException.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["autorização",{"_index":1491,"title":{},"body":{"index.html":{}}}],["available",{"_index":510,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["avaliações",{"_index":1489,"title":{},"body":{"index.html":{}}}],["await",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["b01f",{"_index":651,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["b076f72e",{"_index":1140,"title":{},"body":{"classes/Purchase.html":{}}}],["b0e0c99e",{"_index":782,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["backend",{"_index":1480,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":498,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"classes/UserInputExceptionHandler.html":{}}}],["badrequestexception(error.message",{"_index":1337,"title":{},"body":{"classes/UserInputExceptionHandler.html":{}}}],["banco",{"_index":1551,"title":{},"body":{"index.html":{}}}],["bando",{"_index":1565,"title":{},"body":{"index.html":{}}}],["baseprice",{"_index":574,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["bcrypt",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["becomes",{"_index":1095,"title":{},"body":{"injectables/ProductService.html":{}}}],["before",{"_index":963,"title":{},"body":{"injectables/PrismaService.html":{}}}],["being",{"_index":1706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["between",{"_index":1090,"title":{},"body":{"injectables/ProductService.html":{}}}],["bf3e",{"_index":649,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["binary",{"_index":755,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["black",{"_index":612,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["body",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["boilerplate",{"_index":718,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{}}}],["boolean",{"_index":46,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":1426,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":851,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{},"injectables/UserService.html":{}}}],["brand",{"_index":611,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["brand1",{"_index":1094,"title":{},"body":{"injectables/ProductService.html":{}}}],["break",{"_index":922,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["browse",{"_index":1668,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1665,"title":{},"body":{"modules.html":{}}}],["browserinfo",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["c",{"_index":1603,"title":{},"body":{"license.html":{}}}],["calculations",{"_index":585,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["call",{"_index":961,"title":{},"body":{"injectables/PrismaService.html":{}}}],["callback",{"_index":1724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(new",{"_index":1737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":1730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["called",{"_index":841,"title":{},"body":{"classes/LoginResponse.html":{}}}],["callhandler",{"_index":714,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["canactivate",{"_index":24,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":38,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["capitalize",{"_index":517,"title":{},"body":{"injectables/CategoryService.html":{}}}],["capitalizeonlyfirstletter",{"_index":511,"title":{},"body":{"injectables/CategoryService.html":{}}}],["capitalizeonlyfirstletter(name",{"_index":515,"title":{},"body":{"injectables/CategoryService.html":{}}}],["case",{"_index":917,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{}}}],["catcherror",{"_index":720,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["catcherror((error",{"_index":730,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["catches",{"_index":716,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["categorias",{"_index":1503,"title":{},"body":{"index.html":{}}}],["categories",{"_index":419,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"injectables/ProductService.html":{}}}],["categories'})@public()@get",{"_index":417,"title":{},"body":{"controllers/CategoryController.html":{}}}],["categories.dto",{"_index":463,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["categories.dto.ts",{"_index":760,"title":{},"body":{"classes/FindCategoriesDto.html":{},"coverage.html":{}}}],["categories.dto.ts:11",{"_index":762,"title":{},"body":{"classes/FindCategoriesDto.html":{}}}],["categories.dto.ts:20",{"_index":766,"title":{},"body":{"classes/FindCategoriesDto.html":{}}}],["categories.dto.ts:29",{"_index":765,"title":{},"body":{"classes/FindCategoriesDto.html":{}}}],["categories.map((category",{"_index":1125,"title":{},"body":{"injectables/ProductService.html":{}}}],["categoriesconnection",{"_index":1124,"title":{},"body":{"injectables/ProductService.html":{}}}],["categoriestoskip",{"_index":536,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category",{"_index":381,"title":{"classes/Category.html":{}},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category'})@isadmin()@delete(':id')@httpcode(httpstatus.no_content",{"_index":440,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category'})@isadmin()@patch(':id",{"_index":445,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category'})@isadmin()@post",{"_index":412,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category.controller",{"_index":487,"title":{},"body":{"modules/CategoryModule.html":{}}}],["category.dto",{"_index":461,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts",{"_index":562,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:12",{"_index":566,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.service",{"_index":459,"title":{},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{}}}],["categorycontroller",{"_index":398,"title":{"controllers/CategoryController.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"coverage.html":{}}}],["categorymodule",{"_index":112,"title":{"modules/CategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["categoryname",{"_index":534,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{}}}],["categorynameinuseexception",{"_index":488,"title":{"classes/CategoryNameInUseException.html":{}},"body":{"classes/CategoryNameInUseException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["categorynotfoundexception",{"_index":502,"title":{"classes/CategoryNotFoundException.html":{}},"body":{"classes/CategoryNotFoundException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["categoryservice",{"_index":458,"title":{"injectables/CategoryService.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["cd",{"_index":1520,"title":{},"body":{"index.html":{}}}],["chair",{"_index":768,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"injectables/ProductService.html":{}}}],["chair&quot",{"_index":1097,"title":{},"body":{"injectables/ProductService.html":{}}}],["charge",{"_index":1610,"title":{},"body":{"license.html":{}}}],["check",{"_index":14,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/ProductController.html":{}}}],["checks",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"classes/PrismaExceptionHandler.html":{},"guards/RolesGuard.html":{}}}],["claim",{"_index":1655,"title":{},"body":{"license.html":{}}}],["class",{"_index":31,"title":{"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":368,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"overview.html":{}}}],["clientversion",{"_index":893,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["clona",{"_index":1510,"title":{},"body":{"index.html":{}}}],["clone",{"_index":1515,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categorymodule",{"_index":483,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_imports",{"_index":484,"title":{},"body":{"modules/CategoryModule.html":{}}}],["cluster_categorymodule_providers",{"_index":485,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":942,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":943,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":944,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_productmodule",{"_index":1052,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_productmodule_imports",{"_index":1054,"title":{},"body":{"modules/ProductModule.html":{}}}],["cluster_productmodule_providers",{"_index":1053,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_purchasemodule",{"_index":1202,"title":{},"body":{"modules/PurchaseModule.html":{},"overview.html":{}}}],["cluster_purchasemodule_imports",{"_index":1203,"title":{},"body":{"modules/PurchaseModule.html":{}}}],["cluster_purchasemodule_providers",{"_index":1204,"title":{},"body":{"modules/PurchaseModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1339,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1340,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1341,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1342,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["codes",{"_index":819,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["colocou",{"_index":1561,"title":{},"body":{"index.html":{}}}],["com",{"_index":1482,"title":{},"body":{"index.html":{}}}],["comment",{"_index":1133,"title":{},"body":{"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["commerce",{"_index":1479,"title":{},"body":{"index.html":{}}}],["compare",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["compare(currentpassword",{"_index":1396,"title":{},"body":{"injectables/UserService.html":{}}}],["compare(password",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["compared",{"_index":1360,"title":{},"body":{"injectables/UserService.html":{}}}],["compares",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["compodoc",{"_index":1493,"title":{},"body":{"index.html":{}}}],["compras",{"_index":1488,"title":{},"body":{"index.html":{}}}],["compromised",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["conditions",{"_index":1633,"title":{},"body":{"license.html":{}}}],["configuration",{"_index":75,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["configurations",{"_index":1698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connect",{"_index":968,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/ProductService.html":{}}}],["connectcategoriesbyid",{"_index":1064,"title":{},"body":{"injectables/ProductService.html":{}}}],["connectcategoriesbyid(categories",{"_index":1069,"title":{},"body":{"injectables/ProductService.html":{}}}],["connecting",{"_index":949,"title":{},"body":{"injectables/PrismaService.html":{}}}],["connection",{"_index":1663,"title":{},"body":{"license.html":{}}}],["considering",{"_index":582,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["const",{"_index":61,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":1714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constructor",{"_index":25,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{}}}],["constructor(filetypes",{"_index":740,"title":{},"body":{"classes/FileTypeError.html":{}}}],["constructor(message",{"_index":377,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["constructor(prisma",{"_index":513,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":59,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(reflector",{"_index":26,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["constructor(userservice",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["construir",{"_index":1578,"title":{},"body":{"index.html":{}}}],["consult",{"_index":1707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contain",{"_index":669,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["containing",{"_index":763,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"miscellaneous/variables.html":{}}}],["contains",{"_index":540,"title":{},"body":{"injectables/CategoryService.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{}}}],["content",{"_index":94,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["content.ts",{"_index":1681,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["context",{"_index":44,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":65,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":64,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":1255,"title":{},"body":{"guards/RolesGuard.html":{}}}],["contract",{"_index":1659,"title":{},"body":{"license.html":{}}}],["controller",{"_index":134,"title":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('category",{"_index":467,"title":{},"body":{"controllers/CategoryController.html":{}}}],["controller('product",{"_index":1038,"title":{},"body":{"controllers/ProductController.html":{}}}],["controller('purchase",{"_index":1191,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["controller('user",{"_index":1325,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["copies",{"_index":1628,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1613,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1602,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":1404,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":403,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":1039,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["create(createcategorydto",{"_index":409,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["create(createproductdto",{"_index":1002,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["create(createuserdto",{"_index":1299,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(request",{"_index":1157,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["create(userid",{"_index":1209,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["createcategorydto",{"_index":410,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["createdat",{"_index":610,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{}}}],["createproductdto",{"_index":570,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["createpurchasedto",{"_index":627,"title":{"classes/CreatePurchaseDto.html":{}},"body":{"classes/CreatePurchaseDto.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["createrefreshtoken",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["createrefreshtoken(payload",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["creates",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":655,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email.tolowercase",{"_index":1382,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.password",{"_index":1379,"title":{},"body":{"injectables/UserService.html":{}}}],["credentials.dto",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":831,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:11",{"_index":835,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["credentials.dto.ts:19",{"_index":836,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["criação",{"_index":1484,"title":{},"body":{"index.html":{}}}],["crie",{"_index":1525,"title":{},"body":{"index.html":{}}}],["crud",{"_index":402,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["currency.js",{"_index":587,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["current",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"classes/DeleteUserDto.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["currentpassword",{"_index":685,"title":{},"body":{"classes/DeleteUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["customdecorator",{"_index":1709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["código",{"_index":1599,"title":{},"body":{"index.html":{}}}],["códigos",{"_index":1590,"title":{},"body":{"index.html":{}}}],["d31fc56c",{"_index":1289,"title":{},"body":{"classes/User.html":{}}}],["dados",{"_index":1552,"title":{},"body":{"index.html":{}}}],["damages",{"_index":1656,"title":{},"body":{"license.html":{}}}],["data",{"_index":83,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["database",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["date",{"_index":976,"title":{},"body":{"classes/Product.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["date.now",{"_index":1726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datestring",{"_index":978,"title":{},"body":{"classes/Product.html":{},"classes/Purchase.html":{},"classes/User.html":{}}}],["days",{"_index":1470,"title":{},"body":{"miscellaneous/functions.html":{}}}],["db3d22db270a",{"_index":396,"title":{},"body":{"classes/Category.html":{}}}],["de",{"_index":1485,"title":{},"body":{"index.html":{}}}],["deal",{"_index":1617,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1664,"title":{},"body":{"license.html":{}}}],["decimal",{"_index":578,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["decoration",{"_index":397,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{}}}],["decorator",{"_index":42,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["decorators",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["decorators/is",{"_index":1253,"title":{},"body":{"guards/RolesGuard.html":{}}}],["decrypted",{"_index":84,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["default",{"_index":421,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":597,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/User.html":{}}}],["defined",{"_index":28,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{}}}],["delete",{"_index":450,"title":{},"body":{"controllers/CategoryController.html":{},"classes/DeleteUserDto.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(':id",{"_index":479,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["deletes",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["deleteuserdto",{"_index":683,"title":{"classes/DeleteUserDto.html":{}},"body":{"classes/DeleteUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["deleteuserdto.currentpassword",{"_index":1391,"title":{},"body":{"injectables/UserService.html":{}}}],["dependencies",{"_index":108,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":32,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dependências",{"_index":1523,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1225,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["describes",{"_index":383,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{}}}],["description",{"_index":9,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"properties.html":{}}}],["descritas",{"_index":1532,"title":{},"body":{"index.html":{}}}],["desenvolvimento",{"_index":1542,"title":{},"body":{"index.html":{}}}],["destination",{"_index":1721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["detection",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["discount",{"_index":595,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["discountpercentage",{"_index":575,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["discounts",{"_index":583,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["diskstorage",{"_index":1720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distribute",{"_index":1625,"title":{},"body":{"license.html":{}}}],["docs",{"_index":1029,"title":{},"body":{"controllers/ProductController.html":{}}}],["documentation",{"_index":1405,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["documentação",{"_index":1492,"title":{},"body":{"index.html":{}}}],["doe",{"_index":680,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["doesn't",{"_index":1372,"title":{},"body":{"injectables/UserService.html":{}}}],["dos",{"_index":1586,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":460,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/delete",{"_index":1318,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/find",{"_index":462,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["dto/login",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/login.response",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/logout.dto",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/refresh",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/review",{"_index":1187,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["dto/update",{"_index":464,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e",{"_index":661,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"index.html":{}}}],["e3ecf4939a89",{"_index":626,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["e6cf9a58",{"_index":392,"title":{},"body":{"classes/Category.html":{}}}],["ecommerce",{"_index":1521,"title":{},"body":{"index.html":{}}}],["em",{"_index":1540,"title":{},"body":{"index.html":{}}}],["email",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/LoginCredentialsDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PurchaseService.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["email.tolowercase",{"_index":1385,"title":{},"body":{"injectables/UserService.html":{}}}],["emailinuseexception",{"_index":687,"title":{"classes/EmailInUseException.html":{}},"body":{"classes/EmailInUseException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["enableshutdownhooks",{"_index":952,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":954,"title":{},"body":{"injectables/PrismaService.html":{}}}],["endpoint",{"_index":1475,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["enter",{"_index":854,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["entities/category.entity",{"_index":465,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{}}}],["entities/product.entity",{"_index":608,"title":{},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["entities/purchase.entity",{"_index":644,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{}}}],["entities/user",{"_index":1321,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entities/user.entity",{"_index":673,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":1399,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["entra",{"_index":1517,"title":{},"body":{"index.html":{}}}],["entrada",{"_index":1585,"title":{},"body":{"index.html":{}}}],["enum",{"_index":905,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"dependencies.html":{},"index.html":{}}}],["env",{"_index":1528,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":1533,"title":{},"body":{"index.html":{}}}],["env.test",{"_index":1557,"title":{},"body":{"index.html":{}}}],["equals",{"_index":1224,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["error",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"dependencies.html":{},"index.html":{}}}],["error.clientversion",{"_index":932,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.code",{"_index":916,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message",{"_index":931,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.category",{"_index":936,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product",{"_index":935,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product.create",{"_index":940,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product.delete",{"_index":939,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product.update",{"_index":938,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.purchase",{"_index":941,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.user",{"_index":937,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["errormeta",{"_index":890,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["errors",{"_index":708,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["erros",{"_index":707,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"index.html":{}}}],["eslint",{"_index":1595,"title":{},"body":{"index.html":{}}}],["event",{"_index":1651,"title":{},"body":{"license.html":{}}}],["example",{"_index":391,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["exception",{"_index":374,"title":{},"body":{"classes/AuthServiceInputException.html":{},"interfaces/ExceptionHandler.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["exception.handler",{"_index":723,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["exception.handler.ts",{"_index":808,"title":{},"body":{"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["exception.handler.ts:108",{"_index":883,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:118",{"_index":903,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:12",{"_index":815,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["exception.handler.ts:123",{"_index":897,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:131",{"_index":886,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:136",{"_index":879,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:141",{"_index":901,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:19",{"_index":876,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["exception.handler.ts:21",{"_index":820,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["exception.handler.ts:28",{"_index":822,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["exception.handler.ts:87",{"_index":892,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:92",{"_index":889,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:97",{"_index":899,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exceptionhandler",{"_index":691,"title":{"interfaces/ExceptionHandler.html":{}},"body":{"interfaces/ExceptionHandler.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["exceptioninterceptor",{"_index":702,"title":{"injectables/ExceptionInterceptor.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"coverage.html":{}}}],["exceptions/invalid",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["exceptions/missing",{"_index":1377,"title":{},"body":{"injectables/UserService.html":{}}}],["exceptions/not",{"_index":1219,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["exceções",{"_index":1592,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":39,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{}}}],["exemplo",{"_index":1562,"title":{},"body":{"index.html":{}}}],["exists",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiration",{"_index":1472,"title":{},"body":{"miscellaneous/functions.html":{}}}],["expiresat",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":1696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":56,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}}}],["exports",{"_index":946,"title":{},"body":{"modules/PrismaModule.html":{},"modules/UserModule.html":{}}}],["exposes",{"_index":401,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["express",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"modules/ProductModule.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"dependencies.html":{},"index.html":{},"license.html":{}}}],["express.multer.file",{"_index":752,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["expression",{"_index":1746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extend",{"_index":372,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["extends",{"_index":57,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"classes/AuthServiceInputException.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"injectables/PrismaService.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}}}],["extname",{"_index":1734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":87,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":96,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjzdwiioii5nwfkmznhns0wyjk4ltq2odytyjfmms1hmtkwnzm0nwjmyzcilcjpyxqioje2ndg0nzu3mzesimv4cci6mty0odq3njyzmx0.h3z3jdvhoi6y5c_n0kt6tdp2nwk_dhbzxioqn7vanno",{"_index":844,"title":{},"body":{"classes/LoginResponse.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjzdwiioiixmjm0nty3odkwiiwibmftzsi6ikpvag4grg9liiwiawf0ijoxnte2mjm5mdiyfq.sflkxwrjsmekkf2qt4fwpmejf36pok6yjv_adqssw5c",{"_index":845,"title":{},"body":{"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{}}}],["f5bd",{"_index":788,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["f70b",{"_index":1141,"title":{},"body":{"classes/Purchase.html":{}}}],["fa244865",{"_index":622,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["false",{"_index":98,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["family",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["features",{"_index":1497,"title":{},"body":{"index.html":{}}}],["fecd",{"_index":1146,"title":{},"body":{"classes/Purchase.html":{}}}],["field",{"_index":884,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserWithoutPassword.html":{}}}],["fields",{"_index":563,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["file.filename",{"_index":1108,"title":{},"body":{"injectables/ProductService.html":{}}}],["file.originalname",{"_index":1729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filefilter",{"_index":1731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filename",{"_index":1723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":1616,"title":{},"body":{"license.html":{}}}],["filesize",{"_index":1740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filetypeerror",{"_index":734,"title":{"classes/FileTypeError.html":{}},"body":{"classes/FileTypeError.html":{},"coverage.html":{}}}],["filetypeerror(validimageuploadtypesregex",{"_index":1738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filetypes",{"_index":746,"title":{},"body":{"classes/FileTypeError.html":{}}}],["fileupload",{"_index":1031,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["fileuploaddto",{"_index":749,"title":{"classes/FileUploadDto.html":{}},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["find",{"_index":435,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["findall",{"_index":404,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["findall(@query",{"_index":1041,"title":{},"body":{"controllers/ProductController.html":{}}}],["findall(findallproductsdto",{"_index":1005,"title":{},"body":{"controllers/ProductController.html":{}}}],["findall(findcategoriesdto",{"_index":415,"title":{},"body":{"controllers/CategoryController.html":{}}}],["findall(findpurchasesdto",{"_index":1161,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["findall(undefined",{"_index":521,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["findallmine",{"_index":1155,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["findallmine(request",{"_index":1166,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["findallproductsdto",{"_index":1008,"title":{},"body":{"controllers/ProductController.html":{}}}],["findalltokens",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["findalltokens(@req",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["findalltokens(request",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["findalltokens(userid",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["findbyemail",{"_index":1347,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyemail(email",{"_index":1352,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid",{"_index":1297,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findbyid(@req",{"_index":1327,"title":{},"body":{"controllers/UserController.html":{}}}],["findbyid(id",{"_index":1356,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(request",{"_index":1302,"title":{},"body":{"controllers/UserController.html":{}}}],["findcategoriesdto",{"_index":416,"title":{"classes/FindCategoriesDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"coverage.html":{}}}],["findone",{"_index":1156,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["findone(purchaseid",{"_index":1212,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["findone(request",{"_index":1169,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["findonebyid",{"_index":405,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyid(@param('id",{"_index":1043,"title":{},"body":{"controllers/ProductController.html":{}}}],["findonebyid(id",{"_index":430,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyname",{"_index":406,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["findonebyname(name",{"_index":436,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["findonebyurlname",{"_index":1000,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyurlname(@param('urlname",{"_index":1046,"title":{},"body":{"controllers/ProductController.html":{}}}],["findonebyurlname(urlname",{"_index":1011,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findproductsdto",{"_index":431,"title":{"classes/FindProductsDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["findpurchasesdto",{"_index":774,"title":{"classes/FindPurchasesDto.html":{}},"body":{"classes/FindPurchasesDto.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"coverage.html":{}}}],["findpurchasesdto.userid",{"_index":1195,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["finds",{"_index":1354,"title":{},"body":{"injectables/UserService.html":{}}}],["fire",{"_index":965,"title":{},"body":{"injectables/PrismaService.html":{}}}],["first",{"_index":518,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/PrismaService.html":{}}}],["fitness",{"_index":1647,"title":{},"body":{"license.html":{}}}],["following",{"_index":745,"title":{},"body":{"classes/FileTypeError.html":{},"license.html":{}}}],["forgot",{"_index":1365,"title":{},"body":{"injectables/UserService.html":{}}}],["format",{"_index":754,"title":{},"body":{"classes/FileUploadDto.html":{},"injectables/ProductService.html":{}}}],["formatação",{"_index":1598,"title":{},"body":{"index.html":{}}}],["formats",{"_index":531,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["formaturlname",{"_index":1065,"title":{},"body":{"injectables/ProductService.html":{}}}],["formaturlname(name",{"_index":1078,"title":{},"body":{"injectables/ProductService.html":{}}}],["found",{"_index":507,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["found.exception",{"_index":907,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["found.exception.ts",{"_index":503,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["found.exception.ts:6",{"_index":506,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["free",{"_index":1609,"title":{},"body":{"license.html":{}}}],["function",{"_index":698,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"coverage.html":{}}}],["functions",{"_index":1463,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1631,"title":{},"body":{"license.html":{}}}],["generate",{"_index":1080,"title":{},"body":{"injectables/ProductService.html":{}}}],["generateaccesstoken",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateaccesstoken(payload",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["generates",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('/admin",{"_index":1193,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["get('/id/:id",{"_index":471,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{}}}],["get(':id",{"_index":1196,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["get(':name",{"_index":474,"title":{},"body":{"controllers/CategoryController.html":{}}}],["get(':urlname",{"_index":1045,"title":{},"body":{"controllers/ProductController.html":{}}}],["get('tokens",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["gets",{"_index":432,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["getting",{"_index":1477,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettokenexpirationdate",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["git",{"_index":1514,"title":{},"body":{"index.html":{}}}],["github",{"_index":1494,"title":{},"body":{"index.html":{}}}],["global",{"_index":1702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["granted",{"_index":1608,"title":{},"body":{"license.html":{}}}],["guard",{"_index":1245,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":20,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["handle",{"_index":695,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{}}}],["handle(error",{"_index":696,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["handled",{"_index":586,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["handlers",{"_index":694,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["handlers/jwt",{"_index":722,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["handlers/prisma",{"_index":725,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["handlers/user",{"_index":727,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["happened",{"_index":881,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["hash",{"_index":1373,"title":{},"body":{"injectables/UserService.html":{}}}],["hashconfig",{"_index":1374,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hashconfig.saltrounds",{"_index":1380,"title":{},"body":{"injectables/UserService.html":{}}}],["hashed",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["hashedpassword",{"_index":1378,"title":{},"body":{"injectables/UserService.html":{}}}],["hashes",{"_index":1703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashifupdatingpassword",{"_index":1348,"title":{},"body":{"injectables/UserService.html":{}}}],["hashifupdatingpassword(id",{"_index":1361,"title":{},"body":{"injectables/UserService.html":{}}}],["hashs",{"_index":1587,"title":{},"body":{"index.html":{}}}],["here",{"_index":1259,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["hereby",{"_index":1607,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1653,"title":{},"body":{"license.html":{}}}],["hooks",{"_index":964,"title":{},"body":{"injectables/PrismaService.html":{}}}],["http",{"_index":491,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{}}}],["http://localhost:3000/api",{"_index":1549,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":480,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://auth0.com/docs/secure/tokens/refresh",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://docs.nestjs.com/guards",{"_index":21,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["https://docs.nestjs.com/interceptors",{"_index":710,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["https://docs.nestjs.com/recipes/prisma",{"_index":950,"title":{},"body":{"injectables/PrismaService.html":{}}}],["https://github.com/alvaromrveiga/ecommerce",{"_index":1516,"title":{},"body":{"index.html":{}}}],["https://www.npmjs.com/package/jsonwebtoken#errors",{"_index":818,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["httpstatus",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["hyphens",{"_index":1092,"title":{},"body":{"injectables/ProductService.html":{}}}],["id",{"_index":386,"title":{},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{}}}],["id'})@apibearerauth()@get(':id",{"_index":1171,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["id'})@isadmin()@get('/id/:id",{"_index":1009,"title":{},"body":{"controllers/ProductController.html":{}}}],["identificar",{"_index":1589,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":1406,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":590,"title":{},"body":{"classes/CreateProductDto.html":{},"injectables/ProductService.html":{}}}],["ignoreexpiration",{"_index":97,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["image",{"_index":1716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image.jpg",{"_index":994,"title":{},"body":{"classes/Product.html":{}}}],["imagens",{"_index":1502,"title":{},"body":{"index.html":{}}}],["implements",{"_index":385,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{}}}],["implied",{"_index":1643,"title":{},"body":{"license.html":{}}}],["import",{"_index":49,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{}}}],["imports",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}}}],["include",{"_index":548,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["included",{"_index":1637,"title":{},"body":{"license.html":{}}}],["including",{"_index":1619,"title":{},"body":{"license.html":{}}}],["index",{"_index":22,"title":{"index.html":{}},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":955,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}}}],["information",{"_index":447,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["informações",{"_index":1531,"title":{},"body":{"index.html":{}}}],["inicia",{"_index":1539,"title":{},"body":{"index.html":{}}}],["iniciar",{"_index":1534,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["input",{"_index":728,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["input.exception",{"_index":747,"title":{},"body":{"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/UserInputExceptionHandler.html":{}}}],["input.exception.ts",{"_index":371,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["input.exception.ts:5",{"_index":378,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["inputs",{"_index":494,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["inputted",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["insensitive",{"_index":542,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["instala",{"_index":1522,"title":{},"body":{"index.html":{}}}],["instalado",{"_index":1509,"title":{},"body":{"index.html":{}}}],["instalação",{"_index":1498,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":376,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{}}}],["instantiate",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["instantiates",{"_index":30,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{}}}],["integração",{"_index":1572,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":711,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["intercept(context",{"_index":712,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interceptor",{"_index":704,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interceptors",{"_index":709,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interface",{"_index":690,"title":{"interfaces/ExceptionHandler.html":{}},"body":{"interfaces/ExceptionHandler.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":692,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["interferes",{"_index":957,"title":{},"body":{"injectables/PrismaService.html":{}}}],["invalid",{"_index":737,"title":{},"body":{"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{}}}],["invalidemailorpasswordexception",{"_index":328,"title":{"classes/InvalidEmailOrPasswordException.html":{}},"body":{"injectables/AuthService.html":{},"classes/InvalidEmailOrPasswordException.html":{},"coverage.html":{}}}],["invalidpasswordupdateexception",{"_index":799,"title":{"classes/InvalidPasswordUpdateException.html":{}},"body":{"classes/InvalidPasswordUpdateException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["invalidrefreshtokenexception",{"_index":331,"title":{"classes/InvalidRefreshTokenException.html":{}},"body":{"injectables/AuthService.html":{},"classes/InvalidRefreshTokenException.html":{},"coverage.html":{}}}],["is_admin_key",{"_index":1252,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["is_public_key",{"_index":54,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isadmin",{"_index":453,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["isarray",{"_index":604,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["iscategoryerror",{"_index":867,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscategoryerror(error",{"_index":877,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscategorynameconstraintviolation",{"_index":868,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscategorynameconstraintviolation(error",{"_index":882,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscorrectpassword",{"_index":1395,"title":{},"body":{"injectables/UserService.html":{}}}],["iscreateproducterror",{"_index":869,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscreateproducterror(error",{"_index":885,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isemail",{"_index":671,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserRoleDto.html":{}}}],["isemail({message",{"_index":660,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemailconstraintviolation",{"_index":870,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isemailconstraintviolation(errormeta",{"_index":887,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isenum",{"_index":1277,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["isenum(role",{"_index":1275,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["isint",{"_index":605,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/ReviewPurchaseDto.html":{}}}],["isint()@isoptional",{"_index":599,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isint()@min(1)@max(5",{"_index":1237,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["isjwt",{"_index":847,"title":{},"body":{"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{}}}],["isjwtexception",{"_index":810,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["isjwtexception(error",{"_index":821,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["isnotempty",{"_index":567,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty()@isstring",{"_index":834,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["isnumber",{"_index":606,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{}}}],["isnumber()@isnotempty",{"_index":579,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isnumber()@isoptional",{"_index":593,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isnumber()@ispositive",{"_index":638,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["isnumber()@ispositive()@isoptional",{"_index":633,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["isoptional",{"_index":607,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isarray",{"_index":588,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isoptional()@isstring",{"_index":761,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["isoptional()@type(undefined)@isint()@ispositive",{"_index":764,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["ispasswordvalid",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispositive",{"_index":642,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["isprismaunknownerror",{"_index":871,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isprismaunknownerror(error",{"_index":891,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproducterror",{"_index":872,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproducterror(error",{"_index":896,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproductnameconstraintviolation",{"_index":873,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproductnameconstraintviolation(error",{"_index":898,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["ispublic",{"_index":62,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["ispurchaseerror",{"_index":874,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["ispurchaseerror(error",{"_index":900,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isrefreshtokenvalid",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["isrefreshtokenvalid.length",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":568,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":565,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/DeleteUserDto.html":{}}}],["isstring()@isnotempty()@isoptional",{"_index":1268,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isstring()@isoptional",{"_index":591,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/ReviewPurchaseDto.html":{}}}],["isstring()@minlength(8",{"_index":665,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isusererror",{"_index":875,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isusererror(error",{"_index":902,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isuuid",{"_index":643,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["isuuid(4",{"_index":636,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["it's",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["jest",{"_index":1593,"title":{},"body":{"index.html":{}}}],["john",{"_index":679,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["join",{"_index":1122,"title":{},"body":{"injectables/ProductService.html":{}}}],["jpeg",{"_index":1023,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["jpeg|jpg|png",{"_index":1744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jpg",{"_index":1024,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["json",{"_index":1581,"title":{},"body":{"index.html":{}}}],["jsonwebtoken",{"_index":74,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"classes/JwtExceptionHandler.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["jsonwebtokenerror",{"_index":813,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["jwt",{"_index":7,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginResponse.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.strategy",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt.strategy.ts",{"_index":72,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"coverage.html":{}}}],["jwt.strategy.ts:13",{"_index":78,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["jwt.strategy.ts:24",{"_index":81,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["jwtauthguard",{"_index":1708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwterror",{"_index":824,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["jwterrornames",{"_index":809,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["jwtexceptionhandler",{"_index":721,"title":{"classes/JwtExceptionHandler.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"coverage.html":{}}}],["jwtexceptionhandler().handle(error",{"_index":733,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["jwtfromrequest",{"_index":95,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["jwtmodule",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwts",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtservice",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtsignoptions",{"_index":1693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kind",{"_index":1642,"title":{},"body":{"license.html":{}}}],["language']}`.replace",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["lazily",{"_index":969,"title":{},"body":{"injectables/PrismaService.html":{}}}],["leading",{"_index":1083,"title":{},"body":{"injectables/ProductService.html":{}}}],["leave",{"_index":967,"title":{},"body":{"injectables/PrismaService.html":{}}}],["length",{"_index":666,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letter",{"_index":519,"title":{},"body":{"injectables/CategoryService.html":{},"classes/CreateUserDto.html":{}}}],["liability",{"_index":1657,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1654,"title":{},"body":{"license.html":{}}}],["library",{"_index":12,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["license",{"_index":1601,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["licença",{"_index":1500,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":1620,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1644,"title":{},"body":{"license.html":{}}}],["limits",{"_index":1739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linting",{"_index":1597,"title":{},"body":{"index.html":{}}}],["listens",{"_index":958,"title":{},"body":{"injectables/PrismaService.html":{}}}],["literal",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/typealiases.html":{}}}],["logged",{"_index":1160,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["login",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/LoginResponse.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["login(email",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(undefined",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["logincredentialsdto",{"_index":155,"title":{"classes/LoginCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["loginresponse",{"_index":192,"title":{"classes/LoginResponse.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"coverage.html":{}}}],["logout",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{}}}],["logout(@body",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(refreshtoken",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout(undefined",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["logoutall",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logoutall(@req",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["logoutall(request",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["logoutall(userid",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["logoutdto",{"_index":161,"title":{"classes/LogoutDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LogoutDto.html":{},"coverage.html":{}}}],["logs",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["lower",{"_index":1082,"title":{},"body":{"injectables/ProductService.html":{}}}],["lowercaseemail",{"_index":1381,"title":{},"body":{"injectables/UserService.html":{}}}],["lowercaseurlname",{"_index":1114,"title":{},"body":{"injectables/ProductService.html":{}}}],["lowercaseurlname.trim",{"_index":1117,"title":{},"body":{"injectables/ProductService.html":{}}}],["lvaro",{"_index":1604,"title":{},"body":{"license.html":{}}}],["mail",{"_index":662,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{}}}],["mainly",{"_index":1355,"title":{},"body":{"injectables/UserService.html":{}}}],["make",{"_index":375,"title":{},"body":{"classes/AuthServiceInputException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["makes",{"_index":1081,"title":{},"body":{"injectables/ProductService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["making",{"_index":894,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["managing",{"_index":509,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["matches",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":678,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":70,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.round(math.random",{"_index":1727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["max",{"_index":1240,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["max(5",{"_index":1244,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["maximageuploadsize",{"_index":1423,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":1026,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["merchantability",{"_index":1646,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1623,"title":{},"body":{"license.html":{}}}],["message",{"_index":379,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{}}}],["metadata",{"_index":1453,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":23,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{}}}],["migrate:dev",{"_index":1538,"title":{},"body":{"index.html":{}}}],["migrate:test",{"_index":1566,"title":{},"body":{"index.html":{}}}],["migrations",{"_index":1537,"title":{},"body":{"index.html":{}}}],["mimetype",{"_index":1732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["min",{"_index":1241,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["min(1",{"_index":1243,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["minimizar",{"_index":1577,"title":{},"body":{"index.html":{}}}],["minlength",{"_index":672,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":676,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1462,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missingpasswordupdateexception",{"_index":849,"title":{"classes/MissingPasswordUpdateException.html":{}},"body":{"classes/MissingPasswordUpdateException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["mit",{"_index":1600,"title":{},"body":{"index.html":{},"license.html":{}}}],["mode",{"_index":541,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["models/category/category.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["models/product/product.module",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["models/purchase/purchase.module",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["models/user/user.module",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["modify",{"_index":1622,"title":{},"body":{"license.html":{}}}],["modo",{"_index":1541,"title":{},"body":{"index.html":{}}}],["module",{"_index":105,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":107,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":18,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{}}}],["ms",{"_index":1447,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["multer",{"_index":1741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multermodule",{"_index":1057,"title":{},"body":{"modules/ProductModule.html":{}}}],["multermodule.register(multeruploadconfig",{"_index":1061,"title":{},"body":{"modules/ProductModule.html":{}}}],["multeroptions",{"_index":1718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multeruploadconfig",{"_index":1028,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["multiple",{"_index":1089,"title":{},"body":{"injectables/ProductService.html":{}}}],["multiplied",{"_index":641,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["máquina",{"_index":1513,"title":{},"body":{"index.html":{}}}],["mínimo",{"_index":1559,"title":{},"body":{"index.html":{}}}],["na",{"_index":1518,"title":{},"body":{"index.html":{}}}],["name",{"_index":35,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["name.substring(1).tolocalelowercase",{"_index":559,"title":{},"body":{"injectables/CategoryService.html":{}}}],["name.tolocalelowercase",{"_index":1115,"title":{},"body":{"injectables/ProductService.html":{}}}],["name[0].touppercase",{"_index":558,"title":{},"body":{"injectables/CategoryService.html":{}}}],["names",{"_index":817,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["ndice",{"_index":1496,"title":{},"body":{"index.html":{}}}],["need",{"_index":43,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["needed",{"_index":564,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserRoleDto.html":{}}}],["needs",{"_index":16,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/ProductController.html":{}}}],["nestinterceptor",{"_index":719,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["nestjs",{"_index":19,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"index.html":{}}}],["nestjs/common",{"_index":50,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":51,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"modules/AppModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1440,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":52,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1058,"title":{},"body":{"modules/ProductModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/FileUploadDto.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserWithoutPassword.html":{},"dependencies.html":{}}}],["new",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/JwtExceptionHandler.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newrefreshtoken",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":713,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["next.handle().pipe",{"_index":729,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["node.js",{"_index":1508,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":1650,"title":{},"body":{"license.html":{}}}],["normal",{"_index":1173,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["nos",{"_index":1584,"title":{},"body":{"index.html":{}}}],["notbeforeerror",{"_index":814,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["note",{"_index":1135,"title":{},"body":{"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["notfoundexception",{"_index":505,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{}}}],["notfoundexception(error.message",{"_index":1338,"title":{},"body":{"classes/UserInputExceptionHandler.html":{}}}],["notice",{"_index":1635,"title":{},"body":{"license.html":{}}}],["notpurchaseownerexception",{"_index":856,"title":{"classes/NotPurchaseOwnerException.html":{}},"body":{"classes/NotPurchaseOwnerException.html":{},"injectables/PurchaseService.html":{},"coverage.html":{}}}],["number",{"_index":577,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{},"miscellaneous/functions.html":{}}}],["o",{"_index":1507,"title":{},"body":{"index.html":{}}}],["object",{"_index":888,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"miscellaneous/variables.html":{}}}],["object.values(error.meta)[0][0",{"_index":934,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["object.values(errormeta)[0][0",{"_index":933,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["observable",{"_index":48,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{}}}],["obtaining",{"_index":1612,"title":{},"body":{"license.html":{}}}],["offices",{"_index":616,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["offset",{"_index":535,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["old",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["omitting",{"_index":1401,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["omittype",{"_index":602,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/UserWithoutPassword.html":{}}}],["omittype(product",{"_index":609,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["omittype(purchase",{"_index":645,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["omittype(user",{"_index":1403,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["once",{"_index":1474,"title":{},"body":{"miscellaneous/functions.html":{}}}],["one",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["onmoduleinit",{"_index":953,"title":{},"body":{"injectables/PrismaService.html":{}}}],["optional",{"_index":37,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"miscellaneous/functions.html":{}}}],["orderby",{"_index":543,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["ordering",{"_index":429,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["orm",{"_index":866,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{}}}],["os",{"_index":1555,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":1661,"title":{},"body":{"license.html":{}}}],["out",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":1669,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":1181,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["owner.exception",{"_index":1220,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["owner.exception.ts",{"_index":858,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"coverage.html":{}}}],["owner.exception.ts:4",{"_index":863,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{}}}],["package",{"_index":1437,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":423,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["pages",{"_index":1495,"title":{},"body":{"index.html":{}}}],["pagination",{"_index":420,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["para",{"_index":1483,"title":{},"body":{"index.html":{}}}],["param",{"_index":449,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["param('id",{"_index":472,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["param('name",{"_index":475,"title":{},"body":{"controllers/CategoryController.html":{}}}],["parameters",{"_index":33,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"miscellaneous/functions.html":{}}}],["partial",{"_index":1258,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype",{"_index":1260,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createcategorydto",{"_index":1261,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["partialtype(createproductdto",{"_index":1263,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createpurchasedto",{"_index":1265,"title":{},"body":{"classes/UpdatePurchaseDto.html":{}}}],["partialtype(createuserdto",{"_index":1271,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["particular",{"_index":1648,"title":{},"body":{"license.html":{}}}],["passport",{"_index":11,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["passportmodule",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":86,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["password",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["password.entity",{"_index":1322,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["password.entity.ts",{"_index":1398,"title":{},"body":{"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["password.exception",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["password.exception..ts",{"_index":793,"title":{},"body":{"classes/InvalidEmailOrPasswordException.html":{},"coverage.html":{}}}],["password.exception..ts:6",{"_index":796,"title":{},"body":{"classes/InvalidEmailOrPasswordException.html":{}}}],["pasta",{"_index":1519,"title":{},"body":{"index.html":{}}}],["patch",{"_index":448,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["patch('/review/:id",{"_index":1198,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["patch(':id",{"_index":477,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["patch('picture/:id",{"_index":1048,"title":{},"body":{"controllers/ProductController.html":{}}}],["patch('role",{"_index":1331,"title":{},"body":{"controllers/UserController.html":{}}}],["path.extname(file.originalname).tolowercase",{"_index":1736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payed",{"_index":640,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["payload",{"_index":85,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{}}}],["payload.sub",{"_index":102,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{}}}],["payload.tokenfamily",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.ts",{"_index":1682,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["payload.userrole",{"_index":104,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["per",{"_index":427,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreatePurchaseDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["percentage",{"_index":596,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["permission",{"_index":1606,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1629,"title":{},"body":{"license.html":{}}}],["person",{"_index":1611,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1630,"title":{},"body":{"license.html":{}}}],["picktype",{"_index":1239,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["picktype(purchase",{"_index":1242,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["picture",{"_index":551,"title":{},"body":{"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"miscellaneous/functions.html":{}}}],["picture'})@isadmin()@fileupload()@patch('picture/:id",{"_index":1021,"title":{},"body":{"controllers/ProductController.html":{}}}],["picture.png",{"_index":758,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["please",{"_index":853,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["png",{"_index":1025,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["pode",{"_index":1547,"title":{},"body":{"index.html":{}}}],["porta",{"_index":1545,"title":{},"body":{"index.html":{}}}],["portions",{"_index":1639,"title":{},"body":{"license.html":{}}}],["possible",{"_index":816,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["post",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["post('login",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logoutall",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgresql",{"_index":1579,"title":{},"body":{"index.html":{}}}],["postgresql://username:password@localhost:5432/ecommerce",{"_index":1563,"title":{},"body":{"index.html":{}}}],["precisar",{"_index":1505,"title":{},"body":{"index.html":{}}}],["preenchendo",{"_index":1530,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":400,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["prettier",{"_index":1596,"title":{},"body":{"index.html":{}}}],["price",{"_index":581,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["prisma",{"_index":389,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["prisma.categoryuncheckedcreateinput",{"_index":390,"title":{},"body":{"classes/Category.html":{}}}],["prisma.categoryuncheckedcreatenestedmanywithoutproductsinput",{"_index":1073,"title":{},"body":{"injectables/ProductService.html":{}}}],["prisma.decimal",{"_index":974,"title":{},"body":{"classes/Product.html":{},"classes/Purchase.html":{}}}],["prisma.productuncheckedcreateinput",{"_index":988,"title":{},"body":{"classes/Product.html":{}}}],["prisma.purchaseuncheckedcreateinput",{"_index":1139,"title":{},"body":{"classes/Purchase.html":{}}}],["prisma.service",{"_index":947,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.useruncheckedcreateinput",{"_index":1288,"title":{},"body":{"classes/User.html":{}}}],["prisma/client",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"dependencies.html":{}}}],["prisma/client/runtime",{"_index":603,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/PrismaExceptionHandler.html":{}}}],["prisma/prisma.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":951,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientknownrequesterror",{"_index":878,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror",{"_index":904,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror.foreignconstraintviolation",{"_index":923,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror.recordsnotfound",{"_index":925,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror.uniqueconstraintviolation",{"_index":918,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaexceptionhandler",{"_index":724,"title":{"classes/PrismaExceptionHandler.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["prismaexceptionhandler().handle(error",{"_index":732,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["prismamodule",{"_index":113,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":251,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["probably",{"_index":1364,"title":{},"body":{"injectables/UserService.html":{}}}],["process.env.access_jwt_secret",{"_index":1695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.refresh_jwt_secret",{"_index":1699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.exit",{"_index":962,"title":{},"body":{"injectables/PrismaService.html":{}}}],["product",{"_index":573,"title":{"classes/Product.html":{}},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["product'})@apibearerauth()@patch('/review/:id",{"_index":1179,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["product'})@isadmin()@delete(':id')@httpcode(httpstatus.no_content",{"_index":1014,"title":{},"body":{"controllers/ProductController.html":{}}}],["product'})@isadmin()@patch(':id",{"_index":1017,"title":{},"body":{"controllers/ProductController.html":{}}}],["product'})@isadmin()@post",{"_index":1003,"title":{},"body":{"controllers/ProductController.html":{}}}],["product.controller",{"_index":1056,"title":{},"body":{"modules/ProductModule.html":{}}}],["product.dto",{"_index":1034,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts",{"_index":572,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:26",{"_index":598,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:36",{"_index":580,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:44",{"_index":594,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:51",{"_index":600,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:59",{"_index":592,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:67",{"_index":589,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.service",{"_index":1036,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{}}}],["product/dto/find",{"_index":456,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["productcontroller",{"_index":998,"title":{"controllers/ProductController.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{}}}],["productid",{"_index":631,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["productmodule",{"_index":114,"title":{"modules/ProductModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules.html":{},"overview.html":{}}}],["productname",{"_index":545,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindProductsDto.html":{},"injectables/ProductService.html":{}}}],["productnameinuseexception",{"_index":908,"title":{"classes/ProductNameInUseException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"coverage.html":{}}}],["productnotfoundexception",{"_index":910,"title":{"classes/ProductNotFoundException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductNotFoundException.html":{},"coverage.html":{}}}],["products",{"_index":470,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"miscellaneous/functions.html":{}}}],["products'})@isadmin()@get('/id/:id",{"_index":433,"title":{},"body":{"controllers/CategoryController.html":{}}}],["products'})@public()@get",{"_index":1006,"title":{},"body":{"controllers/ProductController.html":{}}}],["products'})@public()@get(':name",{"_index":437,"title":{},"body":{"controllers/CategoryController.html":{}}}],["products.dto",{"_index":457,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["products.dto.ts",{"_index":770,"title":{},"body":{"classes/FindProductsDto.html":{},"coverage.html":{}}}],["products.dto.ts:11",{"_index":773,"title":{},"body":{"classes/FindProductsDto.html":{}}}],["products.dto.ts:20",{"_index":772,"title":{},"body":{"classes/FindProductsDto.html":{}}}],["products.dto.ts:29",{"_index":771,"title":{},"body":{"classes/FindProductsDto.html":{}}}],["productservice",{"_index":1035,"title":{"injectables/ProductService.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{},"overview.html":{}}}],["productserviceinputexception",{"_index":739,"title":{"classes/ProductServiceInputException.html":{}},"body":{"classes/FileTypeError.html":{},"classes/ProductServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["productstoskip",{"_index":546,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["produtos",{"_index":1487,"title":{},"body":{"index.html":{}}}],["profile",{"_index":1305,"title":{},"body":{"controllers/UserController.html":{}}}],["profile'})@apibearerauth()@get",{"_index":1303,"title":{},"body":{"controllers/UserController.html":{}}}],["projeto",{"_index":1511,"title":{},"body":{"index.html":{}}}],["promise",{"_index":47,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":384,"title":{"properties.html":{}},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"properties.html":{}}}],["provide",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":1640,"title":{},"body":{"license.html":{}}}],["providers",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":41,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public.decorator",{"_index":55,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{}}}],["publish",{"_index":1624,"title":{},"body":{"license.html":{}}}],["purchase",{"_index":630,"title":{"classes/Purchase.html":{}},"body":{"classes/CreatePurchaseDto.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["purchase'})@apibearerauth()@post",{"_index":1158,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchase'})@isadmin()@delete(':id')@httpcode(httpstatus.no_content",{"_index":1174,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchase'})@isadmin()@patch(':id",{"_index":1183,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchase.controller",{"_index":1206,"title":{},"body":{"modules/PurchaseModule.html":{}}}],["purchase.dto",{"_index":1185,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdatePurchaseDto.html":{}}}],["purchase.dto.ts",{"_index":629,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["purchase.dto.ts:16",{"_index":1238,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["purchase.dto.ts:18",{"_index":637,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["purchase.dto.ts:23",{"_index":1236,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["purchase.dto.ts:27",{"_index":634,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["purchase.dto.ts:36",{"_index":639,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["purchase.service",{"_index":1189,"title":{},"body":{"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{}}}],["purchase.userid",{"_index":1228,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["purchasecontroller",{"_index":1153,"title":{"controllers/PurchaseController.html":{}},"body":{"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"coverage.html":{}}}],["purchased",{"_index":635,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["purchaseid",{"_index":1170,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["purchasemodule",{"_index":115,"title":{"modules/PurchaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PurchaseModule.html":{},"modules.html":{},"overview.html":{}}}],["purchasenotfoundexception",{"_index":911,"title":{"classes/PurchaseNotFoundException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/PurchaseNotFoundException.html":{},"coverage.html":{}}}],["purchases",{"_index":777,"title":{},"body":{"classes/FindPurchasesDto.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["purchases'})@apibearerauth()@get",{"_index":1167,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchases'})@isadmin()@get('/admin",{"_index":1162,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchases.dto",{"_index":1186,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["purchases.dto.ts",{"_index":776,"title":{},"body":{"classes/FindPurchasesDto.html":{},"coverage.html":{}}}],["purchases.dto.ts:11",{"_index":781,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["purchases.dto.ts:18",{"_index":780,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["purchases.dto.ts:27",{"_index":779,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["purchases.dto.ts:36",{"_index":778,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["purchaseservice",{"_index":1188,"title":{"injectables/PurchaseService.html":{}},"body":{"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"injectables/PurchaseService.html":{},"coverage.html":{},"overview.html":{}}}],["purchaseserviceinputexception",{"_index":862,"title":{"classes/PurchaseServiceInputException.html":{}},"body":{"classes/NotPurchaseOwnerException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["purchasestoskip",{"_index":1222,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["purpose",{"_index":1649,"title":{},"body":{"license.html":{}}}],["que",{"_index":1560,"title":{},"body":{"index.html":{}}}],["query",{"_index":451,"title":{},"body":{"controllers/CategoryController.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{}}}],["quot",{"_index":1093,"title":{},"body":{"injectables/ProductService.html":{}}}],["quot;brand1",{"_index":1096,"title":{},"body":{"injectables/ProductService.html":{}}}],["raiz",{"_index":1529,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["received",{"_index":839,"title":{},"body":{"classes/LoginResponse.html":{}}}],["recent",{"_index":1165,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["refer",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtExceptionHandler.html":{}}}],["reflect",{"_index":1452,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":27,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["refreshes",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshing",{"_index":805,"title":{},"body":{"classes/InvalidRefreshTokenException.html":{}}}],["refreshjwtconfig",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refreshtoken",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtoken(refreshtoken",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtoken(undefined",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokencontent",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokencontent.sub",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokencontent.tokenfamily",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokencontent.userrole",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokencredentials",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokendto",{"_index":171,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["refreshtokenpayload",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/typealiases.html":{}}}],["regexp",{"_index":741,"title":{},"body":{"classes/FileTypeError.html":{}}}],["registered",{"_index":496,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["regular",{"_index":1745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rejectonnotfound",{"_index":552,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["related",{"_index":1310,"title":{},"body":{"controllers/UserController.html":{}}}],["remove",{"_index":407,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["remove(@param('id",{"_index":481,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["remove(id",{"_index":439,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["remove(request",{"_index":1307,"title":{},"body":{"controllers/UserController.html":{}}}],["removecompromisedrefreshtokenfamily",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["removecompromisedrefreshtokenfamily(userid",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["removed",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["removes",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["replacing",{"_index":1363,"title":{},"body":{"injectables/UserService.html":{}}}],["req",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["request",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["request.headers['accept",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["request.headers['user",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["request.ip",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["request.user",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{}}}],["request.user['userid",{"_index":1328,"title":{},"body":{"controllers/UserController.html":{}}}],["requests",{"_index":1358,"title":{},"body":{"injectables/UserService.html":{}}}],["reset",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["respective",{"_index":717,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["response",{"_index":838,"title":{},"body":{"classes/LoginResponse.html":{}}}],["responsible",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["restriction",{"_index":1618,"title":{},"body":{"license.html":{}}}],["results",{"_index":69,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":66,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1685,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["returns",{"_index":45,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["reuse",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["review",{"_index":861,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{}}}],["review(request",{"_index":1176,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["review(userid",{"_index":1215,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["reviewcomment",{"_index":647,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["reviewnote",{"_index":646,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["reviewpurchasedto",{"_index":1177,"title":{"classes/ReviewPurchaseDto.html":{}},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"coverage.html":{}}}],["reviews",{"_index":1178,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["rights",{"_index":1621,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1455,"title":{},"body":{"dependencies.html":{}}}],["roda",{"_index":1536,"title":{},"body":{"index.html":{}}}],["rodar",{"_index":1554,"title":{},"body":{"index.html":{}}}],["role",{"_index":1218,"title":{},"body":{"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role'})@isadmin()@patch('role",{"_index":1316,"title":{},"body":{"controllers/UserController.html":{}}}],["role.admin",{"_index":1227,"title":{},"body":{"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{}}}],["role.dto",{"_index":1319,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role.dto.ts",{"_index":1273,"title":{},"body":{"classes/UpdateUserRoleDto.html":{},"coverage.html":{}}}],["role.dto.ts:11",{"_index":1274,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["role.dto.ts:18",{"_index":1276,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["rolesguard",{"_index":1246,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rotaterefreshtoken",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["rotaterefreshtoken(refreshtoken",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["rotates",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["rotation#automatic",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["route",{"_index":15,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"classes/LoginResponse.html":{},"guards/RolesGuard.html":{}}}],["rxjs",{"_index":53,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["saltrounds",{"_index":1701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["same",{"_index":1400,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["saved",{"_index":584,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"injectables/UserService.html":{}}}],["saverefreshtoken",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["saverefreshtoken(refreshtokencredentials",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["saves",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["search",{"_index":523,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["searching",{"_index":428,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{}}}],["secret",{"_index":1694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":99,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["select",{"_index":549,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["sell",{"_index":1627,"title":{},"body":{"license.html":{}}}],["senhas",{"_index":1588,"title":{},"body":{"index.html":{}}}],["sensitive",{"_index":1704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["service",{"_index":370,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["servidor",{"_index":1535,"title":{},"body":{"index.html":{}}}],["session",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessions",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessions'})@apibearerauth()@post('logoutall')@httpcode(httpstatus.ok",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["set",{"_index":1315,"title":{},"body":{"controllers/UserController.html":{}}}],["setmetadata(is_public_key",{"_index":1710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sets",{"_index":1715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":1636,"title":{},"body":{"license.html":{}}}],["show",{"_index":525,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["showing",{"_index":425,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["shutdown",{"_index":959,"title":{},"body":{"injectables/PrismaService.html":{}}}],["signals",{"_index":960,"title":{},"body":{"injectables/PrismaService.html":{}}}],["silent",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["single",{"_index":1088,"title":{},"body":{"injectables/ProductService.html":{}}}],["singlespaceurlname",{"_index":1118,"title":{},"body":{"injectables/ProductService.html":{}}}],["singlespaceurlname.split",{"_index":1121,"title":{},"body":{"injectables/ProductService.html":{}}}],["size",{"_index":1717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skip",{"_index":538,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["software",{"_index":1614,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}}}],["spaces",{"_index":1086,"title":{},"body":{"injectables/ProductService.html":{}}}],["spacetohyphenurlname",{"_index":1120,"title":{},"body":{"injectables/ProductService.html":{}}}],["specific",{"_index":699,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["src/.../access",{"_index":1680,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../file",{"_index":1466,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../gettokenexpirationdate.ts",{"_index":1464,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../hash.config.ts",{"_index":1690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../is",{"_index":1467,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../jwt.config.ts",{"_index":1689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1465,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../multer",{"_index":1692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":1691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../refresh",{"_index":1683,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.module.ts",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/access",{"_index":6,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:31",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:49",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:67",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:76",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:86",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:108",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:123",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:136",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:164",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:178",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:18",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:205",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:215",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:35",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:58",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:85",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:90",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:95",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/login",{"_index":830,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.response.ts",{"_index":837,"title":{},"body":{"classes/LoginResponse.html":{},"coverage.html":{}}}],["src/auth/dto/login.response.ts:13",{"_index":843,"title":{},"body":{"classes/LoginResponse.html":{}}}],["src/auth/dto/login.response.ts:7",{"_index":842,"title":{},"body":{"classes/LoginResponse.html":{}}}],["src/auth/dto/logout.dto.ts",{"_index":846,"title":{},"body":{"classes/LogoutDto.html":{},"coverage.html":{}}}],["src/auth/dto/logout.dto.ts:10",{"_index":848,"title":{},"body":{"classes/LogoutDto.html":{}}}],["src/auth/dto/refresh",{"_index":1232,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/exceptions/auth",{"_index":369,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["src/auth/exceptions/invalid",{"_index":792,"title":{},"body":{"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidRefreshTokenException.html":{},"coverage.html":{}}}],["src/auth/public.decorator",{"_index":452,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["src/auth/public.decorator.ts",{"_index":1413,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/types/access",{"_index":1684,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/auth/types/refresh",{"_index":1687,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/common/decorators/file",{"_index":1032,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/decorators/is",{"_index":454,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/common/exceptions/category/category",{"_index":489,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["src/common/exceptions/product/product",{"_index":909,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"coverage.html":{}}}],["src/common/exceptions/purchase/purchase",{"_index":912,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/PurchaseNotFoundException.html":{},"coverage.html":{}}}],["src/common/exceptions/user/email",{"_index":688,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["src/common/exceptions/user/user",{"_index":914,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts",{"_index":1247,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts:12",{"_index":1249,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/guards/roles.guard.ts:22",{"_index":1250,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/interceptors/exception.interceptor.ts",{"_index":703,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/exception.interceptor.ts:24",{"_index":715,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["src/common/interceptors/handlers/exception.handler.ts",{"_index":693,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"coverage.html":{}}}],["src/common/interceptors/handlers/exception.handler.ts:4",{"_index":697,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["src/common/interceptors/handlers/jwt",{"_index":807,"title":{},"body":{"classes/JwtExceptionHandler.html":{},"coverage.html":{}}}],["src/common/interceptors/handlers/prisma",{"_index":865,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["src/common/interceptors/handlers/user",{"_index":1334,"title":{},"body":{"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["src/config/hash.config",{"_index":1375,"title":{},"body":{"injectables/UserService.html":{}}}],["src/config/hash.config.ts",{"_index":1420,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/jwt.config",{"_index":90,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{}}}],["src/config/jwt.config.ts",{"_index":1421,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/multer",{"_index":1059,"title":{},"body":{"modules/ProductModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1425,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/models/category/category.controller.ts",{"_index":399,"title":{},"body":{"controllers/CategoryController.html":{},"coverage.html":{}}}],["src/models/category/category.controller.ts:37",{"_index":413,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:51",{"_index":418,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:61",{"_index":434,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:72",{"_index":438,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:83",{"_index":446,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:95",{"_index":441,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.module.ts",{"_index":486,"title":{},"body":{"modules/CategoryModule.html":{}}}],["src/models/category/category.service.ts",{"_index":508,"title":{},"body":{"injectables/CategoryService.html":{},"coverage.html":{}}}],["src/models/category/category.service.ts:102",{"_index":528,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:119",{"_index":527,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:124",{"_index":516,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:13",{"_index":514,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:132",{"_index":530,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:22",{"_index":520,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:36",{"_index":522,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:54",{"_index":524,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:77",{"_index":526,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/dto/create",{"_index":561,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/models/category/dto/find",{"_index":759,"title":{},"body":{"classes/FindCategoriesDto.html":{},"coverage.html":{}}}],["src/models/category/dto/update",{"_index":1256,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/models/category/entities/category.entity.ts",{"_index":382,"title":{},"body":{"classes/Category.html":{},"coverage.html":{}}}],["src/models/category/entities/category.entity.ts:15",{"_index":388,"title":{},"body":{"classes/Category.html":{}}}],["src/models/category/entities/category.entity.ts:9",{"_index":387,"title":{},"body":{"classes/Category.html":{}}}],["src/models/product/dto/create",{"_index":571,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/models/product/dto/file",{"_index":750,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["src/models/product/dto/find",{"_index":769,"title":{},"body":{"classes/FindProductsDto.html":{},"coverage.html":{}}}],["src/models/product/dto/update",{"_index":1262,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/models/product/entities/product.entity.ts",{"_index":973,"title":{},"body":{"classes/Product.html":{},"coverage.html":{}}}],["src/models/product/entities/product.entity.ts:15",{"_index":982,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:21",{"_index":985,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:27",{"_index":983,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:35",{"_index":975,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:41",{"_index":980,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:46",{"_index":984,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:52",{"_index":979,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:58",{"_index":977,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:9",{"_index":981,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/exceptions/file",{"_index":735,"title":{},"body":{"classes/FileTypeError.html":{},"coverage.html":{}}}],["src/models/product/exceptions/product",{"_index":1126,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["src/models/product/product.controller.ts",{"_index":999,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{}}}],["src/models/product/product.controller.ts:104",{"_index":1015,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:38",{"_index":1004,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:50",{"_index":1007,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:58",{"_index":1010,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:66",{"_index":1013,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:81",{"_index":1022,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:92",{"_index":1018,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.module.ts",{"_index":1055,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/models/product/product.service.ts",{"_index":1063,"title":{},"body":{"injectables/ProductService.html":{},"coverage.html":{}}}],["src/models/product/product.service.ts:103",{"_index":1098,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:115",{"_index":1079,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:128",{"_index":1101,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:13",{"_index":1068,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:143",{"_index":1070,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:22",{"_index":1074,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:40",{"_index":1103,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:51",{"_index":1075,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:70",{"_index":1076,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:79",{"_index":1077,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:88",{"_index":1099,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/purchase/dto/create",{"_index":628,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"coverage.html":{}}}],["src/models/purchase/dto/find",{"_index":775,"title":{},"body":{"classes/FindPurchasesDto.html":{},"coverage.html":{}}}],["src/models/purchase/dto/review",{"_index":1235,"title":{},"body":{"classes/ReviewPurchaseDto.html":{},"coverage.html":{}}}],["src/models/purchase/dto/update",{"_index":1264,"title":{},"body":{"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["src/models/purchase/entities/purchase.entity.ts",{"_index":1127,"title":{},"body":{"classes/Purchase.html":{},"coverage.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:13",{"_index":1138,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:18",{"_index":1131,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:24",{"_index":1128,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:31",{"_index":1137,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:36",{"_index":1134,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:41",{"_index":1132,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:46",{"_index":1129,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:8",{"_index":1130,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/exceptions/not",{"_index":857,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"coverage.html":{}}}],["src/models/purchase/exceptions/purchase",{"_index":1231,"title":{},"body":{"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["src/models/purchase/purchase.controller.ts",{"_index":1154,"title":{},"body":{"controllers/PurchaseController.html":{},"coverage.html":{}}}],["src/models/purchase/purchase.controller.ts:101",{"_index":1180,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:115",{"_index":1184,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:127",{"_index":1175,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:38",{"_index":1159,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:55",{"_index":1163,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:69",{"_index":1168,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:85",{"_index":1172,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.module.ts",{"_index":1205,"title":{},"body":{"modules/PurchaseModule.html":{}}}],["src/models/purchase/purchase.service.ts",{"_index":1207,"title":{},"body":{"injectables/PurchaseService.html":{},"coverage.html":{}}}],["src/models/purchase/purchase.service.ts:118",{"_index":1217,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:135",{"_index":1214,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:15",{"_index":1208,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:24",{"_index":1210,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:43",{"_index":1211,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:71",{"_index":1213,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:93",{"_index":1216,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/user/dto/create",{"_index":656,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/models/user/dto/delete",{"_index":684,"title":{},"body":{"classes/DeleteUserDto.html":{},"coverage.html":{}}}],["src/models/user/dto/update",{"_index":1267,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"coverage.html":{}}}],["src/models/user/entities/user",{"_index":1397,"title":{},"body":{"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["src/models/user/entities/user.entity",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/models/user/entities/user.entity.ts",{"_index":1278,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/models/user/entities/user.entity.ts:19",{"_index":1286,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:25",{"_index":1282,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:31",{"_index":1285,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:37",{"_index":1284,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:43",{"_index":1280,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:49",{"_index":1281,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:55",{"_index":1287,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:9",{"_index":1283,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/exceptions/invalid",{"_index":800,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{},"coverage.html":{}}}],["src/models/user/exceptions/missing",{"_index":850,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{},"coverage.html":{}}}],["src/models/user/exceptions/user",{"_index":1335,"title":{},"body":{"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["src/models/user/user.controller.ts",{"_index":1296,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/models/user/user.controller.ts:37",{"_index":1301,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:45",{"_index":1304,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:55",{"_index":1313,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:68",{"_index":1317,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:79",{"_index":1309,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.module",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/models/user/user.module.ts",{"_index":1343,"title":{},"body":{"modules/UserModule.html":{}}}],["src/models/user/user.service",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/models/user/user.service.ts",{"_index":1346,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/models/user/user.service.ts:111",{"_index":1362,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:139",{"_index":1371,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:18",{"_index":1350,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:27",{"_index":1351,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:48",{"_index":1357,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:60",{"_index":1353,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:67",{"_index":1368,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:84",{"_index":1369,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:98",{"_index":1367,"title":{},"body":{"injectables/UserService.html":{}}}],["src/prisma/prisma.module",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}}}],["src/prisma/prisma.module.ts",{"_index":945,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":948,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:15",{"_index":966,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:25",{"_index":956,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/util/gettokenexpirationdate",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/util/gettokenexpirationdate.ts",{"_index":1433,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start:dev",{"_index":1543,"title":{},"body":{"index.html":{}}}],["started",{"_index":1478,"title":{"index.html":{},"license.html":{}},"body":{}}],["starting",{"_index":422,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["starts",{"_index":1473,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statements",{"_index":1407,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":492,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["stock",{"_index":576,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["storage",{"_index":1719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategy",{"_index":88,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["street",{"_index":682,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["string",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"miscellaneous/variables.html":{}}}],["studio",{"_index":1553,"title":{},"body":{"index.html":{}}}],["studio:test",{"_index":1574,"title":{},"body":{"index.html":{}}}],["sua",{"_index":1512,"title":{},"body":{"index.html":{}}}],["sub",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":1632,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1626,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1638,"title":{},"body":{"license.html":{}}}],["successfully",{"_index":840,"title":{},"body":{"classes/LoginResponse.html":{}}}],["summary",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":60,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{}}}],["super('category",{"_index":501,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{}}}],["super('e",{"_index":689,"title":{},"body":{"classes/EmailInUseException.html":{}}}],["super('invalid",{"_index":798,"title":{},"body":{"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{}}}],["super('please",{"_index":855,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["super('product",{"_index":1062,"title":{},"body":{"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{}}}],["super('purchase",{"_index":864,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"classes/PurchaseNotFoundException.html":{}}}],["super('user",{"_index":1345,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["super(`file",{"_index":748,"title":{},"body":{"classes/FileTypeError.html":{}}}],["super(message",{"_index":380,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["super.canactivate(context",{"_index":68,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["supertest",{"_index":1594,"title":{},"body":{"index.html":{}}}],["support",{"_index":1666,"title":{},"body":{"modules.html":{}}}],["supports",{"_index":744,"title":{},"body":{"classes/FileTypeError.html":{}}}],["svg",{"_index":1667,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1458,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["switch",{"_index":915,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["system",{"_index":497,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"controllers/UserController.html":{},"classes/UserNotFoundException.html":{}}}],["table",{"_index":1436,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1435,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":539,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["tecnologias",{"_index":1499,"title":{},"body":{"index.html":{}}}],["ter",{"_index":1506,"title":{},"body":{"index.html":{}}}],["test",{"_index":1571,"title":{},"body":{"index.html":{}}}],["test:all",{"_index":1568,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1573,"title":{},"body":{"index.html":{}}}],["test?schema=public",{"_index":1564,"title":{},"body":{"index.html":{}}}],["testes",{"_index":1556,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":970,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":971,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.authservice.findalltokens(userid",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(email",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(refreshtoken",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logoutall(userid",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken(refreshtoken",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.capitalizeonlyfirstletter(createcategorydto.name",{"_index":532,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.capitalizeonlyfirstletter(name",{"_index":553,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.capitalizeonlyfirstletter(updatecategorydto.name",{"_index":560,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryservice.create(createcategorydto",{"_index":468,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findall(findcategoriesdto",{"_index":469,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findonebyid(id",{"_index":473,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findonebyname(name",{"_index":476,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.remove(id",{"_index":482,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.update(id",{"_index":478,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.connectcategoriesbyid(createproductdto.categories",{"_index":1105,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.createrefreshtoken",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.formaturlname(createproductdto.name",{"_index":1104,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.formaturlname(updateproductdto.name",{"_index":1123,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.generateaccesstoken",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generateaccesstoken(payload",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashifupdatingpassword(id",{"_index":1386,"title":{},"body":{"injectables/UserService.html":{}}}],["this.iscategoryerror(error",{"_index":929,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.iscategorynameconstraintviolation(error",{"_index":921,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.iscreateproducterror(error",{"_index":928,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isemailconstraintviolation(error.meta",{"_index":919,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isjwtexception(error",{"_index":826,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["this.isprismaunknownerror(error",{"_index":930,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isproducterror(error",{"_index":927,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isproductnameconstraintviolation(error",{"_index":920,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.ispurchaseerror(error",{"_index":924,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isusererror(error",{"_index":926,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.jwterrornames.includes(error.name",{"_index":829,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["this.jwtservice.signasync",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(refreshtoken",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.category.create",{"_index":533,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.delete",{"_index":557,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.findmany",{"_index":537,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.findunique",{"_index":547,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.update",{"_index":556,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.product.create",{"_index":1106,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.delete",{"_index":1113,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.findmany",{"_index":1109,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.findunique",{"_index":1110,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.update",{"_index":1107,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.purchase.create",{"_index":1221,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.purchase.delete",{"_index":1230,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.purchase.findmany",{"_index":1223,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.purchase.findunique",{"_index":1226,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.purchase.update",{"_index":1229,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.user.create",{"_index":1383,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.delete",{"_index":1392,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":1384,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":1387,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prismaservice.usertokens.create",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.usertokens.deletemany",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.usertokens.findmany",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.productservice.create(createproductdto",{"_index":1040,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findall(findallproductsdto",{"_index":1042,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findonebyid(id",{"_index":1044,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findonebyurlname(urlname",{"_index":1047,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.remove(id",{"_index":1051,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.update(id",{"_index":1050,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.uploadpicture(id",{"_index":1049,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.purchaseservice.create(userid",{"_index":1192,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.findall(findpurchasesdto",{"_index":1194,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.findone(purchaseid",{"_index":1197,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.remove(id",{"_index":1201,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.review(userid",{"_index":1199,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.update(id",{"_index":1200,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.reflector.getallandoverride(is_admin_key",{"_index":1254,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":63,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["this.removecompromisedrefreshtokenfamily",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rotaterefreshtoken",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.saverefreshtoken",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatecategoryandname(id",{"_index":555,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.updateproductandurlname(id",{"_index":1112,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.userservice.create(createuserdto",{"_index":1326,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyemail(email",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyid(userid",{"_index":1329,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(userid",{"_index":1333,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(userid",{"_index":1330,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateuserrole(updateuserroledto",{"_index":1332,"title":{},"body":{"controllers/UserController.html":{}}}],["this.validatecurrentpassword(id",{"_index":1390,"title":{},"body":{"injectables/UserService.html":{}}}],["this.validaterefreshtoken(refreshtoken",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validateuser(email",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PurchaseService.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{}}}],["thrown",{"_index":1366,"title":{},"body":{"injectables/UserService.html":{}}}],["throws",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{}}}],["tmp",{"_index":1722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["today's",{"_index":1471,"title":{},"body":{"miscellaneous/functions.html":{}}}],["todos",{"_index":1567,"title":{},"body":{"index.html":{}}}],["token",{"_index":93,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["token'})@public()@post('refresh')@httpcode(httpstatus.ok",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["token.dto",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["token.dto.ts",{"_index":1233,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:10",{"_index":1234,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.exception",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["token.exception.ts",{"_index":804,"title":{},"body":{"classes/InvalidRefreshTokenException.html":{},"coverage.html":{}}}],["token.exception.ts:6",{"_index":806,"title":{},"body":{"classes/InvalidRefreshTokenException.html":{}}}],["tokenexpirederror",{"_index":812,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["tokenfamily",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["tokens'})@apibearerauth()@get('tokens",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens/refresh",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["tooling",{"_index":1576,"title":{},"body":{"index.html":{}}}],["tort",{"_index":1660,"title":{},"body":{"license.html":{}}}],["totalprice",{"_index":632,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["trailing",{"_index":1084,"title":{},"body":{"injectables/ProductService.html":{}}}],["transform",{"_index":705,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["transformer",{"_index":767,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"dependencies.html":{},"index.html":{}}}],["tratar",{"_index":1591,"title":{},"body":{"index.html":{}}}],["trimmedurlname",{"_index":1116,"title":{},"body":{"injectables/ProductService.html":{}}}],["trimmedurlname.replace(/\\s\\s+/g",{"_index":1119,"title":{},"body":{"injectables/ProductService.html":{}}}],["true",{"_index":67,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":860,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{}}}],["trying",{"_index":795,"title":{},"body":{"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{}}}],["turn",{"_index":1087,"title":{},"body":{"injectables/ProductService.html":{}}}],["turned",{"_index":986,"title":{},"body":{"classes/Product.html":{}}}],["type",{"_index":36,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.exception.ts",{"_index":736,"title":{},"body":{"classes/FileTypeError.html":{},"coverage.html":{}}}],["type.exception.ts:6",{"_index":742,"title":{},"body":{"classes/FileTypeError.html":{}}}],["typealiases",{"_index":1678,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":700,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["types/access",{"_index":92,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["types/refresh",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["typescript",{"_index":1575,"title":{},"body":{"index.html":{}}}],["ui",{"_index":1459,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["um",{"_index":1526,"title":{},"body":{"index.html":{}}}],["unauthenticated",{"_index":1711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":825,"title":{},"body":{"classes/JwtExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["unauthorizedexception('invalid",{"_index":827,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["unauthorizedexception(error.message",{"_index":1336,"title":{},"body":{"classes/UserInputExceptionHandler.html":{}}}],["undefined",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{}}}],["undefined/g",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["uniquesuffix",{"_index":1725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unitários",{"_index":1570,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":895,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["unlicensed",{"_index":1675,"title":{},"body":{"properties.html":{}}}],["up",{"_index":1743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updatable",{"_index":1257,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["update",{"_index":408,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["update(id",{"_index":442,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["update(request",{"_index":1311,"title":{},"body":{"controllers/UserController.html":{}}}],["update.exception",{"_index":1376,"title":{},"body":{"injectables/UserService.html":{}}}],["update.exception.ts",{"_index":801,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"coverage.html":{}}}],["update.exception.ts:6",{"_index":803,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{}}}],["update.exception.ts:7",{"_index":852,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["updatecategoryandname",{"_index":512,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatecategoryandname(id",{"_index":529,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatecategorydto",{"_index":443,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatecategorydto.name",{"_index":554,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatedat",{"_index":1279,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{}}}],["updateproductandurlname",{"_index":1066,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateproductandurlname(id",{"_index":1100,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateproductdto",{"_index":1016,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updateproductdto.name",{"_index":1111,"title":{},"body":{"injectables/ProductService.html":{}}}],["updatepurchasedto",{"_index":1182,"title":{"classes/UpdatePurchaseDto.html":{}},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["updates",{"_index":444,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserdto",{"_index":1266,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserdto.currentpassword",{"_index":1394,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto.password",{"_index":1393,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserrole",{"_index":1298,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserrole(updateuserroledto",{"_index":1314,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserroledto",{"_index":1272,"title":{"classes/UpdateUserRoleDto.html":{}},"body":{"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserroledto.email",{"_index":1388,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserroledto.role",{"_index":1389,"title":{},"body":{"injectables/UserService.html":{}}}],["upload",{"_index":743,"title":{},"body":{"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["upload.config",{"_index":1060,"title":{},"body":{"modules/ProductModule.html":{}}}],["upload.config.ts",{"_index":1422,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["upload.decorator",{"_index":1033,"title":{},"body":{"controllers/ProductController.html":{}}}],["upload.decorator.ts",{"_index":1416,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["upload.dto.ts",{"_index":751,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["upload.dto.ts:10",{"_index":756,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["uploadedfile",{"_index":1030,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploading",{"_index":738,"title":{},"body":{"classes/FileTypeError.html":{}}}],["uploadphoto",{"_index":1001,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploadphoto(id",{"_index":1019,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploadpicture",{"_index":1067,"title":{},"body":{"injectables/ProductService.html":{}}}],["uploadpicture(id",{"_index":1102,"title":{},"body":{"injectables/ProductService.html":{}}}],["uploads",{"_index":1020,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["url",{"_index":987,"title":{},"body":{"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["urlname",{"_index":550,"title":{},"body":{"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["urlname'})@public()@get(':urlname",{"_index":1012,"title":{},"body":{"controllers/ProductController.html":{}}}],["use",{"_index":500,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"license.html":{}}}],["use.exception",{"_index":906,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["use.exception.ts",{"_index":490,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"coverage.html":{}}}],["use.exception.ts:6",{"_index":499,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["useclass",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":138,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["user'})@apibearerauth()@delete()@httpcode(httpstatus.no_content",{"_index":1308,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@apibearerauth()@patch",{"_index":1312,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@apibearerauth()@post('logout')@httpcode(httpstatus.ok",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["user'})@public()@post",{"_index":1300,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@public()@post('login')@httpcode(httpstatus.ok",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.controller",{"_index":1344,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":1270,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":657,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":686,"title":{},"body":{"classes/DeleteUserDto.html":{}}}],["user.dto.ts:17",{"_index":663,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":1269,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:28",{"_index":670,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":664,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:44",{"_index":659,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":1402,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["user.id",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.role",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":1323,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user@example.com",{"_index":674,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{}}}],["usercontroller",{"_index":1295,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":101,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePurchaseDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{}}}],["userinputexceptionhandler",{"_index":726,"title":{"classes/UserInputExceptionHandler.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["userinputexceptionhandler().handle(error",{"_index":731,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["usermodule",{"_index":116,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["usernotfoundexception",{"_index":913,"title":{"classes/UserNotFoundException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["userrole",{"_index":103,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{}}}],["users",{"_index":859,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":249,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userserviceinputexception",{"_index":802,"title":{"classes/UserServiceInputException.html":{}},"body":{"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["usertokens",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["userwithoutpassword",{"_index":1320,"title":{"classes/UserWithoutPassword.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["uses",{"_index":10,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{}}}],["usuário",{"_index":1501,"title":{},"body":{"index.html":{}}}],["usuários",{"_index":1486,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{},"classes/Category.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/User.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["v4",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["valid",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":77,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["validate(payload",{"_index":79,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["validatecurrentpassword",{"_index":1349,"title":{},"body":{"injectables/UserService.html":{}}}],["validatecurrentpassword(id",{"_index":1370,"title":{},"body":{"injectables/UserService.html":{}}}],["validated",{"_index":1686,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["validaterefreshtoken",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["validaterefreshtoken(refreshtoken",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["validates",{"_index":82,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{}}}],["validateuser",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":569,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"dependencies.html":{},"index.html":{}}}],["validações",{"_index":1583,"title":{},"body":{"index.html":{}}}],["validimageuploadtypesregex",{"_index":1424,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["validimageuploadtypesregex.test",{"_index":1735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validimageuploadtypesregex.test(file.mimetype",{"_index":1733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["value",{"_index":811,"title":{},"body":{"classes/JwtExceptionHandler.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1414,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1688,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["veiga",{"_index":1605,"title":{},"body":{"license.html":{}}}],["verify",{"_index":1705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1673,"title":{},"body":{"properties.html":{}}}],["visualizar",{"_index":1550,"title":{},"body":{"index.html":{}}}],["voc",{"_index":1504,"title":{},"body":{"index.html":{}}}],["void",{"_index":701,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"miscellaneous/functions.html":{}}}],["warranties",{"_index":1645,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1641,"title":{},"body":{"license.html":{}}}],["way",{"_index":1072,"title":{},"body":{"injectables/ProductService.html":{}}}],["web",{"_index":1582,"title":{},"body":{"index.html":{}}}],["wether",{"_index":880,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["wheelchair",{"_index":613,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["whether",{"_index":823,"title":{},"body":{"classes/JwtExceptionHandler.html":{},"license.html":{}}}],["white",{"_index":1085,"title":{},"body":{"injectables/ProductService.html":{}}}],["without",{"_index":1306,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"license.html":{}}}],["won't",{"_index":1359,"title":{},"body":{"injectables/UserService.html":{}}}],["words",{"_index":1091,"title":{},"body":{"injectables/ProductService.html":{}}}],["world",{"_index":681,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["wrong",{"_index":794,"title":{},"body":{"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{}}}],["yarn",{"_index":1524,"title":{},"body":{"index.html":{}}}],["yes",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["z",{"_index":668,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessJwtAuthGuard.html":{"url":"injectables/AccessJwtAuthGuard.html","title":"injectable - AccessJwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessJwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/access-jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Uses the passport library AuthGuard to check\nif the route needs authentication\nFor more on NestJs Guards: https://docs.nestjs.com/guards\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/access-jwt-auth.guard.ts:13\n                            \n                        \n\n                \n                    \n                            Uses the passport library AuthGuard to check\nif the route needs authentication\nFor more on NestJs Guards: https://docs.nestjs.com/guards\nInstantiates the class and the Reflector dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/access-jwt-auth.guard.ts:28\n                \n            \n\n\n            \n                \n                    If the route uses the Public decorator it\ndoes not need authentication, else it does\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Observable } from 'rxjs';\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n/** Uses the passport library AuthGuard to check\n * if the route needs authentication\n *\n * For more on NestJs Guards: https://docs.nestjs.com/guards\n */\n@Injectable()\nexport class AccessJwtAuthGuard extends AuthGuard('access-jwt') {\n  /** Uses the passport library AuthGuard to check\n   * if the route needs authentication\n   *\n   * For more on NestJs Guards: https://docs.nestjs.com/guards\n   *\n   * Instantiates the class and the Reflector dependency\n   */\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  /** If the route uses the Public decorator it\n   * does not need authentication, else it does\n   */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessJwtStrategy.html":{"url":"injectables/AccessJwtStrategy.html","title":"injectable - AccessJwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessJwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/access-jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Passport library Access JsonWebToken configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/access-jwt.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            Passport library JsonWebToken configuration\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: AccessTokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/access-jwt.strategy.ts:24\n                \n            \n\n\n            \n                \n                    Validates and returns data after JsonWebToken is decrypted\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                AccessTokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { accessJwtConfig } from 'src/config/jwt.config';\nimport { AccessTokenContent } from './types/access-token-content';\nimport { AccessTokenPayload } from './types/access-token-payload';\n\n/** Passport library Access JsonWebToken configuration */\n@Injectable()\nexport class AccessJwtStrategy extends PassportStrategy(\n  Strategy,\n  'access-jwt',\n) {\n  /** Passport library JsonWebToken configuration */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: accessJwtConfig.secret,\n    });\n  }\n\n  /** Validates and returns data after JsonWebToken is decrypted */\n  async validate(payload: AccessTokenPayload): Promise {\n    return {\n      userId: payload.sub,\n      userRole: payload.userRole,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nPurchaseModule\n\nPurchaseModule\n\nAppModule -->\n\nPurchaseModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CategoryModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            ProductModule\n                        \n                        \n                            PurchaseModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthModule } from './auth/auth.module';\nimport { AccessJwtAuthGuard } from './auth/access-jwt-auth.guard';\nimport { UserModule } from './models/user/user.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { ProductModule } from './models/product/product.module';\nimport { CategoryModule } from './models/category/category.module';\nimport { PurchaseModule } from './models/purchase/purchase.module';\n\n@Module({\n  imports: [\n    UserModule,\n    AuthModule,\n    PrismaModule,\n    ProductModule,\n    CategoryModule,\n    PurchaseModule,\n  ],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: AccessJwtAuthGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                User authentication endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllTokens\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                logoutAll\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTokens(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns all user active tokens'})@ApiBearerAuth()@Get('tokens')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:86\n                \n            \n\n\n            \n                \n                    Returns all user's active tokens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(undefined: LoginCredentialsDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Logs in user'})@Public()@Post('login')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:31\n                \n            \n\n\n            \n                \n                    Authenticates the User\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(undefined: LogoutDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Logs out user'})@ApiBearerAuth()@Post('logout')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:67\n                \n            \n\n\n            \n                \n                    Logs out the User from the current session\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LogoutDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logoutAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    logoutAll(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Logs out user of all sessions'})@ApiBearerAuth()@Post('logoutAll')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:76\n                \n            \n\n\n            \n                \n                    Logs out the User from all sessions\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(undefined: RefreshTokenDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Refreshes user token'})@Public()@Post('refresh')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:49\n                \n            \n\n\n            \n                \n                    Refreshes the user token for silent authentication\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                RefreshTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Req,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { UserTokens } from '@prisma/client';\nimport { Request } from 'express';\nimport { AuthService } from './auth.service';\nimport { LoginCredentialsDto } from './dto/login-credentials.dto';\nimport { LoginResponse } from './dto/login.response';\nimport { LogoutDto } from './dto/logout.dto';\nimport { RefreshTokenDto } from './dto/refresh-token.dto';\nimport { Public } from './public.decorator';\n\n/** User authentication endpoints */\n@ApiTags('authentication')\n@Controller()\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  /** Authenticates the User */\n  @ApiOperation({ summary: 'Logs in user' })\n  @Public()\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  async login(\n    @Body() { email, password }: LoginCredentialsDto,\n    @Req() request: Request,\n  ): Promise {\n    const browserInfo =\n      `${request.ip} ${request.headers['user-agent']} ${request.headers['accept-language']}`.replace(\n        / undefined/g,\n        '',\n      );\n\n    return this.authService.login(email, password, browserInfo);\n  }\n\n  /** Refreshes the user token for silent authentication */\n  @ApiOperation({ summary: 'Refreshes user token' })\n  @Public()\n  @Post('refresh')\n  @HttpCode(HttpStatus.OK)\n  async refreshToken(\n    @Body() { refreshToken }: RefreshTokenDto,\n    @Req() request: Request,\n  ): Promise {\n    const browserInfo =\n      `${request.ip} ${request.headers['user-agent']} ${request.headers['accept-language']}`.replace(\n        / undefined/g,\n        '',\n      );\n\n    return this.authService.refreshToken(refreshToken, browserInfo);\n  }\n\n  /** Logs out the User from the current session */\n  @ApiOperation({ summary: 'Logs out user' })\n  @ApiBearerAuth()\n  @Post('logout')\n  @HttpCode(HttpStatus.OK)\n  async logout(@Body() { refreshToken }: LogoutDto): Promise {\n    return this.authService.logout(refreshToken);\n  }\n\n  /** Logs out the User from all sessions */\n  @ApiOperation({ summary: 'Logs out user of all sessions' })\n  @ApiBearerAuth()\n  @Post('logoutAll')\n  @HttpCode(HttpStatus.OK)\n  async logoutAll(@Req() request: Request): Promise {\n    const { userId } = request.user as { userId: string };\n\n    return this.authService.logoutAll(userId);\n  }\n\n  /** Returns all user's active tokens */\n  @ApiOperation({ summary: 'Returns all user active tokens' })\n  @ApiBearerAuth()\n  @Get('tokens')\n  async findAllTokens(@Req() request: Request): Promise {\n    const { userId } = request.user as { userId: string };\n\n    return this.authService.findAllTokens(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAccessJwtStrategy\n\nAccessJwtStrategy\n\nAuthModule -->\n\nAccessJwtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessJwtStrategy\n                        \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { UserModule } from 'src/models/user/user.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AccessJwtStrategy } from './access-jwt.strategy';\nimport { PrismaModule } from 'src/prisma/prisma.module';\n\n@Module({\n  imports: [UserModule, PrismaModule, PassportModule, JwtModule.register({})],\n  providers: [AuthService, AccessJwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for authenticating the user\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                createRefreshToken\n                            \n                            \n                                    Async\n                                findAllTokens\n                            \n                            \n                                    Private\n                                    Async\n                                generateAccessToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                logoutAll\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Private\n                                    Async\n                                removeCompromisedRefreshTokenFamily\n                            \n                            \n                                    Private\n                                    Async\n                                rotateRefreshToken\n                            \n                            \n                                    Private\n                                    Async\n                                saveRefreshToken\n                            \n                            \n                                    Private\n                                    Async\n                                validateRefreshToken\n                            \n                            \n                                    Private\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:18\n                            \n                        \n\n                \n                    \n                            Responsible for authenticating the user\nInstantiate the class and the UserService and\nJwtService dependencies\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        createRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createRefreshToken(payload: literal type, browserInfo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:136\n                \n            \n\n\n            \n                \n                    Creates the refresh token and saves it in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    browserInfo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTokens(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:95\n                \n            \n\n\n            \n                \n                    Returns all user's active tokens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateAccessToken(payload: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:123\n                \n            \n\n\n            \n                \n                    Generates user's access token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(email: string, password: string, browserInfo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:35\n                \n            \n\n\n            \n                \n                    Validates if the inputted email exists and\ncompares if the hashed password matches the inputted one.\nIf so, returns the access and refresh JWTs\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    browserInfo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:85\n                \n            \n\n\n            \n                \n                    Deletes the refreshToken from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logoutAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    logoutAll(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:90\n                \n            \n\n\n            \n                \n                    Deletes all user's refresh tokens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(refreshToken: string, browserInfo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:58\n                \n            \n\n\n            \n                \n                    Refreshes and rotates user's access and refresh tokens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    browserInfo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        removeCompromisedRefreshTokenFamily\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeCompromisedRefreshTokenFamily(userId: string, tokenFamily: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:205\n                \n            \n\n\n            \n                \n                    Removes a compromised refresh token family from the database\nIf a token that is not in the database is used but it's family exists\nthat means the token has been compromised and the family should me removed\nRefer to https://auth0.com/docs/secure/tokens/refresh-tokens/refresh-token-rotation#automatic-reuse-detection\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenFamily\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        rotateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    rotateRefreshToken(refreshToken: string, refreshTokenContent: RefreshTokenPayload, browserInfo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:215\n                \n            \n\n\n            \n                \n                    Removes the old token from the database and creates a new one\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshTokenContent\n                                    \n                                                RefreshTokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    browserInfo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        saveRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveRefreshToken(refreshTokenCredentials: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:164\n                \n            \n\n\n            \n                \n                    Saves the new refresh token hashed in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshTokenCredentials\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateRefreshToken(refreshToken: string, refreshTokenContent: RefreshTokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:178\n                \n            \n\n\n            \n                \n                    Checks if the refresh token is valid\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshTokenContent\n                                    \n                                                RefreshTokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:108\n                \n            \n\n\n            \n                \n                    Validates if the inputted email exists and\ncompares if the hashed password matches the inputted one.\nIf not, throws an error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserTokens } from '@prisma/client';\nimport { compare } from 'bcrypt';\nimport { accessJwtConfig, refreshJwtConfig } from 'src/config/jwt.config';\nimport { User } from 'src/models/user/entities/user.entity';\nimport { UserService } from 'src/models/user/user.service';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { getTokenExpirationDate } from 'src/util/getTokenExpirationDate';\nimport { v4 as uuidV4 } from 'uuid';\nimport { LoginResponse } from './dto/login.response';\nimport { InvalidEmailOrPasswordException } from './exceptions/invalid-email-or-password.exception.';\nimport { InvalidRefreshTokenException } from './exceptions/invalid-refresh-token.exception';\nimport { RefreshTokenPayload } from './types/refresh-token-payload';\n\n/** Responsible for authenticating the user */\n@Injectable()\nexport class AuthService {\n  /** Responsible for authenticating the user\n   *\n   * Instantiate the class and the UserService and\n   * JwtService dependencies\n   */\n  constructor(\n    private readonly userService: UserService,\n    private readonly jwtService: JwtService,\n    private readonly prismaService: PrismaService,\n  ) {}\n\n  /** Validates if the inputted email exists and\n   * compares if the hashed password matches the inputted one.\n   *\n   * If so, returns the access and refresh JWTs\n   */\n  async login(\n    email: string,\n    password: string,\n    browserInfo?: string,\n  ): Promise {\n    const user = await this.validateUser(email, password);\n\n    const payload = { sub: user.id, userRole: user.role };\n\n    const accessToken = await this.generateAccessToken(payload);\n\n    const refreshToken = await this.createRefreshToken(\n      { ...payload },\n      browserInfo,\n    );\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  /** Refreshes and rotates user's access and refresh tokens */\n  async refreshToken(\n    refreshToken: string,\n    browserInfo?: string,\n  ): Promise {\n    const refreshTokenContent: RefreshTokenPayload =\n      await this.jwtService.verifyAsync(refreshToken, refreshJwtConfig);\n\n    await this.validateRefreshToken(refreshToken, refreshTokenContent);\n\n    const accessToken = await this.generateAccessToken({\n      sub: refreshTokenContent.sub,\n      userRole: refreshTokenContent.userRole,\n    });\n\n    const newRefreshToken = await this.rotateRefreshToken(\n      refreshToken,\n      refreshTokenContent,\n      browserInfo,\n    );\n\n    return {\n      accessToken,\n      refreshToken: newRefreshToken,\n    };\n  }\n\n  /** Deletes the refreshToken from the database*/\n  async logout(refreshToken: string): Promise {\n    await this.prismaService.userTokens.deleteMany({ where: { refreshToken } });\n  }\n\n  /** Deletes all user's refresh tokens */\n  async logoutAll(userId: string): Promise {\n    await this.prismaService.userTokens.deleteMany({ where: { userId } });\n  }\n\n  /** Returns all user's active tokens */\n  async findAllTokens(userId: string): Promise {\n    const tokens = await this.prismaService.userTokens.findMany({\n      where: { userId },\n    });\n\n    return tokens;\n  }\n\n  /** Validates if the inputted email exists and\n   * compares if the hashed password matches the inputted one.\n   *\n   * If not, throws an error\n   */\n  private async validateUser(email: string, password: string): Promise {\n    const user = await this.userService.findByEmail(email);\n\n    if (user) {\n      const isPasswordValid = await compare(password, user.password);\n\n      if (isPasswordValid) {\n        return { ...user, password: undefined };\n      }\n    }\n\n    throw new InvalidEmailOrPasswordException();\n  }\n\n  /** Generates user's access token */\n  private async generateAccessToken(payload: {\n    sub: string;\n    userRole: string;\n  }): Promise {\n    const accessToken = await this.jwtService.signAsync(\n      payload,\n      accessJwtConfig,\n    );\n\n    return accessToken;\n  }\n\n  /** Creates the refresh token and saves it in the database */\n  private async createRefreshToken(\n    payload: {\n      sub: string;\n      userRole: string;\n      tokenFamily?: string;\n    },\n    browserInfo?: string,\n  ): Promise {\n    if (!payload.tokenFamily) {\n      payload.tokenFamily = uuidV4();\n    }\n\n    const refreshToken = await this.jwtService.signAsync(\n      { ...payload },\n      refreshJwtConfig,\n    );\n\n    await this.saveRefreshToken({\n      userId: payload.sub,\n      refreshToken,\n      family: payload.tokenFamily,\n      browserInfo,\n    });\n\n    return refreshToken;\n  }\n\n  /** Saves the new refresh token hashed in the database */\n  private async saveRefreshToken(refreshTokenCredentials: {\n    userId: string;\n    refreshToken: string;\n    family: string;\n    browserInfo?: string;\n  }): Promise {\n    const expiresAt = getTokenExpirationDate();\n\n    await this.prismaService.userTokens.create({\n      data: { ...refreshTokenCredentials, expiresAt },\n    });\n  }\n\n  /** Checks if the refresh token is valid */\n  private async validateRefreshToken(\n    refreshToken: string,\n    refreshTokenContent: RefreshTokenPayload,\n  ): Promise {\n    const isRefreshTokenValid = await this.prismaService.userTokens.findMany({\n      where: { userId: refreshTokenContent.sub, refreshToken },\n    });\n\n    if (isRefreshTokenValid.length === 0) {\n      await this.removeCompromisedRefreshTokenFamily(\n        refreshTokenContent.sub,\n        refreshTokenContent.tokenFamily,\n      );\n\n      throw new InvalidRefreshTokenException();\n    }\n\n    return true;\n  }\n\n  /** Removes a compromised refresh token family from the database\n   *\n   * If a token that is not in the database is used but it's family exists\n   * that means the token has been compromised and the family should me removed\n   *\n   * Refer to https://auth0.com/docs/secure/tokens/refresh-tokens/refresh-token-rotation#automatic-reuse-detection\n   */\n  private async removeCompromisedRefreshTokenFamily(\n    userId: string,\n    tokenFamily: string,\n  ): Promise {\n    await this.prismaService.userTokens.deleteMany({\n      where: { userId, family: tokenFamily },\n    });\n  }\n\n  /** Removes the old token from the database and creates a new one */\n  private async rotateRefreshToken(\n    refreshToken: string,\n    refreshTokenContent: RefreshTokenPayload,\n    browserInfo?: string,\n  ): Promise {\n    await this.prismaService.userTokens.deleteMany({ where: { refreshToken } });\n\n    const newRefreshToken = await this.createRefreshToken(\n      {\n        sub: refreshTokenContent.sub,\n        userRole: refreshTokenContent.userRole,\n        tokenFamily: refreshTokenContent.tokenFamily,\n      },\n      browserInfo,\n    );\n\n    return newRefreshToken;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthServiceInputException.html":{"url":"classes/AuthServiceInputException.html","title":"class - AuthServiceInputException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthServiceInputException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/exceptions/auth-service-input.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to extend another exception to make it\ninstanceof AuthServiceInputException\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/auth/exceptions/auth-service-input.exception.ts:5\n                            \n                        \n\n                \n                    \n                            Used to extend another exception to make it\ninstanceof AuthServiceInputException\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class AuthServiceInputException extends Error {\n  /**\n   * Used to extend another exception to make it\n   * instanceof AuthServiceInputException\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/entities/category.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of a Category in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/category/entities/category.entity.ts:9\n                        \n                    \n\n            \n                \n                    Category ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/category/entities/category.entity.ts:15\n                        \n                    \n\n            \n                \n                    Category name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\n/** Describes the properties of a Category in the database */\nexport class Category implements Prisma.CategoryUncheckedCreateInput {\n  /**\n   * Category ID as UUID\n   * @example \"e6cf9a58-438c-4fce-8d85-db3d22db270a\"\n   */\n  id?: string;\n\n  /**\n   * Category name\n   * @example \"Decoration\"\n   */\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoryController.html":{"url":"controllers/CategoryController.html","title":"controller - CategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                category\n            \n\n\n            \n                Description\n            \n            \n                Exposes category CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByName\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin creates a new category'})@IsAdmin()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:37\n                \n            \n\n\n            \n                \n                    Creates a new category, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(findCategoriesDto: FindCategoriesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns all categories'})@Public()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:51\n                \n            \n\n\n            \n                \n                    Returns all categories with pagination\nDefault is starting on page 1 showing 10 results per page,\nsearching and ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findCategoriesDto\n                                    \n                                                FindCategoriesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string, findProductsDto: FindProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin gets category by ID and its products'})@IsAdmin()@Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:61\n                \n            \n\n\n            \n                \n                    Find category by ID, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    findProductsDto\n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByName(name: string, findProductsDto: FindProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns category by name and its products'})@Public()@Get(':name')\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:72\n                \n            \n\n\n            \n                \n                    Find category by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    findProductsDto\n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin deletes category'})@IsAdmin()@Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:95\n                \n            \n\n\n            \n                \n                    Deletes category from database, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin updates category'})@IsAdmin()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:83\n                \n            \n\n\n            \n                \n                    Updates category information, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Public } from 'src/auth/public.decorator';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { FindProductsDto } from '../product/dto/find-products.dto';\nimport { CategoryService } from './category.service';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { FindCategoriesDto } from './dto/find-categories.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { Category } from './entities/category.entity';\n\n/** Exposes category CRUD endpoints */\n@ApiTags('category')\n@Controller('category')\nexport class CategoryController {\n  /** Exposes category CRUD endpoints\n   *\n   * Instantiate class and CategoryService dependency\n   */\n  constructor(private readonly categoryService: CategoryService) {}\n\n  /** Creates a new category, only for admins */\n  @ApiOperation({ summary: 'Admin creates a new category' })\n  @IsAdmin()\n  @Post()\n  async create(\n    @Body() createCategoryDto: CreateCategoryDto,\n  ): Promise {\n    return this.categoryService.create(createCategoryDto);\n  }\n\n  /** Returns all categories with pagination\n   *\n   * Default is starting on page 1 showing 10 results per page,\n   * searching and ordering by name\n   */\n  @ApiOperation({ summary: 'Returns all categories' })\n  @Public()\n  @Get()\n  async findAll(\n    @Query() findCategoriesDto: FindCategoriesDto,\n  ): Promise {\n    return this.categoryService.findAll(findCategoriesDto);\n  }\n\n  /** Find category by ID, only for admins */\n  @ApiOperation({ summary: 'Admin gets category by ID and its products' })\n  @IsAdmin()\n  @Get('/id/:id')\n  async findOneById(\n    @Param('id') id: string,\n    @Query() findProductsDto: FindProductsDto,\n  ): Promise {\n    return this.categoryService.findOneById(id, findProductsDto);\n  }\n\n  /** Find category by name */\n  @ApiOperation({ summary: 'Returns category by name and its products' })\n  @Public()\n  @Get(':name')\n  async findOneByName(\n    @Param('name') name: string,\n    @Query() findProductsDto: FindProductsDto,\n  ): Promise {\n    return this.categoryService.findOneByName(name, findProductsDto);\n  }\n\n  /** Updates category information, only for admins */\n  @ApiOperation({ summary: 'Admin updates category' })\n  @IsAdmin()\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updateCategoryDto: UpdateCategoryDto,\n  ): Promise {\n    return this.categoryService.update(id, updateCategoryDto);\n  }\n\n  /** Deletes category from database, only for admins */\n  @ApiOperation({ summary: 'Admin deletes category' })\n  @IsAdmin()\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async remove(@Param('id') id: string): Promise {\n    return this.categoryService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoryModule.html":{"url":"modules/CategoryModule.html","title":"module - CategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_imports\n\n\n\ncluster_CategoryModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nPrismaModule->CategoryModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/category/category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoryService } from './category.service';\nimport { CategoryController } from './category.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\n\n@Module({\n  controllers: [CategoryController],\n  imports: [PrismaModule],\n  providers: [CategoryService],\n})\nexport class CategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryNameInUseException.html":{"url":"classes/CategoryNameInUseException.html","title":"class - CategoryNameInUseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryNameInUseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/category/category-name-in-use.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\na category name that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/category/category-name-in-use.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'Category name already in use'. Used when the user inputs\na category name that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * a category name that is already registered in the system\n */\nexport class CategoryNameInUseException extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'Category name already in use'. Used when the user inputs\n   * a category name that is already registered in the system\n   */\n  constructor() {\n    super('Category name already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryNotFoundException.html":{"url":"classes/CategoryNotFoundException.html","title":"class - CategoryNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/category/category-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\na category that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/category/category-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'Category not found'. Used when the user inputs\na category that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * a category that is not registered in the system\n */\nexport class CategoryNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'Category not found'. Used when the user inputs\n   * a category that is not registered in the system\n   */\n  constructor() {\n    super('Category not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/category.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing categories in the database.\nCRUD endpoints are available for categories.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                capitalizeOnlyFirstLetter\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByName\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Private\n                                updateCategoryAndName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/category/category.service.ts:13\n                            \n                        \n\n                \n                    \n                            Responsible for managing categories in the database.\nCRUD endpoints are available for categories.\nInstantiates the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        capitalizeOnlyFirstLetter\n                        \n                    \n                \n            \n            \n                \n                    \n                    capitalizeOnlyFirstLetter(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:124\n                \n            \n\n\n            \n                \n                    Capitalize only the first letter of the category name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:22\n                \n            \n\n\n            \n                \n                    Creates a new category\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: FindCategoriesDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:36\n                \n            \n\n\n            \n                \n                    Returns all categories with pagination and can search by name\nDefault is starting on page 1 showing 10 results per page\nand ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindCategoriesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string, undefined: FindProductsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:54\n                \n            \n\n\n            \n                \n                    Find category by ID and show the products that have this category\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByName(name: string, undefined: FindProductsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:77\n                \n            \n\n\n            \n                \n                    Find category by name and show the products that have this category\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:119\n                \n            \n\n\n            \n                \n                    Removes category from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:102\n                \n            \n\n\n            \n                \n                    Updates category information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        updateCategoryAndName\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCategoryAndName(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:132\n                \n            \n\n\n            \n                \n                    Formats name and updates the category with the new one.\nUsed when the user updates the category name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { FindProductsDto } from '../product/dto/find-products.dto';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { FindCategoriesDto } from './dto/find-categories.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { Category } from './entities/category.entity';\n\n/** Responsible for managing categories in the database.\n * CRUD endpoints are available for categories.\n */\n@Injectable()\nexport class CategoryService {\n  /** Responsible for managing categories in the database.\n   * CRUD endpoints are available for categories.\n   *\n   * Instantiates the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new category */\n  async create(createCategoryDto: CreateCategoryDto): Promise {\n    const name = this.capitalizeOnlyFirstLetter(createCategoryDto.name);\n\n    const category = await this.prisma.category.create({\n      data: { ...createCategoryDto, name },\n    });\n\n    return category;\n  }\n\n  /** Returns all categories with pagination and can search by name\n   * Default is starting on page 1 showing 10 results per page\n   * and ordering by name\n   */\n  async findAll({\n    categoryName = '',\n    page = 1,\n    offset = 10,\n  }: FindCategoriesDto): Promise {\n    const categoriesToSkip = (page - 1) * offset;\n\n    return this.prisma.category.findMany({\n      skip: categoriesToSkip,\n      take: offset,\n      where: {\n        name: { contains: categoryName, mode: 'insensitive' },\n      },\n      orderBy: { name: 'asc' },\n    });\n  }\n\n  /** Find category by ID and show the products that have this category */\n  async findOneById(\n    id: string,\n    { productName = '', page = 1, offset = 10 }: FindProductsDto,\n  ): Promise {\n    const productsToSkip = (page - 1) * offset;\n\n    const category = await this.prisma.category.findUnique({\n      where: { id },\n      include: {\n        products: {\n          select: { id: true, name: true, urlName: true, picture: true },\n          where: { name: { contains: productName, mode: 'insensitive' } },\n          skip: productsToSkip,\n          take: offset,\n        },\n      },\n      rejectOnNotFound: true,\n    });\n\n    return category;\n  }\n\n  /** Find category by name and show the products that have this category */\n  async findOneByName(\n    name: string,\n    { productName = '', page = 1, offset = 10 }: FindProductsDto,\n  ): Promise {\n    const productsToSkip = (page - 1) * offset;\n\n    name = this.capitalizeOnlyFirstLetter(name);\n\n    const category = await this.prisma.category.findUnique({\n      where: { name },\n      include: {\n        products: {\n          select: { id: true, name: true, urlName: true, picture: true },\n          where: { name: { contains: productName, mode: 'insensitive' } },\n          skip: productsToSkip,\n          take: offset,\n        },\n      },\n      rejectOnNotFound: true,\n    });\n\n    return category;\n  }\n\n  /** Updates category information */\n  async update(\n    id: string,\n    updateCategoryDto: UpdateCategoryDto,\n  ): Promise {\n    if (updateCategoryDto.name) {\n      return this.updateCategoryAndName(id, updateCategoryDto);\n    }\n\n    const category = await this.prisma.category.update({\n      where: { id },\n      data: { ...updateCategoryDto },\n    });\n\n    return category;\n  }\n\n  /** Removes category from database */\n  async remove(id: string): Promise {\n    await this.prisma.category.delete({ where: { id } });\n  }\n\n  /** Capitalize only the first letter of the category name */\n  private capitalizeOnlyFirstLetter(name: string): string {\n    return name[0].toUpperCase() + name.substring(1).toLocaleLowerCase();\n  }\n\n  /** Formats name and updates the category with the new one.\n   *\n   * Used when the user updates the category name.\n   */\n  private updateCategoryAndName(\n    id: string,\n    updateCategoryDto: UpdateCategoryDto,\n  ): Promise {\n    const name = this.capitalizeOnlyFirstLetter(updateCategoryDto.name);\n\n    return this.prisma.category.update({\n      where: { id },\n      data: { ...updateCategoryDto, name },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/dto/create-category.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create a Category\n\n            \n\n\n            \n                Implements\n            \n            \n                            Category\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/create-category.dto.ts:12\n                        \n                    \n\n            \n                \n                    Category name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { Category } from '../entities/category.entity';\n\n/** Describes the fields needed to create a Category */\nexport class CreateCategoryDto implements Category {\n  /**\n   * Category name\n   * @example \"Decoration\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/create-product.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create a Product\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                basePrice\n                            \n                            \n                                    Optional\n                                categories\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                discountPercentage\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                stock\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        basePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Decimal\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:36\n                        \n                    \n\n            \n                \n                    Product price not considering discounts.\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:67\n                        \n                    \n\n            \n                \n                    Category IDs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:59\n                        \n                    \n\n            \n                \n                    Product description\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        discountPercentage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:44\n                        \n                    \n\n            \n                \n                    Product discount in percentage. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:26\n                        \n                    \n\n            \n                \n                    Product name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:51\n                        \n                    \n\n            \n                \n                    Product stock amount. Defaults to 0\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { Decimal } from '@prisma/client/runtime';\nimport {\n  IsArray,\n  IsInt,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { Product } from '../entities/product.entity';\n\n/** Describes the fields needed to create a Product */\nexport class CreateProductDto extends OmitType(Product, [\n  'id',\n  'createdAt',\n  'urlName',\n  'picture',\n] as const) {\n  /**\n   * Product name\n   * @example \"Brand black wheelchair\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Product price not considering discounts.\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 70.00\n   */\n  @IsNumber()\n  @IsNotEmpty()\n  basePrice: string | number | Decimal;\n\n  /**\n   * Product discount in percentage. Defaults to 0\n   * @example 10\n   */\n  @IsNumber()\n  @IsOptional()\n  discountPercentage?: number;\n\n  /** Product stock amount. Defaults to 0\n   * @example 42\n   */\n  @IsInt()\n  @IsOptional()\n  stock?: number;\n\n  /**\n   * Product description\n   * @example \"Black wheelchair for offices\"\n   */\n  @IsString()\n  @IsOptional()\n  description?: string;\n\n  /**\n   * Category IDs\n   * @example [\"857cd575-956b-49f3-a75e-2e651e21b871\", \"fa244865-0878-4688-ac63-e3ecf4939a89\"]\n   */\n  @IsOptional()\n  @IsArray()\n  categories?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePurchaseDto.html":{"url":"classes/CreatePurchaseDto.html","title":"class - CreatePurchaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePurchaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/dto/create-purchase.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create a Purchase\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                amount\n                            \n                            \n                                productId\n                            \n                            \n                                totalPrice\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsPositive()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/create-purchase.dto.ts:27\n                        \n                    \n\n            \n                \n                    Amount purchased of the product\nDefaults to 1\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/create-purchase.dto.ts:18\n                        \n                    \n\n            \n                \n                    Product ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Decimal\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/create-purchase.dto.ts:36\n                        \n                    \n\n            \n                \n                    Price payed per product multiplied by the amount\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { Decimal } from '@prisma/client/runtime';\nimport { IsNumber, IsOptional, IsPositive, IsUUID } from 'class-validator';\nimport { Purchase } from '../entities/purchase.entity';\n\n/** Describes the fields needed to create a Purchase */\nexport class CreatePurchaseDto extends OmitType(Purchase, [\n  'id',\n  'userId',\n  'createdAt',\n  'reviewNote',\n  'reviewComment',\n]) {\n  /** Product ID as UUID\n   * @example \"5c68ae94-bf3e-4fde-b01f-25d18b3976a0\"\n   */\n  @IsUUID(4)\n  productId: string;\n\n  /** Amount purchased of the product\n   * Defaults to 1\n   * @example 2\n   */\n  @IsNumber()\n  @IsPositive()\n  @IsOptional()\n  amount?: number;\n\n  /** Price payed per product multiplied by the amount\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 138.75\n   */\n  @IsNumber()\n  @IsPositive()\n  totalPrice: string | number | Decimal;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create an User\n\n            \n\n\n            \n                Implements\n            \n            \n                            User\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:44\n                        \n                    \n\n            \n                \n                    User address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({message: 'Must be an e-mail'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:17\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:36\n                        \n                    \n\n            \n                \n                    User name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8, {message: 'Password must have length of at least 8'})@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[a-z]).*$/, {message: 'Password must contain at least 1 number and 1 letter'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:28\n                        \n                    \n\n            \n                \n                    User password must contain at least 1 number and 1 letter\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\nimport { User } from '../entities/user.entity';\n\n/** Describes the fields needed to create an User */\nexport class CreateUserDto implements User {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsEmail({ message: 'Must be an e-mail' })\n  email: string;\n\n  /**\n   * User password must contain at least 1 number and 1 letter\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @MinLength(8, { message: 'Password must have length of at least 8' })\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[a-z]).*$/, {\n    message: 'Password must contain at least 1 number and 1 letter',\n  })\n  password: string;\n\n  /**\n   * User name\n   * @example \"John Doe\"\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  /**\n   * User address\n   * @example \"World Street 0\"\n   */\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserDto.html":{"url":"classes/DeleteUserDto.html","title":"class - DeleteUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/delete-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to delete an User\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/delete-user.dto.ts:11\n                        \n                    \n\n            \n                \n                    User current password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/** Describes the fields needed to delete an User */\nexport class DeleteUserDto {\n  /**\n   * User current password\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  currentPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailInUseException.html":{"url":"classes/EmailInUseException.html","title":"class - EmailInUseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailInUseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/user/email-in-use.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\nan email that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/user/email-in-use.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'E-mail already in use'. Used when the user inputs\nan email that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * an email that is already registered in the system\n */\nexport class EmailInUseException extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'E-mail already in use'. Used when the user inputs\n   * an email that is already registered in the system\n   */\n  constructor() {\n    super('E-mail already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExceptionHandler.html":{"url":"interfaces/ExceptionHandler.html","title":"interface - ExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for Exception Handlers\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        handle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/exception.handler.ts:4\n                \n            \n\n\n            \n                \n                    Function to handle specific error types\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface ExceptionHandler {\n  /** Function to handle specific error types */\n  handle(error: Error): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExceptionInterceptor.html":{"url":"injectables/ExceptionInterceptor.html","title":"injectable - ExceptionInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExceptionInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/exception.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor to transform app erros into HTTP errors\nFor more about NestJs interceptors: https://docs.nestjs.com/interceptors\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler<>)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/exception.interceptor.ts:24\n                \n            \n\n\n            \n                \n                    Catches app errors and throws the\nrespective HTTP error\nUses default NestJs boilerplate, for more\ninformation: https://docs.nestjs.com/interceptors\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler<>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { catchError, Observable } from 'rxjs';\nimport { JwtExceptionHandler } from './handlers/jwt-exception.handler';\nimport { PrismaExceptionHandler } from './handlers/prisma-exception.handler';\nimport { UserInputExceptionHandler } from './handlers/user-input-exception.handler';\n\n/** Interceptor to transform app erros into HTTP errors\n *\n * For more about NestJs interceptors: https://docs.nestjs.com/interceptors\n */\n@Injectable()\nexport class ExceptionInterceptor implements NestInterceptor {\n  /** Catches app errors and throws the\n   * respective HTTP error\n   *\n   * Uses default NestJs boilerplate, for more\n   * information: https://docs.nestjs.com/interceptors\n   */\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | Promise> {\n    return next.handle().pipe(\n      catchError((error) => {\n        new UserInputExceptionHandler().handle(error);\n\n        new PrismaExceptionHandler().handle(error);\n\n        new JwtExceptionHandler().handle(error);\n\n        throw error;\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileTypeError.html":{"url":"classes/FileTypeError.html","title":"class - FileTypeError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileTypeError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/exceptions/file-type.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs an invalid file type\nuploading a picture\n\n            \n\n            \n                Extends\n            \n            \n                        ProductServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fileTypes: RegExp)\n                    \n                \n                        \n                            \n                                Defined in src/models/product/exceptions/file-type.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'File upload only supports the following\nfiletypes - {fileTypes}'.\nUsed when the user inputs an invalid file type\nuploading a picture\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileTypes\n                                                  \n                                                        \n                                                                    RegExp\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ProductServiceInputException } from './product-service-input.exception';\n\n/** Used when the user inputs an invalid file type\n * uploading a picture\n */\nexport class FileTypeError extends ProductServiceInputException {\n  /** Throws exception with message 'File upload only supports the following\n   * filetypes - {fileTypes}'.\n   *\n   * Used when the user inputs an invalid file type\n   * uploading a picture\n   */\n  constructor(fileTypes: RegExp) {\n    super(`File upload only supports the following filetypes - ${fileTypes}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/file-upload.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to upload a file\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', format: 'binary'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/file-upload.dto.ts:10\n                        \n                    \n\n            \n                \n                    Product picture\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\n/** Describes the information needed to upload a file */\nexport class FileUploadDto {\n  /**\n   * Product picture\n   * @example \"picture.png\"\n   */\n  @ApiProperty({ type: 'string', format: 'binary' })\n  file: Express.Multer.File;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindCategoriesDto.html":{"url":"classes/FindCategoriesDto.html","title":"class - FindCategoriesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindCategoriesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/dto/find-categories.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information to search for categories\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                categoryName\n                            \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        categoryName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/find-categories.dto.ts:11\n                        \n                    \n\n            \n                \n                    String containing in category name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/find-categories.dto.ts:29\n                        \n                    \n\n            \n                \n                    Show this amount of categories per page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/find-categories.dto.ts:20\n                        \n                    \n\n            \n                \n                    Show categories in this page\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsInt, IsOptional, IsPositive, IsString } from 'class-validator';\n\n/** Describes the information to search for categories */\nexport class FindCategoriesDto {\n  /** String containing in category name\n   * @example \"chair\"\n   */\n  @IsOptional()\n  @IsString()\n  categoryName?: string;\n\n  /** Show categories in this page\n   * @example 1\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  page?: number;\n\n  /** Show this amount of categories per page\n   * @example 10\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  offset?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindProductsDto.html":{"url":"classes/FindProductsDto.html","title":"class - FindProductsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindProductsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/find-products.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information to search for products\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                page\n                            \n                            \n                                    Optional\n                                productName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-products.dto.ts:29\n                        \n                    \n\n            \n                \n                    Show this amount of products per page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-products.dto.ts:20\n                        \n                    \n\n            \n                \n                    Show products in this page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        productName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-products.dto.ts:11\n                        \n                    \n\n            \n                \n                    String containing in product name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsInt, IsOptional, IsPositive, IsString } from 'class-validator';\n\n/** Describes the information to search for products */\nexport class FindProductsDto {\n  /** String containing in product name\n   * @example \"chair\"\n   */\n  @IsOptional()\n  @IsString()\n  productName?: string;\n\n  /** Show products in this page\n   * @example 1\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  page?: number;\n\n  /** Show this amount of products per page\n   * @example 10\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  offset?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindPurchasesDto.html":{"url":"classes/FindPurchasesDto.html","title":"class - FindPurchasesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindPurchasesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/dto/find-purchases.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information to search for purchases\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                page\n                            \n                            \n                                    Optional\n                                productId\n                            \n                            \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/find-purchases.dto.ts:36\n                        \n                    \n\n            \n                \n                    Show this amount of purchases per page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/find-purchases.dto.ts:27\n                        \n                    \n\n            \n                \n                    Show purchases in this page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/find-purchases.dto.ts:18\n                        \n                    \n\n            \n                \n                    String matching product ID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/find-purchases.dto.ts:11\n                        \n                    \n\n            \n                \n                    String matching user ID\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsInt, IsOptional, IsPositive, IsString } from 'class-validator';\n\n/** Describes the information to search for purchases */\nexport class FindPurchasesDto {\n  /** String matching user ID\n   * @example \"b0e0c99e-541c-463b-8fd6-306e52f9e686\"\n   */\n  @IsOptional()\n  @IsString()\n  userId?: string;\n\n  /** String matching product ID\n   * @example \"26c3fd79-f5bd-4646-a287-32d0226134e2\"\n   */\n  @IsOptional()\n  @IsString()\n  productId?: string;\n\n  /** Show purchases in this page\n   * @example 1\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  page?: number;\n\n  /** Show this amount of purchases per page\n   * @example 10\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  offset?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidEmailOrPasswordException.html":{"url":"classes/InvalidEmailOrPasswordException.html","title":"class - InvalidEmailOrPasswordException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidEmailOrPasswordException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/exceptions/invalid-email-or-password.exception..ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs the wrong email\nor password when trying to login\n\n            \n\n            \n                Extends\n            \n            \n                        AuthServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/exceptions/invalid-email-or-password.exception..ts:6\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Invalid email or password'.\nUsed when the user inputs the wrong email\nor password when trying to login\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthServiceInputException } from './auth-service-input.exception';\n\n/** Used when the user inputs the wrong email\n * or password when trying to login\n */\nexport class InvalidEmailOrPasswordException extends AuthServiceInputException {\n  /** Throws exception with message 'Invalid email or password'.\n   *\n   * Used when the user inputs the wrong email\n   * or password when trying to login\n   */\n  constructor() {\n    super('Invalid email or password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidPasswordUpdateException.html":{"url":"classes/InvalidPasswordUpdateException.html","title":"class - InvalidPasswordUpdateException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidPasswordUpdateException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/exceptions/invalid-password-update.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs the wrong\ncurrent password when trying to create a new password\n\n            \n\n            \n                Extends\n            \n            \n                        UserServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/models/user/exceptions/invalid-password-update.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Invalid current password'.\nUsed when the user inputs the wrong current password when\ntrying to create a new password\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserServiceInputException } from './user-service-input.exception';\n\n/** Used when the user inputs the wrong\n * current password when trying to create a new password\n */\nexport class InvalidPasswordUpdateException extends UserServiceInputException {\n  /** Throws exception with message 'Invalid current password'.\n   *\n   * Used when the user inputs the wrong current password when\n   * trying to create a new password\n   */\n  constructor() {\n    super('Invalid current password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidRefreshTokenException.html":{"url":"classes/InvalidRefreshTokenException.html","title":"class - InvalidRefreshTokenException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidRefreshTokenException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/exceptions/invalid-refresh-token.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs an invalid token\nwhen refreshing\n\n            \n\n            \n                Extends\n            \n            \n                        AuthServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/exceptions/invalid-refresh-token.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Invalid refresh token'.\nUsed when the user inputs an invalid token\nwhen refreshing\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthServiceInputException } from './auth-service-input.exception';\n\n/** Used when the user inputs an invalid token\n * when refreshing\n */\nexport class InvalidRefreshTokenException extends AuthServiceInputException {\n  /** Throws exception with message 'Invalid refresh token'.\n   *\n   * Used when the user inputs an invalid token\n   * when refreshing\n   */\n  constructor() {\n    super('Invalid refresh token');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtExceptionHandler.html":{"url":"classes/JwtExceptionHandler.html","title":"class - JwtExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/jwt-exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Catches JsonWebToken Errors and throws the\nrespective HTTP error\n\n            \n\n\n            \n                Implements\n            \n            \n                            ExceptionHandler\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                jwtErrorNames\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                            \n                                    Private\n                                isJwtException\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        jwtErrorNames\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    'TokenExpiredError',\n    'JsonWebTokenError',\n    'NotBeforeError',\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/common/interceptors/handlers/jwt-exception.handler.ts:12\n                        \n                    \n\n            \n                \n                    Possible Jwt Error names\nRefer to https://www.npmjs.com/package/jsonwebtoken#errors--codes\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/jwt-exception.handler.ts:21\n                \n            \n\n\n            \n                \n                    Catches JsonWebToken Errors and throws the\nrespective HTTP error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isJwtException\n                        \n                    \n                \n            \n            \n                \n                    \n                    isJwtException(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/jwt-exception.handler.ts:28\n                \n            \n\n\n            \n                \n                    Returns whether the error is a JwtError or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UnauthorizedException } from '@nestjs/common';\nimport { ExceptionHandler } from './exception.handler';\n\n/** Catches JsonWebToken Errors and throws the\n * respective HTTP error\n */\nexport class JwtExceptionHandler implements ExceptionHandler {\n  /** Possible Jwt Error names\n   *\n   * Refer to https://www.npmjs.com/package/jsonwebtoken#errors--codes\n   */\n  private jwtErrorNames = [\n    'TokenExpiredError',\n    'JsonWebTokenError',\n    'NotBeforeError',\n  ];\n\n  /** Catches JsonWebToken Errors and throws the\n   * respective HTTP error\n   */\n  handle(error: Error): void {\n    if (this.isJwtException(error)) {\n      throw new UnauthorizedException('Invalid authorization token');\n    }\n  }\n\n  /** Returns whether the error is a JwtError or not */\n  private isJwtException(error: Error): boolean {\n    return this.jwtErrorNames.includes(error.name);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginCredentialsDto.html":{"url":"classes/LoginCredentialsDto.html","title":"class - LoginCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-credentials.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to authenticate an User to the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-credentials.dto.ts:11\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-credentials.dto.ts:19\n                        \n                    \n\n            \n                \n                    User password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/** Describes the information needed to authenticate an User to the application */\nexport class LoginCredentialsDto {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  email: string;\n\n  /**\n   * User password\n   * @example \"abc123456\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginResponse.html":{"url":"classes/LoginResponse.html","title":"class - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.response.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the response received when the Login route is successfully called\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                            \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.response.ts:7\n                        \n                    \n\n            \n                \n                    Access JWT Authentication token\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.response.ts:13\n                        \n                    \n\n            \n                \n                    Refresh JWT Authentication token\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LoginResponse {\n  /**\n   * Access JWT Authentication token\n   * @example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5NWFkMzNhNS0wYjk4LTQ2ODYtYjFmMS1hMTkwNzM0NWJmYzciLCJpYXQiOjE2NDg0NzU3MzEsImV4cCI6MTY0ODQ3NjYzMX0.h3z3JDvHOi6y5C_N0Kt6tdP2nWK_dHBZxioQn7VANNo\"\n   */\n  accessToken: string;\n\n  /**\n   * Refresh JWT Authentication token\n   * @example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n   */\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogoutDto.html":{"url":"classes/LogoutDto.html","title":"class - LogoutDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogoutDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/logout.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to logout an User of the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsJWT()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/logout.dto.ts:10\n                        \n                    \n\n            \n                \n                    User refresh token\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJWT } from 'class-validator';\n\n/** Describes the information needed to logout an User of the application */\nexport class LogoutDto {\n  /**\n   * User refresh token\n   * @example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n   */\n  @IsJWT()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MissingPasswordUpdateException.html":{"url":"classes/MissingPasswordUpdateException.html","title":"class - MissingPasswordUpdateException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MissingPasswordUpdateException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/exceptions/missing-password-update.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs only the current password\nor the new password, but both are needed to update\nthe password\n\n            \n\n            \n                Extends\n            \n            \n                        UserServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/models/user/exceptions/missing-password-update.exception.ts:7\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Please enter both new\npassword and current password'.\nUsed when the user inputs only the current password\nor the new password, but both are needed to update\nthe password\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserServiceInputException } from './user-service-input.exception';\n\n/** Used when the user inputs only the current password\n * or the new password, but both are needed to update\n * the password\n */\nexport class MissingPasswordUpdateException extends UserServiceInputException {\n  /** Throws exception with message 'Please enter both new\n   * password and current password'.\n   *\n   * Used when the user inputs only the current password\n   * or the new password, but both are needed to update\n   * the password\n   */\n  constructor() {\n    super('Please enter both new password and current password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotPurchaseOwnerException.html":{"url":"classes/NotPurchaseOwnerException.html","title":"class - NotPurchaseOwnerException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotPurchaseOwnerException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/exceptions/not-purchase-owner.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used if the users try to review a purchase that they do not own\n\n            \n\n            \n                Extends\n            \n            \n                        PurchaseServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/models/purchase/exceptions/not-purchase-owner.exception.ts:4\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Purchase not found'.\nUsed if the users try to review a purchase that they do not own\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PurchaseServiceInputException } from './purchase-service-input.exception';\n\n/** Used if the users try to review a purchase that they do not own */\nexport class NotPurchaseOwnerException extends PurchaseServiceInputException {\n  /** Throws exception with message 'Purchase not found'.\n   *\n   * Used if the users try to review a purchase that they do not own\n   */\n  constructor() {\n    super('Purchase not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrismaExceptionHandler.html":{"url":"classes/PrismaExceptionHandler.html","title":"class - PrismaExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrismaExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/prisma-exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Catches Prisma ORM errors and throws the\nrespective HTTP error\n\n            \n\n\n            \n                Implements\n            \n            \n                            ExceptionHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                            \n                                    Private\n                                isCategoryError\n                            \n                            \n                                    Private\n                                isCategoryNameConstraintViolation\n                            \n                            \n                                    Private\n                                isCreateProductError\n                            \n                            \n                                    Private\n                                isEmailConstraintViolation\n                            \n                            \n                                    Private\n                                isPrismaUnknownError\n                            \n                            \n                                    Private\n                                isProductError\n                            \n                            \n                                    Private\n                                isProductNameConstraintViolation\n                            \n                            \n                                    Private\n                                isPurchaseError\n                            \n                            \n                                    Private\n                                isUserError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:19\n                \n            \n\n\n            \n                \n                    Catches Prisma ORM errors and throws the\nrespective HTTP error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isCategoryError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isCategoryError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:136\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an category prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isCategoryNameConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isCategoryNameConstraintViolation(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:108\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the category name field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isCreateProductError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isCreateProductError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:131\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an create product prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isEmailConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isEmailConstraintViolation(errorMeta: object)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:92\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the email field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorMeta\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isPrismaUnknownError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isPrismaUnknownError(error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:87\n                \n            \n\n\n            \n                \n                    Checks if the error contains clientVersion,\nmaking it an unknown prisma error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isProductError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isProductError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:123\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an update or delete product prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isProductNameConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isProductNameConstraintViolation(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:97\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the product name field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isPurchaseError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isPurchaseError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:141\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an purchase prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isUserError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isUserError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:118\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an user prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PrismaClientKnownRequestError } from '@prisma/client/runtime';\nimport { PrismaError } from 'prisma-error-enum';\nimport { CategoryNameInUseException } from 'src/common/exceptions/category/category-name-in-use.exception';\nimport { CategoryNotFoundException } from 'src/common/exceptions/category/category-not-found.exception';\nimport { ProductNameInUseException } from 'src/common/exceptions/product/product-name-in-use.exception';\nimport { ProductNotFoundException } from 'src/common/exceptions/product/product-not-found.exception';\nimport { PurchaseNotFoundException } from 'src/common/exceptions/purchase/purchase-not-found.exception';\nimport { EmailInUseException } from 'src/common/exceptions/user/email-in-use.exception';\nimport { UserNotFoundException } from 'src/common/exceptions/user/user-not-found.exception';\nimport { ExceptionHandler } from './exception.handler';\n\n/** Catches Prisma ORM errors and throws the\n * respective HTTP error\n */\nexport class PrismaExceptionHandler implements ExceptionHandler {\n  /** Catches Prisma ORM errors and throws the\n   * respective HTTP error\n   */\n  handle(error: Error): void {\n    if (error instanceof PrismaClientKnownRequestError) {\n      switch (error.code) {\n        case PrismaError.UniqueConstraintViolation:\n          if (this.isEmailConstraintViolation(error.meta)) {\n            throw new EmailInUseException();\n          }\n\n          if (this.isProductNameConstraintViolation(error)) {\n            throw new ProductNameInUseException();\n          }\n\n          if (this.isCategoryNameConstraintViolation(error)) {\n            throw new CategoryNameInUseException();\n          }\n          break;\n\n        case PrismaError.ForeignConstraintViolation:\n          if (this.isPurchaseError(error)) {\n            throw new ProductNotFoundException();\n          }\n          break;\n\n        case PrismaError.RecordsNotFound:\n          if (this.isUserError(error)) {\n            throw new UserNotFoundException();\n          }\n\n          if (this.isProductError(error)) {\n            throw new ProductNotFoundException();\n          }\n\n          if (this.isCreateProductError(error)) {\n            throw new CategoryNotFoundException();\n          }\n\n          if (this.isCategoryError(error)) {\n            throw new CategoryNotFoundException();\n          }\n\n          if (this.isPurchaseError(error)) {\n            throw new PurchaseNotFoundException();\n          }\n          break;\n\n        default:\n          throw error;\n      }\n    }\n\n    if (this.isPrismaUnknownError(error)) {\n      if (error.message === 'No Product found') {\n        throw new ProductNotFoundException();\n      }\n\n      if (error.message === 'No Category found') {\n        throw new CategoryNotFoundException();\n      }\n\n      if (error.message === 'No Purchase found') {\n        throw new PurchaseNotFoundException();\n      }\n    }\n  }\n\n  /** Checks if the error contains clientVersion,\n   * making it an unknown prisma error\n   * */\n  private isPrismaUnknownError(error): boolean {\n    return !!error.clientVersion;\n  }\n\n  /** Returns wether the error happened in the email field or not */\n  private isEmailConstraintViolation(errorMeta: object): boolean {\n    return Object.values(errorMeta)[0][0] === 'email';\n  }\n\n  /** Returns wether the error happened in the product name field or not */\n  private isProductNameConstraintViolation(\n    error: PrismaClientKnownRequestError,\n  ): boolean {\n    return (\n      (Object.values(error.meta)[0][0] === 'name' ||\n        Object.values(error.meta)[0][0] === 'urlName') &&\n      error.message.includes('prisma.product')\n    );\n  }\n\n  /** Returns wether the error happened in the category name field or not */\n  private isCategoryNameConstraintViolation(\n    error: PrismaClientKnownRequestError,\n  ): boolean {\n    return (\n      Object.values(error.meta)[0][0] === 'name' &&\n      error.message.includes('prisma.category')\n    );\n  }\n\n  /** Returns wether the error happened on an user prisma query or not */\n  private isUserError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.user');\n  }\n\n  /** Returns wether the error happened on an update or delete product prisma query or not */\n  private isProductError(error: PrismaClientKnownRequestError): boolean {\n    return (\n      error.message.includes('prisma.product.update') ||\n      error.message.includes('prisma.product.delete')\n    );\n  }\n\n  /** Returns wether the error happened on an create product prisma query or not */\n  private isCreateProductError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.product.create');\n  }\n\n  /** Returns wether the error happened on an category prisma query or not */\n  private isCategoryError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.category');\n  }\n\n  /** Returns wether the error happened on an purchase prisma query or not */\n  private isPurchaseError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.purchase');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n            \n                Description\n            \n            \n                ORM responsible for connecting to the database\nBoilerplate from https://docs.nestjs.com/recipes/prisma\n\n            \n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:25\n                \n            \n\n\n            \n                \n                    Prisma interferes with NestJS enableShutdownHooks.\nPrisma listens for shutdown signals and will call process.exit()\nbefore your application shutdown hooks fire.\nhttps://docs.nestjs.com/recipes/prisma\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:15\n                \n            \n\n\n            \n                \n                    Optional — if you leave it out,\nPrisma will connect lazily on its first call to the database.\nhttps://docs.nestjs.com/recipes/prisma\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n/** ORM responsible for connecting to the database\n *\n * Boilerplate from https://docs.nestjs.com/recipes/prisma\n */\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  /** Optional — if you leave it out,\n   * Prisma will connect lazily on its first call to the database.\n   *\n   * https://docs.nestjs.com/recipes/prisma\n   */\n  async onModuleInit(): Promise {\n    await this.$connect();\n  }\n\n  /** Prisma interferes with NestJS enableShutdownHooks.\n   * Prisma listens for shutdown signals and will call process.exit()\n   * before your application shutdown hooks fire.\n   *\n   * https://docs.nestjs.com/recipes/prisma\n   */\n  async enableShutdownHooks(app: INestApplication): Promise {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Product.html":{"url":"classes/Product.html","title":"class - Product","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/entities/product.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of a Product in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                basePrice\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                discountPercentage\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                picture\n                            \n                            \n                                    Optional\n                                stock\n                            \n                            \n                                urlName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        basePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Prisma.Decimal\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:35\n                        \n                    \n\n            \n                \n                    Product price not considering discounts.\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:58\n                        \n                    \n\n            \n                \n                    Product createdAt dateString\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:52\n                        \n                    \n\n            \n                \n                    Product description\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        discountPercentage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:41\n                        \n                    \n\n            \n                \n                    Product discount in percentage. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:9\n                        \n                    \n\n            \n                \n                    Product ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:15\n                        \n                    \n\n            \n                \n                    Product name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:27\n                        \n                    \n\n            \n                \n                    Product picture\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:46\n                        \n                    \n\n            \n                \n                    Product stock amount. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        urlName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:21\n                        \n                    \n\n            \n                \n                    Product name turned to url\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\n/** Describes the properties of a Product in the database */\nexport class Product implements Prisma.ProductUncheckedCreateInput {\n  /**\n   * Product ID as UUID\n   * @example \"6f4ca8a4-8aa0-4302-ac1b-7b5547f01b0a\"\n   */\n  id?: string;\n\n  /**\n   * Product name\n   * @example \"Brand black wheelchair\"\n   */\n  name: string;\n\n  /**\n   * Product name turned to url\n   * @example \"brand-black-wheelchair\"\n   */\n  urlName: string;\n\n  /**\n   * Product picture\n   * @example \"image.jpg\"\n   */\n  picture?: string;\n\n  /**\n   * Product price not considering discounts.\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 70.00\n   */\n  basePrice: string | number | Prisma.Decimal;\n\n  /**\n   * Product discount in percentage. Defaults to 0\n   * @example 10\n   */\n  discountPercentage?: number;\n\n  /** Product stock amount. Defaults to 0\n   * @example 42\n   */\n  stock?: number;\n\n  /**\n   * Product description\n   * @example \"Black wheelchair for offices\"\n   */\n  description?: string;\n\n  /**\n   * Product createdAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  createdAt?: string | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductController.html":{"url":"controllers/ProductController.html","title":"controller - ProductController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                product\n            \n\n\n            \n                Description\n            \n            \n                Exposes product CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOneById\n                            \n                            \n                                findOneByUrlName\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                uploadPhoto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createProductDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin creates a new product'})@IsAdmin()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:38\n                \n            \n\n\n            \n                \n                    Creates a new product, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(findAllProductsDto: FindProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns all products'})@Public()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:50\n                \n            \n\n\n            \n                \n                    Returns all products with pagination\nDefault is starting on page 1 showing 10 results per page,\nsearching and ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findAllProductsDto\n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin gets product by ID'})@IsAdmin()@Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:58\n                \n            \n\n\n            \n                \n                    Find product by ID, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByUrlName\n                        \n                    \n                \n            \n            \n                \nfindOneByUrlName(urlName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Gets product by urlName'})@Public()@Get(':urlName')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:66\n                \n            \n\n\n            \n                \n                    Find product by Url Name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    urlName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin deletes product'})@IsAdmin()@Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:104\n                \n            \n\n\n            \n                \n                    Deletes product from database, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin updates product'})@IsAdmin()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:92\n                \n            \n\n\n            \n                \n                    Updates product information, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadPhoto\n                        \n                    \n                \n            \n            \n                \nuploadPhoto(id: string, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin uploads a new product picture'})@IsAdmin()@FileUpload()@Patch('picture/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:81\n                \n            \n\n\n            \n                \n                    Admin uploads a new picture for the product.\nNeeds to be type jpeg, jpg or png and maximum 3MB.\nCheck \nmulterUploadConfig file in the docs.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UploadedFile,\n} from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Public } from 'src/auth/public.decorator';\nimport { FileUpload } from 'src/common/decorators/file-upload.decorator';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { FindProductsDto } from './dto/find-products.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { Product } from './entities/product.entity';\nimport { ProductService } from './product.service';\n\n/** Exposes product CRUD endpoints */\n@ApiTags('product')\n@Controller('product')\nexport class ProductController {\n  /** Exposes product CRUD endpoints\n   *\n   * Instantiate class and ProductService dependency\n   */\n  constructor(private readonly productService: ProductService) {}\n\n  /** Creates a new product, only for admins */\n  @ApiOperation({ summary: 'Admin creates a new product' })\n  @IsAdmin()\n  @Post()\n  create(@Body() createProductDto: CreateProductDto): Promise {\n    return this.productService.create(createProductDto);\n  }\n\n  /** Returns all products with pagination\n   *\n   * Default is starting on page 1 showing 10 results per page,\n   * searching and ordering by name\n   */\n  @ApiOperation({ summary: 'Returns all products' })\n  @Public()\n  @Get()\n  findAll(@Query() findAllProductsDto: FindProductsDto): Promise {\n    return this.productService.findAll(findAllProductsDto);\n  }\n\n  /** Find product by ID, only for admins */\n  @ApiOperation({ summary: 'Admin gets product by ID' })\n  @IsAdmin()\n  @Get('/id/:id')\n  findOneById(@Param('id') id: string): Promise {\n    return this.productService.findOneById(id);\n  }\n\n  /** Find product by Url Name */\n  @ApiOperation({ summary: 'Gets product by urlName' })\n  @Public()\n  @Get(':urlName')\n  findOneByUrlName(@Param('urlName') urlName: string): Promise {\n    return this.productService.findOneByUrlName(urlName);\n  }\n\n  /**\n   * Admin uploads a new picture for the product.\n   * Needs to be type jpeg, jpg or png and maximum 3MB.\n   *\n   * Check \n   * multerUploadConfig file in the docs.\n   */\n  @ApiOperation({ summary: 'Admin uploads a new product picture' })\n  @IsAdmin()\n  @FileUpload()\n  @Patch('picture/:id')\n  uploadPhoto(\n    @Param('id') id: string,\n    @UploadedFile() file: Express.Multer.File,\n  ): Promise {\n    return this.productService.uploadPicture(id, file);\n  }\n\n  /** Updates product information, only for admins */\n  @ApiOperation({ summary: 'Admin updates product' })\n  @IsAdmin()\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateProductDto: UpdateProductDto,\n  ): Promise {\n    return this.productService.update(id, updateProductDto);\n  }\n\n  /** Deletes product from database, only for admins */\n  @ApiOperation({ summary: 'Admin deletes product' })\n  @IsAdmin()\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  remove(@Param('id') id: string): Promise {\n    return this.productService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductModule.html":{"url":"modules/ProductModule.html","title":"module - ProductModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_ProductModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nPrismaModule->ProductModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/product/product.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductService } from './product.service';\nimport { ProductController } from './product.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { multerUploadConfig } from 'src/config/multer-upload.config';\n\n@Module({\n  controllers: [ProductController],\n  imports: [PrismaModule, MulterModule.register(multerUploadConfig)],\n  providers: [ProductService],\n})\nexport class ProductModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductNameInUseException.html":{"url":"classes/ProductNameInUseException.html","title":"class - ProductNameInUseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductNameInUseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/product/product-name-in-use.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\na product name that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/product/product-name-in-use.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'Product name already in use'. Used when the user inputs\na product name that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * a product name that is already registered in the system\n */\nexport class ProductNameInUseException extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'Product name already in use'. Used when the user inputs\n   * a product name that is already registered in the system\n   */\n  constructor() {\n    super('Product name already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductNotFoundException.html":{"url":"classes/ProductNotFoundException.html","title":"class - ProductNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/product/product-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\na product that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/product/product-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'Product not found'. Used when the user inputs\na product that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * a product that is not registered in the system\n */\nexport class ProductNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'Product not found'. Used when the user inputs\n   * a product that is not registered in the system\n   */\n  constructor() {\n    super('Product not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductService.html":{"url":"injectables/ProductService.html","title":"injectable - ProductService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/product.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing products in the database.\nCRUD endpoints are available for products.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                connectCategoriesById\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUrlName\n                            \n                            \n                                    Private\n                                formatUrlName\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Private\n                                updateProductAndUrlName\n                            \n                            \n                                    Async\n                                uploadPicture\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/product/product.service.ts:13\n                            \n                        \n\n                \n                    \n                            Responsible for managing products in the database.\nCRUD endpoints are available for products.\nInstantiates the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        connectCategoriesById\n                        \n                    \n                \n            \n            \n                \n                    \n                    connectCategoriesById(categories: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:143\n                \n            \n\n\n            \n                \n                    Format the categories IDs array into the prisma query way\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categories\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Prisma.CategoryUncheckedCreateNestedManyWithoutProductsInput\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createProductDto: CreateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:22\n                \n            \n\n\n            \n                \n                    Creates a new product\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: FindProductsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:51\n                \n            \n\n\n            \n                \n                    Returns all products with pagination\nDefault is starting on page 1 showing 10 results per page\nand ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:70\n                \n            \n\n\n            \n                \n                    Find product by ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUrlName(urlName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:79\n                \n            \n\n\n            \n                \n                    Find product by Url Name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    urlName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        formatUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    formatUrlName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:115\n                \n            \n\n\n            \n                \n                    Formats the name to generate an urlName.\nMakes the name lower case, remove leading and trailing white spaces,\nturn to single the multiple spaces between words and make\nsingle spaces hyphens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            &quot; BraNd1    chAir   &quot; becomes &quot;brand1-chair&quot;\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:103\n                \n            \n\n\n            \n                \n                    Removes product from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:88\n                \n            \n\n\n            \n                \n                    Updates product information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        updateProductAndUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProductAndUrlName(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:128\n                \n            \n\n\n            \n                \n                    Formats UrlName and updates the product with the new one.\nUsed when the user updates the product name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPicture\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPicture(id: string, file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:40\n                \n            \n\n\n            \n                \n                    Uploads new product picture\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { FindProductsDto } from './dto/find-products.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { Product } from './entities/product.entity';\n\n/** Responsible for managing products in the database.\n * CRUD endpoints are available for products.\n */\n@Injectable()\nexport class ProductService {\n  /** Responsible for managing products in the database.\n   * CRUD endpoints are available for products.\n   *\n   * Instantiates the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new product */\n  async create(createProductDto: CreateProductDto): Promise {\n    const urlName = this.formatUrlName(createProductDto.name);\n\n    const categories = this.connectCategoriesById(createProductDto.categories);\n\n    const product = await this.prisma.product.create({\n      data: {\n        ...createProductDto,\n        urlName,\n        categories,\n      },\n      include: { categories: { select: { name: true } } },\n    });\n\n    return product;\n  }\n\n  /** Uploads new product picture */\n  async uploadPicture(id: string, file: Express.Multer.File): Promise {\n    return this.prisma.product.update({\n      where: { id },\n      data: { picture: file.filename },\n    });\n  }\n\n  /** Returns all products with pagination\n   * Default is starting on page 1 showing 10 results per page\n   * and ordering by name\n   */\n  async findAll({\n    productName = '',\n    page = 1,\n    offset = 10,\n  }: FindProductsDto): Promise {\n    const productsToSkip = (page - 1) * offset;\n\n    return this.prisma.product.findMany({\n      skip: productsToSkip,\n      take: offset,\n      where: {\n        name: { contains: productName, mode: 'insensitive' },\n      },\n      orderBy: { name: 'asc' },\n      include: { categories: { select: { name: true } } },\n    });\n  }\n\n  /** Find product by ID */\n  async findOneById(id: string): Promise {\n    return this.prisma.product.findUnique({\n      where: { id },\n      include: { categories: { select: { name: true } } },\n      rejectOnNotFound: true,\n    });\n  }\n\n  /** Find product by Url Name */\n  async findOneByUrlName(urlName: string): Promise {\n    return this.prisma.product.findUnique({\n      where: { urlName },\n      include: { categories: { select: { name: true } } },\n      rejectOnNotFound: true,\n    });\n  }\n\n  /** Updates product information */\n  async update(\n    id: string,\n    updateProductDto: UpdateProductDto,\n  ): Promise {\n    if (updateProductDto.name) {\n      return this.updateProductAndUrlName(id, updateProductDto);\n    }\n\n    return this.prisma.product.update({\n      where: { id },\n      data: { ...updateProductDto },\n    });\n  }\n\n  /** Removes product from database */\n  async remove(id: string): Promise {\n    await this.prisma.product.delete({ where: { id } });\n  }\n\n  /** Formats the name to generate an urlName.\n   *\n   * Makes the name lower case, remove leading and trailing white spaces,\n   * turn to single the multiple spaces between words and make\n   * single spaces hyphens\n   *\n   * @example \" BraNd1    chAir   \" becomes \"brand1-chair\"\n   */\n  private formatUrlName(name: string): string {\n    const lowerCaseUrlName = name.toLocaleLowerCase();\n    const trimmedUrlName = lowerCaseUrlName.trim();\n    const singleSpaceUrlName = trimmedUrlName.replace(/\\s\\s+/g, ' ');\n    const spaceToHyphenUrlName = singleSpaceUrlName.split(' ').join('-');\n\n    return spaceToHyphenUrlName;\n  }\n\n  /** Formats UrlName and updates the product with the new one.\n   *\n   * Used when the user updates the product name.\n   */\n  private updateProductAndUrlName(\n    id: string,\n    updateProductDto: UpdateProductDto,\n  ): Promise {\n    const urlName = this.formatUrlName(updateProductDto.name);\n\n    return this.prisma.product.update({\n      where: { id },\n      data: { ...updateProductDto, urlName },\n    });\n  }\n\n  /**\n   * Format the categories IDs array into the prisma query way\n   */\n  private connectCategoriesById(\n    categories: string[],\n  ): Prisma.CategoryUncheckedCreateNestedManyWithoutProductsInput {\n    let categoriesConnection = { connect: [] };\n\n    if (categories) {\n      categoriesConnection = {\n        connect: categories.map((category) => {\n          return { id: category };\n        }),\n      };\n    }\n\n    return categoriesConnection;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductServiceInputException.html":{"url":"classes/ProductServiceInputException.html","title":"class - ProductServiceInputException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductServiceInputException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/exceptions/product-service-input.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to extend another exception to make it\ninstanceof ProductServiceInputException\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/product/exceptions/product-service-input.exception.ts:5\n                            \n                        \n\n                \n                    \n                            Used to extend another exception to make it\ninstanceof ProductServiceInputException\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ProductServiceInputException extends Error {\n  /**\n   * Used to extend another exception to make it\n   * instanceof ProductServiceInputException\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Purchase.html":{"url":"classes/Purchase.html","title":"class - Purchase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Purchase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/entities/purchase.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of a Purchase in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                amount\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                productId\n                            \n                            \n                                    Optional\n                                reviewComment\n                            \n                            \n                                    Optional\n                                reviewNote\n                            \n                            \n                                totalPrice\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:24\n                        \n                    \n\n            \n                \n                    Amount purchased of the product\nDefaults to 1\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:46\n                        \n                    \n\n            \n                \n                    Purchase createdAt dateString\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:8\n                        \n                    \n\n            \n                \n                    Purchase ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:18\n                        \n                    \n\n            \n                \n                    Product ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        reviewComment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:41\n                        \n                    \n\n            \n                \n                    Product review comment\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        reviewNote\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:36\n                        \n                    \n\n            \n                \n                    Product review note, from 1 to 5\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Prisma.Decimal\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:31\n                        \n                    \n\n            \n                \n                    Price payed per product multiplied by the amount\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:13\n                        \n                    \n\n            \n                \n                    User ID as UUID\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\n/** Describes the properties of a Purchase in the database */\nexport class Purchase implements Prisma.PurchaseUncheckedCreateInput {\n  /** Purchase ID as UUID\n   * @example \"b076f72e-f70b-4368-949e-1811c405c0f7\"\n   */\n  id?: string;\n\n  /** User ID as UUID\n   * @example \"a04bb2db-fecd-4889-979e-95f273eb70e1\"\n   */\n  userId: string;\n\n  /** Product ID as UUID\n   * @example \"5c68ae94-bf3e-4fde-b01f-25d18b3976a0\"\n   */\n  productId: string;\n\n  /** Amount purchased of the product\n   * Defaults to 1\n   * @example 2\n   */\n  amount?: number;\n\n  /** Price payed per product multiplied by the amount\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 138.75\n   */\n  totalPrice: string | number | Prisma.Decimal;\n\n  /** Product review note, from 1 to 5\n   * @example 5\n   */\n  reviewNote?: number;\n\n  /** Product review comment\n   * @example \"Amazing wheelchair!\"\n   */\n  reviewComment?: string;\n\n  /** Purchase createdAt dateString\n   * @example \"2022-05-13T15:41:28.527Z\"\n   */\n  createdAt?: string | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PurchaseController.html":{"url":"controllers/PurchaseController.html","title":"controller - PurchaseController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PurchaseController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/purchase.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                purchase\n            \n\n\n            \n                Description\n            \n            \n                Exposes purchase CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllMine\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                review\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(request: Request, createPurchaseDto: CreatePurchaseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new purchase'})@ApiBearerAuth()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:38\n                \n            \n\n\n            \n                \n                    Creates a new purchase, only for logged users\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPurchaseDto\n                                    \n                                                CreatePurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(findPurchasesDto: FindPurchasesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin gets all purchases'})@IsAdmin()@Get('/admin')\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:55\n                \n            \n\n\n            \n                \n                    Returns all purchases with pagination, only for admins\nDefault is starting on page 1 showing 10 results per page,\nmatching by userId and/or productId and ordering by most recent date\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findPurchasesDto\n                                    \n                                                FindPurchasesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllMine\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllMine(request: Request, findPurchasesDto: FindPurchasesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'User gets all their purchases'})@ApiBearerAuth()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:69\n                \n            \n\n\n            \n                \n                    Returns all users' purchases with pagination,\nDefault is starting on page 1 showing 10 results per page,\nmatching by productId and ordering by most recent date\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    findPurchasesDto\n                                    \n                                                FindPurchasesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(request: Request, purchaseId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns purchase by ID'})@ApiBearerAuth()@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:85\n                \n            \n\n\n            \n                \n                    Find purchase by ID, normal users can only get their purchases,\nAdmins can get any.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    purchaseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin deletes purchase'})@IsAdmin()@Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:127\n                \n            \n\n\n            \n                \n                    Deletes purchase from database, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        review\n                        \n                    \n                \n            \n            \n                \n                    \n                    review(request: Request, purchaseId: string, reviewPurchaseDto: ReviewPurchaseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Reviews purchased product'})@ApiBearerAuth()@Patch('/review/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:101\n                \n            \n\n\n            \n                \n                    Reviews purchased product, must be purchase owner\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    purchaseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reviewPurchaseDto\n                                    \n                                                ReviewPurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updatePurchaseDto: UpdatePurchaseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin updates purchase'})@IsAdmin()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:115\n                \n            \n\n\n            \n                \n                    Updates purchase information, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePurchaseDto\n                                    \n                                                UpdatePurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  Query,\n  Req,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { CreatePurchaseDto } from './dto/create-purchase.dto';\nimport { FindPurchasesDto } from './dto/find-purchases.dto';\nimport { ReviewPurchaseDto } from './dto/review-purchase.dto';\nimport { UpdatePurchaseDto } from './dto/update-purchase.dto';\nimport { Purchase } from './entities/purchase.entity';\nimport { PurchaseService } from './purchase.service';\n\n/** Exposes purchase CRUD endpoints */\n@ApiTags('purchase')\n@Controller('purchase')\nexport class PurchaseController {\n  /** Exposes purchase CRUD endpoints\n   *\n   * Instantiate class and PurchaseService dependency\n   */\n  constructor(private readonly purchaseService: PurchaseService) {}\n\n  /** Creates a new purchase, only for logged users */\n  @ApiOperation({ summary: 'Creates a new purchase' })\n  @ApiBearerAuth()\n  @Post()\n  async create(\n    @Req() request: Request,\n    @Body() createPurchaseDto: CreatePurchaseDto,\n  ): Promise {\n    const { userId } = request.user as { userId: string };\n\n    return this.purchaseService.create(userId, createPurchaseDto);\n  }\n\n  /** Returns all purchases with pagination, only for admins\n   *\n   * Default is starting on page 1 showing 10 results per page,\n   * matching by userId and/or productId and ordering by most recent date\n   */\n  @ApiOperation({ summary: 'Admin gets all purchases' })\n  @IsAdmin()\n  @Get('/admin')\n  async findAll(\n    @Query() findPurchasesDto: FindPurchasesDto,\n  ): Promise {\n    return this.purchaseService.findAll(findPurchasesDto);\n  }\n\n  /** Returns all users' purchases with pagination,\n   *\n   * Default is starting on page 1 showing 10 results per page,\n   * matching by productId and ordering by most recent date\n   */\n  @ApiOperation({ summary: 'User gets all their purchases' })\n  @ApiBearerAuth()\n  @Get()\n  async findAllMine(\n    @Req() request: Request,\n    @Query() findPurchasesDto: FindPurchasesDto,\n  ): Promise {\n    const { userId } = request.user as { userId: string };\n    findPurchasesDto.userId = userId;\n\n    return this.purchaseService.findAll(findPurchasesDto);\n  }\n\n  /** Find purchase by ID, normal users can only get their purchases,\n   * Admins can get any.\n   */\n  @ApiOperation({ summary: 'Returns purchase by ID' })\n  @ApiBearerAuth()\n  @Get(':id')\n  async findOne(\n    @Req() request: Request,\n    @Param('id') purchaseId: string,\n  ): Promise {\n    const { userId, userRole } = request.user as {\n      userId: string;\n      userRole: string;\n    };\n\n    return this.purchaseService.findOne(purchaseId, userId, userRole);\n  }\n\n  /** Reviews purchased product, must be purchase owner */\n  @ApiOperation({ summary: 'Reviews purchased product' })\n  @ApiBearerAuth()\n  @Patch('/review/:id')\n  async review(\n    @Req() request: Request,\n    @Param('id') purchaseId: string,\n    @Body() reviewPurchaseDto: ReviewPurchaseDto,\n  ): Promise {\n    const { userId } = request.user as { userId: string };\n\n    return this.purchaseService.review(userId, purchaseId, reviewPurchaseDto);\n  }\n\n  /** Updates purchase information, only for admins */\n  @ApiOperation({ summary: 'Admin updates purchase' })\n  @IsAdmin()\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updatePurchaseDto: UpdatePurchaseDto,\n  ): Promise {\n    return this.purchaseService.update(id, updatePurchaseDto);\n  }\n\n  /** Deletes purchase from database, only for admins */\n  @ApiOperation({ summary: 'Admin deletes purchase' })\n  @IsAdmin()\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async remove(@Param('id') id: string): Promise {\n    return this.purchaseService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PurchaseModule.html":{"url":"modules/PurchaseModule.html","title":"module - PurchaseModule","body":"\n                   \n\n\n\n\n    Modules\n    PurchaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PurchaseModule\n\n\n\ncluster_PurchaseModule_imports\n\n\n\ncluster_PurchaseModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPurchaseModule\n\nPurchaseModule\n\nPurchaseModule -->\n\nPrismaModule->PurchaseModule\n\n\n\n\n\nPurchaseService\n\nPurchaseService\n\nPurchaseModule -->\n\nPurchaseService->PurchaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/purchase/purchase.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PurchaseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PurchaseController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PurchaseService } from './purchase.service';\nimport { PurchaseController } from './purchase.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\n\n@Module({\n  controllers: [PurchaseController],\n  imports: [PrismaModule],\n  providers: [PurchaseService],\n})\nexport class PurchaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PurchaseNotFoundException.html":{"url":"classes/PurchaseNotFoundException.html","title":"class - PurchaseNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PurchaseNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/purchase/purchase-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\na purchase that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/purchase/purchase-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'Purchase not found'. Used when the user inputs\na purchase that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * a purchase that is not registered in the system\n */\nexport class PurchaseNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'Purchase not found'. Used when the user inputs\n   * a purchase that is not registered in the system\n   */\n  constructor() {\n    super('Purchase not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PurchaseService.html":{"url":"injectables/PurchaseService.html","title":"injectable - PurchaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PurchaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/purchase.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing purchases in the database.\nCRUD endpoints are available for purchases.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                review\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/purchase/purchase.service.ts:15\n                            \n                        \n\n                \n                    \n                            Responsible for managing purchases in the database.\nCRUD endpoints are available for purchases.\nInstantiates the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userId: string, createPurchaseDto: CreatePurchaseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:24\n                \n            \n\n\n            \n                \n                    Creates a new purchase\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPurchaseDto\n                                    \n                                                CreatePurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: FindPurchasesDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:43\n                \n            \n\n\n            \n                \n                    Returns all purchases with pagination\nDefault is starting on page 1 showing 10 results per page\nand ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindPurchasesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(purchaseId: string, userId: string, userRole: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:71\n                \n            \n\n\n            \n                \n                    Find purchase by ID, normal users can only get their purchases,\nAdmins can get any.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    purchaseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userRole\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:135\n                \n            \n\n\n            \n                \n                    Removes purchase from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        review\n                        \n                    \n                \n            \n            \n                \n                    \n                    review(userId: string, purchaseId: string, reviewPurchaseDto: ReviewPurchaseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:93\n                \n            \n\n\n            \n                \n                    Users review products purchased by them\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    purchaseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reviewPurchaseDto\n                                    \n                                                ReviewPurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updatePurchaseDto: UpdatePurchaseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:118\n                \n            \n\n\n            \n                \n                    Updates purchase information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePurchaseDto\n                                    \n                                                UpdatePurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Role } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreatePurchaseDto } from './dto/create-purchase.dto';\nimport { FindPurchasesDto } from './dto/find-purchases.dto';\nimport { ReviewPurchaseDto } from './dto/review-purchase.dto';\nimport { UpdatePurchaseDto } from './dto/update-purchase.dto';\nimport { Purchase } from './entities/purchase.entity';\nimport { NotPurchaseOwnerException } from './exceptions/not-purchase-owner.exception';\n\n/** Responsible for managing purchases in the database.\n * CRUD endpoints are available for purchases.\n */\n@Injectable()\nexport class PurchaseService {\n  /** Responsible for managing purchases in the database.\n   * CRUD endpoints are available for purchases.\n   *\n   * Instantiates the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new purchase */\n  async create(\n    userId: string,\n    createPurchaseDto: CreatePurchaseDto,\n  ): Promise {\n    const purchase = await this.prisma.purchase.create({\n      data: { ...createPurchaseDto, userId },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n    });\n\n    return purchase;\n  }\n\n  /** Returns all purchases with pagination\n   * Default is starting on page 1 showing 10 results per page\n   * and ordering by name\n   */\n  async findAll({\n    userId,\n    productId,\n    page = 1,\n    offset = 10,\n  }: FindPurchasesDto): Promise {\n    const purchasesToSkip = (page - 1) * offset;\n\n    const purchases = await this.prisma.purchase.findMany({\n      skip: purchasesToSkip,\n      take: offset,\n      where: {\n        userId: { equals: userId },\n        productId: { equals: productId },\n      },\n      orderBy: { createdAt: 'desc' },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n    });\n\n    return purchases;\n  }\n\n  /** Find purchase by ID, normal users can only get their purchases,\n   * Admins can get any.\n   */\n  async findOne(\n    purchaseId: string,\n    userId: string,\n    userRole: string,\n  ): Promise {\n    const purchase = await this.prisma.purchase.findUnique({\n      where: { id: purchaseId },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n      rejectOnNotFound: true,\n    });\n\n    if (userRole !== Role.ADMIN && purchase.userId !== userId) {\n      throw new NotPurchaseOwnerException();\n    }\n\n    return purchase;\n  }\n\n  /** Users review products purchased by them */\n  async review(\n    userId: string,\n    purchaseId: string,\n    reviewPurchaseDto: ReviewPurchaseDto,\n  ): Promise {\n    const purchase = await this.prisma.purchase.findUnique({\n      where: { id: purchaseId },\n      rejectOnNotFound: true,\n    });\n\n    if (userId !== purchase.userId) {\n      throw new NotPurchaseOwnerException();\n    }\n\n    return this.prisma.purchase.update({\n      where: { id: purchaseId },\n      data: { ...reviewPurchaseDto },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n    });\n  }\n\n  /** Updates purchase information */\n  async update(\n    id: string,\n    updatePurchaseDto: UpdatePurchaseDto,\n  ): Promise {\n    const purchase = await this.prisma.purchase.update({\n      where: { id },\n      data: { ...updatePurchaseDto },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n    });\n\n    return purchase;\n  }\n\n  /** Removes purchase from database */\n  async remove(id: string): Promise {\n    await this.prisma.purchase.delete({ where: { id } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PurchaseServiceInputException.html":{"url":"classes/PurchaseServiceInputException.html","title":"class - PurchaseServiceInputException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PurchaseServiceInputException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/exceptions/purchase-service-input.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to extend another exception to make it\ninstanceof PurchaseServiceInputException\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/purchase/exceptions/purchase-service-input.exception.ts:5\n                            \n                        \n\n                \n                    \n                            Used to extend another exception to make it\ninstanceof PurchaseServiceInputException\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PurchaseServiceInputException extends Error {\n  /**\n   * Used to extend another exception to make it\n   * instanceof PurchaseServiceInputException\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/refresh-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to logout an User of the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsJWT()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/refresh-token.dto.ts:10\n                        \n                    \n\n            \n                \n                    User refresh token\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJWT } from 'class-validator';\n\n/** Describes the information needed to logout an User of the application */\nexport class RefreshTokenDto {\n  /**\n   * User refresh token\n   * @example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n   */\n  @IsJWT()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReviewPurchaseDto.html":{"url":"classes/ReviewPurchaseDto.html","title":"class - ReviewPurchaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReviewPurchaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/dto/review-purchase.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to review a Purchase\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                reviewComment\n                            \n                            \n                                reviewNote\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        reviewComment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/review-purchase.dto.ts:23\n                        \n                    \n\n            \n                \n                    Product review comment\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reviewNote\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)@Max(5)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/review-purchase.dto.ts:16\n                        \n                    \n\n            \n                \n                    Product review note, from 1 to 5\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { IsInt, IsOptional, IsString, Max, Min } from 'class-validator';\nimport { Purchase } from '../entities/purchase.entity';\n\n/** Describes the fields needed to review a Purchase */\nexport class ReviewPurchaseDto extends PickType(Purchase, [\n  'reviewNote',\n  'reviewComment',\n]) {\n  /** Product review note, from 1 to 5\n   * @example 5\n   */\n  @IsInt()\n  @Min(1)\n  @Max(5)\n  reviewNote: number;\n\n  /** Product review comment\n   * @example \"Amazing wheelchair!\"\n   */\n  @IsString()\n  @IsOptional()\n  reviewComment?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/roles.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Checks if the user accessing the route is an admin\nFor more on NestJs Guards: https://docs.nestjs.com/guards\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/roles.guard.ts:12\n                            \n                        \n\n                \n                    \n                            Checks if the user accessing the route is an admin\nFor more on NestJs Guards: https://docs.nestjs.com/guards\nInstantiates the class and the Reflector dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guards/roles.guard.ts:22\n                \n            \n\n\n            \n                \n                    If the user is an Admin, access is allowed\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '@prisma/client';\nimport { Observable } from 'rxjs';\nimport { IS_ADMIN_KEY } from '../decorators/is-admin.decorator';\n\n/** Checks if the user accessing the route is an admin\n *\n * For more on NestJs Guards: https://docs.nestjs.com/guards\n */\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  /** Checks if the user accessing the route is an admin\n   *\n   * For more on NestJs Guards: https://docs.nestjs.com/guards\n   *\n   * Instantiates the class and the Reflector dependency\n   */\n  constructor(private reflector: Reflector) {}\n\n  /** If the user is an Admin, access is allowed */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const isAdmin = this.reflector.getAllAndOverride(IS_ADMIN_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    const request = context.switchToHttp().getRequest();\n    const { userRole } = request.user;\n\n    if (isAdmin && userRole === Role.ADMIN) {\n      return true;\n    }\n\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/dto/update-category.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the Category fields that are updatable\nNote that since this is a\nPartial of CreateCategoryDto,\nany field there is optional here\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCategoryDto } from './create-category.dto';\n\n/** Describes the Category fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateCategoryDto,\n * any field there is optional here\n */\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/update-product.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the Product fields that are updatable\nNote that since this is a\nPartial of CreateProductDto,\nany field there is optional here\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateProductDto } from './create-product.dto';\n\n/** Describes the Product fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateProductDto,\n * any field there is optional here\n */\nexport class UpdateProductDto extends PartialType(CreateProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePurchaseDto.html":{"url":"classes/UpdatePurchaseDto.html","title":"class - UpdatePurchaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePurchaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/dto/update-purchase.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the Purchase fields that are updatable\nNote that since this is a\nPartial of CreatePurchaseDto,\nany field there is optional here\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreatePurchaseDto } from './create-purchase.dto';\n\n/** Describes the Purchase fields that are updatable\n *\n * Note that since this is a\n * Partial of CreatePurchaseDto,\n * any field there is optional here\n */\nexport class UpdatePurchaseDto extends PartialType(CreatePurchaseDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the User fields that are updatable\nNote that since this is a\nPartial of CreateUserDto,\nany field there is optional here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                currentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user.dto.ts:19\n                        \n                    \n\n            \n                \n                    User current password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\n\n/** Describes the User fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateUserDto,\n * any field there is optional here\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n  /**\n   * User current password\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  currentPassword?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserRoleDto.html":{"url":"classes/UpdateUserRoleDto.html","title":"class - UpdateUserRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/update-user-role.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to update an User role\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user-role.dto.ts:11\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user-role.dto.ts:18\n                        \n                    \n\n            \n                \n                    User new role\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Role } from '@prisma/client';\nimport { IsEmail, IsEnum } from 'class-validator';\n\n/** Describes the information needed to update an User role */\nexport class UpdateUserRoleDto {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsEmail()\n  email: string;\n\n  /**\n   * User new role\n   * @example \"ADMIN\"\n   */\n  @IsEnum(Role)\n  role: Role;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of an User in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                role\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:43\n                        \n                    \n\n            \n                \n                    User address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:49\n                        \n                    \n\n            \n                \n                    User createdAt dateString\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:25\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:9\n                        \n                    \n\n            \n                \n                    User ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:37\n                        \n                    \n\n            \n                \n                    User name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:31\n                        \n                    \n\n            \n                \n                    User password\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:19\n                        \n                    \n\n            \n                \n                    User's Role.\nCan be \"USER\" or \"ADMIN\".\nAdmin users can handle products\nDefaults to \"USER\"\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:55\n                        \n                    \n\n            \n                \n                    User updatedAt dateString\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma, Role } from '@prisma/client';\n\n/** Describes the properties of an User in the database */\nexport class User implements Prisma.UserUncheckedCreateInput {\n  /**\n   * User ID as UUID\n   * @example \"d31fc56c-7aed-441e-9f7f-151be8d85634\"\n   */\n  id?: string;\n\n  /**\n   * User's Role.\n   * Can be \"USER\" or \"ADMIN\".\n   * Admin users can handle products\n   *\n   * Defaults to \"USER\"\n   * @example \"USER\"\n   */\n  role?: Role;\n\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  email: string;\n\n  /**\n   * User password\n   * @example \"$2b$10$1XpzUYu8FuvuaBb3SC0xzuR9DX7KakbMLt0vLNoZ.UnLntDMFc4LK\"\n   */\n  password: string;\n\n  /**\n   * User name\n   * @example \"John Doe\"\n   */\n  name?: string;\n\n  /**\n   * User address\n   * @example \"World Street 0\"\n   */\n  address?: string;\n\n  /**\n   * User createdAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  createdAt?: string | Date;\n\n  /**\n   * User updatedAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  updatedAt?: string | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                Exposes user CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                updateUserRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new user'})@Public()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:37\n                \n            \n\n\n            \n                \n                    Creates a new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Gets user's own profile'})@ApiBearerAuth()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:45\n                \n            \n\n\n            \n                \n                    Returns user's own profile information without password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(request: Request, deleteUserDto: DeleteUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes user'})@ApiBearerAuth()@Delete()@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:79\n                \n            \n\n\n            \n                \n                    Deletes user and all user related information from the system\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    deleteUserDto\n                                    \n                                                DeleteUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(request: Request, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates user'})@ApiBearerAuth()@Patch()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:55\n                \n            \n\n\n            \n                \n                    Updates user information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserRole\n                        \n                    \n                \n            \n            \n                \nupdateUserRole(updateUserRoleDto: UpdateUserRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin set user's role'})@IsAdmin()@Patch('role')\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:68\n                \n            \n\n\n            \n                \n                    Updates user role, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserRoleDto\n                                    \n                                                UpdateUserRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Patch,\n  Post,\n  Req,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { Public } from 'src/auth/public.decorator';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { DeleteUserDto } from './dto/delete-user.dto';\nimport { UpdateUserRoleDto } from './dto/update-user-role.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserWithoutPassword } from './entities/user-without-password.entity';\nimport { UserService } from './user.service';\n\n/** Exposes user CRUD endpoints */\n@ApiTags('user')\n@Controller('user')\nexport class UserController {\n  /** Exposes user CRUD endpoints\n   *\n   * Instantiate class and UserService dependency\n   */\n  constructor(private readonly userService: UserService) {}\n\n  /** Creates a new user */\n  @ApiOperation({ summary: 'Creates a new user' })\n  @Public()\n  @Post()\n  create(@Body() createUserDto: CreateUserDto): Promise {\n    return this.userService.create(createUserDto);\n  }\n\n  /** Returns user's own profile information without password */\n  @ApiOperation({ summary: \"Gets user's own profile\" })\n  @ApiBearerAuth()\n  @Get()\n  async findById(@Req() request: Request): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.findById(userId);\n  }\n\n  /** Updates user information */\n  @ApiOperation({ summary: 'Updates user' })\n  @ApiBearerAuth()\n  @Patch()\n  update(\n    @Req() request: Request,\n    @Body() updateUserDto: UpdateUserDto,\n  ): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.update(userId, updateUserDto);\n  }\n\n  /** Updates user role, only for admins */\n  @ApiOperation({ summary: \"Admin set user's role\" })\n  @IsAdmin()\n  @Patch('role')\n  updateUserRole(\n    @Body() updateUserRoleDto: UpdateUserRoleDto,\n  ): Promise {\n    return this.userService.updateUserRole(updateUserRoleDto);\n  }\n\n  /** Deletes user and all user related information from the system */\n  @ApiOperation({ summary: 'Deletes user' })\n  @ApiBearerAuth()\n  @Delete()\n  @HttpCode(HttpStatus.NO_CONTENT)\n  remove(\n    @Req() request: Request,\n    @Body() deleteUserDto: DeleteUserDto,\n  ): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.remove(userId, deleteUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserInputExceptionHandler.html":{"url":"classes/UserInputExceptionHandler.html","title":"class - UserInputExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserInputExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/user-input-exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Catches user input errors and throws the\nrespective HTTP error\n\n            \n\n\n            \n                Implements\n            \n            \n                            ExceptionHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/user-input-exception.handler.ts:19\n                \n            \n\n\n            \n                \n                    Catches user input errors and throws the\nrespective HTTP error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthServiceInputException } from 'src/auth/exceptions/auth-service-input.exception';\nimport { ProductServiceInputException } from 'src/models/product/exceptions/product-service-input.exception';\nimport { PurchaseServiceInputException } from 'src/models/purchase/exceptions/purchase-service-input.exception';\nimport { UserServiceInputException } from 'src/models/user/exceptions/user-service-input.exception';\nimport { ExceptionHandler } from './exception.handler';\n\n/** Catches user input errors and throws the\n * respective HTTP error\n */\nexport class UserInputExceptionHandler implements ExceptionHandler {\n  /** Catches user input errors and throws the\n   * respective HTTP error\n   */\n  handle(error: Error): void {\n    if (error instanceof AuthServiceInputException) {\n      throw new UnauthorizedException(error.message);\n    }\n\n    if (error instanceof UserServiceInputException) {\n      throw new BadRequestException(error.message);\n    }\n\n    if (error instanceof ProductServiceInputException) {\n      throw new BadRequestException(error.message);\n    }\n\n    if (error instanceof PurchaseServiceInputException) {\n      throw new NotFoundException(error.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  controllers: [UserController],\n  providers: [UserService],\n  imports: [PrismaModule],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotFoundException.html":{"url":"classes/UserNotFoundException.html","title":"class - UserNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/user/user-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\nan user email or id that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/user/user-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'User not found'. Used when the user inputs an user\nemail or id that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * an user email or id that is not registered in the system\n */\nexport class UserNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'User not found'. Used when the user inputs an user\n   * email or id that is not registered in the system\n   */\n  constructor() {\n    super('User not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing users in the database.\nCRUD endpoints are available for users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Private\n                                    Async\n                                hashIfUpdatingPassword\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateUserRole\n                            \n                            \n                                    Private\n                                    Async\n                                validateCurrentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/user/user.service.ts:18\n                            \n                        \n\n                \n                    \n                            Responsible for managing users in the database.\nCRUD endpoints are available for users.\nInstantiate the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:27\n                \n            \n\n\n            \n                \n                    Creates a new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:60\n                \n            \n\n\n            \n                \n                    Finds user by email and returns the user with password.\nUsed mainly in login to compare if the inputted password matches\nthe hashed one.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:48\n                \n            \n\n\n            \n                \n                    Finds user by id and returns the user without password.\nUsed for default in app requests where the hashed password\nwon't be compared\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        hashIfUpdatingPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashIfUpdatingPassword(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:111\n                \n            \n\n\n            \n                \n                    If the user inputted both new password and current password\nthe new password is hashed to be saved in the database replacing\nthe current one.\nIf only the new password or current password were inputted the user\nprobably forgot about the other one and an error is thrown\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string, deleteUserDto: DeleteUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:98\n                \n            \n\n\n            \n                \n                    Removes user from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    deleteUserDto\n                                    \n                                                DeleteUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:67\n                \n            \n\n\n            \n                \n                    Updates user information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserRole(updateUserRoleDto: UpdateUserRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:84\n                \n            \n\n\n            \n                \n                    Updates user role\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserRoleDto\n                                    \n                                                UpdateUserRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateCurrentPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateCurrentPassword(id: string, currentPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:139\n                \n            \n\n\n            \n                \n                    Compares if the inputted current password matches the\nuser hashed password saved in the database\nIf it doesn't, an error is thrown\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { compare, hash } from 'bcrypt';\nimport { hashConfig } from 'src/config/hash.config';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { DeleteUserDto } from './dto/delete-user.dto';\nimport { UpdateUserRoleDto } from './dto/update-user-role.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserWithoutPassword } from './entities/user-without-password.entity';\nimport { User } from './entities/user.entity';\nimport { InvalidPasswordUpdateException } from './exceptions/invalid-password-update.exception';\nimport { MissingPasswordUpdateException } from './exceptions/missing-password-update.exception';\n\n/** Responsible for managing users in the database.\n * CRUD endpoints are available for users.\n */\n@Injectable()\nexport class UserService {\n  /** Responsible for managing users in the database.\n   * CRUD endpoints are available for users.\n   *\n   * Instantiate the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new user */\n  async create(createUserDto: CreateUserDto): Promise {\n    const hashedPassword = await hash(\n      createUserDto.password,\n      hashConfig.saltRounds,\n    );\n\n    const lowerCaseEmail = createUserDto.email.toLowerCase();\n\n    await this.prisma.user.create({\n      data: {\n        ...createUserDto,\n        email: lowerCaseEmail,\n        password: hashedPassword,\n      },\n    });\n  }\n\n  /** Finds user by id and returns the user without password.\n   * Used for default in app requests where the hashed password\n   * won't be compared\n   */\n  async findById(id: string): Promise {\n    const user = await this.prisma.user.findUnique({ where: { id } });\n\n    delete user.password;\n\n    return { ...user };\n  }\n\n  /** Finds user by email and returns the user with password.\n   * Used mainly in login to compare if the inputted password matches\n   * the hashed one.\n   */\n  async findByEmail(email: string): Promise {\n    const lowerCaseEmail = email.toLowerCase();\n\n    return this.prisma.user.findUnique({ where: { email: lowerCaseEmail } });\n  }\n\n  /** Updates user information */\n  async update(\n    id: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    await this.hashIfUpdatingPassword(id, updateUserDto);\n\n    const user = await this.prisma.user.update({\n      where: { id },\n      data: { ...updateUserDto, updatedAt: new Date() },\n    });\n\n    delete user.password;\n\n    return { ...user };\n  }\n\n  /** Updates user role */\n  async updateUserRole(\n    updateUserRoleDto: UpdateUserRoleDto,\n  ): Promise {\n    const user = await this.prisma.user.update({\n      where: { email: updateUserRoleDto.email },\n      data: { role: updateUserRoleDto.role },\n    });\n\n    delete user.password;\n\n    return user;\n  }\n\n  /** Removes user from database */\n  async remove(id: string, deleteUserDto: DeleteUserDto): Promise {\n    await this.validateCurrentPassword(id, deleteUserDto.currentPassword);\n\n    await this.prisma.user.delete({ where: { id } });\n  }\n\n  /** If the user inputted both new password and current password\n   * the new password is hashed to be saved in the database replacing\n   * the current one.\n   *\n   * If only the new password or current password were inputted the user\n   * probably forgot about the other one and an error is thrown\n   */\n  private async hashIfUpdatingPassword(\n    id: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    if (updateUserDto.password && updateUserDto.currentPassword) {\n      await this.validateCurrentPassword(id, updateUserDto.currentPassword);\n\n      const hashedPassword = await hash(\n        updateUserDto.password,\n        hashConfig.saltRounds,\n      );\n\n      updateUserDto.password = hashedPassword;\n      delete updateUserDto.currentPassword;\n\n      return;\n    }\n\n    if (updateUserDto.password || updateUserDto.currentPassword) {\n      throw new MissingPasswordUpdateException();\n    }\n  }\n\n  /** Compares if the inputted current password matches the\n   * user hashed password saved in the database\n   *\n   * If it doesn't, an error is thrown\n   */\n  private async validateCurrentPassword(\n    id: string,\n    currentPassword: string,\n  ): Promise {\n    const user = await this.prisma.user.findUnique({ where: { id } });\n\n    const isCorrectPassword = await compare(currentPassword, user.password);\n\n    if (!isCorrectPassword) {\n      throw new InvalidPasswordUpdateException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserServiceInputException.html":{"url":"classes/UserServiceInputException.html","title":"class - UserServiceInputException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserServiceInputException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/exceptions/user-service-input.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to extend another exception to make it\ninstanceof UserServiceInputException\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/user/exceptions/user-service-input.exception.ts:5\n                            \n                        \n\n                \n                    \n                            Used to extend another exception to make it\ninstanceof UserServiceInputException\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserServiceInputException extends Error {\n  /**\n   * Used to extend another exception to make it\n   * instanceof UserServiceInputException\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserWithoutPassword.html":{"url":"classes/UserWithoutPassword.html","title":"class - UserWithoutPassword","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserWithoutPassword\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/entities/user-without-password.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This entity is the same as\nUser\nbut omitting the password field\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { User } from './user.entity';\n\n/** This entity is the same as\n * User\n * but omitting the password field\n */\nexport class UserWithoutPassword extends OmitType(User, [\n  'password',\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/access-jwt-auth.guard.ts\n            \n            injectable\n            AccessJwtAuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/access-jwt.strategy.ts\n            \n            injectable\n            AccessJwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/auth/dto/login-credentials.dto.ts\n            \n            class\n            LoginCredentialsDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login.response.ts\n            \n            class\n            LoginResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dto/logout.dto.ts\n            \n            class\n            LogoutDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/dto/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/exceptions/auth-service-input.exception.ts\n            \n            class\n            AuthServiceInputException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/exceptions/invalid-email-or-password.exception..ts\n            \n            class\n            InvalidEmailOrPasswordException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/exceptions/invalid-refresh-token.exception.ts\n            \n            class\n            InvalidRefreshTokenException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/file-upload.decorator.ts\n            \n            function\n            FileUpload\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/is-admin.decorator.ts\n            \n            function\n            IsAdmin\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/is-admin.decorator.ts\n            \n            variable\n            IS_ADMIN_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/exceptions/category/category-name-in-use.exception.ts\n            \n            class\n            CategoryNameInUseException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/category/category-not-found.exception.ts\n            \n            class\n            CategoryNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/product/product-name-in-use.exception.ts\n            \n            class\n            ProductNameInUseException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/product/product-not-found.exception.ts\n            \n            class\n            ProductNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/purchase/purchase-not-found.exception.ts\n            \n            class\n            PurchaseNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/user/email-in-use.exception.ts\n            \n            class\n            EmailInUseException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/user/user-not-found.exception.ts\n            \n            class\n            UserNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/exception.interceptor.ts\n            \n            injectable\n            ExceptionInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/exception.handler.ts\n            \n            interface\n            ExceptionHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/jwt-exception.handler.ts\n            \n            class\n            JwtExceptionHandler\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/prisma-exception.handler.ts\n            \n            class\n            PrismaExceptionHandler\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/user-input-exception.handler.ts\n            \n            class\n            UserInputExceptionHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/config/hash.config.ts\n            \n            variable\n            hashConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            accessJwtConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            refreshJwtConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer-upload.config.ts\n            \n            variable\n            maxImageUploadSize\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer-upload.config.ts\n            \n            variable\n            multerUploadConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer-upload.config.ts\n            \n            variable\n            validImageUploadTypesRegex\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/category/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/models/category/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/models/category/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/category/dto/find-categories.dto.ts\n            \n            class\n            FindCategoriesDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/models/category/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/category/entities/category.entity.ts\n            \n            class\n            Category\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/models/product/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/models/product/dto/file-upload.dto.ts\n            \n            class\n            FileUploadDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/product/dto/find-products.dto.ts\n            \n            class\n            FindProductsDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/models/product/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/product/entities/product.entity.ts\n            \n            class\n            Product\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/models/product/exceptions/file-type.exception.ts\n            \n            class\n            FileTypeError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/product/exceptions/product-service-input.exception.ts\n            \n            class\n            ProductServiceInputException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/product/product.controller.ts\n            \n            controller\n            ProductController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/models/product/product.service.ts\n            \n            injectable\n            ProductService\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/models/purchase/dto/create-purchase.dto.ts\n            \n            class\n            CreatePurchaseDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/models/purchase/dto/find-purchases.dto.ts\n            \n            class\n            FindPurchasesDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/models/purchase/dto/review-purchase.dto.ts\n            \n            class\n            ReviewPurchaseDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/models/purchase/dto/update-purchase.dto.ts\n            \n            class\n            UpdatePurchaseDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/purchase/entities/purchase.entity.ts\n            \n            class\n            Purchase\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/models/purchase/exceptions/not-purchase-owner.exception.ts\n            \n            class\n            NotPurchaseOwnerException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/purchase/exceptions/purchase-service-input.exception.ts\n            \n            class\n            PurchaseServiceInputException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/purchase/purchase.controller.ts\n            \n            controller\n            PurchaseController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/models/purchase/purchase.service.ts\n            \n            injectable\n            PurchaseService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/models/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/models/user/dto/delete-user.dto.ts\n            \n            class\n            DeleteUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/dto/update-user-role.dto.ts\n            \n            class\n            UpdateUserRoleDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/models/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/entities/user-without-password.entity.ts\n            \n            class\n            UserWithoutPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/models/user/exceptions/invalid-password-update.exception.ts\n            \n            class\n            InvalidPasswordUpdateException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/exceptions/missing-password-update.exception.ts\n            \n            class\n            MissingPasswordUpdateException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/exceptions/user-service-input.exception.ts\n            \n            class\n            UserServiceInputException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/models/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/util/getTokenExpirationDate.ts\n            \n            function\n            addDaysFromNow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/util/getTokenExpirationDate.ts\n            \n            function\n            getTokenExpirationDate\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.4.6\n        \n            @nestjs/core : ^8.4.6\n        \n            @nestjs/jwt : ^8.0.1\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.4.6\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @prisma/client : 3.14.0\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            ms : ^2.1.3\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            prisma-error-enum : ^0.1.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.4.0\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addDaysFromNow   (src/.../getTokenExpirationDate.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            FileUpload   (src/.../file-upload.decorator.ts)\n                        \n                        \n                            getTokenExpirationDate   (src/.../getTokenExpirationDate.ts)\n                        \n                        \n                            IsAdmin   (src/.../is-admin.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/util/getTokenExpirationDate.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        addDaysFromNow\n                        \n                    \n                \n            \n            \n                \naddDaysFromNow(days: number)\n                \n            \n\n\n\n\n            \n                \n                    Add amount of days from today's date\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    days\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Date\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTokenExpirationDate\n                        \n                    \n                \n            \n            \n                \ngetTokenExpirationDate()\n                \n            \n\n\n\n\n            \n                \n                    Returns the token expiration date\n\n\n                    \n                        Returns :         Date\n\n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Starts the application\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    src/common/decorators/file-upload.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FileUpload\n                        \n                    \n                \n            \n            \n                \nFileUpload()\n                \n            \n\n\n\n\n            \n                \n                    Add all file upload decorators at once\nExample: Upload product picture\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    src/common/decorators/is-admin.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsAdmin\n                        \n                    \n                \n            \n            \n                \nIsAdmin()\n                \n            \n\n\n\n\n            \n                \n                    Makes an endpoint accessible only by admin users\nExample: Create, update and remove products\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nE-Commerce Backend\nAPI com endpoints para criação de usuários, produtos, compras e avaliações com autenticação e autorização\n🔗 Documentação com Compodoc e GitHub Pages\n\n\n  \n  \n  \n  \n\n\n📑 Índice\n\n\n📌 Features\n🔧 Instalação\n💻 Tecnologias\n📄 Licença\n\n📌 Features\n\n CRUD de usuários\n Autenticação de usuário\n Autorização de usuário (admin)\n CRUD de produtos\n Upload de imagens\n\n\n CRUD de categorias\n CRUD de compras\n\n🔧 Instalação\n\nVocê precisará ter o Node.js instalado\n\nInstalação\n\n\n  # Clona o projeto para sua máquina\n  git clone https://github.com/alvaromrveiga/ecommerce-backend\n\n  # Entra na pasta do projeto\n  cd ecommerce-backend\n\n  # Instala as dependências\n  yarn\nCrie um arquivo .env na raiz do projeto preenchendo as informações descritas no .env.example\n\nIniciar servidor\n\n\n  # Roda as migrations\n  yarn migrate:dev \n\n  # Inicia o servidor em modo de desenvolvimento\n  yarn start:dev\n\n  # O servidor abrirá na porta 3000. \n  # Você pode acessar a documentação com Swagger em http://localhost:3000/api/\n\n  # Para visualizar o banco de dados\n  yarn prisma studio\nRodar os testes\nCrie um arquivo .env.test na raiz do projeto alterando no mínimo o banco de dados que colocou no .env\nExemplo: postgresql://username:password@localhost:5432/ecommerce-test?schema=public\n\n\n\n\n\n  # Roda as migrations no bando de testes\n  yarn migrate:test \n\n  # Roda todos os testes\n  yarn test:all\n\n  # Roda apenas os testes unitários\n  yarn test\n\n  # Roda apenas os testes de integração\n  yarn test:e2e\n\n  # Para visualizar o banco de dados de testes\n  yarn studio:test💻 Tecnologias\n\nTypescript - tooling e minimizar erros\nNode.js e NestJS com Express - construir o servidor\nPrisma com PostgreSQL - armazenar dados\nPassport e passport-jwt - autenticação com Json Web Token\nClass-validator e class-transformer - validações nos dados de entrada dos endpoints\nBcrypt - hashs de senhas\nPrisma-error-enum - identificar os códigos para tratar as exceções do prisma\nJest, SuperTest e ms - testes\nSwagger UI Express e compodoc - documentação\nESLint e Prettier - linting e formatação de código\n\n📄 Licença\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Álvaro Veiga\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PurchaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_PurchaseModule\n\n\n\ncluster_PurchaseModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nCategoryModule -->\n\nPrismaModule->CategoryModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nPrismaModule->ProductModule\n\n\n\n\n\nPurchaseModule\n\nPurchaseModule\n\nPurchaseModule -->\n\nPrismaModule->PurchaseModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\nAppModule -->\n\nPurchaseModule->AppModule\n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAccessJwtStrategy\n\nAccessJwtStrategy\n\nAuthModule -->\n\nAccessJwtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nPurchaseService\n\nPurchaseService\n\nPurchaseModule -->\n\nPurchaseService->PurchaseModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    44 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : alvaromrveiga\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AccessTokenContent   (src/.../access-token-content.ts)\n                        \n                        \n                            AccessTokenPayload   (src/.../access-token-payload.ts)\n                        \n                        \n                            RefreshTokenPayload   (src/.../refresh-token-payload.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/types/access-token-content.ts\n    \n    \n        \n            \n                \n                    \n                    AccessTokenContent\n                \n            \n            \n                \n                    What is returned to the application after Access JsonWebToken is validated\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/auth/types/access-token-payload.ts\n    \n    \n        \n            \n                \n                    \n                    AccessTokenPayload\n                \n            \n            \n                \n                    Decrypted Access JsonWebToken content\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/auth/types/refresh-token-payload.ts\n    \n    \n        \n            \n                \n                    \n                    RefreshTokenPayload\n                \n            \n            \n                \n                    Decrypted Refresh JsonWebToken content\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            accessJwtConfig   (src/.../jwt.config.ts)\n                        \n                        \n                            hashConfig   (src/.../hash.config.ts)\n                        \n                        \n                            IS_ADMIN_KEY   (src/.../is-admin.decorator.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            maxImageUploadSize   (src/.../multer-upload.config.ts)\n                        \n                        \n                            multerUploadConfig   (src/.../multer-upload.config.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            refreshJwtConfig   (src/.../jwt.config.ts)\n                        \n                        \n                            validImageUploadTypesRegex   (src/.../multer-upload.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/jwt.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        accessJwtConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JwtSignOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.ACCESS_JWT_SECRET,\n  expiresIn: '15m',\n}\n                    \n                \n\n            \n                \n                    Configurations for the access jsonwebtoken used for authentication\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshJwtConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JwtSignOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.REFRESH_JWT_SECRET,\n  expiresIn: '90d',\n}\n                    \n                \n\n            \n                \n                    Configurations for the refresh jsonwebtoken used for authentication\n\n                \n            \n\n        \n    \n\n    src/config/hash.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        hashConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  saltRounds: 10,\n}\n                    \n                \n\n            \n                \n                    Global configuration for amount of saltRounds on hashes of sensitive information\n\n                \n            \n\n        \n    \n\n    src/common/decorators/is-admin.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_ADMIN_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isAdmin'\n                    \n                \n\n            \n                \n                    Value to verify if @IsAdmin() is being used in the endpoint\nConsult RolesGuard\n\n                \n            \n\n        \n    \n\n    src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n            \n                \n                    Value to verify if @Public() is being used in the endpoint\nConsult JwtAuthGuard\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CustomDecorator => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n            \n                \n                    Makes an endpoint accessible by unauthenticated users\nExample: Create user and Login endpoints\n\n                \n            \n\n        \n    \n\n    src/config/multer-upload.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        maxImageUploadSize\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 3 * 1024 * 1024\n                    \n                \n\n            \n                \n                    Constant that sets the maximum image upload file size\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        multerUploadConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MulterOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  storage: diskStorage({\n    destination: './tmp',\n    filename: (request, file, callback) => {\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);\n      const fileName = `${uniqueSuffix}-${file.originalname}`;\n\n      return callback(null, fileName);\n    },\n  }),\n\n  fileFilter: (request, file, callback) => {\n    const mimetype = validImageUploadTypesRegex.test(file.mimetype);\n    const extname = validImageUploadTypesRegex.test(\n      path.extname(file.originalname).toLowerCase(),\n    );\n\n    if (mimetype && extname) {\n      return callback(null, true);\n    }\n\n    return callback(new FileTypeError(validImageUploadTypesRegex), false);\n  },\n\n  limits: {\n    fileSize: maxImageUploadSize,\n  },\n}\n                    \n                \n\n            \n                \n                    Configurations for the multer library used for file upload.\nAccepts types jpeg, jpg and png of size up to 3MB\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validImageUploadTypesRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /jpeg|jpg|png/\n                    \n                \n\n            \n                \n                    Constant containing a Regular Expression\nwith the valid image upload types\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
