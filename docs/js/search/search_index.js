var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.656,1,2.523]],["body/modules/AppModule.html",[0,2.489,1,5.062,2,2.163,3,2.643,4,3.609,5,3.609,6,4.358,7,0.02,8,3.762,9,4.358,10,4.037,11,3.227,12,2.48,13,2.163,14,0.233,15,0.233,16,0.18,17,4.213,18,3.792,19,0.576,20,0.865,21,5.481,22,2.914,23,4.213,24,3.483,25,4.213,26,4.213,27,4.213,28,4.213,29,4.213,30,2.677,31,4.213,32,4.213,33,0.233,34,0.252,35,0.015,36,0.015]],["title/controllers/AuthController.html",[37,2,38,2.523]],["body/controllers/AuthController.html",[7,0.02,14,0.223,15,0.223,16,0.173,19,0.559,20,0.827,33,0.223,34,0.241,35,0.014,36,0.014,37,2.921,38,3.684,39,2.211,40,3.453,41,0.332,42,1.084,43,3.684,44,2.921,45,0.663,46,1.936,47,2.875,48,3.79,49,4.031,50,4.388,51,1.831,52,3.073,53,5.325,54,4.031,55,0.485,56,4.031,57,5.325,58,1.253,59,0.873,60,0.588,61,0.873,62,1.253,63,1.936,64,4.059,65,3.073,66,3.073,67,3.073,68,4.059,69,3.073,70,2.07,71,3.51,72,3.453,73,4.031,74,4.031,75,2.789,76,4.031,77,3.135,78,3.453,79,4.031,80,2.211,81,2.373,82,3.073,83,4.031,84,3.453,85,1.633,86,1.936,87,1.466,88,4.031]],["title/modules/AuthModule.html",[0,1.656,6,2.317]],["body/modules/AuthModule.html",[0,2.508,2,2.188,3,2.663,6,4.598,7,0.02,10,4.049,11,3.25,12,2.508,13,2.188,14,0.236,15,0.236,16,0.182,18,3.82,19,0.585,20,0.874,30,3.509,33,0.236,34,0.255,35,0.015,36,0.015,38,4.238,39,3.029,71,4.049,72,3.65,89,3.65,90,4.261,91,3.65,92,3.773,93,4.261,94,4.261,95,3.248,96,5.522,97,2.508,98,2.508,99,2.948,100,4.261,101,4.261,102,4.261,103,4.261]],["title/injectables/AuthService.html",[71,2.146,104,1.077]],["body/injectables/AuthService.html",[3,2.004,7,0.02,14,0.157,15,0.157,16,0.121,19,0.499,20,0.58,33,0.157,34,0.294,35,0.011,36,0.011,41,0.233,42,1.077,45,0.465,46,1.511,47,2.918,48,3.131,55,0.593,58,1.532,59,1.067,60,0.719,61,1.067,62,1.689,63,1.975,71,2.446,81,2.446,85,2.601,86,2.484,87,1.511,95,2.154,104,1.227,105,1.451,106,2.421,107,3.758,108,5.432,109,4.004,110,4.155,111,1.227,112,2.826,113,3.521,114,6.551,115,2.826,116,2.875,117,2.826,118,1.82,119,2.826,120,3.758,121,5.499,122,5.432,123,4.654,124,4.654,125,4.141,126,4.141,127,2.279,128,4.221,129,4.155,130,2.826,131,1.684,132,1.887,133,2.421,134,1.955,135,2.826,136,2.826,137,2.875,138,2.826,139,2.826,140,2.619,141,3.409,142,2.826,143,1.664,144,1.955,145,2.826,146,1.363,147,2.826,148,2.826,149,2.826,150,4.155,151,2.826,152,2.421,153,2.826,154,1.796,155,1.145]],["title/classes/CreateProductDto.html",[34,0.218,156,2.146]],["body/classes/CreateProductDto.html",[7,0.02,14,0.17,15,0.17,16,0.132,19,0.466,33,0.17,34,0.264,35,0.012,36,0.012,41,0.514,45,0.506,51,2.719,55,0.721,59,1.296,60,0.874,61,1.349,70,1.579,118,1.661,140,1.483,156,2.601,157,0.631,158,5.34,159,2.345,160,1.894,161,2.809,162,2.601,163,1.894,164,2.84,165,1.524,166,4.431,167,4.431,168,5.129,169,4.312,170,5.129,171,3.076,172,3.076,173,3.786,174,3.786,175,3.786,176,3.369,177,3.786,178,3.786,179,3.786,180,2.636,181,3.076,182,3.076,183,3.076,184,3.786,185,3.786,186,4.309,187,3.911,188,2.636,189,3.076,190,3.076,191,3.076,192,3.369,193,2.636,194,2.636,195,3.786,196,3.578,197,5.172,198,3.911,199,3.044,200,1.483,201,2.345,202,0.863,203,3.076,204,1.397,205,2.345,206,1.955,207,1.955,208,1.96,209,2.636,210,3.786,211,3.786,212,2.636,213,1.811,214,2.636,215,2.636]],["title/classes/CreateUserDto.html",[34,0.218,216,2.146]],["body/classes/CreateUserDto.html",[7,0.02,14,0.183,15,0.183,16,0.142,19,0.384,33,0.183,34,0.278,35,0.012,36,0.012,41,0.273,42,1.166,45,0.544,51,2.653,55,0.703,59,1.332,60,0.853,61,1.264,85,2.494,86,2.475,118,1.784,125,2.522,157,0.679,160,1.994,161,2.957,162,2.739,163,1.994,165,1.605,169,4.041,180,3.986,187,2.289,198,3.724,199,3.438,200,1.595,208,1.912,216,2.739,217,5.273,218,2.289,219,2.389,220,5.273,221,3.308,222,3.308,223,3.547,224,3.986,225,3.308,226,3.308,227,3.308,228,2.638,229,4.653,230,3.308,231,4.653,232,5.841,233,4.255,234,5.841,235,3.308,236,3.986,237,3.308,238,2.834,239,2.289,240,2.289,241,3.308,242,3.308,243,3.308,244,2.834,245,2.834,246,2.834,247,2.834]],["title/classes/DeleteUserDto.html",[34,0.218,248,2.317]],["body/classes/DeleteUserDto.html",[7,0.02,14,0.262,15,0.262,16,0.203,19,0.39,33,0.262,34,0.353,35,0.016,36,0.016,41,0.39,42,1.107,45,0.778,51,2.15,55,0.57,60,0.691,86,2.146,118,1.573,157,0.971,160,2.53,161,3.752,162,3.475,165,2.036,188,4.055,196,4.084,199,3.475,200,2.282,208,1.549,218,3.275,240,3.275,248,3.752,249,5.058,250,4.084,251,4.905,252,4.733,253,3.752]],["title/classes/EmailInUseException.html",[34,0.218,254,2.523]],["body/classes/EmailInUseException.html",[7,0.02,14,0.237,15,0.237,16,0.183,19,0.353,20,0.879,33,0.237,34,0.256,35,0.015,36,0.015,41,0.353,42,1.067,55,0.516,85,2.632,111,1.814,131,2.632,157,0.879,202,1.554,223,4.225,224,5.263,228,2.375,254,3.834,255,4.225,256,3.267,257,3.334,258,4.128,259,5.564,260,2.126,261,3.334,262,6.006,263,4.128,264,3.823,265,4.683,266,3.671,267,4.683,268,4.285]],["title/interfaces/ExceptionHandler.html",[269,1.872,270,2.317]],["body/interfaces/ExceptionHandler.html",[7,0.019,14,0.274,15,0.274,16,0.211,33,0.274,35,0.016,36,0.016,41,0.407,45,0.811,46,2.203,55,0.595,58,1.534,59,1.069,60,0.721,61,1.069,62,1.534,132,3.243,269,3.111,270,3.851,271,3.415,272,4.229,273,2.906,274,4.937,275,4.73,276,4.619,277,4.937,278,5.191,279,6.059,280,4.619,281,4.192]],["title/injectables/ExceptionInterceptor.html",[104,1.077,282,2.78]],["body/injectables/ExceptionInterceptor.html",[7,0.02,14,0.206,15,0.206,16,0.159,19,0.506,20,0.762,33,0.206,34,0.222,35,0.013,36,0.013,41,0.306,45,0.61,46,1.832,55,0.447,58,1.153,59,0.803,60,0.542,61,0.803,62,1.153,63,1.832,87,1.349,104,1.487,105,1.905,131,2.041,132,2.597,154,2.358,155,2.041,219,1.905,257,3.15,282,3.84,283,3.179,284,5.038,285,5.038,286,4.677,287,4.316,288,4.677,289,4.677,290,3.899,291,5.038,292,6.135,293,5.72,294,3.711,295,4.677,296,5.72,297,6.135,298,3.711,299,3.84,300,3.84,301,4.316,302,2.965,303,4.316,304,2.586,305,3.84,306,4.36,307,5.038,308,3.711,309,2.567,310,2.567,311,3.711,312,3.84,313,2.567,314,3.711,315,2.829,316,3.711,317,3.711,318,3.711,319,3.711]],["title/classes/FileTypeError.html",[34,0.218,320,2.78]],["body/classes/FileTypeError.html",[7,0.02,14,0.23,15,0.23,16,0.298,19,0.343,33,0.23,34,0.248,35,0.014,36,0.014,41,0.343,42,1.055,55,0.5,58,1.291,59,0.899,60,0.972,61,0.899,111,1.227,131,2.201,157,0.853,164,1.683,202,1.523,207,4.079,228,2.328,260,2.101,261,3.295,273,3.197,320,4.14,321,4.653,322,3.559,323,4.893,324,6.418,325,3.846,326,5.431,327,6.052,328,4.154,329,4.613,330,6.052,331,5.184,332,6.96,333,2.279,334,2.874,335,4.154]],["title/classes/FindAllProductsDto.html",[34,0.218,336,2.317]],["body/classes/FindAllProductsDto.html",[7,0.02,14,0.211,15,0.211,16,0.163,19,0.423,33,0.211,34,0.346,35,0.014,36,0.014,41,0.314,45,0.625,51,2.631,55,0.698,59,1.109,60,0.973,61,1.442,118,1.652,157,0.781,160,2.196,164,2.076,165,1.767,169,4.61,192,3.906,195,4.963,198,4.288,199,3.016,200,1.835,208,1.896,213,2.24,233,2.418,304,2.631,336,3.256,337,5.31,338,3.26,339,5.124,340,4.235,341,4.963,342,5.192,343,4.963,344,5.124,345,3.805,346,6.198,347,3.906,348,3.805,349,3.805,350,3.805,351,4.39,352,2.901,353,5.793,354,3.26]],["title/classes/InvalidEmailOrPasswordError.html",[34,0.218,137,2.523]],["body/classes/InvalidEmailOrPasswordError.html",[7,0.02,14,0.23,15,0.23,16,0.177,19,0.342,20,0.85,33,0.23,34,0.248,35,0.014,36,0.014,41,0.342,42,1.054,55,0.499,85,2.974,86,2.529,111,1.784,131,2.598,137,3.751,157,0.85,202,1.521,228,2.324,257,3.292,258,4.074,260,2.099,261,3.292,263,4.484,264,3.774,323,4.133,355,4.645,356,3.549,357,6.411,358,5.492,359,6.043,360,4.143,361,3.549]],["title/classes/InvalidPasswordUpdateException.html",[34,0.218,362,2.523]],["body/classes/InvalidPasswordUpdateException.html",[7,0.02,14,0.236,15,0.236,16,0.182,19,0.351,33,0.236,34,0.255,35,0.015,36,0.015,41,0.351,42,1.103,55,0.513,86,2.678,111,1.809,131,2.238,155,2.626,157,0.874,163,2.778,202,1.549,228,2.367,253,4.45,260,2.121,261,3.327,273,3.25,323,4.209,333,2.337,334,2.948,358,5.552,361,3.65,362,3.82,363,4.73,364,3.248,365,6.481,366,3.606,367,4.261]],["title/injectables/JwtAuthGuard.html",[24,2.317,104,1.077]],["body/injectables/JwtAuthGuard.html",[7,0.02,14,0.185,15,0.185,16,0.143,19,0.509,20,0.685,22,2.309,24,2.976,33,0.185,34,0.323,35,0.012,36,0.012,41,0.275,43,4.429,45,0.549,46,1.702,55,0.564,58,1.455,59,1.014,60,0.683,61,1.014,62,1.037,63,1.702,77,2.756,78,2.859,80,1.831,87,1.702,97,1.965,104,1.382,105,1.714,111,0.985,140,1.609,202,0.936,289,4.47,290,3.727,295,4.47,301,5.485,305,3.57,306,4.123,309,2.309,368,4.634,369,2.859,370,3.452,371,3.727,372,6.175,373,5.024,374,4.881,375,5.024,376,5.024,377,5.024,378,4.634,379,2.859,380,5.749,381,3.338,382,3.57,383,2.756,384,2.859,385,3.338,386,4.682,387,4.682,388,3.57,389,2.544,390,3.338,391,2.309,392,4.011,393,3.338,394,2.859,395,2.859,396,2.309,397,3.338]],["title/injectables/JwtStrategy.html",[92,2,104,1.077]],["body/injectables/JwtStrategy.html",[7,0.02,14,0.189,15,0.189,16,0.146,19,0.488,20,0.701,33,0.189,34,0.204,35,0.013,36,0.013,41,0.282,42,1.06,45,0.561,46,1.73,47,2.64,55,0.573,58,1.061,59,0.739,60,0.498,61,0.739,62,1.702,63,1.73,87,1.241,92,2.609,97,2.01,98,2.01,99,2.362,104,1.405,105,1.753,111,1.617,118,1.578,120,3.291,127,1.873,143,3.666,144,2.362,146,2.64,202,0.958,204,2.16,208,1.939,260,1.118,269,2.442,370,3.666,371,3.764,391,2.362,398,2.362,399,4.669,400,4.514,401,4.757,402,3.414,403,3.626,404,3.414,405,2.8,406,4.174,407,2.602,408,2.602,409,2.602,410,2.362,411,2.17,412,2.362,413,3.626,414,3.626,415,3.626,416,3.626,417,3.626,418,2.602,419,2.01,420,2.602,421,2.17,422,3.291,423,3.291,424,2.602,425,2.602,426,2.602,427,2.602,428,2.17,429,2.602,430,2.602,431,2.602,432,2.602]],["title/classes/LoginCredentialsDto.html",[34,0.218,50,2.523]],["body/classes/LoginCredentialsDto.html",[7,0.02,14,0.243,15,0.243,16,0.188,19,0.362,33,0.243,34,0.336,35,0.015,36,0.015,41,0.362,42,1.139,45,0.721,50,3.892,51,2.555,55,0.678,60,0.821,85,2.745,86,2.463,118,1.746,157,0.9,160,2.411,162,3.312,165,1.94,196,4.297,199,3.656,200,2.115,208,1.842,239,3.034,240,3.034,304,2.888,419,3.312,433,5.321,434,3.757,435,5.626,436,5.626,437,4.386,438,4.386]],["title/classes/LoginResponse.html",[34,0.218,75,2.523]],["body/classes/LoginResponse.html",[7,0.02,14,0.279,15,0.279,16,0.216,33,0.279,34,0.301,35,0.016,36,0.016,41,0.415,43,4.243,45,0.828,48,3.201,55,0.607,60,0.735,75,4.243,118,1.634,127,3.365,128,5.666,157,1.034,160,2.159,165,2.115,208,1.649,374,3.839,411,3.898,439,4.315,440,5.036,441,5.036,442,5.036,443,5.036,444,5.036,445,5.036]],["title/classes/MissingPasswordUpdateException.html",[34,0.218,446,2.523]],["body/classes/MissingPasswordUpdateException.html",[7,0.02,14,0.224,15,0.224,16,0.173,19,0.333,33,0.224,34,0.242,35,0.014,36,0.014,41,0.333,42,1.085,55,0.487,86,2.723,111,1.763,131,2.162,155,2.802,157,0.83,162,3.738,202,1.496,228,2.286,253,4.394,260,2.079,261,3.26,273,3.14,333,2.217,334,2.796,364,3.081,366,3.515,446,3.69,447,4.57,448,5.923,449,3.483,450,4.042,451,5.334,452,5.971,453,4.042]],["title/interfaces/Payload.html",[143,2.146,269,1.872]],["body/interfaces/Payload.html",[7,0.02,14,0.194,15,0.194,16,0.15,19,0.494,20,0.719,33,0.194,34,0.209,35,0.013,36,0.013,41,0.289,42,1.116,45,0.576,47,1.689,60,0.707,62,1.089,63,1.273,87,1.273,92,1.921,97,2.061,98,2.061,99,2.423,104,1.43,111,1.034,118,1.809,120,2.423,127,1.921,143,3.267,144,4.142,146,3.213,165,1.67,202,0.982,204,2.52,208,1.96,260,1.585,269,2.486,271,2.423,370,3.267,371,3.077,391,2.423,398,2.423,399,4.497,400,3.691,403,2.67,405,2.061,406,4.231,407,2.67,408,2.67,409,2.67,410,3.35,411,3.077,412,3.35,413,3.691,414,3.691,415,3.691,416,3.691,417,3.691,418,2.67,419,2.061,420,2.67,421,2.226,422,3.35,423,3.35,424,2.67,425,2.67,426,2.67,427,2.67,428,2.226,429,2.67,430,2.67,431,2.67,432,2.67]],["title/classes/PrismaExceptionHandler.html",[34,0.218,310,2.523]],["body/classes/PrismaExceptionHandler.html",[7,0.02,14,0.125,15,0.125,16,0.097,19,0.478,33,0.125,34,0.135,35,0.009,36,0.009,41,0.187,42,0.577,45,0.372,46,1.276,55,0.669,58,1.727,59,1.362,60,0.766,61,1.203,62,2.072,85,1.744,87,1.909,109,4.659,131,1.965,132,3.282,154,3.685,155,2.128,157,0.464,164,2.128,194,1.937,206,1.437,219,1.802,254,2.429,255,1.724,257,2.49,270,2.735,275,2.429,276,2.676,281,2.429,288,3.697,299,3.697,300,3.697,302,1.331,310,2.429,312,1.724,388,4.795,454,4.968,455,1.724,456,3.289,457,4.155,458,3.511,459,3.511,460,3.511,461,4.303,462,3.511,463,2.262,464,3.511,465,3.28,466,2.262,467,5.994,468,5.994,469,3.355,470,2.262,471,3.511,472,2.262,473,3.008,474,3.008,475,3.511,476,3.511,477,3.511,478,3.511,479,6.406,480,2.262,481,4.155,482,2.262,483,2.262,484,3.511,485,2.262,486,2.262,487,1.724,488,2.429,489,2.429,490,3.511,491,2.977,492,3.511,493,2.429,494,1.724,495,1.565,496,2.262,497,2.262,498,3.008,499,2.262,500,2.262,501,2.262,502,3.511,503,2.262,504,2.262,505,2.262,506,2.262,507,2.262,508,1.724,509,2.262,510,2.262,511,3.511,512,3.511,513,2.262]],["title/modules/PrismaModule.html",[0,1.656,8,2]],["body/modules/PrismaModule.html",[0,2.73,2,2.501,3,2.898,7,0.02,8,3.957,11,3.538,12,2.868,13,2.501,14,0.27,15,0.27,16,0.209,19,0.496,20,1,30,3.82,33,0.27,34,0.291,35,0.016,36,0.016,514,4.174,515,4.174,516,4.174,517,4.094,518,4.872,519,5.149,520,4.872]],["title/injectables/PrismaService.html",[104,1.077,517,2]],["body/injectables/PrismaService.html",[7,0.02,13,2.523,14,0.198,15,0.198,16,0.153,19,0.405,20,0.734,33,0.198,34,0.214,35,0.013,36,0.013,41,0.295,45,0.588,46,1.786,47,3.231,55,0.592,58,1.112,59,0.774,60,0.522,61,1.215,62,1.527,63,2.197,104,1.451,105,1.837,107,3.399,141,3.399,202,1.378,219,1.837,286,2.727,290,3.123,303,4.209,419,2.892,456,3.359,457,4.209,517,2.695,521,3.065,522,4.913,523,3.557,524,6.542,525,5.612,526,6.042,527,6.542,528,4.913,529,6.042,530,3.577,531,4.913,532,4.913,533,6.042,534,4.913,535,6.042,536,4.913,537,4.913,538,4.913,539,4.913,540,3.577,541,4.913,542,4.913,543,4.913,544,4.913,545,2.106,546,3.577,547,3.577,548,3.577]],["title/classes/Product.html",[34,0.218,164,1.478]],["body/classes/Product.html",[7,0.02,14,0.157,15,0.157,16,0.121,19,0.233,33,0.157,34,0.169,35,0.011,36,0.011,41,0.499,45,0.465,55,0.789,59,1.354,60,0.956,61,1.479,118,1.855,157,0.58,160,1.781,164,2.941,165,1.873,166,4.221,167,4.221,168,4.959,169,4.187,170,3.56,173,3.56,174,3.56,175,3.56,176,3.167,177,3.56,178,3.56,179,3.56,184,3.56,185,3.56,186,4.141,187,3.758,192,3.167,204,2.629,205,4.412,206,3.131,207,3.678,208,2.144,209,3.56,210,4.221,211,4.221,212,2.421,213,1.664,214,2.421,215,2.421,219,2.133,456,1.451,523,2.446,545,1.664,549,2.421,550,4.155,551,2.826,552,3.167,553,2.826,554,3.56,555,2.826,556,2.826,557,2.826,558,3.56,559,2.826,560,2.826,561,2.826,562,2.826,563,4.155,564,3.167,565,2.826,566,2.826,567,2.826,568,2.826,569,2.826,570,2.826,571,2.826,572,2.154,573,2.421,574,2.421]],["title/controllers/ProductController.html",[37,2,575,2.523]],["body/controllers/ProductController.html",[7,0.02,14,0.102,15,0.102,16,0.238,19,0.487,20,0.377,33,0.102,34,0.178,35,0.011,36,0.008,37,1.007,39,1.007,41,0.151,44,2.058,45,0.302,46,1.082,51,2.427,52,4.075,55,0.644,58,1.661,59,1.308,60,0.882,61,1.157,62,1.879,63,2.311,64,2.269,65,1.4,66,1.4,67,2.269,68,4.244,69,1.4,70,0.943,77,2.209,80,1.007,81,1.081,82,4.075,84,1.573,87,1.943,116,1.27,118,1.735,155,2.256,156,2.988,163,1.275,164,2.823,165,0.633,201,1.4,204,2.745,206,2.384,207,2.742,213,1.752,233,1.891,250,1.27,302,1.752,304,1.528,336,3.226,340,2.384,342,3.289,347,2.269,373,2.549,375,2.549,383,1.081,405,1.081,410,1.27,449,2.058,465,1.4,481,1.573,523,1.752,564,2.269,575,2.059,576,1.573,577,1.573,578,3.214,579,2.384,580,2.549,581,2.549,582,2.549,583,1.891,584,3.752,585,1.573,586,3.242,587,2.985,588,1.836,589,1.836,590,4.769,591,1.836,592,1.836,593,1.836,594,2.549,595,2.549,596,2.549,597,2.976,598,2.549,599,1.573,600,3.696,601,1.836,602,1.836,603,3.696,604,1.573,605,1.836,606,1.836,607,1.4,608,3.696,609,1.836,610,1.836,611,1.4,612,3.538,613,2.985,614,1.836,615,1.836,616,1.836,617,3.214,618,3.696,619,2.976,620,1.836,621,1.836,622,2.549,623,2.549,624,2.549,625,2.549,626,2.549,627,2.059,628,2.976,629,1.836,630,1.573,631,2.976,632,1.836,633,1.836,634,1.4,635,1.081,636,4.348,637,1.573,638,2.988,639,1.167,640,1.4,641,1.27,642,2.269,643,1.573,644,1.573,645,1.27,646,2.54,647,1.573,648,1.836,649,1.836,650,1.573,651,1.836,652,1.836,653,1.836,654,1.836,655,1.836,656,1.836,657,1.836,658,2.976,659,1.836,660,1.836,661,1.836,662,1.836,663,1.836,664,1.836,665,1.836,666,1.836,667,1.836,668,1.836,669,1.836,670,1.836,671,1.573,672,1.836,673,1.836]],["title/modules/ProductModule.html",[0,1.656,9,2.317]],["body/modules/ProductModule.html",[0,2.589,2,2.299,3,2.749,7,0.02,8,3.823,9,4.556,11,3.356,12,2.636,13,2.299,14,0.248,15,0.248,16,0.192,18,3.944,19,0.575,20,0.919,30,3.623,33,0.248,34,0.268,35,0.015,36,0.015,39,3.127,575,4.339,627,3.098,634,3.414,635,2.636,646,4.103,647,3.836,674,3.836,675,4.478,676,3.836,677,4.478,678,4.478,679,3.836,680,4.478,681,3.414,682,4.478,683,4.478]],["title/classes/ProductNameInUseException.html",[34,0.218,488,2.523]],["body/classes/ProductNameInUseException.html",[7,0.02,14,0.233,15,0.233,16,0.18,19,0.347,20,0.865,33,0.233,34,0.252,35,0.015,36,0.015,41,0.347,42,1.061,55,0.507,59,1.549,111,1.799,131,2.615,157,0.865,164,2.779,202,1.537,228,2.349,256,3.211,257,3.313,258,4.101,259,5.528,260,2.112,261,3.313,262,5.982,263,4.101,264,3.798,265,4.645,266,3.609,267,4.645,488,3.792,489,3.792,684,3.609]],["title/classes/ProductNotFoundException.html",[34,0.218,491,2.523]],["body/classes/ProductNotFoundException.html",[7,0.02,14,0.244,15,0.244,16,0.189,19,0.364,20,0.905,33,0.244,34,0.264,35,0.015,36,0.015,41,0.364,42,1.079,55,0.531,111,1.839,131,2.661,157,0.905,164,2.813,202,1.584,228,2.42,257,3.371,258,4.173,260,2.149,261,3.371,263,4.173,264,3.865,489,3.907,491,3.907,508,4.748,684,3.78,685,3.363,686,5.625,687,5.336,688,3.78]],["title/injectables/ProductService.html",[104,1.077,646,2.146]],["body/injectables/ProductService.html",[7,0.02,14,0.089,15,0.089,16,0.171,19,0.393,20,0.331,33,0.089,34,0.205,35,0.011,36,0.007,41,0.133,42,0.44,44,2.188,45,0.265,46,0.973,47,3.194,55,0.681,58,1.758,59,1.453,60,0.826,61,1.224,62,1.804,63,2.297,80,0.884,81,0.949,87,1.995,104,0.79,105,0.828,107,2.76,109,3.3,111,0.476,118,1.789,126,2.039,140,2.55,141,1.85,155,1.933,156,2.808,163,1.146,164,2.641,201,1.229,204,2.791,206,3.595,207,2.178,208,0.876,213,2.018,233,2.535,260,0.876,302,1.575,304,1.373,336,2.535,340,3.032,341,2.937,342,3.637,343,2.292,347,2.039,354,2.937,382,2.039,383,1.575,396,1.85,405,2.348,449,1.88,456,1.373,474,1.381,498,2.292,517,2.617,523,2.808,564,2.039,579,2.535,580,2.937,581,2.292,582,2.292,583,2.535,585,2.292,587,1.85,594,2.292,595,2.292,596,2.292,598,2.292,599,2.292,603,3.417,604,2.292,607,2.039,611,1.229,612,4.015,613,3.3,617,2.937,618,2.292,641,1.115,642,2.039,643,1.381,644,1.381,645,1.115,646,1.575,689,1.381,690,3.417,691,3.417,692,2.675,693,3.428,694,2.675,695,1.381,696,1.612,697,2.535,698,1.612,699,1.612,700,1.612,701,1.612,702,1.612,703,2.675,704,1.612,705,3.989,706,2.675,707,2.039,708,2.675,709,2.675,710,2.675,711,2.675,712,4.77,713,2.675,714,3.989,715,2.675,716,2.675,717,2.675,718,2.039,719,2.675,720,2.675,721,3.428,722,2.675,723,1.612,724,1.612,725,1.612,726,2.292,727,1.612,728,1.612,729,1.612,730,2.675,731,1.612,732,1.381,733,1.612,734,1.612,735,3.428,736,1.612,737,2.675,738,1.612,739,1.612,740,1.612,741,1.612,742,1.612,743,1.612,744,1.612,745,2.675,746,2.675,747,1.612,748,1.612,749,1.612,750,1.612,751,1.612,752,1.612,753,1.612,754,1.612,755,1.612,756,2.675,757,1.612,758,1.612,759,1.612]],["title/classes/ProductServiceInputException.html",[34,0.218,325,2.317]],["body/classes/ProductServiceInputException.html",[7,0.02,14,0.262,15,0.262,16,0.203,33,0.262,34,0.283,35,0.016,36,0.016,41,0.39,55,0.57,58,1.471,59,1.025,60,0.691,61,1.025,111,1.397,118,1.714,132,2.681,157,0.971,202,1.656,228,2.029,260,2.106,273,3.787,325,4.405,333,3.238,495,4.451,718,4.905,760,4.5,761,3.608,762,5.512,763,5.512,764,5.058,765,4.055,766,4.055]],["title/guards/RolesGuard.html",[767,2.78,768,2.523]],["body/guards/RolesGuard.html",[7,0.02,14,0.188,15,0.188,16,0.145,19,0.513,20,0.697,22,2.351,33,0.188,34,0.326,35,0.013,36,0.013,41,0.28,42,1.058,45,0.559,46,1.724,55,0.571,58,1.474,59,1.026,60,0.692,61,1.026,62,1.056,63,1.724,80,1.864,87,1.724,104,1.4,111,1.003,140,2.634,146,1.639,219,1.745,289,4.505,290,3.756,295,4.505,305,3.615,306,4.164,309,2.351,374,4.505,376,5.326,377,5.063,378,5.326,379,2.911,380,5.775,382,3.615,383,2.791,384,2.911,388,3.615,394,2.911,395,2.911,396,2.351,423,3.281,428,2.16,473,5.063,545,2,586,3.532,638,2.791,640,2.591,768,3.281,769,2.911,770,5.91,771,3.398,772,3.398,773,4.742,774,4.742,775,2.591,776,3.398,777,3.398,778,2.591,779,3.398,780,3.398,781,3.398]],["title/classes/UpdateProductDto.html",[34,0.218,612,2.317]],["body/classes/UpdateProductDto.html",[7,0.02,14,0.272,15,0.272,16,0.21,19,0.498,33,0.272,34,0.293,35,0.016,36,0.016,41,0.404,61,1.306,70,2.518,156,3.848,157,1.006,159,3.738,160,2.587,161,3.835,163,2.102,164,2.445,202,1.376,469,4.175,612,3.835,642,3.738,782,4.201,783,5.17,784,5.17,785,5.17,786,5.17,787,4.201,788,4.904]],["title/classes/UpdateUserDto.html",[34,0.218,789,2.317]],["body/classes/UpdateUserDto.html",[7,0.02,14,0.239,15,0.239,16,0.184,19,0.508,33,0.239,34,0.332,35,0.015,36,0.015,41,0.355,42,1.07,45,0.708,51,1.957,55,0.519,60,0.629,61,1.409,70,2.213,86,2.023,118,1.482,157,0.885,160,2.384,161,3.535,163,1.847,165,1.919,196,3.848,198,3.848,199,3.275,200,2.078,202,1.209,208,1.411,216,3.626,218,2.982,240,2.982,251,4.696,253,3.535,469,3.848,783,4.766,784,4.766,785,4.766,786,4.766,787,3.692,789,3.535,790,4.241,791,4.31,792,4.31,793,3.286,794,4.31]],["title/classes/UpdateUserRoleDto.html",[34,0.218,795,2.317]],["body/classes/UpdateUserRoleDto.html",[7,0.02,14,0.237,15,0.237,16,0.183,19,0.457,33,0.237,34,0.331,35,0.015,36,0.015,41,0.353,42,1.18,45,0.704,51,2.517,55,0.667,60,0.809,85,2.726,118,1.477,146,3.492,155,2.246,157,0.879,160,2.375,162,3.262,165,1.911,200,2.066,208,1.814,236,5.263,239,2.965,304,2.845,449,3.04,545,2.523,586,2.351,790,4.683,795,3.522,796,3.671,797,4.285,798,5.542,799,4.285,800,4.285]],["title/classes/User.html",[34,0.218,42,0.599]],["body/classes/User.html",[7,0.02,14,0.167,15,0.167,16,0.129,19,0.248,33,0.167,34,0.18,35,0.012,36,0.012,41,0.248,42,1.205,45,0.494,55,0.787,59,1.285,60,0.953,61,1.497,85,2.405,86,2.158,118,1.875,146,3.149,157,0.617,160,1.864,165,1.93,186,3.315,187,2.081,204,2.695,205,4.524,208,2.138,219,2.233,220,5.085,239,2.081,244,2.577,245,2.577,246,2.577,247,2.577,275,3.008,340,2.764,456,1.544,523,2.56,545,1.771,552,4.265,554,4.793,558,3.725,572,3.315,573,3.725,574,3.725,586,3.069,697,2.764,801,2.577,802,5.085,803,3.008,804,3.008,805,3.008,806,3.008,807,3.008,808,3.008,809,3.008,810,3.725,811,3.008,812,3.008,813,3.008,814,3.008,815,3.008,816,3.008,817,3.008,818,3.008]],["title/controllers/UserController.html",[37,2,819,2.523]],["body/controllers/UserController.html",[7,0.02,14,0.127,15,0.127,16,0.098,19,0.53,20,0.471,33,0.127,34,0.212,35,0.009,36,0.009,37,1.258,39,1.258,41,0.189,42,1.136,44,2.381,45,0.377,46,1.29,47,2.093,51,2.4,52,3.725,55,0.636,58,1.643,59,1.144,60,0.771,61,1.144,62,1.811,63,2.296,64,3.725,65,1.748,66,1.748,67,2.705,68,4.26,69,1.748,70,1.177,77,2.089,80,1.258,81,1.35,82,4.028,86,1.29,87,1.921,113,2.68,116,1.586,140,2.093,146,2.093,155,1.98,163,1.521,216,3.29,248,3.826,250,2.455,264,2.089,304,2.869,383,1.35,422,3.003,449,2.381,577,1.964,578,3.718,579,2.758,583,2.758,586,1.946,587,3.38,590,3.04,600,3.04,608,4.186,613,3.866,630,3.04,635,1.35,636,4.527,637,1.964,638,2.089,639,1.457,640,1.748,641,1.586,645,2.455,650,1.964,671,1.964,778,5.193,789,3.826,793,3.309,795,3.551,810,4.787,819,2.455,820,1.964,821,3.04,822,3.718,823,1.964,824,2.293,825,2.293,826,2.293,827,2.293,828,2.293,829,2.293,830,4.34,831,2.758,832,2.293,833,2.293,834,2.293,835,3.548,836,2.293,837,2.293,838,2.293,839,1.964,840,3.548,841,2.293,842,2.293,843,4.34,844,1.964,845,1.964,846,1.457,847,1.964,848,1.964,849,1.964,850,2.293,851,2.293,852,2.293,853,2.293,854,4.34,855,2.293,856,2.293,857,2.293,858,2.293,859,2.293]],["title/classes/UserInputExceptionHandler.html",[34,0.218,313,2.523]],["body/classes/UserInputExceptionHandler.html",[7,0.02,14,0.22,15,0.22,16,0.17,19,0.52,20,0.816,33,0.22,34,0.238,35,0.014,36,0.014,41,0.328,42,1.037,45,0.654,46,1.919,55,0.479,58,1.236,59,0.861,60,0.58,61,0.861,62,1.236,131,2.557,132,3.246,154,3.354,155,2.139,157,0.816,219,2.71,257,3.239,265,3.032,270,3.765,275,3.651,276,4.023,281,3.651,288,4.81,299,4.81,300,4.81,312,3.032,313,3.651,315,5.145,325,3.354,333,2.895,334,3.651,366,3.107,455,3.032,495,3.651,760,3.032,860,4.522,861,3.977,862,3.032,863,5.278]],["title/modules/UserModule.html",[0,1.656,10,2.146]],["body/modules/UserModule.html",[0,2.599,2,2.313,3,2.76,7,0.02,8,3.829,10,4.266,11,3.369,12,2.652,13,2.313,14,0.25,15,0.25,16,0.193,18,3.959,19,0.546,20,0.925,30,3.637,33,0.25,34,0.269,35,0.015,36,0.015,39,3.139,113,4.052,519,4.903,679,3.859,819,4.351,849,3.859,864,3.859,865,4.505,866,3.859,867,3.859,868,4.505,869,4.505]],["title/classes/UserNotFoundException.html",[34,0.218,493,2.523]],["body/classes/UserNotFoundException.html",[7,0.02,14,0.239,15,0.239,16,0.184,19,0.355,20,0.885,33,0.239,34,0.258,35,0.015,36,0.015,41,0.355,42,1.191,55,0.519,85,2.638,111,1.819,131,2.638,157,0.885,202,1.56,204,2.956,228,2.384,257,3.342,258,4.137,260,2.131,261,3.342,263,4.137,264,3.832,493,3.848,494,4.241,508,4.696,685,3.286,686,5.576,687,5.277,688,3.692,870,4.31]],["title/injectables/UserService.html",[104,1.077,113,2]],["body/injectables/UserService.html",[7,0.02,14,0.085,15,0.085,16,0.066,19,0.471,20,0.316,33,0.085,34,0.198,35,0.007,36,0.007,41,0.127,42,1.139,44,2.126,45,0.253,46,0.936,47,3.231,48,1.635,55,0.649,58,1.675,59,1.167,60,0.787,61,1.167,62,1.818,63,2.27,80,0.844,81,0.906,85,1.889,86,2.45,87,1.568,104,0.76,105,0.79,107,2.681,109,3.225,111,0.454,113,1.412,116,1.78,118,1.749,121,4.444,123,2.205,124,4.444,125,2.954,126,3.553,132,1.76,133,2.841,134,1.065,140,2.599,141,4.045,146,1.599,152,3.32,154,1.635,155,2.316,163,1.103,176,2.954,204,2.756,213,1.515,216,2.744,238,1.319,248,3.145,250,2.681,251,2.528,253,3.297,260,1.269,286,1.962,302,1.515,304,1.321,362,1.78,383,1.515,405,1.952,446,1.78,448,2.205,449,1.819,456,1.321,517,2.557,523,3.275,552,1.173,579,2.463,583,1.635,587,1.78,607,1.962,611,1.173,613,2.681,641,1.065,645,1.78,690,3.32,691,3.32,695,1.319,697,3.297,726,2.205,732,1.319,789,3.915,793,2.528,795,2.962,802,1.319,821,2.205,822,2.841,823,2.205,831,2.107,839,1.319,844,1.319,845,1.319,846,0.978,847,1.319,848,1.319,871,1.319,872,2.573,873,3.316,874,3.316,875,1.539,876,1.539,877,2.573,878,1.539,879,3.875,880,2.573,881,2.573,882,1.539,883,2.573,884,2.573,885,2.573,886,1.539,887,1.539,888,2.573,889,2.573,890,2.573,891,3.875,892,1.539,893,1.539,894,1.539,895,1.539,896,1.539,897,2.573,898,1.539,899,1.539,900,2.573,901,1.539,902,3.875,903,1.539,904,3.875,905,1.539,906,1.539,907,3.316,908,1.539,909,1.539,910,2.573,911,1.539,912,1.539,913,2.573,914,1.539,915,1.539,916,3.316,917,3.875,918,1.539,919,2.573,920,1.539]],["title/classes/UserServiceInputException.html",[34,0.218,366,2.146]],["body/classes/UserServiceInputException.html",[7,0.02,14,0.262,15,0.262,16,0.203,33,0.262,34,0.283,35,0.016,36,0.016,41,0.39,55,0.57,58,1.471,59,1.025,60,0.691,61,1.025,111,1.397,118,1.714,132,2.681,157,0.971,202,1.656,228,2.029,260,2.106,273,3.787,333,3.238,366,4.081,495,4.451,718,4.905,761,3.608,762,5.512,763,5.512,764,5.058,765,4.055,766,4.055,862,4.5]],["title/classes/UserWithoutPassword.html",[34,0.218,846,2.317]],["body/classes/UserWithoutPassword.html",[7,0.02,14,0.277,15,0.277,16,0.214,19,0.504,33,0.277,34,0.299,35,0.016,36,0.016,41,0.413,42,1.084,70,2.568,86,2.398,140,2.412,157,1.027,193,4.286,202,1.403,469,4.226,831,3.179,846,3.882,921,4.286,922,4.286,923,6.109,924,6.109,925,6.109,926,5.003,927,5.003]],["title/interfaces/ValidateReturn.html",[269,1.872,421,2.317]],["body/interfaces/ValidateReturn.html",[7,0.02,14,0.195,15,0.195,16,0.151,19,0.495,20,0.722,33,0.195,34,0.21,35,0.013,36,0.013,41,0.29,42,1.117,45,0.578,47,1.697,60,0.709,62,1.094,63,1.279,87,1.279,92,1.93,97,2.071,98,2.071,99,2.434,104,1.434,111,1.039,118,1.811,120,2.434,127,1.93,143,2.859,144,2.434,146,2.893,165,1.675,202,0.987,204,2.527,208,1.964,260,1.152,269,2.494,271,2.434,370,3.275,371,3.087,391,2.434,398,2.434,399,4.503,400,3.703,403,2.682,405,2.071,406,3.703,407,2.682,408,2.682,409,2.682,410,2.434,411,2.236,412,2.434,413,3.703,414,3.703,415,3.703,416,3.703,417,3.703,418,3.703,419,2.859,420,3.703,421,3.087,422,4.355,423,4.355,424,2.682,425,2.682,426,2.682,427,2.682,428,2.236,429,2.682,430,2.682,431,2.682,432,2.682]],["title/coverage.html",[928,4.265]],["body/coverage.html",[7,0.02,16,0.11,24,1.635,34,0.432,35,0.01,36,0.01,37,2.557,38,1.78,40,2.204,42,0.637,50,1.78,59,0.557,60,0.376,71,1.515,75,1.78,77,1.515,85,1.043,86,1.409,92,1.411,98,1.515,104,1.791,106,2.204,113,1.411,137,1.78,143,1.515,155,1.043,156,1.515,158,2.204,159,2.954,164,1.043,216,1.515,217,2.204,218,3.225,248,1.635,249,2.204,254,1.78,255,1.962,256,2.954,269,2.393,270,1.635,272,2.204,278,3.32,282,1.962,283,2.204,310,1.78,313,1.78,315,1.962,320,1.962,321,2.204,322,2.204,325,1.635,333,2.125,336,1.635,337,2.204,338,2.204,355,2.204,356,2.204,362,1.78,363,2.204,364,2.954,366,1.515,368,2.204,369,2.204,389,1.962,398,3.225,421,1.635,433,2.204,434,2.204,439,2.204,446,1.78,447,2.204,454,2.204,455,2.954,488,1.78,489,2.681,491,1.78,493,1.78,494,1.962,517,1.411,521,2.204,549,2.204,575,1.78,576,2.204,612,1.635,627,1.78,638,1.515,639,2.463,646,1.515,681,3.553,685,2.954,689,2.204,760,1.962,761,2.954,767,1.962,768,1.78,769,2.204,775,1.962,782,2.204,789,1.635,790,2.954,795,1.635,796,2.204,801,2.204,819,1.78,820,2.204,831,1.635,846,1.635,860,2.204,862,1.962,871,2.204,921,2.204,922,2.204,928,2.204,929,2.204,930,2.573,931,2.573,932,7.515,933,6.999,934,3.875,935,6.244,936,3.32,937,6.068,938,6.612,939,2.954,940,2.573,941,2.204,942,3.993,943,2.204,944,2.204,945,2.204,946,2.204,947,3.875,948,3.875,949,2.573,950,2.573,951,2.573,952,2.573,953,2.573,954,2.573]],["title/dependencies.html",[3,2.115,955,2.608]],["body/dependencies.html",[3,2.261,7,0.02,20,0.962,22,3.244,34,0.351,35,0.016,36,0.016,70,2.407,95,3.574,97,2.76,127,2.572,132,2.129,134,3.244,200,2.261,280,3.574,309,3.244,352,3.574,370,3.455,456,2.407,487,3.574,545,2.76,634,3.574,635,3.455,956,6.406,957,4.689,958,4.689,959,4.689,960,4.689,961,4.689,962,4.689,963,4.689,964,4.689,965,4.689,966,4.689,967,4.689,968,4.689,969,4.689,970,4.689,971,4.689,972,4.689,973,4.689,974,4.017,975,4.017,976,4.689]],["title/miscellaneous/functions.html",[977,2.106,978,3.757]],["body/miscellaneous/functions.html",[7,0.019,35,0.017,36,0.017,45,0.857,62,1.947,63,1.895,163,2.234,208,1.706,281,3.606,340,3.312,419,3.068,449,2.859,583,3.312,586,2.859,638,3.952,639,3.312,697,3.312,707,3.973,939,4.774,945,4.465,946,5.751,977,3.606,978,4.465,979,5.212,980,4.465,981,5.212,982,4.465,983,4.465]],["title/index.html",[45,0.5,984,2.608,985,2.608]],["body/index.html",[7,0.019,34,0.245,35,0.011,36,0.011,44,2.245,127,1.519,132,1.257,134,1.915,200,1.335,223,5.186,287,2.372,290,1.76,329,2.111,352,2.111,370,2.409,411,1.76,456,2.761,487,2.111,579,3.418,586,1.519,635,2.409,974,3.506,975,2.372,986,2.769,987,4.868,988,2.769,989,6.215,990,5.739,991,2.769,992,7.118,993,4.092,994,4.092,995,4.092,996,2.769,997,4.868,998,4.092,999,4.868,1000,4.092,1001,2.769,1002,2.769,1003,2.769,1004,4.092,1005,4.868,1006,4.092,1007,4.092,1008,4.092,1009,2.769,1010,2.769,1011,4.092,1012,2.769,1013,2.769,1014,6.381,1015,4.092,1016,2.769,1017,2.769,1018,5.378,1019,2.769,1020,2.769,1021,2.769,1022,2.769,1023,2.769,1024,2.769,1025,5.378,1026,2.769,1027,2.769,1028,2.769,1029,2.769,1030,2.769,1031,6.516,1032,4.092,1033,4.092,1034,4.092,1035,4.092,1036,4.092,1037,2.769,1038,2.769,1039,2.769,1040,2.769,1041,2.769,1042,5.378,1043,5.739,1044,4.092,1045,2.769,1046,2.769,1047,4.092,1048,2.769,1049,2.769,1050,2.769,1051,2.769,1052,2.769,1053,2.769,1054,2.769,1055,2.769,1056,2.769,1057,4.092,1058,4.868,1059,5.739,1060,2.769,1061,2.769,1062,5.739,1063,6.215,1064,2.769,1065,2.769,1066,2.769,1067,2.769,1068,2.769,1069,2.769,1070,2.769,1071,2.769,1072,2.769,1073,2.769,1074,2.769,1075,2.769,1076,4.092,1077,2.769,1078,2.769,1079,2.769,1080,2.769,1081,2.769,1082,2.769,1083,2.769,1084,2.769,1085,2.769,1086,2.769,1087,2.769,1088,2.769,1089,2.769,1090,2.769,1091,2.769,1092,2.769,1093,2.769,1094,2.769,1095,2.769,1096,2.769,1097,2.769,1098,2.769,1099,2.769,1100,2.769,1101,2.769,1102,2.769,1103,2.769,1104,2.769,1105,2.769,1106,2.769,1107,2.769,1108,2.372]],["title/license.html",[984,2.608,985,2.608,1109,2.321]],["body/license.html",[7,0.015,13,2.213,35,0.015,36,0.015,267,4.241,331,3.692,412,2.982,572,3.286,635,2.537,831,3.915,929,3.692,1108,3.692,1109,3.286,1110,6.16,1111,4.31,1112,4.31,1113,4.31,1114,5.563,1115,4.31,1116,4.31,1117,4.31,1118,4.31,1119,4.31,1120,4.31,1121,5.563,1122,7.188,1123,4.31,1124,4.31,1125,4.31,1126,4.31,1127,5.563,1128,4.31,1129,4.31,1130,4.31,1131,4.31,1132,4.31,1133,4.31,1134,4.31,1135,4.31,1136,4.31,1137,5.563,1138,4.31,1139,4.31,1140,4.31,1141,4.31,1142,4.31,1143,5.563,1144,5.563,1145,4.31,1146,4.31,1147,4.31,1148,4.31,1149,4.31,1150,4.31,1151,4.31,1152,4.31,1153,4.31,1154,4.31,1155,4.31,1156,4.31,1157,4.31,1158,4.31,1159,4.31,1160,4.31,1161,4.31,1162,4.31,1163,4.31,1164,4.31,1165,4.31,1166,4.31,1167,4.31,1168,4.31,1169,4.31,1170,4.31,1171,4.31,1172,4.31,1173,4.31]],["title/modules.html",[2,2.556]],["body/modules.html",[1,3.696,2,2.743,6,3.395,7,0.017,8,2.93,9,3.395,10,3.145,35,0.017,36,0.017,1174,7.171,1175,7.171,1176,7.171,1177,7.171]],["title/overview.html",[1178,4.265]],["body/overview.html",[1,4.971,2,2.104,3,2.595,4,3.51,5,3.51,6,4.525,7,0.02,8,3.861,9,4.408,10,4.191,11,3.168,12,2.412,13,2.104,35,0.014,36,0.014,39,2.247,71,3.538,89,3.51,91,3.51,92,3.297,105,2.104,113,3.805,157,0.841,233,2.604,271,2.835,514,3.51,515,3.51,516,3.51,517,3.805,646,3.538,674,3.51,676,3.51,767,3.123,864,3.51,866,3.51,867,3.51,1178,3.51,1179,4.097,1180,4.611,1181,4.097,1182,4.097]],["title/properties.html",[165,1.513,955,2.608]],["body/properties.html",[7,0.02,35,0.017,36,0.017,41,0.464,165,1.94,1109,4.287,1183,5.624,1184,5.624,1185,5.624,1186,5.624,1187,5.624]],["title/miscellaneous/variables.html",[977,2.106,1188,3.757]],["body/miscellaneous/variables.html",[7,0.02,16,0.246,24,2.022,35,0.012,36,0.012,42,0.523,43,2.201,44,1.745,45,0.523,48,2.022,60,0.838,77,3.102,87,1.916,98,2.665,118,1.206,140,2.768,163,1.364,208,1.041,260,1.879,280,3.451,302,3.818,329,4.017,351,2.725,371,2.877,389,3.451,392,2.725,396,3.131,399,2.201,428,2.022,465,2.425,622,2.725,623,2.725,624,2.725,625,2.725,626,2.725,627,3.131,638,2.665,639,2.022,681,2.425,697,2.022,707,2.425,768,2.201,775,3.451,778,3.451,936,2.725,939,3.451,941,2.725,942,4.917,943,4.514,944,3.878,977,2.201,980,2.725,982,4.514,983,2.725,1180,2.725,1188,2.725,1189,4.526,1190,3.181,1191,5.269,1192,6.745,1193,4.526,1194,4.526,1195,4.526,1196,3.181,1197,3.181,1198,3.181,1199,3.181,1200,3.181,1201,3.181,1202,3.181,1203,3.181,1204,4.526,1205,4.526,1206,4.526,1207,3.181,1208,4.526,1209,4.526,1210,3.181,1211,3.181,1212,3.181,1213,3.181,1214,3.181,1215,5.269,1216,4.526,1217,4.526,1218,3.181,1219,3.181,1220,3.181,1221,3.181,1222,4.526,1223,3.181,1224,4.526,1225,3.181,1226,4.526,1227,3.181,1228,3.181,1229,3.181,1230,3.181,1231,3.181,1232,3.181,1233,3.181,1234,3.181,1235,3.181,1236,3.181,1237,3.181,1238,3.181,1239,3.181]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":187,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["0.0.1",{"_index":1184,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":970,"title":{},"body":{"dependencies.html":{}}}],["0.1.2",{"_index":967,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":964,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":963,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":965,"title":{},"body":{"dependencies.html":{}}}],["03",{"_index":573,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["1",{"_index":233,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FindAllProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"overview.html":{}}}],["1/1",{"_index":938,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":213,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindAllProductsDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["10/10",{"_index":948,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":932,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":1205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11/11",{"_index":950,"title":{},"body":{"coverage.html":{}}}],["12df",{"_index":414,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["151be8d85634",{"_index":817,"title":{},"body":{"classes/User.html":{}}}],["15m",{"_index":1203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1e9",{"_index":1220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2/2",{"_index":933,"title":{},"body":{"coverage.html":{}}}],["2022",{"_index":572,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{},"license.html":{}}}],["24",{"_index":1182,"title":{},"body":{"overview.html":{}}}],["26t15:41:28.527z",{"_index":574,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["2b$10$1xpzuyu8fuvuabb3sc0xzur9dx7kakbmlt0vlnoz.unlntdmfc4lk",{"_index":818,"title":{},"body":{"classes/User.html":{}}}],["3",{"_index":1180,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":972,"title":{},"body":{"dependencies.html":{}}}],["3.12.0",{"_index":961,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":935,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":1053,"title":{},"body":{"index.html":{}}}],["3mb",{"_index":626,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":966,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":976,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":934,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":259,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["401",{"_index":357,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{}}}],["404",{"_index":686,"title":{},"body":{"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["42",{"_index":214,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["4302",{"_index":568,"title":{},"body":{"classes/Product.html":{}}}],["441e",{"_index":815,"title":{},"body":{"classes/User.html":{}}}],["44dd5c499084",{"_index":417,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["4f33",{"_index":415,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["5",{"_index":1179,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":962,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":960,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":951,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":947,"title":{},"body":{"coverage.html":{}}}],["6f4ca8a4",{"_index":566,"title":{},"body":{"classes/Product.html":{}}}],["7",{"_index":1181,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":973,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":940,"title":{},"body":{"coverage.html":{}}}],["70.00",{"_index":212,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["7aed",{"_index":814,"title":{},"body":{"classes/User.html":{}}}],["7b5547f01b0a",{"_index":570,"title":{},"body":{"classes/Product.html":{}}}],["8",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8'})@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":230,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.0.0",{"_index":957,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":959,"title":{},"body":{"dependencies.html":{}}}],["8.4.4",{"_index":956,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":949,"title":{},"body":{"coverage.html":{}}}],["8aa0",{"_index":567,"title":{},"body":{"classes/Product.html":{}}}],["9/9",{"_index":952,"title":{},"body":{"coverage.html":{}}}],["9f7f",{"_index":816,"title":{},"body":{"classes/User.html":{}}}],["9fd6",{"_index":416,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["abc123456",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{}}}],["above",{"_index":1142,"title":{},"body":{"license.html":{}}}],["abrir",{"_index":1051,"title":{},"body":{"index.html":{}}}],["ac1b",{"_index":569,"title":{},"body":{"classes/Product.html":{}}}],["accepts",{"_index":1234,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access",{"_index":773,"title":{},"body":{"guards/RolesGuard.html":{}}}],["accessible",{"_index":983,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["accessing",{"_index":770,"title":{},"body":{"guards/RolesGuard.html":{}}}],["accesstoken",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginResponse.html":{}}}],["acessar",{"_index":1055,"title":{},"body":{"index.html":{}}}],["action",{"_index":1167,"title":{},"body":{"license.html":{}}}],["address",{"_index":220,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["admin",{"_index":586,"title":{},"body":{"controllers/ProductController.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["admin.decorator",{"_index":640,"title":{},"body":{"controllers/ProductController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{}}}],["admin.decorator.ts",{"_index":939,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["admins",{"_index":590,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["allowed",{"_index":774,"title":{},"body":{"guards/RolesGuard.html":{}}}],["already",{"_index":262,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["alterando",{"_index":1065,"title":{},"body":{"index.html":{}}}],["alvaromrveiga",{"_index":1187,"title":{},"body":{"properties.html":{}}}],["amount",{"_index":192,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindAllProductsDto.html":{},"classes/Product.html":{}}}],["and/or",{"_index":1135,"title":{},"body":{"license.html":{}}}],["another",{"_index":763,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["apenas",{"_index":1076,"title":{},"body":{"index.html":{}}}],["api",{"_index":988,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":636,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apioperation",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":52,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apitags",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apitags('authentication",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('product",{"_index":648,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags('user",{"_index":850,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":286,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["app.close",{"_index":548,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app_guard",{"_index":21,"title":{},"body":{"modules/AppModule.html":{}}}],["application",{"_index":419,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"interfaces/Payload.html":{},"injectables/PrismaService.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/functions.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arising",{"_index":1171,"title":{},"body":{"license.html":{}}}],["armazenar",{"_index":1087,"title":{},"body":{"index.html":{}}}],["arquivo",{"_index":1034,"title":{},"body":{"index.html":{}}}],["asc",{"_index":744,"title":{},"body":{"injectables/ProductService.html":{}}}],["associated",{"_index":1123,"title":{},"body":{"license.html":{}}}],["async",{"_index":47,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{}}}],["autenticação",{"_index":997,"title":{},"body":{"index.html":{}}}],["auth.controller",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["auth.guard.ts",{"_index":369,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:13",{"_index":381,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:28",{"_index":385,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":38,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":435,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["authenticates",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticating",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":43,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginResponse.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":372,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":390,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1186,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":1160,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":71,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autorização",{"_index":998,"title":{},"body":{"index.html":{}}}],["available",{"_index":691,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["avaliações",{"_index":996,"title":{},"body":{"index.html":{}}}],["await",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["backend",{"_index":987,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":265,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"classes/UserInputExceptionHandler.html":{}}}],["badrequestexception(error.message",{"_index":863,"title":{},"body":{"classes/UserInputExceptionHandler.html":{}}}],["banco",{"_index":1058,"title":{},"body":{"index.html":{}}}],["bando",{"_index":1072,"title":{},"body":{"index.html":{}}}],["baseprice",{"_index":166,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["bcrypt",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["becomes",{"_index":722,"title":{},"body":{"injectables/ProductService.html":{}}}],["before",{"_index":537,"title":{},"body":{"injectables/PrismaService.html":{}}}],["being",{"_index":1194,"title":{},"body":{"miscellaneous/variables.html":{}}}],["between",{"_index":716,"title":{},"body":{"injectables/ProductService.html":{}}}],["binary",{"_index":655,"title":{},"body":{"controllers/ProductController.html":{}}}],["black",{"_index":210,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["body",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["boilerplate",{"_index":303,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{}}}],["boolean",{"_index":388,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"classes/PrismaExceptionHandler.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":946,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":448,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{},"injectables/UserService.html":{}}}],["brand",{"_index":209,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["brand1",{"_index":721,"title":{},"body":{"injectables/ProductService.html":{}}}],["break",{"_index":502,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["browse",{"_index":1177,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1174,"title":{},"body":{"modules.html":{}}}],["c",{"_index":1111,"title":{},"body":{"license.html":{}}}],["calculations",{"_index":177,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["call",{"_index":535,"title":{},"body":{"injectables/PrismaService.html":{}}}],["callback",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(new",{"_index":1229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":1222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["called",{"_index":443,"title":{},"body":{"classes/LoginResponse.html":{}}}],["callhandler",{"_index":297,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["canactivate",{"_index":378,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":384,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["case",{"_index":498,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{}}}],["catcherror",{"_index":308,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["catcherror((error",{"_index":317,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["catches",{"_index":299,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["categorias",{"_index":1010,"title":{},"body":{"index.html":{}}}],["cd",{"_index":1027,"title":{},"body":{"index.html":{}}}],["chair",{"_index":354,"title":{},"body":{"classes/FindAllProductsDto.html":{},"injectables/ProductService.html":{}}}],["chair&quot",{"_index":724,"title":{},"body":{"injectables/ProductService.html":{}}}],["charge",{"_index":1118,"title":{},"body":{"license.html":{}}}],["check",{"_index":373,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/ProductController.html":{}}}],["checks",{"_index":473,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"guards/RolesGuard.html":{}}}],["claim",{"_index":1163,"title":{},"body":{"license.html":{}}}],["class",{"_index":34,"title":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":157,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"overview.html":{}}}],["clientversion",{"_index":475,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["clona",{"_index":1017,"title":{},"body":{"index.html":{}}}],["clone",{"_index":1022,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":90,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":514,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":515,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":516,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_productmodule",{"_index":674,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_productmodule_imports",{"_index":675,"title":{},"body":{"modules/ProductModule.html":{}}}],["cluster_productmodule_providers",{"_index":676,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":864,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":866,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":865,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":867,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["colocou",{"_index":1068,"title":{},"body":{"index.html":{}}}],["com",{"_index":989,"title":{},"body":{"index.html":{}}}],["commerce",{"_index":986,"title":{},"body":{"index.html":{}}}],["compare",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["compare(currentpassword",{"_index":920,"title":{},"body":{"injectables/UserService.html":{}}}],["compare(password",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["compared",{"_index":885,"title":{},"body":{"injectables/UserService.html":{}}}],["compares",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["compodoc",{"_index":1000,"title":{},"body":{"index.html":{}}}],["compras",{"_index":995,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":1141,"title":{},"body":{"license.html":{}}}],["configuration",{"_index":400,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["configurations",{"_index":1204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connect",{"_index":542,"title":{},"body":{"injectables/PrismaService.html":{}}}],["connecting",{"_index":522,"title":{},"body":{"injectables/PrismaService.html":{}}}],["connection",{"_index":1172,"title":{},"body":{"license.html":{}}}],["considering",{"_index":174,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["const",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":1206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constructor",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"interfaces/ValidateReturn.html":{}}}],["constructor(filetypes",{"_index":326,"title":{},"body":{"classes/FileTypeError.html":{}}}],["constructor(message",{"_index":764,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["constructor(prisma",{"_index":695,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(reflector",{"_index":379,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["constructor(userservice",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{}}}],["construir",{"_index":1085,"title":{},"body":{"index.html":{}}}],["consult",{"_index":1195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contain",{"_index":232,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["containing",{"_index":351,"title":{},"body":{"classes/FindAllProductsDto.html":{},"miscellaneous/variables.html":{}}}],["contains",{"_index":474,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{}}}],["content",{"_index":410,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"controllers/ProductController.html":{},"interfaces/ValidateReturn.html":{}}}],["context",{"_index":305,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":395,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":394,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":779,"title":{},"body":{"guards/RolesGuard.html":{}}}],["contract",{"_index":1168,"title":{},"body":{"license.html":{}}}],["controller",{"_index":37,"title":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('product",{"_index":649,"title":{},"body":{"controllers/ProductController.html":{}}}],["controller('user",{"_index":851,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":39,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["copies",{"_index":1137,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1121,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1110,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":928,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":163,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/InvalidPasswordUpdateException.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":650,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["create(createproductdto",{"_index":585,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["create(createuserdto",{"_index":823,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createdat",{"_index":205,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["createproductdto",{"_index":156,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["creates",{"_index":587,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":216,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email.tolowercase",{"_index":905,"title":{},"body":{"injectables/UserService.html":{}}}],["credentials.dto",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":434,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:11",{"_index":437,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["credentials.dto.ts:19",{"_index":438,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["criação",{"_index":991,"title":{},"body":{"index.html":{}}}],["crie",{"_index":1032,"title":{},"body":{"index.html":{}}}],["crud",{"_index":579,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["currency.js",{"_index":179,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["current",{"_index":253,"title":{},"body":{"classes/DeleteUserDto.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["currentpassword",{"_index":251,"title":{},"body":{"classes/DeleteUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["customdecorator",{"_index":1196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["código",{"_index":1107,"title":{},"body":{"index.html":{}}}],["códigos",{"_index":1097,"title":{},"body":{"index.html":{}}}],["d31fc56c",{"_index":813,"title":{},"body":{"classes/User.html":{}}}],["d6c24523",{"_index":413,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["dados",{"_index":1059,"title":{},"body":{"index.html":{}}}],["damages",{"_index":1164,"title":{},"body":{"license.html":{}}}],["data",{"_index":405,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{}}}],["database",{"_index":523,"title":{},"body":{"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["date",{"_index":552,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["date.now",{"_index":1218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datestring",{"_index":554,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["de",{"_index":992,"title":{},"body":{"index.html":{}}}],["deal",{"_index":1125,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1173,"title":{},"body":{"license.html":{}}}],["decimal",{"_index":170,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["decorator",{"_index":386,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["decorators",{"_index":51,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindAllProductsDto.html":{},"classes/LoginCredentialsDto.html":{},"controllers/ProductController.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{}}}],["decorators/is",{"_index":776,"title":{},"body":{"guards/RolesGuard.html":{}}}],["decrypted",{"_index":406,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["default",{"_index":302,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":186,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["defined",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{}}}],["delete",{"_index":250,"title":{},"body":{"classes/DeleteUserDto.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(':id",{"_index":670,"title":{},"body":{"controllers/ProductController.html":{}}}],["deletes",{"_index":608,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["deleteuserdto",{"_index":248,"title":{"classes/DeleteUserDto.html":{}},"body":{"classes/DeleteUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["deleteuserdto.currentpassword",{"_index":914,"title":{},"body":{"injectables/UserService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":383,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dependências",{"_index":1030,"title":{},"body":{"index.html":{}}}],["describes",{"_index":160,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindAllProductsDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/Product.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{}}}],["description",{"_index":41,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"properties.html":{}}}],["descritas",{"_index":1039,"title":{},"body":{"index.html":{}}}],["desenvolvimento",{"_index":1049,"title":{},"body":{"index.html":{}}}],["destination",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["discount",{"_index":184,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["discountpercentage",{"_index":167,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["discounts",{"_index":175,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["diskstorage",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distribute",{"_index":1133,"title":{},"body":{"license.html":{}}}],["docs",{"_index":628,"title":{},"body":{"controllers/ProductController.html":{}}}],["documentation",{"_index":929,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["documentação",{"_index":999,"title":{},"body":{"index.html":{}}}],["doe",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["doesn't",{"_index":897,"title":{},"body":{"injectables/UserService.html":{}}}],["dos",{"_index":1093,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":641,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/delete",{"_index":844,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/find",{"_index":643,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["dto/login",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/login.response",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/update",{"_index":645,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e",{"_index":223,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"index.html":{}}}],["ecommerce",{"_index":1028,"title":{},"body":{"index.html":{}}}],["em",{"_index":1047,"title":{},"body":{"index.html":{}}}],["email",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/LoginCredentialsDto.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["email.tolowercase",{"_index":908,"title":{},"body":{"injectables/UserService.html":{}}}],["emailinuseexception",{"_index":254,"title":{"classes/EmailInUseException.html":{}},"body":{"classes/EmailInUseException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["enableshutdownhooks",{"_index":526,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":528,"title":{},"body":{"injectables/PrismaService.html":{}}}],["endpoint",{"_index":982,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":44,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["enter",{"_index":452,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["entities/product.entity",{"_index":201,"title":{},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["entities/user",{"_index":847,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entities/user.entity",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":923,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["entra",{"_index":1024,"title":{},"body":{"index.html":{}}}],["entrada",{"_index":1092,"title":{},"body":{"index.html":{}}}],["enum",{"_index":487,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"dependencies.html":{},"index.html":{}}}],["env",{"_index":1035,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":1040,"title":{},"body":{"index.html":{}}}],["env.test",{"_index":1064,"title":{},"body":{"index.html":{}}}],["error",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"dependencies.html":{},"index.html":{}}}],["error.clientversion",{"_index":509,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.code",{"_index":497,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message",{"_index":507,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product",{"_index":512,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.user",{"_index":513,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["errormeta",{"_index":470,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["errors",{"_index":288,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["errors/invalid",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["erros",{"_index":287,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"index.html":{}}}],["eslint",{"_index":1103,"title":{},"body":{"index.html":{}}}],["event",{"_index":1159,"title":{},"body":{"license.html":{}}}],["example",{"_index":208,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindAllProductsDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["exception",{"_index":273,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/FileTypeError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/ProductServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["exception.handler",{"_index":312,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["exception.handler.ts",{"_index":455,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["exception.handler.ts:13",{"_index":861,"title":{},"body":{"classes/UserInputExceptionHandler.html":{}}}],["exception.handler.ts:16",{"_index":463,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:56",{"_index":472,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:61",{"_index":466,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:66",{"_index":483,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:77",{"_index":485,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:82",{"_index":480,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exceptionhandler",{"_index":270,"title":{"interfaces/ExceptionHandler.html":{}},"body":{"interfaces/ExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["exceptioninterceptor",{"_index":282,"title":{"injectables/ExceptionInterceptor.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"coverage.html":{}}}],["exceptions/invalid",{"_index":899,"title":{},"body":{"injectables/UserService.html":{}}}],["exceptions/missing",{"_index":901,"title":{},"body":{"injectables/UserService.html":{}}}],["exceções",{"_index":1099,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":295,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["exemplo",{"_index":1069,"title":{},"body":{"index.html":{}}}],["exists",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":1202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{}}}],["exports",{"_index":519,"title":{},"body":{"modules/PrismaModule.html":{},"modules/UserModule.html":{}}}],["exposes",{"_index":578,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["express",{"_index":635,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"controllers/UserController.html":{},"dependencies.html":{},"index.html":{},"license.html":{}}}],["express.multer.file",{"_index":617,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["expression",{"_index":1238,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extend",{"_index":762,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["extends",{"_index":202,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"injectables/PrismaService.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{}}}],["extname",{"_index":1226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":408,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":426,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjzdwiioii5nwfkmznhns0wyjk4ltq2odytyjfmms1hmtkwnzm0nwjmyzcilcjpyxqioje2ndg0nzu3mzesimv4cci6mty0odq3njyzmx0.h3z3jdvhoi6y5c_n0kt6tdp2nwk_dhbzxioqn7vanno",{"_index":445,"title":{},"body":{"classes/LoginResponse.html":{}}}],["false",{"_index":428,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/variables.html":{}}}],["features",{"_index":1004,"title":{},"body":{"index.html":{}}}],["field",{"_index":469,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserWithoutPassword.html":{}}}],["fields",{"_index":161,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["file",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["file.filename",{"_index":736,"title":{},"body":{"injectables/ProductService.html":{}}}],["file.originalname",{"_index":1221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filefilter",{"_index":1223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fileinterceptor",{"_index":633,"title":{},"body":{"controllers/ProductController.html":{}}}],["filename",{"_index":1215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":1124,"title":{},"body":{"license.html":{}}}],["filesize",{"_index":1232,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filetypeerror",{"_index":320,"title":{"classes/FileTypeError.html":{}},"body":{"classes/FileTypeError.html":{},"coverage.html":{}}}],["filetypeerror(validimageuploadtypesregex",{"_index":1230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filetypes",{"_index":332,"title":{},"body":{"classes/FileTypeError.html":{}}}],["find",{"_index":603,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findall",{"_index":580,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findall(@query",{"_index":660,"title":{},"body":{"controllers/ProductController.html":{}}}],["findall(findallproductsdto",{"_index":591,"title":{},"body":{"controllers/ProductController.html":{}}}],["findall(undefined",{"_index":699,"title":{},"body":{"injectables/ProductService.html":{}}}],["findallproductsdto",{"_index":336,"title":{"classes/FindAllProductsDto.html":{}},"body":{"classes/FindAllProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["findbyemail",{"_index":872,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyemail(email",{"_index":877,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid",{"_index":821,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findbyid(@req",{"_index":853,"title":{},"body":{"controllers/UserController.html":{}}}],["findbyid(id",{"_index":881,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(request",{"_index":827,"title":{},"body":{"controllers/UserController.html":{}}}],["findonebyid",{"_index":581,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyid(@param('id",{"_index":663,"title":{},"body":{"controllers/ProductController.html":{}}}],["findonebyid(id",{"_index":599,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyurlname",{"_index":582,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyurlname(@param('urlname",{"_index":666,"title":{},"body":{"controllers/ProductController.html":{}}}],["findonebyurlname(urlname",{"_index":604,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["finds",{"_index":879,"title":{},"body":{"injectables/UserService.html":{}}}],["fire",{"_index":539,"title":{},"body":{"injectables/PrismaService.html":{}}}],["first",{"_index":544,"title":{},"body":{"injectables/PrismaService.html":{}}}],["fitness",{"_index":1155,"title":{},"body":{"license.html":{}}}],["following",{"_index":331,"title":{},"body":{"classes/FileTypeError.html":{},"license.html":{}}}],["forgot",{"_index":890,"title":{},"body":{"injectables/UserService.html":{}}}],["format",{"_index":654,"title":{},"body":{"controllers/ProductController.html":{}}}],["formatação",{"_index":1106,"title":{},"body":{"index.html":{}}}],["formats",{"_index":705,"title":{},"body":{"injectables/ProductService.html":{}}}],["formaturlname",{"_index":692,"title":{},"body":{"injectables/ProductService.html":{}}}],["formaturlname(name",{"_index":703,"title":{},"body":{"injectables/ProductService.html":{}}}],["found",{"_index":508,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["found.exception",{"_index":492,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["found.exception.ts",{"_index":685,"title":{},"body":{"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["found.exception.ts:6",{"_index":688,"title":{},"body":{"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["free",{"_index":1117,"title":{},"body":{"license.html":{}}}],["function",{"_index":278,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"coverage.html":{}}}],["functions",{"_index":978,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1140,"title":{},"body":{"license.html":{}}}],["generate",{"_index":706,"title":{},"body":{"injectables/ProductService.html":{}}}],["get('/id/:id",{"_index":662,"title":{},"body":{"controllers/ProductController.html":{}}}],["get(':urlname",{"_index":665,"title":{},"body":{"controllers/ProductController.html":{}}}],["gets",{"_index":600,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["getting",{"_index":984,"title":{"index.html":{},"license.html":{}},"body":{}}],["git",{"_index":1021,"title":{},"body":{"index.html":{}}}],["github",{"_index":1001,"title":{},"body":{"index.html":{}}}],["granted",{"_index":1116,"title":{},"body":{"license.html":{}}}],["guard",{"_index":767,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":376,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["handle",{"_index":275,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{}}}],["handle(error",{"_index":276,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["handled",{"_index":178,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["handlers",{"_index":274,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["handlers/prisma",{"_index":311,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["handlers/user",{"_index":314,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["happened",{"_index":468,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["hash",{"_index":898,"title":{},"body":{"injectables/UserService.html":{}}}],["hash(createuserdto.password",{"_index":903,"title":{},"body":{"injectables/UserService.html":{}}}],["hash(updateuserdto.password",{"_index":918,"title":{},"body":{"injectables/UserService.html":{}}}],["hashed",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["hashedpassword",{"_index":902,"title":{},"body":{"injectables/UserService.html":{}}}],["hashifupdatingpassword",{"_index":873,"title":{},"body":{"injectables/UserService.html":{}}}],["hashifupdatingpassword(id",{"_index":886,"title":{},"body":{"injectables/UserService.html":{}}}],["hashs",{"_index":1094,"title":{},"body":{"index.html":{}}}],["here",{"_index":786,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["hereby",{"_index":1115,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1161,"title":{},"body":{"license.html":{}}}],["hooks",{"_index":538,"title":{},"body":{"injectables/PrismaService.html":{}}}],["http",{"_index":257,"title":{},"body":{"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{}}}],["http://localhost:3000/api",{"_index":1056,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":671,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{}}}],["https://docs.nestjs.com/guards",{"_index":377,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["https://docs.nestjs.com/interceptors",{"_index":292,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["https://docs.nestjs.com/recipes/prisma",{"_index":524,"title":{},"body":{"injectables/PrismaService.html":{}}}],["https://github.com/alvaromrveiga/ecommerce",{"_index":1023,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["hyphens",{"_index":719,"title":{},"body":{"injectables/ProductService.html":{}}}],["id",{"_index":204,"title":{},"body":{"classes/CreateProductDto.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{}}}],["id'})@apibearerauth()@isadmin()@get('/id/:id",{"_index":601,"title":{},"body":{"controllers/ProductController.html":{}}}],["identificar",{"_index":1096,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":930,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":427,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["image",{"_index":1208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image.jpg",{"_index":571,"title":{},"body":{"classes/Product.html":{}}}],["imagens",{"_index":1009,"title":{},"body":{"index.html":{}}}],["implements",{"_index":219,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{}}}],["implied",{"_index":1151,"title":{},"body":{"license.html":{}}}],["import",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{}}}],["imports",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["included",{"_index":1145,"title":{},"body":{"license.html":{}}}],["including",{"_index":1127,"title":{},"body":{"license.html":{}}}],["index",{"_index":45,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FindAllProductsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":529,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{}}}],["information",{"_index":304,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/FindAllProductsDto.html":{},"classes/LoginCredentialsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["informações",{"_index":1038,"title":{},"body":{"index.html":{}}}],["inicia",{"_index":1046,"title":{},"body":{"index.html":{}}}],["iniciar",{"_index":1041,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":104,"title":{"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{}}}],["injectables",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["input",{"_index":315,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["input.exception",{"_index":334,"title":{},"body":{"classes/FileTypeError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UserInputExceptionHandler.html":{}}}],["input.exception.ts",{"_index":761,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["input.exception.ts:5",{"_index":765,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["inputs",{"_index":261,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["inputted",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["insensitive",{"_index":742,"title":{},"body":{"injectables/ProductService.html":{}}}],["instala",{"_index":1029,"title":{},"body":{"index.html":{}}}],["instalado",{"_index":1016,"title":{},"body":{"index.html":{}}}],["instalação",{"_index":1005,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":495,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{}}}],["instantiate",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["instantiates",{"_index":382,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{}}}],["integração",{"_index":1079,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":293,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["intercept(context",{"_index":294,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interceptor",{"_index":284,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interceptors",{"_index":291,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interface",{"_index":269,"title":{"interfaces/ExceptionHandler.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}},"body":{"interfaces/ExceptionHandler.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{}}}],["interfaces",{"_index":271,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"overview.html":{}}}],["interferes",{"_index":531,"title":{},"body":{"injectables/PrismaService.html":{}}}],["invalid",{"_index":323,"title":{},"body":{"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{}}}],["invalidemailorpassworderror",{"_index":137,"title":{"classes/InvalidEmailOrPasswordError.html":{}},"body":{"injectables/AuthService.html":{},"classes/InvalidEmailOrPasswordError.html":{},"coverage.html":{}}}],["invalidpasswordupdateexception",{"_index":362,"title":{"classes/InvalidPasswordUpdateException.html":{}},"body":{"classes/InvalidPasswordUpdateException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["is_admin_key",{"_index":775,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["is_public_key",{"_index":389,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isadmin",{"_index":638,"title":{},"body":{"controllers/ProductController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["iscorrectpassword",{"_index":919,"title":{},"body":{"injectables/UserService.html":{}}}],["isemail",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserRoleDto.html":{}}}],["isemail({message",{"_index":222,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemailconstraintviolation",{"_index":458,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isemailconstraintviolation(errormeta",{"_index":464,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isenum",{"_index":800,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["isenum(role",{"_index":798,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["isint",{"_index":195,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindAllProductsDto.html":{}}}],["isint()@isoptional",{"_index":190,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isnotempty",{"_index":196,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty()@isstring",{"_index":436,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["isnumber",{"_index":197,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isnumber()@isnotempty",{"_index":171,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isnumber()@isoptional",{"_index":182,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isoptional",{"_index":198,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllProductsDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isstring",{"_index":349,"title":{},"body":{"classes/FindAllProductsDto.html":{}}}],["isoptional()@type(undefined)@isint()@ispositive",{"_index":344,"title":{},"body":{"classes/FindAllProductsDto.html":{}}}],["ispasswordvalid",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispositive",{"_index":353,"title":{},"body":{"classes/FindAllProductsDto.html":{}}}],["isprismaunknownerror",{"_index":459,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isprismaunknownerror(error",{"_index":471,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproducterror",{"_index":460,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproducterror(error",{"_index":478,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproductnameconstraintviolation",{"_index":461,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproductnameconstraintviolation(error",{"_index":482,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["ispublic",{"_index":392,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":199,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindAllProductsDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":188,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/DeleteUserDto.html":{}}}],["isstring()@isnotempty()@isoptional",{"_index":791,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isstring()@isoptional",{"_index":180,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@minlength(8",{"_index":227,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isusererror",{"_index":462,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isusererror(error",{"_index":484,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["jest",{"_index":1100,"title":{},"body":{"index.html":{}}}],["john",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["join",{"_index":758,"title":{},"body":{"injectables/ProductService.html":{}}}],["jpeg",{"_index":622,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["jpeg|jpg|png",{"_index":1236,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jpg",{"_index":623,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["json",{"_index":1088,"title":{},"body":{"index.html":{}}}],["jsonwebtoken",{"_index":399,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/variables.html":{}}}],["jwt",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.strategy",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":24,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconfig",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconfig.secret",{"_index":430,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["jwtfromrequest",{"_index":425,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["jwtmodule",{"_index":94,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register(jwtconfig",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":92,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"overview.html":{}}}],["kind",{"_index":1150,"title":{},"body":{"license.html":{}}}],["lazily",{"_index":543,"title":{},"body":{"injectables/PrismaService.html":{}}}],["leading",{"_index":709,"title":{},"body":{"injectables/ProductService.html":{}}}],["leave",{"_index":541,"title":{},"body":{"injectables/PrismaService.html":{}}}],["length",{"_index":229,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letter",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["liability",{"_index":1165,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1162,"title":{},"body":{"license.html":{}}}],["library",{"_index":371,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/variables.html":{}}}],["license",{"_index":1109,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["licença",{"_index":1007,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":1128,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1152,"title":{},"body":{"license.html":{}}}],["limits",{"_index":1231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linting",{"_index":1105,"title":{},"body":{"index.html":{}}}],["listens",{"_index":532,"title":{},"body":{"injectables/PrismaService.html":{}}}],["login",{"_index":48,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["login(email",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(undefined",{"_index":49,"title":{},"body":{"controllers/AuthController.html":{}}}],["logincredentialsdto",{"_index":50,"title":{"classes/LoginCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["loginresponse",{"_index":75,"title":{"classes/LoginResponse.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginResponse.html":{},"coverage.html":{}}}],["logs",{"_index":53,"title":{},"body":{"controllers/AuthController.html":{}}}],["lower",{"_index":708,"title":{},"body":{"injectables/ProductService.html":{}}}],["lowercaseemail",{"_index":904,"title":{},"body":{"injectables/UserService.html":{}}}],["lowercaseurlname",{"_index":750,"title":{},"body":{"injectables/ProductService.html":{}}}],["lowercaseurlname.trim",{"_index":753,"title":{},"body":{"injectables/ProductService.html":{}}}],["lvaro",{"_index":1112,"title":{},"body":{"license.html":{}}}],["mail",{"_index":224,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{}}}],["mainly",{"_index":880,"title":{},"body":{"injectables/UserService.html":{}}}],["make",{"_index":718,"title":{},"body":{"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["makes",{"_index":707,"title":{},"body":{"injectables/ProductService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["making",{"_index":476,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["managing",{"_index":690,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["matches",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.round(math.random",{"_index":1219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maximageuploadsize",{"_index":943,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":625,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":1154,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1131,"title":{},"body":{"license.html":{}}}],["message",{"_index":228,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{}}}],["metadata",{"_index":969,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":46,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{}}}],["migrate:dev",{"_index":1045,"title":{},"body":{"index.html":{}}}],["migrate:test",{"_index":1073,"title":{},"body":{"index.html":{}}}],["migrations",{"_index":1044,"title":{},"body":{"index.html":{}}}],["mimetype",{"_index":1224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["minimizar",{"_index":1083,"title":{},"body":{"index.html":{}}}],["minlength",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":977,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missingpasswordupdateexception",{"_index":446,"title":{"classes/MissingPasswordUpdateException.html":{}},"body":{"classes/MissingPasswordUpdateException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["mit",{"_index":1108,"title":{},"body":{"index.html":{},"license.html":{}}}],["mode",{"_index":741,"title":{},"body":{"injectables/ProductService.html":{}}}],["models/product/product.module",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["models/user/user.module",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["modify",{"_index":1130,"title":{},"body":{"license.html":{}}}],["modo",{"_index":1048,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":289,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["ms",{"_index":1102,"title":{},"body":{"index.html":{}}}],["multer",{"_index":1233,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multermodule",{"_index":680,"title":{},"body":{"modules/ProductModule.html":{}}}],["multermodule.register(multeruploadconfig",{"_index":683,"title":{},"body":{"modules/ProductModule.html":{}}}],["multeroptions",{"_index":1210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multeruploadconfig",{"_index":627,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["multipart/form",{"_index":652,"title":{},"body":{"controllers/ProductController.html":{}}}],["multiple",{"_index":715,"title":{},"body":{"injectables/ProductService.html":{}}}],["máquina",{"_index":1020,"title":{},"body":{"index.html":{}}}],["mínimo",{"_index":1066,"title":{},"body":{"index.html":{}}}],["na",{"_index":1025,"title":{},"body":{"index.html":{}}}],["name",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindAllProductsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["name.tolocalelowercase",{"_index":751,"title":{},"body":{"injectables/ProductService.html":{}}}],["ndice",{"_index":1003,"title":{},"body":{"index.html":{}}}],["need",{"_index":387,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["needed",{"_index":162,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UpdateUserRoleDto.html":{}}}],["needs",{"_index":375,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/ProductController.html":{}}}],["nestinterceptor",{"_index":307,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["nestjs",{"_index":290,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"index.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/InvalidEmailOrPasswordError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":958,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":634,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserWithoutPassword.html":{},"dependencies.html":{}}}],["new",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["next",{"_index":296,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["next.handle().pipe",{"_index":316,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["node.js",{"_index":1015,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":1158,"title":{},"body":{"license.html":{}}}],["nos",{"_index":1091,"title":{},"body":{"index.html":{}}}],["note",{"_index":784,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["notfoundexception",{"_index":687,"title":{},"body":{"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["notice",{"_index":1143,"title":{},"body":{"license.html":{}}}],["number",{"_index":169,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllProductsDto.html":{},"classes/Product.html":{}}}],["o",{"_index":1014,"title":{},"body":{"index.html":{}}}],["object",{"_index":465,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["object.values(error.meta)[0][0",{"_index":511,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["object.values(errormeta)[0][0",{"_index":510,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["observable",{"_index":306,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["obtaining",{"_index":1120,"title":{},"body":{"license.html":{}}}],["offices",{"_index":215,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["offset",{"_index":341,"title":{},"body":{"classes/FindAllProductsDto.html":{},"injectables/ProductService.html":{}}}],["omitting",{"_index":925,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["omittype",{"_index":193,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UserWithoutPassword.html":{}}}],["omittype(product",{"_index":203,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["omittype(user",{"_index":927,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["one",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["onmoduleinit",{"_index":527,"title":{},"body":{"injectables/PrismaService.html":{}}}],["optional",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindAllProductsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{}}}],["orderby",{"_index":743,"title":{},"body":{"injectables/ProductService.html":{}}}],["ordering",{"_index":598,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["orm",{"_index":457,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{}}}],["os",{"_index":1062,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":1170,"title":{},"body":{"license.html":{}}}],["out",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":1178,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":955,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":342,"title":{},"body":{"classes/FindAllProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["pages",{"_index":1002,"title":{},"body":{"index.html":{}}}],["pagination",{"_index":594,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["para",{"_index":990,"title":{},"body":{"index.html":{}}}],["param",{"_index":629,"title":{},"body":{"controllers/ProductController.html":{}}}],["param('id",{"_index":658,"title":{},"body":{"controllers/ProductController.html":{}}}],["parameters",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{}}}],["partial",{"_index":785,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype",{"_index":787,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createproductdto",{"_index":788,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createuserdto",{"_index":794,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["particular",{"_index":1156,"title":{},"body":{"license.html":{}}}],["passport",{"_index":370,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"dependencies.html":{},"index.html":{}}}],["passportmodule",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":407,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["passportstrategy(strategy",{"_index":424,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["password",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["password.entity",{"_index":848,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["password.entity.ts",{"_index":922,"title":{},"body":{"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["password.error",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["password.error..ts",{"_index":356,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"coverage.html":{}}}],["password.error..ts:7",{"_index":360,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{}}}],["pasta",{"_index":1026,"title":{},"body":{"index.html":{}}}],["patch",{"_index":630,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":668,"title":{},"body":{"controllers/ProductController.html":{}}}],["patch('role",{"_index":857,"title":{},"body":{"controllers/UserController.html":{}}}],["path.extname(file.originalname).tolowercase",{"_index":1228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":143,"title":{"interfaces/Payload.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{}}}],["payload.role",{"_index":432,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["payload.sub",{"_index":431,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["per",{"_index":347,"title":{},"body":{"classes/FindAllProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["percentage",{"_index":185,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["permission",{"_index":1114,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1138,"title":{},"body":{"license.html":{}}}],["person",{"_index":1119,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1139,"title":{},"body":{"license.html":{}}}],["picture",{"_index":207,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FileTypeError.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["please",{"_index":451,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["png",{"_index":624,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["pode",{"_index":1054,"title":{},"body":{"index.html":{}}}],["porta",{"_index":1052,"title":{},"body":{"index.html":{}}}],["portions",{"_index":1147,"title":{},"body":{"license.html":{}}}],["post",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["post('login",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('picture/:id",{"_index":657,"title":{},"body":{"controllers/ProductController.html":{}}}],["postgresql",{"_index":1086,"title":{},"body":{"index.html":{}}}],["postgresql://username:password@localhost:5432/ecommerce",{"_index":1070,"title":{},"body":{"index.html":{}}}],["precisar",{"_index":1012,"title":{},"body":{"index.html":{}}}],["preenchendo",{"_index":1037,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":577,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["prettier",{"_index":1104,"title":{},"body":{"index.html":{}}}],["price",{"_index":173,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["prisma",{"_index":456,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["prisma.decimal",{"_index":550,"title":{},"body":{"classes/Product.html":{}}}],["prisma.productuncheckedcreateinput",{"_index":565,"title":{},"body":{"classes/Product.html":{}}}],["prisma.service",{"_index":520,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.useruncheckedcreateinput",{"_index":812,"title":{},"body":{"classes/User.html":{}}}],["prisma/client",{"_index":545,"title":{},"body":{"injectables/PrismaService.html":{},"classes/Product.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"dependencies.html":{}}}],["prisma/client/runtime",{"_index":194,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/PrismaExceptionHandler.html":{}}}],["prisma/prisma.module",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":525,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientknownrequesterror",{"_index":479,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror",{"_index":486,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror.recordsnotfound",{"_index":503,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror.uniqueconstraintviolation",{"_index":499,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaexceptionhandler",{"_index":310,"title":{"classes/PrismaExceptionHandler.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["prismaexceptionhandler().handle(error",{"_index":319,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["prismamodule",{"_index":8,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":517,"title":{"injectables/PrismaService.html":{}},"body":{"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["probably",{"_index":889,"title":{},"body":{"injectables/UserService.html":{}}}],["process.env.jwt_secret",{"_index":1200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.exit",{"_index":536,"title":{},"body":{"injectables/PrismaService.html":{}}}],["product",{"_index":164,"title":{"classes/Product.html":{}},"body":{"classes/CreateProductDto.html":{},"classes/FileTypeError.html":{},"classes/FindAllProductsDto.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product'})@apibearerauth()@isadmin()@delete(':id')@httpcode(httpstatus.no_content",{"_index":609,"title":{},"body":{"controllers/ProductController.html":{}}}],["product'})@apibearerauth()@isadmin()@patch(':id",{"_index":614,"title":{},"body":{"controllers/ProductController.html":{}}}],["product'})@apibearerauth()@isadmin()@post",{"_index":588,"title":{},"body":{"controllers/ProductController.html":{}}}],["product.controller",{"_index":678,"title":{},"body":{"modules/ProductModule.html":{}}}],["product.dto",{"_index":642,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts",{"_index":159,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:25",{"_index":189,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:35",{"_index":172,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:43",{"_index":183,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:50",{"_index":191,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:58",{"_index":181,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.service",{"_index":647,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{}}}],["productcontroller",{"_index":575,"title":{"controllers/ProductController.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{}}}],["productmodule",{"_index":9,"title":{"modules/ProductModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules.html":{},"overview.html":{}}}],["productnameinuseexception",{"_index":488,"title":{"classes/ProductNameInUseException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"coverage.html":{}}}],["productnotfoundexception",{"_index":491,"title":{"classes/ProductNotFoundException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductNotFoundException.html":{},"coverage.html":{}}}],["products",{"_index":340,"title":{},"body":{"classes/FindAllProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/User.html":{},"miscellaneous/functions.html":{}}}],["products'})@public()@get",{"_index":592,"title":{},"body":{"controllers/ProductController.html":{}}}],["products.dto",{"_index":644,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["products.dto.ts",{"_index":338,"title":{},"body":{"classes/FindAllProductsDto.html":{},"coverage.html":{}}}],["products.dto.ts:11",{"_index":350,"title":{},"body":{"classes/FindAllProductsDto.html":{}}}],["products.dto.ts:20",{"_index":348,"title":{},"body":{"classes/FindAllProductsDto.html":{}}}],["products.dto.ts:29",{"_index":345,"title":{},"body":{"classes/FindAllProductsDto.html":{}}}],["productservice",{"_index":646,"title":{"injectables/ProductService.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{},"overview.html":{}}}],["productserviceinputexception",{"_index":325,"title":{"classes/ProductServiceInputException.html":{}},"body":{"classes/FileTypeError.html":{},"classes/ProductServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["productstoskip",{"_index":737,"title":{},"body":{"injectables/ProductService.html":{}}}],["produtos",{"_index":994,"title":{},"body":{"index.html":{}}}],["profile",{"_index":830,"title":{},"body":{"controllers/UserController.html":{}}}],["profile'})@apibearerauth()@get",{"_index":828,"title":{},"body":{"controllers/UserController.html":{}}}],["projeto",{"_index":1018,"title":{},"body":{"index.html":{}}}],["promise",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":165,"title":{"properties.html":{}},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindAllProductsDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"interfaces/ValidateReturn.html":{},"properties.html":{}}}],["provide",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":1148,"title":{},"body":{"license.html":{}}}],["providers",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@apioperation({summary",{"_index":824,"title":{},"body":{"controllers/UserController.html":{}}}],["public.decorator",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["publish",{"_index":1132,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1157,"title":{},"body":{"license.html":{}}}],["que",{"_index":1067,"title":{},"body":{"index.html":{}}}],["query",{"_index":481,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{}}}],["quot",{"_index":720,"title":{},"body":{"injectables/ProductService.html":{}}}],["quot;brand1",{"_index":723,"title":{},"body":{"injectables/ProductService.html":{}}}],["raiz",{"_index":1036,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["received",{"_index":441,"title":{},"body":{"classes/LoginResponse.html":{}}}],["reflect",{"_index":968,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":380,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["regexp",{"_index":327,"title":{},"body":{"classes/FileTypeError.html":{}}}],["registered",{"_index":263,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["regular",{"_index":1237,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rejectonnotfound",{"_index":746,"title":{},"body":{"injectables/ProductService.html":{}}}],["related",{"_index":835,"title":{},"body":{"controllers/UserController.html":{}}}],["remove",{"_index":583,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["remove(@param('id",{"_index":672,"title":{},"body":{"controllers/ProductController.html":{}}}],["remove(id",{"_index":607,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["remove(request",{"_index":832,"title":{},"body":{"controllers/UserController.html":{}}}],["removes",{"_index":726,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["replacing",{"_index":888,"title":{},"body":{"injectables/UserService.html":{}}}],["req",{"_index":843,"title":{},"body":{"controllers/UserController.html":{}}}],["request",{"_index":778,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":780,"title":{},"body":{"guards/RolesGuard.html":{}}}],["request.user['userid",{"_index":854,"title":{},"body":{"controllers/UserController.html":{}}}],["requestbody",{"_index":619,"title":{},"body":{"controllers/ProductController.html":{}}}],["requests",{"_index":883,"title":{},"body":{"injectables/UserService.html":{}}}],["reset",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["respective",{"_index":300,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["response",{"_index":440,"title":{},"body":{"classes/LoginResponse.html":{}}}],["responsible",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["restriction",{"_index":1126,"title":{},"body":{"license.html":{}}}],["results",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":418,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["returns",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/functions.html":{}}}],["rights",{"_index":1129,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":971,"title":{},"body":{"dependencies.html":{}}}],["roda",{"_index":1043,"title":{},"body":{"index.html":{}}}],["rodar",{"_index":1061,"title":{},"body":{"index.html":{}}}],["role",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{}}}],["role'})@apibearerauth()@isadmin()@patch('role",{"_index":841,"title":{},"body":{"controllers/UserController.html":{}}}],["role.admin",{"_index":781,"title":{},"body":{"guards/RolesGuard.html":{}}}],["role.dto",{"_index":845,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role.dto.ts",{"_index":796,"title":{},"body":{"classes/UpdateUserRoleDto.html":{},"coverage.html":{}}}],["role.dto.ts:11",{"_index":797,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["role.dto.ts:18",{"_index":799,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["rolesguard",{"_index":768,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["route",{"_index":374,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"classes/LoginResponse.html":{},"guards/RolesGuard.html":{}}}],["rxjs",{"_index":309,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["same",{"_index":924,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["saved",{"_index":176,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"injectables/UserService.html":{}}}],["schema",{"_index":653,"title":{},"body":{"controllers/ProductController.html":{}}}],["search",{"_index":339,"title":{},"body":{"classes/FindAllProductsDto.html":{}}}],["searching",{"_index":597,"title":{},"body":{"controllers/ProductController.html":{}}}],["searchname",{"_index":343,"title":{},"body":{"classes/FindAllProductsDto.html":{},"injectables/ProductService.html":{}}}],["secret",{"_index":1199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":429,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["sell",{"_index":1136,"title":{},"body":{"license.html":{}}}],["senhas",{"_index":1095,"title":{},"body":{"index.html":{}}}],["service",{"_index":333,"title":{},"body":{"classes/FileTypeError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/ProductServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["servidor",{"_index":1042,"title":{},"body":{"index.html":{}}}],["set",{"_index":840,"title":{},"body":{"controllers/UserController.html":{}}}],["setmetadata(is_public_key",{"_index":1197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sets",{"_index":1207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":1144,"title":{},"body":{"license.html":{}}}],["show",{"_index":346,"title":{},"body":{"classes/FindAllProductsDto.html":{}}}],["showing",{"_index":596,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["shutdown",{"_index":533,"title":{},"body":{"injectables/PrismaService.html":{}}}],["signals",{"_index":534,"title":{},"body":{"injectables/PrismaService.html":{}}}],["signoptions",{"_index":1201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["single",{"_index":714,"title":{},"body":{"injectables/ProductService.html":{}}}],["singlespaceurlname",{"_index":754,"title":{},"body":{"injectables/ProductService.html":{}}}],["singlespaceurlname.split",{"_index":757,"title":{},"body":{"injectables/ProductService.html":{}}}],["size",{"_index":1209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skip",{"_index":739,"title":{},"body":{"injectables/ProductService.html":{}}}],["software",{"_index":1122,"title":{},"body":{"license.html":{}}}],["source",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindAllProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{}}}],["spaces",{"_index":712,"title":{},"body":{"injectables/ProductService.html":{}}}],["spacetohyphenurlname",{"_index":756,"title":{},"body":{"injectables/ProductService.html":{}}}],["specific",{"_index":279,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["src/.../is",{"_index":980,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../jwt.config.ts",{"_index":1190,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":979,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../multer",{"_index":1191,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":1189,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":17,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":40,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:19",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:10",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:26",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:44",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/login",{"_index":433,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.response.ts",{"_index":439,"title":{},"body":{"classes/LoginResponse.html":{},"coverage.html":{}}}],["src/auth/dto/login.response.ts:7",{"_index":444,"title":{},"body":{"classes/LoginResponse.html":{}}}],["src/auth/errors/invalid",{"_index":355,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"coverage.html":{}}}],["src/auth/jwt",{"_index":368,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":398,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:34",{"_index":402,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:45",{"_index":404,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/public.decorator",{"_index":637,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["src/auth/public.decorator.ts",{"_index":936,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/is",{"_index":639,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/common/exceptions/product/product",{"_index":489,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"coverage.html":{}}}],["src/common/exceptions/user/email",{"_index":255,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["src/common/exceptions/user/user",{"_index":494,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts",{"_index":769,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts:12",{"_index":771,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/guards/roles.guard.ts:22",{"_index":772,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/interceptors/exception.interceptor.ts",{"_index":283,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/exception.interceptor.ts:23",{"_index":298,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["src/common/interceptors/handlers/exception.handler.ts",{"_index":272,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"coverage.html":{}}}],["src/common/interceptors/handlers/exception.handler.ts:4",{"_index":277,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["src/common/interceptors/handlers/prisma",{"_index":454,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["src/common/interceptors/handlers/user",{"_index":860,"title":{},"body":{"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["src/config/jwt.config",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["src/config/jwt.config.ts",{"_index":941,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/multer",{"_index":681,"title":{},"body":{"modules/ProductModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":945,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/models/product/dto/create",{"_index":158,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/models/product/dto/find",{"_index":337,"title":{},"body":{"classes/FindAllProductsDto.html":{},"coverage.html":{}}}],["src/models/product/dto/update",{"_index":782,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/models/product/entities/product.entity.ts",{"_index":549,"title":{},"body":{"classes/Product.html":{},"coverage.html":{}}}],["src/models/product/entities/product.entity.ts:15",{"_index":559,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:21",{"_index":562,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:27",{"_index":560,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:35",{"_index":551,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:41",{"_index":556,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:46",{"_index":561,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:52",{"_index":555,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:58",{"_index":553,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:9",{"_index":557,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/exceptions/file",{"_index":321,"title":{},"body":{"classes/FileTypeError.html":{},"coverage.html":{}}}],["src/models/product/exceptions/product",{"_index":760,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["src/models/product/product.controller.ts",{"_index":576,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{}}}],["src/models/product/product.controller.ts:100",{"_index":606,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:109",{"_index":615,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:122",{"_index":610,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:40",{"_index":589,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:69",{"_index":621,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:83",{"_index":593,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:92",{"_index":602,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.module.ts",{"_index":677,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/models/product/product.service.ts",{"_index":689,"title":{},"body":{"injectables/ProductService.html":{},"coverage.html":{}}}],["src/models/product/product.service.ts:104",{"_index":704,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:117",{"_index":729,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:12",{"_index":696,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:21",{"_index":698,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:32",{"_index":731,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:43",{"_index":700,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:61",{"_index":701,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:69",{"_index":702,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:77",{"_index":727,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:92",{"_index":725,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/user/dto/create",{"_index":217,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/models/user/dto/delete",{"_index":249,"title":{},"body":{"classes/DeleteUserDto.html":{},"coverage.html":{}}}],["src/models/user/dto/update",{"_index":790,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"coverage.html":{}}}],["src/models/user/entities/user",{"_index":921,"title":{},"body":{"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["src/models/user/entities/user.entity",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/models/user/entities/user.entity.ts",{"_index":801,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/models/user/entities/user.entity.ts:19",{"_index":809,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:25",{"_index":805,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:31",{"_index":808,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:37",{"_index":807,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:43",{"_index":803,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:49",{"_index":804,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:55",{"_index":811,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:9",{"_index":806,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/exceptions/invalid",{"_index":363,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{},"coverage.html":{}}}],["src/models/user/exceptions/missing",{"_index":447,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{},"coverage.html":{}}}],["src/models/user/exceptions/user",{"_index":862,"title":{},"body":{"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["src/models/user/user.controller.ts",{"_index":820,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/models/user/user.controller.ts:37",{"_index":826,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:45",{"_index":829,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:55",{"_index":838,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:69",{"_index":842,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:80",{"_index":834,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.module",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/models/user/user.module.ts",{"_index":868,"title":{},"body":{"modules/UserModule.html":{}}}],["src/models/user/user.service",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/models/user/user.service.ts",{"_index":871,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/models/user/user.service.ts:107",{"_index":887,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:132",{"_index":896,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:17",{"_index":875,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:26",{"_index":876,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:44",{"_index":882,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:56",{"_index":878,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:63",{"_index":893,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:80",{"_index":894,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:94",{"_index":892,"title":{},"body":{"injectables/UserService.html":{}}}],["src/prisma/prisma.module",{"_index":679,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["src/prisma/prisma.module.ts",{"_index":518,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":732,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":521,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:15",{"_index":540,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:25",{"_index":530,"title":{},"body":{"injectables/PrismaService.html":{}}}],["start:dev",{"_index":1050,"title":{},"body":{"index.html":{}}}],["started",{"_index":985,"title":{"index.html":{},"license.html":{}},"body":{}}],["starting",{"_index":595,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["starts",{"_index":981,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statements",{"_index":931,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":258,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["stock",{"_index":168,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["storage",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategy",{"_index":409,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["street",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["string",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindAllProductsDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/variables.html":{}}}],["studio",{"_index":1060,"title":{},"body":{"index.html":{}}}],["studio:test",{"_index":1081,"title":{},"body":{"index.html":{}}}],["sua",{"_index":1019,"title":{},"body":{"index.html":{}}}],["sub",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["subject",{"_index":412,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"license.html":{}}}],["sublicense",{"_index":1134,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1146,"title":{},"body":{"license.html":{}}}],["successfully",{"_index":442,"title":{},"body":{"classes/LoginResponse.html":{}}}],["summary",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":391,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["super('e",{"_index":268,"title":{},"body":{"classes/EmailInUseException.html":{}}}],["super('invalid",{"_index":361,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{}}}],["super('please",{"_index":453,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["super('product",{"_index":684,"title":{},"body":{"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{}}}],["super('user",{"_index":870,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["super(`file",{"_index":335,"title":{},"body":{"classes/FileTypeError.html":{}}}],["super(message",{"_index":766,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["super.canactivate(context",{"_index":397,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["supertest",{"_index":1101,"title":{},"body":{"index.html":{}}}],["support",{"_index":1175,"title":{},"body":{"modules.html":{}}}],["supports",{"_index":330,"title":{},"body":{"classes/FileTypeError.html":{}}}],["svg",{"_index":1176,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":974,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["switch",{"_index":496,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["system",{"_index":264,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"controllers/UserController.html":{},"classes/UserNotFoundException.html":{}}}],["table",{"_index":954,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":953,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":740,"title":{},"body":{"injectables/ProductService.html":{}}}],["tecnologias",{"_index":1006,"title":{},"body":{"index.html":{}}}],["ter",{"_index":1013,"title":{},"body":{"index.html":{}}}],["test",{"_index":1078,"title":{},"body":{"index.html":{}}}],["test:all",{"_index":1075,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1080,"title":{},"body":{"index.html":{}}}],["test?schema=public",{"_index":1071,"title":{},"body":{"index.html":{}}}],["testes",{"_index":1063,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":546,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":547,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.authservice.login(email",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.formaturlname(createproductdto.name",{"_index":733,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.formaturlname(updateproductdto.name",{"_index":759,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.hashifupdatingpassword(id",{"_index":909,"title":{},"body":{"injectables/UserService.html":{}}}],["this.isemailconstraintviolation(error.meta",{"_index":500,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isprismaunknownerror(error",{"_index":506,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isproducterror(error",{"_index":505,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isproductnameconstraintviolation(error",{"_index":501,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isusererror(error",{"_index":504,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.jwtservice.sign(payload",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.product.create",{"_index":734,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.delete",{"_index":749,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.findmany",{"_index":738,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.findunique",{"_index":745,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.update",{"_index":735,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.user.create",{"_index":906,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.delete",{"_index":915,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":907,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":910,"title":{},"body":{"injectables/UserService.html":{}}}],["this.productservice.create(createproductdto",{"_index":651,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findall(findallproductsdto",{"_index":661,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findonebyid(id",{"_index":664,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findonebyurlname(urlname",{"_index":667,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.remove(id",{"_index":673,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.update(id",{"_index":669,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.uploadpicture(id",{"_index":659,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.reflector.getallandoverride(is_admin_key",{"_index":777,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":393,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.updateproductandurlname(id",{"_index":748,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.userservice.create(createuserdto",{"_index":852,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyemail(email",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyid(userid",{"_index":855,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(userid",{"_index":859,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(userid",{"_index":856,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateuserrole(updateuserroledto",{"_index":858,"title":{},"body":{"controllers/UserController.html":{}}}],["this.validatecurrentpassword(id",{"_index":913,"title":{},"body":{"injectables/UserService.html":{}}}],["this.validateuser(email",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{}}}],["thrown",{"_index":891,"title":{},"body":{"injectables/UserService.html":{}}}],["throws",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{}}}],["tmp",{"_index":1214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["todos",{"_index":1074,"title":{},"body":{"index.html":{}}}],["token",{"_index":411,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"index.html":{}}}],["tooling",{"_index":1084,"title":{},"body":{"index.html":{}}}],["tort",{"_index":1169,"title":{},"body":{"license.html":{}}}],["trailing",{"_index":710,"title":{},"body":{"injectables/ProductService.html":{}}}],["transform",{"_index":285,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["transformer",{"_index":352,"title":{},"body":{"classes/FindAllProductsDto.html":{},"dependencies.html":{},"index.html":{}}}],["tratar",{"_index":1098,"title":{},"body":{"index.html":{}}}],["trimmedurlname",{"_index":752,"title":{},"body":{"injectables/ProductService.html":{}}}],["trimmedurlname.replace(/\\s\\s+/g",{"_index":755,"title":{},"body":{"injectables/ProductService.html":{}}}],["true",{"_index":396,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["trying",{"_index":365,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{}}}],["turn",{"_index":713,"title":{},"body":{"injectables/ProductService.html":{}}}],["turned",{"_index":563,"title":{},"body":{"classes/Product.html":{}}}],["type",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindAllProductsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.exception.ts",{"_index":322,"title":{},"body":{"classes/FileTypeError.html":{},"coverage.html":{}}}],["type.exception.ts:6",{"_index":328,"title":{},"body":{"classes/FileTypeError.html":{}}}],["types",{"_index":280,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":1082,"title":{},"body":{"index.html":{}}}],["ui",{"_index":975,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["um",{"_index":1033,"title":{},"body":{"index.html":{}}}],["unauthenticated",{"_index":1198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":359,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{}}}],["undefined",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined})@apibearerauth()@isadmin()@useinterceptors(undefined)@post('picture/:id')@httpcode(httpstatus.ok",{"_index":620,"title":{},"body":{"controllers/ProductController.html":{}}}],["uniquesuffix",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unitários",{"_index":1077,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":477,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["unlicensed",{"_index":1185,"title":{},"body":{"properties.html":{}}}],["up",{"_index":1235,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updatable",{"_index":783,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["update",{"_index":449,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["update(id",{"_index":611,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["update(request",{"_index":836,"title":{},"body":{"controllers/UserController.html":{}}}],["update.exception",{"_index":900,"title":{},"body":{"injectables/UserService.html":{}}}],["update.exception.ts",{"_index":364,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"coverage.html":{}}}],["update.exception.ts:6",{"_index":367,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{}}}],["update.exception.ts:7",{"_index":450,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["updatedat",{"_index":802,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{}}}],["updateproductandurlname",{"_index":693,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateproductandurlname(id",{"_index":728,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateproductdto",{"_index":612,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updateproductdto.name",{"_index":747,"title":{},"body":{"injectables/ProductService.html":{}}}],["updates",{"_index":613,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserdto",{"_index":789,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserdto.currentpassword",{"_index":917,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto.password",{"_index":916,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserrole",{"_index":822,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserrole(updateuserroledto",{"_index":839,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserroledto",{"_index":795,"title":{"classes/UpdateUserRoleDto.html":{}},"body":{"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserroledto.email",{"_index":911,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserroledto.role",{"_index":912,"title":{},"body":{"injectables/UserService.html":{}}}],["upload",{"_index":329,"title":{},"body":{"classes/FileTypeError.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["upload.config",{"_index":682,"title":{},"body":{"modules/ProductModule.html":{}}}],["upload.config.ts",{"_index":942,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["uploadedfile",{"_index":631,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploading",{"_index":324,"title":{},"body":{"classes/FileTypeError.html":{}}}],["uploadphoto",{"_index":584,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploadphoto(id",{"_index":616,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploadpicture",{"_index":694,"title":{},"body":{"injectables/ProductService.html":{}}}],["uploadpicture(id",{"_index":730,"title":{},"body":{"injectables/ProductService.html":{}}}],["uploads",{"_index":618,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["url",{"_index":564,"title":{},"body":{"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["urlname",{"_index":206,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["urlname'})@public()@get(':urlname",{"_index":605,"title":{},"body":{"controllers/ProductController.html":{}}}],["use",{"_index":267,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"license.html":{}}}],["use.exception",{"_index":490,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["use.exception.ts",{"_index":256,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"coverage.html":{}}}],["use.exception.ts:6",{"_index":266,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["useclass",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":260,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtStrategy.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/variables.html":{}}}],["useinterceptors",{"_index":632,"title":{},"body":{"controllers/ProductController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":656,"title":{},"body":{"controllers/ProductController.html":{}}}],["user",{"_index":42,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":810,"title":{},"body":{"classes/User.html":{},"controllers/UserController.html":{}}}],["user'})@apibearerauth()@delete()@httpcode(httpstatus.no_content",{"_index":833,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@apibearerauth()@patch",{"_index":837,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@post",{"_index":825,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@public()@post('login')@httpcode(httpstatus.ok",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.controller",{"_index":869,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":793,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":218,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":252,"title":{},"body":{"classes/DeleteUserDto.html":{}}}],["user.dto.ts:17",{"_index":225,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":792,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:28",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":226,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:44",{"_index":221,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":926,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["user.id",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.role",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":849,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user@example.com",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{}}}],["usercontroller",{"_index":819,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":422,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"controllers/UserController.html":{},"interfaces/ValidateReturn.html":{}}}],["userinputexceptionhandler",{"_index":313,"title":{"classes/UserInputExceptionHandler.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["userinputexceptionhandler().handle(error",{"_index":318,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["usermodule",{"_index":10,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["usernotfoundexception",{"_index":493,"title":{"classes/UserNotFoundException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["userrole",{"_index":423,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"interfaces/ValidateReturn.html":{}}}],["users",{"_index":697,"title":{},"body":{"injectables/ProductService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":113,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userserviceinputexception",{"_index":366,"title":{"classes/UserServiceInputException.html":{}},"body":{"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["userwithoutpassword",{"_index":846,"title":{"classes/UserWithoutPassword.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["uses",{"_index":301,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{}}}],["usuário",{"_index":1008,"title":{},"body":{"index.html":{}}}],["usuários",{"_index":993,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":558,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["valid",{"_index":1239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":401,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":403,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["validatecurrentpassword",{"_index":874,"title":{},"body":{"injectables/UserService.html":{}}}],["validatecurrentpassword(id",{"_index":895,"title":{},"body":{"injectables/UserService.html":{}}}],["validated",{"_index":420,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["validatereturn",{"_index":421,"title":{"interfaces/ValidateReturn.html":{}},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{}}}],["validates",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["validateuser",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":200,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindAllProductsDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"dependencies.html":{},"index.html":{}}}],["validações",{"_index":1090,"title":{},"body":{"index.html":{}}}],["validimageuploadtypesregex",{"_index":944,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["validimageuploadtypesregex.test",{"_index":1227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validimageuploadtypesregex.test(file.mimetype",{"_index":1225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["value",{"_index":1192,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":937,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1188,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["veiga",{"_index":1113,"title":{},"body":{"license.html":{}}}],["verify",{"_index":1193,"title":{},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1183,"title":{},"body":{"properties.html":{}}}],["visualizar",{"_index":1057,"title":{},"body":{"index.html":{}}}],["voc",{"_index":1011,"title":{},"body":{"index.html":{}}}],["void",{"_index":281,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"miscellaneous/functions.html":{}}}],["warranties",{"_index":1153,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1149,"title":{},"body":{"license.html":{}}}],["web",{"_index":1089,"title":{},"body":{"index.html":{}}}],["wether",{"_index":467,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["wheelchair",{"_index":211,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["whether",{"_index":1166,"title":{},"body":{"license.html":{}}}],["white",{"_index":711,"title":{},"body":{"injectables/ProductService.html":{}}}],["without",{"_index":831,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"license.html":{}}}],["won't",{"_index":884,"title":{},"body":{"injectables/UserService.html":{}}}],["words",{"_index":717,"title":{},"body":{"injectables/ProductService.html":{}}}],["world",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["wrong",{"_index":358,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{}}}],["yarn",{"_index":1031,"title":{},"body":{"index.html":{}}}],["z",{"_index":231,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            ProductModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthModule } from './auth/auth.module';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\nimport { UserModule } from './models/user/user.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { ProductModule } from './models/product/product.module';\n\n@Module({\n  imports: [UserModule, AuthModule, PrismaModule, ProductModule],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                User authentication endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(undefined: LoginCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Logs in user'})@Public()@Post('login')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:19\n                \n            \n\n\n            \n                \n                    Authenticates the User\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { LoginCredentialsDto } from './dto/login-credentials.dto';\nimport { LoginResponse } from './dto/login.response';\nimport { Public } from './public.decorator';\n\n/** User authentication endpoints */\n@ApiTags('authentication')\n@Controller()\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  /** Authenticates the User */\n  @ApiOperation({ summary: 'Logs in user' })\n  @Public()\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  async login(\n    @Body() { email, password }: LoginCredentialsDto,\n  ): Promise {\n    return this.authService.login(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { jwtConfig } from 'src/config/jwt.config';\nimport { UserModule } from 'src/models/user/user.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [UserModule, PassportModule, JwtModule.register(jwtConfig)],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for authenticating the user\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Private\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            Responsible for authenticating the user\nInstantiate the class and the UserService and\nJwtService dependencies\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:26\n                \n            \n\n\n            \n                \n                    Validates if the inputted email exists and\ncompares if the hashed password matches the inputted one.\nIf so, returns the JWT accessToken\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:44\n                \n            \n\n\n            \n                \n                    Validates if the inputted email exists and\ncompares if the hashed password matches the inputted one.\nIf not, throws an error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { compare } from 'bcrypt';\nimport { User } from 'src/models/user/entities/user.entity';\nimport { UserService } from 'src/models/user/user.service';\nimport { InvalidEmailOrPasswordError } from './errors/invalid-email-or-password.error.';\n\n/** Responsible for authenticating the user */\n@Injectable()\nexport class AuthService {\n  /** Responsible for authenticating the user\n   *\n   * Instantiate the class and the UserService and\n   * JwtService dependencies\n   */\n  constructor(\n    private readonly userService: UserService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  /** Validates if the inputted email exists and\n   * compares if the hashed password matches the inputted one.\n   *\n   * If so, returns the JWT accessToken\n   */\n  async login(\n    email: string,\n    password: string,\n  ): Promise {\n    const user = await this.validateUser(email, password);\n\n    const payload = { sub: user.id, role: user.role };\n\n    return {\n      accessToken: this.jwtService.sign(payload),\n    };\n  }\n\n  /** Validates if the inputted email exists and\n   * compares if the hashed password matches the inputted one.\n   *\n   * If not, throws an error\n   */\n  private async validateUser(email: string, password: string): Promise {\n    const user = await this.userService.findByEmail(email);\n\n    if (user) {\n      const isPasswordValid = await compare(password, user.password);\n\n      if (isPasswordValid) {\n        return { ...user, password: undefined };\n      }\n    }\n\n    throw new InvalidEmailOrPasswordError();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/create-product.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create a Product\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                basePrice\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                discountPercentage\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                stock\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        basePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Decimal\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:35\n                        \n                    \n\n            \n                \n                    Product price not considering discounts.\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:58\n                        \n                    \n\n            \n                \n                    Product description\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        discountPercentage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:43\n                        \n                    \n\n            \n                \n                    Product discount in percentage. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:25\n                        \n                    \n\n            \n                \n                    Product name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:50\n                        \n                    \n\n            \n                \n                    Product stock amount. Defaults to 0\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { Decimal } from '@prisma/client/runtime';\nimport {\n  IsInt,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { Product } from '../entities/product.entity';\n\n/** Describes the fields needed to create a Product */\nexport class CreateProductDto extends OmitType(Product, [\n  'id',\n  'createdAt',\n  'urlName',\n  'picture',\n] as const) {\n  /**\n   * Product name\n   * @example \"Brand black wheelchair\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Product price not considering discounts.\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 70.00\n   */\n  @IsNumber()\n  @IsNotEmpty()\n  basePrice: string | number | Decimal;\n\n  /**\n   * Product discount in percentage. Defaults to 0\n   * @example 10\n   */\n  @IsNumber()\n  @IsOptional()\n  discountPercentage?: number;\n\n  /** Product stock amount. Defaults to 0\n   * @example 42\n   */\n  @IsInt()\n  @IsOptional()\n  stock?: number;\n\n  /**\n   * Product description\n   * @example \"Black wheelchair for offices\"\n   */\n  @IsString()\n  @IsOptional()\n  description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create an User\n\n            \n\n\n            \n                Implements\n            \n            \n                            User\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:44\n                        \n                    \n\n            \n                \n                    User address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({message: 'Must be an e-mail'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:17\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:36\n                        \n                    \n\n            \n                \n                    User name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8, {message: 'Password must have length of at least 8'})@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[a-z]).*$/, {message: 'Password must contain at least 1 number and 1 letter'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:28\n                        \n                    \n\n            \n                \n                    User password must contain at least 1 number and 1 letter\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\nimport { User } from '../entities/user.entity';\n\n/** Describes the fields needed to create an User */\nexport class CreateUserDto implements User {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsEmail({ message: 'Must be an e-mail' })\n  email: string;\n\n  /**\n   * User password must contain at least 1 number and 1 letter\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @MinLength(8, { message: 'Password must have length of at least 8' })\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[a-z]).*$/, {\n    message: 'Password must contain at least 1 number and 1 letter',\n  })\n  password: string;\n\n  /**\n   * User name\n   * @example \"John Doe\"\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  /**\n   * User address\n   * @example \"World Street 0\"\n   */\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserDto.html":{"url":"classes/DeleteUserDto.html","title":"class - DeleteUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/delete-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to delete an User\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/delete-user.dto.ts:11\n                        \n                    \n\n            \n                \n                    User current password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/** Describes the fields needed to delete an User */\nexport class DeleteUserDto {\n  /**\n   * User current password\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  currentPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailInUseException.html":{"url":"classes/EmailInUseException.html","title":"class - EmailInUseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailInUseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/user/email-in-use.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\nan email that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/user/email-in-use.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'E-mail already in use'. Used when the user inputs\nan email that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * an email that is already registered in the system\n */\nexport class EmailInUseException extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'E-mail already in use'. Used when the user inputs\n   * an email that is already registered in the system\n   */\n  constructor() {\n    super('E-mail already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExceptionHandler.html":{"url":"interfaces/ExceptionHandler.html","title":"interface - ExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for Exception Handlers\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        handle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/exception.handler.ts:4\n                \n            \n\n\n            \n                \n                    Function to handle specific error types\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface ExceptionHandler {\n  /** Function to handle specific error types */\n  handle(error: Error): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExceptionInterceptor.html":{"url":"injectables/ExceptionInterceptor.html","title":"injectable - ExceptionInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExceptionInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/exception.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor to transform app erros into HTTP errors\nFor more about NestJs interceptors: https://docs.nestjs.com/interceptors\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler<>)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/exception.interceptor.ts:23\n                \n            \n\n\n            \n                \n                    Catches app errors and throws the\nrespective HTTP error\nUses default NestJs boilerplate, for more\ninformation: https://docs.nestjs.com/interceptors\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler<>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { catchError, Observable } from 'rxjs';\nimport { PrismaExceptionHandler } from './handlers/prisma-exception.handler';\nimport { UserInputExceptionHandler } from './handlers/user-input-exception.handler';\n\n/** Interceptor to transform app erros into HTTP errors\n *\n * For more about NestJs interceptors: https://docs.nestjs.com/interceptors\n */\n@Injectable()\nexport class ExceptionInterceptor implements NestInterceptor {\n  /** Catches app errors and throws the\n   * respective HTTP error\n   *\n   * Uses default NestJs boilerplate, for more\n   * information: https://docs.nestjs.com/interceptors\n   */\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | Promise> {\n    return next.handle().pipe(\n      catchError((error) => {\n        new UserInputExceptionHandler().handle(error);\n\n        new PrismaExceptionHandler().handle(error);\n\n        throw error;\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileTypeError.html":{"url":"classes/FileTypeError.html","title":"class - FileTypeError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileTypeError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/exceptions/file-type.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs an invalid file type\nuploading a picture\n\n            \n\n            \n                Extends\n            \n            \n                        ProductServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fileTypes: RegExp)\n                    \n                \n                        \n                            \n                                Defined in src/models/product/exceptions/file-type.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'File upload only supports the following\nfiletypes - {fileTypes}'.\nUsed when the user inputs an invalid file type\nuploading a picture\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileTypes\n                                                  \n                                                        \n                                                                    RegExp\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ProductServiceInputException } from './product-service-input.exception';\n\n/** Used when the user inputs an invalid file type\n * uploading a picture\n */\nexport class FileTypeError extends ProductServiceInputException {\n  /** Throws exception with message 'File upload only supports the following\n   * filetypes - {fileTypes}'.\n   *\n   * Used when the user inputs an invalid file type\n   * uploading a picture\n   */\n  constructor(fileTypes: RegExp) {\n    super(`File upload only supports the following filetypes - ${fileTypes}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindAllProductsDto.html":{"url":"classes/FindAllProductsDto.html","title":"class - FindAllProductsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindAllProductsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/find-all-products.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information to search for products\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                page\n                            \n                            \n                                    Optional\n                                searchName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-all-products.dto.ts:29\n                        \n                    \n\n            \n                \n                    Show this amount of products per page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-all-products.dto.ts:20\n                        \n                    \n\n            \n                \n                    Show products in this page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        searchName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-all-products.dto.ts:11\n                        \n                    \n\n            \n                \n                    String containing in product name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsInt, IsOptional, IsPositive, IsString } from 'class-validator';\n\n/** Describes the information to search for products */\nexport class FindAllProductsDto {\n  /** String containing in product name\n   * @example \"chair\"\n   */\n  @IsOptional()\n  @IsString()\n  searchName?: string;\n\n  /** Show products in this page\n   * @example 1\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  page?: number;\n\n  /** Show this amount of products per page\n   * @example 10\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  offset?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidEmailOrPasswordError.html":{"url":"classes/InvalidEmailOrPasswordError.html","title":"class - InvalidEmailOrPasswordError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidEmailOrPasswordError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/errors/invalid-email-or-password.error..ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 401. Used when the user inputs\nan email that is not registered in the system\nor the wrong password for a registered email\n\n            \n\n            \n                Extends\n            \n            \n                    UnauthorizedException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/errors/invalid-email-or-password.error..ts:7\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 401 with message 'Invalid email or password'.\nUsed when the user inputs an email that is not registered\nin the system or the wrong password for a registered email\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UnauthorizedException } from '@nestjs/common';\n\n/** Throws HTTP status 401. Used when the user inputs\n * an email that is not registered in the system\n * or the wrong password for a registered email\n */\nexport class InvalidEmailOrPasswordError extends UnauthorizedException {\n  /** Throws HTTP status 401 with message 'Invalid email or password'.\n   * Used when the user inputs an email that is not registered\n   * in the system or the wrong password for a registered email\n   */\n  constructor() {\n    super('Invalid email or password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidPasswordUpdateException.html":{"url":"classes/InvalidPasswordUpdateException.html","title":"class - InvalidPasswordUpdateException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidPasswordUpdateException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/exceptions/invalid-password-update.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs the wrong\ncurrent password when trying to create a new password\n\n            \n\n            \n                Extends\n            \n            \n                        UserServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/models/user/exceptions/invalid-password-update.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Invalid current password'.\nUsed when the user inputs the wrong current password when\ntrying to create a new password\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserServiceInputException } from './user-service-input.exception';\n\n/** Used when the user inputs the wrong\n * current password when trying to create a new password\n */\nexport class InvalidPasswordUpdateException extends UserServiceInputException {\n  /** Throws exception with message 'Invalid current password'.\n   *\n   * Used when the user inputs the wrong current password when\n   * trying to create a new password\n   */\n  constructor() {\n    super('Invalid current password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Uses the passport library AuthGuard to check\nif the route needs authentication\nFor more on NestJs Guards: https://docs.nestjs.com/guards\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-auth.guard.ts:13\n                            \n                        \n\n                \n                    \n                            Uses the passport library AuthGuard to check\nif the route needs authentication\nFor more on NestJs Guards: https://docs.nestjs.com/guards\nInstantiates the class and the Reflector dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:28\n                \n            \n\n\n            \n                \n                    If the route uses the Public decorator it\ndoes not need authentication, else it does\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Observable } from 'rxjs';\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n/** Uses the passport library AuthGuard to check\n * if the route needs authentication\n *\n * For more on NestJs Guards: https://docs.nestjs.com/guards\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  /** Uses the passport library AuthGuard to check\n   * if the route needs authentication\n   *\n   * For more on NestJs Guards: https://docs.nestjs.com/guards\n   *\n   * Instantiates the class and the Reflector dependency\n   */\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  /** If the route uses the Public decorator it\n   * does not need authentication, else it does\n   */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Passport library JsonWebToken configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:34\n                            \n                        \n\n                \n                    \n                            Passport library JsonWebToken configuration\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: Payload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:45\n                \n            \n\n\n            \n                \n                    Validates and returns data after JsonWebToken is decrypted\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                Payload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { jwtConfig } from 'src/config/jwt.config';\n\n/** Decrypted JsonWebToken content */\ninterface Payload {\n  /** Token subject, user ID used\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  sub: string;\n\n  /** User role\n   * @example \"user\"\n   */\n  role: string;\n}\n\n/** What is returned to the application after JsonWebToken is validated */\ninterface ValidateReturn {\n  /** User ID\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  userId: string;\n\n  /** User role\n   * @example \"user\"\n   */\n  userRole: string;\n}\n\n/** Passport library JsonWebToken configuration */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /** Passport library JsonWebToken configuration */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConfig.secret,\n    });\n  }\n\n  /** Validates and returns data after JsonWebToken is decrypted */\n  async validate(payload: Payload): Promise {\n    return {\n      userId: payload.sub,\n      userRole: payload.role,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginCredentialsDto.html":{"url":"classes/LoginCredentialsDto.html","title":"class - LoginCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-credentials.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to authenticate an User to the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-credentials.dto.ts:11\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-credentials.dto.ts:19\n                        \n                    \n\n            \n                \n                    User password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/** Describes the information needed to authenticate an User to the application */\nexport class LoginCredentialsDto {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  email: string;\n\n  /**\n   * User password\n   * @example \"abc123456\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginResponse.html":{"url":"classes/LoginResponse.html","title":"class - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.response.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the response received when the Login route is successfully called\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.response.ts:7\n                        \n                    \n\n            \n                \n                    JWT Authentication token\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LoginResponse {\n  /**\n   * JWT Authentication token\n   * @example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5NWFkMzNhNS0wYjk4LTQ2ODYtYjFmMS1hMTkwNzM0NWJmYzciLCJpYXQiOjE2NDg0NzU3MzEsImV4cCI6MTY0ODQ3NjYzMX0.h3z3JDvHOi6y5C_N0Kt6tdP2nWK_dHBZxioQn7VANNo\"\n   */\n  accessToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MissingPasswordUpdateException.html":{"url":"classes/MissingPasswordUpdateException.html","title":"class - MissingPasswordUpdateException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MissingPasswordUpdateException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/exceptions/missing-password-update.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs only the current password\nor the new password, but both are needed to update\nthe password\n\n            \n\n            \n                Extends\n            \n            \n                        UserServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/models/user/exceptions/missing-password-update.exception.ts:7\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Please enter both new\npassword and current password'.\nUsed when the user inputs only the current password\nor the new password, but both are needed to update\nthe password\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserServiceInputException } from './user-service-input.exception';\n\n/** Used when the user inputs only the current password\n * or the new password, but both are needed to update\n * the password\n */\nexport class MissingPasswordUpdateException extends UserServiceInputException {\n  /** Throws exception with message 'Please enter both new\n   * password and current password'.\n   *\n   * Used when the user inputs only the current password\n   * or the new password, but both are needed to update\n   * the password\n   */\n  constructor() {\n    super('Please enter both new password and current password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Payload.html":{"url":"interfaces/Payload.html","title":"interface - Payload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Payload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Decrypted JsonWebToken content\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User role\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Token subject, user ID used\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { jwtConfig } from 'src/config/jwt.config';\n\n/** Decrypted JsonWebToken content */\ninterface Payload {\n  /** Token subject, user ID used\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  sub: string;\n\n  /** User role\n   * @example \"user\"\n   */\n  role: string;\n}\n\n/** What is returned to the application after JsonWebToken is validated */\ninterface ValidateReturn {\n  /** User ID\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  userId: string;\n\n  /** User role\n   * @example \"user\"\n   */\n  userRole: string;\n}\n\n/** Passport library JsonWebToken configuration */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /** Passport library JsonWebToken configuration */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConfig.secret,\n    });\n  }\n\n  /** Validates and returns data after JsonWebToken is decrypted */\n  async validate(payload: Payload): Promise {\n    return {\n      userId: payload.sub,\n      userRole: payload.role,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrismaExceptionHandler.html":{"url":"classes/PrismaExceptionHandler.html","title":"class - PrismaExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrismaExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/prisma-exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Catches Prisma ORM errors and throws the\nrespective HTTP error\n\n            \n\n\n            \n                Implements\n            \n            \n                            ExceptionHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                            \n                                    Private\n                                isEmailConstraintViolation\n                            \n                            \n                                    Private\n                                isPrismaUnknownError\n                            \n                            \n                                    Private\n                                isProductError\n                            \n                            \n                                    Private\n                                isProductNameConstraintViolation\n                            \n                            \n                                    Private\n                                isUserError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:16\n                \n            \n\n\n            \n                \n                    Catches Prisma ORM errors and throws the\nrespective HTTP error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isEmailConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isEmailConstraintViolation(errorMeta: object)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:61\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the email field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorMeta\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isPrismaUnknownError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isPrismaUnknownError(error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:56\n                \n            \n\n\n            \n                \n                    Checks if the error contains clientVersion,\nmaking it an unknown prisma error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isProductError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isProductError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:82\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an product prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isProductNameConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isProductNameConstraintViolation(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:66\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the product name field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isUserError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isUserError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:77\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an user prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PrismaClientKnownRequestError } from '@prisma/client/runtime';\nimport { PrismaError } from 'prisma-error-enum';\nimport { ProductNameInUseException } from 'src/common/exceptions/product/product-name-in-use.exception';\nimport { ProductNotFoundException } from 'src/common/exceptions/product/product-not-found.exception';\nimport { EmailInUseException } from 'src/common/exceptions/user/email-in-use.exception';\nimport { UserNotFoundException } from 'src/common/exceptions/user/user-not-found.exception';\nimport { ExceptionHandler } from './exception.handler';\n\n/** Catches Prisma ORM errors and throws the\n * respective HTTP error\n */\nexport class PrismaExceptionHandler implements ExceptionHandler {\n  /** Catches Prisma ORM errors and throws the\n   * respective HTTP error\n   */\n  handle(error: Error): void {\n    if (error instanceof PrismaClientKnownRequestError) {\n      switch (error.code) {\n        case PrismaError.UniqueConstraintViolation:\n          if (this.isEmailConstraintViolation(error.meta)) {\n            throw new EmailInUseException();\n          }\n\n          if (this.isProductNameConstraintViolation(error)) {\n            throw new ProductNameInUseException();\n          }\n          break;\n        case PrismaError.RecordsNotFound: {\n          if (this.isUserError(error)) {\n            throw new UserNotFoundException();\n          }\n\n          if (this.isProductError(error)) {\n            throw new ProductNotFoundException();\n          }\n\n          break;\n        }\n        default:\n          throw error;\n      }\n    }\n\n    if (this.isPrismaUnknownError(error)) {\n      if (error.message === 'No Product found') {\n        throw new ProductNotFoundException();\n      }\n    }\n\n    throw error;\n  }\n\n  /** Checks if the error contains clientVersion,\n   * making it an unknown prisma error\n   * */\n  private isPrismaUnknownError(error): boolean {\n    return !!error.clientVersion;\n  }\n\n  /** Returns wether the error happened in the email field or not */\n  private isEmailConstraintViolation(errorMeta: object): boolean {\n    return Object.values(errorMeta)[0][0] === 'email';\n  }\n\n  /** Returns wether the error happened in the product name field or not */\n  private isProductNameConstraintViolation(\n    error: PrismaClientKnownRequestError,\n  ): boolean {\n    return (\n      (Object.values(error.meta)[0][0] === 'name' ||\n        Object.values(error.meta)[0][0] === 'urlName') &&\n      error.message.includes('prisma.product')\n    );\n  }\n\n  /** Returns wether the error happened on an user prisma query or not */\n  private isUserError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.user');\n  }\n\n  /** Returns wether the error happened on an product prisma query or not */\n  private isProductError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.product');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n            \n                Description\n            \n            \n                ORM responsible for connecting to the database\nBoilerplate from https://docs.nestjs.com/recipes/prisma\n\n            \n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:25\n                \n            \n\n\n            \n                \n                    Prisma interferes with NestJS enableShutdownHooks.\nPrisma listens for shutdown signals and will call process.exit()\nbefore your application shutdown hooks fire.\nhttps://docs.nestjs.com/recipes/prisma\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:15\n                \n            \n\n\n            \n                \n                    Optional — if you leave it out,\nPrisma will connect lazily on its first call to the database.\nhttps://docs.nestjs.com/recipes/prisma\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n/** ORM responsible for connecting to the database\n *\n * Boilerplate from https://docs.nestjs.com/recipes/prisma\n */\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  /** Optional — if you leave it out,\n   * Prisma will connect lazily on its first call to the database.\n   *\n   * https://docs.nestjs.com/recipes/prisma\n   */\n  async onModuleInit(): Promise {\n    await this.$connect();\n  }\n\n  /** Prisma interferes with NestJS enableShutdownHooks.\n   * Prisma listens for shutdown signals and will call process.exit()\n   * before your application shutdown hooks fire.\n   *\n   * https://docs.nestjs.com/recipes/prisma\n   */\n  async enableShutdownHooks(app: INestApplication): Promise {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Product.html":{"url":"classes/Product.html","title":"class - Product","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/entities/product.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of a Product in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                basePrice\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                discountPercentage\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                picture\n                            \n                            \n                                    Optional\n                                stock\n                            \n                            \n                                urlName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        basePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Prisma.Decimal\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:35\n                        \n                    \n\n            \n                \n                    Product price not considering discounts.\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:58\n                        \n                    \n\n            \n                \n                    Product createdAt dateString\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:52\n                        \n                    \n\n            \n                \n                    Product description\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        discountPercentage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:41\n                        \n                    \n\n            \n                \n                    Product discount in percentage. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:9\n                        \n                    \n\n            \n                \n                    Product ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:15\n                        \n                    \n\n            \n                \n                    Product name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:27\n                        \n                    \n\n            \n                \n                    Product picture\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:46\n                        \n                    \n\n            \n                \n                    Product stock amount. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        urlName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:21\n                        \n                    \n\n            \n                \n                    Product name turned to url\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\n/** Describes the properties of a Product in the database */\nexport class Product implements Prisma.ProductUncheckedCreateInput {\n  /**\n   * Product ID as UUID\n   * @example \"6f4ca8a4-8aa0-4302-ac1b-7b5547f01b0a\"\n   */\n  id?: string;\n\n  /**\n   * Product name\n   * @example \"Brand black wheelchair\"\n   */\n  name: string;\n\n  /**\n   * Product name turned to url\n   * @example \"brand-black-wheelchair\"\n   */\n  urlName: string;\n\n  /**\n   * Product picture\n   * @example \"image.jpg\"\n   */\n  picture?: string;\n\n  /**\n   * Product price not considering discounts.\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 70.00\n   */\n  basePrice: string | number | Prisma.Decimal;\n\n  /**\n   * Product discount in percentage. Defaults to 0\n   * @example 10\n   */\n  discountPercentage?: number;\n\n  /** Product stock amount. Defaults to 0\n   * @example 42\n   */\n  stock?: number;\n\n  /**\n   * Product description\n   * @example \"Black wheelchair for offices\"\n   */\n  description?: string;\n\n  /**\n   * Product createdAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  createdAt?: string | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductController.html":{"url":"controllers/ProductController.html","title":"controller - ProductController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                product\n            \n\n\n            \n                Description\n            \n            \n                Exposes product CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOneById\n                            \n                            \n                                findOneByUrlName\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                uploadPhoto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createProductDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin creates a new product'})@ApiBearerAuth()@IsAdmin()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:40\n                \n            \n\n\n            \n                \n                    Creates a new product, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(findAllProductsDto: FindAllProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns all products'})@Public()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:83\n                \n            \n\n\n            \n                \n                    Returns all products with pagination\nDefault is starting on page 1 showing 10 results per page,\nsearching and ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findAllProductsDto\n                                    \n                                                FindAllProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin gets product by ID'})@ApiBearerAuth()@IsAdmin()@Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:92\n                \n            \n\n\n            \n                \n                    Find product by ID, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByUrlName\n                        \n                    \n                \n            \n            \n                \nfindOneByUrlName(urlName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Gets product by urlName'})@Public()@Get(':urlName')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:100\n                \n            \n\n\n            \n                \n                    Find product by Url Name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    urlName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin deletes product'})@ApiBearerAuth()@IsAdmin()@Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:122\n                \n            \n\n\n            \n                \n                    Deletes product from database, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin updates product'})@ApiBearerAuth()@IsAdmin()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:109\n                \n            \n\n\n            \n                \n                    Updates product information, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadPhoto\n                        \n                    \n                \n            \n            \n                \nuploadPhoto(id: string, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin uploads a new product picture', requestBody: undefined})@ApiBearerAuth()@IsAdmin()@UseInterceptors(undefined)@Post('picture/:id')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:69\n                \n            \n\n\n            \n                \n                    Uploads a new picture for the product.\nNeeds to be type jpeg, jpg or png and maximum 3MB.\nCheck \nmulterUploadConfig file in the docs.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Public } from 'src/auth/public.decorator';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { FindAllProductsDto } from './dto/find-all-products.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { Product } from './entities/product.entity';\nimport { ProductService } from './product.service';\n\n/** Exposes product CRUD endpoints */\n@ApiTags('product')\n@Controller('product')\nexport class ProductController {\n  /** Exposes product CRUD endpoints\n   *\n   * Instantiate class and ProductService dependency\n   */\n  constructor(private readonly productService: ProductService) {}\n\n  /** Creates a new product, only for admins */\n  @ApiOperation({ summary: 'Admin creates a new product' })\n  @ApiBearerAuth()\n  @IsAdmin()\n  @Post()\n  create(@Body() createProductDto: CreateProductDto): Promise {\n    return this.productService.create(createProductDto);\n  }\n\n  /**\n   * Uploads a new picture for the product.\n   * Needs to be type jpeg, jpg or png and maximum 3MB.\n   *\n   * Check \n   * multerUploadConfig file in the docs.\n   */\n  @ApiOperation({\n    summary: 'Admin uploads a new product picture',\n    requestBody: {\n      content: {\n        'multipart/form-data': {\n          schema: {\n            type: 'object',\n            properties: { file: { type: 'string', format: 'binary' } },\n          },\n        },\n      },\n    },\n  })\n  @ApiBearerAuth()\n  @IsAdmin()\n  @UseInterceptors(FileInterceptor('file'))\n  @Post('picture/:id')\n  @HttpCode(HttpStatus.OK)\n  uploadPhoto(\n    @Param('id') id: string,\n    @UploadedFile() file: Express.Multer.File,\n  ): Promise {\n    return this.productService.uploadPicture(id, file);\n  }\n\n  /** Returns all products with pagination\n   * Default is starting on page 1 showing 10 results per page,\n   * searching and ordering by name\n   */\n  @ApiOperation({ summary: 'Returns all products' })\n  @Public()\n  @Get()\n  findAll(@Query() findAllProductsDto: FindAllProductsDto): Promise {\n    return this.productService.findAll(findAllProductsDto);\n  }\n\n  /** Find product by ID, only for admins */\n  @ApiOperation({ summary: 'Admin gets product by ID' })\n  @ApiBearerAuth()\n  @IsAdmin()\n  @Get('/id/:id')\n  findOneById(@Param('id') id: string): Promise {\n    return this.productService.findOneById(id);\n  }\n\n  /** Find product by Url Name */\n  @ApiOperation({ summary: 'Gets product by urlName' })\n  @Public()\n  @Get(':urlName')\n  findOneByUrlName(@Param('urlName') urlName: string): Promise {\n    return this.productService.findOneByUrlName(urlName);\n  }\n\n  /** Updates product information, only for admins */\n  @ApiOperation({ summary: 'Admin updates product' })\n  @ApiBearerAuth()\n  @IsAdmin()\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateProductDto: UpdateProductDto,\n  ): Promise {\n    return this.productService.update(id, updateProductDto);\n  }\n\n  /** Deletes product from database, only for admins */\n  @ApiOperation({ summary: 'Admin deletes product' })\n  @ApiBearerAuth()\n  @IsAdmin()\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  remove(@Param('id') id: string): Promise {\n    return this.productService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductModule.html":{"url":"modules/ProductModule.html","title":"module - ProductModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_imports\n\n\n\ncluster_ProductModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nPrismaModule->ProductModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/product/product.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductService } from './product.service';\nimport { ProductController } from './product.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { multerUploadConfig } from 'src/config/multer-upload.config';\n\n@Module({\n  controllers: [ProductController],\n  imports: [PrismaModule, MulterModule.register(multerUploadConfig)],\n  providers: [ProductService],\n})\nexport class ProductModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductNameInUseException.html":{"url":"classes/ProductNameInUseException.html","title":"class - ProductNameInUseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductNameInUseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/product/product-name-in-use.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\na product name that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/product/product-name-in-use.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'Product name already in use'. Used when the user inputs\na product name that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * a product name that is already registered in the system\n */\nexport class ProductNameInUseException extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'Product name already in use'. Used when the user inputs\n   * a product name that is already registered in the system\n   */\n  constructor() {\n    super('Product name already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductNotFoundException.html":{"url":"classes/ProductNotFoundException.html","title":"class - ProductNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/product/product-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\na product that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/product/product-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'Product not found'. Used when the user inputs\na product that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * a product that is not registered in the system\n */\nexport class ProductNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'Product not found'. Used when the user inputs\n   * a product that is not registered in the system\n   */\n  constructor() {\n    super('Product not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductService.html":{"url":"injectables/ProductService.html","title":"injectable - ProductService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/product.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing products in the database.\nCRUD endpoints are available for products.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUrlName\n                            \n                            \n                                    Private\n                                formatUrlName\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Private\n                                updateProductAndUrlName\n                            \n                            \n                                    Async\n                                uploadPicture\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/product/product.service.ts:12\n                            \n                        \n\n                \n                    \n                            Responsible for managing users in the database.\nCRUD endpoints are available for users.\nInstantiates the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createProductDto: CreateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:21\n                \n            \n\n\n            \n                \n                    Creates a new product\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: FindAllProductsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:43\n                \n            \n\n\n            \n                \n                    Returns all products with pagination\nDefault is starting on page 1 showing 10 results per page\nand ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindAllProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:61\n                \n            \n\n\n            \n                \n                    Find product by ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUrlName(urlName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:69\n                \n            \n\n\n            \n                \n                    Find product by Url Name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    urlName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        formatUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    formatUrlName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:104\n                \n            \n\n\n            \n                \n                    Formats the name to generate an urlName.\nMakes the name lower case, remove leading and trailing white spaces,\nturn to single the multiple spaces between words and make\nsingle spaces hyphens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            &quot; BraNd1    chAir   &quot; becomes &quot;brand1-chair&quot;\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:92\n                \n            \n\n\n            \n                \n                    Removes product from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:77\n                \n            \n\n\n            \n                \n                    Updates product information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        updateProductAndUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProductAndUrlName(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:117\n                \n            \n\n\n            \n                \n                    Formats UrlName and updates the product with the new one.\nUsed when the user updates the product name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPicture\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPicture(id: string, file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:32\n                \n            \n\n\n            \n                \n                    Uploads new product picture\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { FindAllProductsDto } from './dto/find-all-products.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { Product } from './entities/product.entity';\n\n/** Responsible for managing products in the database.\n * CRUD endpoints are available for products.\n */\n@Injectable()\nexport class ProductService {\n  /** Responsible for managing users in the database.\n   * CRUD endpoints are available for users.\n   *\n   * Instantiates the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new product */\n  async create(createProductDto: CreateProductDto): Promise {\n    const urlName = this.formatUrlName(createProductDto.name);\n\n    const product = await this.prisma.product.create({\n      data: { ...createProductDto, urlName },\n    });\n\n    return product;\n  }\n\n  /** Uploads new product picture */\n  async uploadPicture(id: string, file: Express.Multer.File): Promise {\n    return this.prisma.product.update({\n      where: { id },\n      data: { picture: file.filename },\n    });\n  }\n\n  /** Returns all products with pagination\n   * Default is starting on page 1 showing 10 results per page\n   * and ordering by name\n   */\n  async findAll({\n    searchName = '',\n    page = 1,\n    offset = 10,\n  }: FindAllProductsDto): Promise {\n    const productsToSkip = (page - 1) * offset;\n\n    return this.prisma.product.findMany({\n      skip: productsToSkip,\n      take: offset,\n      where: {\n        name: { contains: searchName, mode: 'insensitive' },\n      },\n      orderBy: { name: 'asc' },\n    });\n  }\n\n  /** Find product by ID */\n  async findOneById(id: string): Promise {\n    return this.prisma.product.findUnique({\n      where: { id },\n      rejectOnNotFound: true,\n    });\n  }\n\n  /** Find product by Url Name */\n  async findOneByUrlName(urlName: string): Promise {\n    return this.prisma.product.findUnique({\n      where: { urlName },\n      rejectOnNotFound: true,\n    });\n  }\n\n  /** Updates product information */\n  async update(\n    id: string,\n    updateProductDto: UpdateProductDto,\n  ): Promise {\n    if (updateProductDto.name) {\n      return this.updateProductAndUrlName(id, updateProductDto);\n    }\n\n    return this.prisma.product.update({\n      where: { id },\n      data: { ...updateProductDto },\n    });\n  }\n\n  /** Removes product from database */\n  async remove(id: string): Promise {\n    await this.prisma.product.delete({ where: { id } });\n  }\n\n  /** Formats the name to generate an urlName.\n   *\n   * Makes the name lower case, remove leading and trailing white spaces,\n   * turn to single the multiple spaces between words and make\n   * single spaces hyphens\n   *\n   * @example \" BraNd1    chAir   \" becomes \"brand1-chair\"\n   */\n  private formatUrlName(name: string): string {\n    const lowerCaseUrlName = name.toLocaleLowerCase();\n    const trimmedUrlName = lowerCaseUrlName.trim();\n    const singleSpaceUrlName = trimmedUrlName.replace(/\\s\\s+/g, ' ');\n    const spaceToHyphenUrlName = singleSpaceUrlName.split(' ').join('-');\n\n    return spaceToHyphenUrlName;\n  }\n\n  /** Formats UrlName and updates the product with the new one.\n   *\n   * Used when the user updates the product name.\n   */\n  private updateProductAndUrlName(\n    id: string,\n    updateProductDto: UpdateProductDto,\n  ): Promise {\n    const urlName = this.formatUrlName(updateProductDto.name);\n\n    return this.prisma.product.update({\n      where: { id },\n      data: { ...updateProductDto, urlName },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductServiceInputException.html":{"url":"classes/ProductServiceInputException.html","title":"class - ProductServiceInputException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductServiceInputException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/exceptions/product-service-input.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to extend another exception to make it\ninstanceof ProductServiceInputException\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/product/exceptions/product-service-input.exception.ts:5\n                            \n                        \n\n                \n                    \n                            Used to extend another exception to make it\ninstanceof ProductServiceInputException\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ProductServiceInputException extends Error {\n  /**\n   * Used to extend another exception to make it\n   * instanceof ProductServiceInputException\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/roles.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Checks if the user accessing the route is an admin\nFor more on NestJs Guards: https://docs.nestjs.com/guards\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/roles.guard.ts:12\n                            \n                        \n\n                \n                    \n                            Checks if the user accessing the route is an admin\nFor more on NestJs Guards: https://docs.nestjs.com/guards\nInstantiates the class and the Reflector dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guards/roles.guard.ts:22\n                \n            \n\n\n            \n                \n                    If the user is an Admin, access is allowed\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '@prisma/client';\nimport { Observable } from 'rxjs';\nimport { IS_ADMIN_KEY } from '../decorators/is-admin.decorator';\n\n/** Checks if the user accessing the route is an admin\n *\n * For more on NestJs Guards: https://docs.nestjs.com/guards\n */\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  /** Checks if the user accessing the route is an admin\n   *\n   * For more on NestJs Guards: https://docs.nestjs.com/guards\n   *\n   * Instantiates the class and the Reflector dependency\n   */\n  constructor(private reflector: Reflector) {}\n\n  /** If the user is an Admin, access is allowed */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const isAdmin = this.reflector.getAllAndOverride(IS_ADMIN_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    const request = context.switchToHttp().getRequest();\n    const { userRole } = request.user;\n\n    if (isAdmin && userRole === Role.ADMIN) {\n      return true;\n    }\n\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/update-product.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the Product fields that are updatable\nNote that since this is a\nPartial of CreateProductDto,\nany field there is optional here\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateProductDto } from './create-product.dto';\n\n/** Describes the Product fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateProductDto,\n * any field there is optional here\n */\nexport class UpdateProductDto extends PartialType(CreateProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the User fields that are updatable\nNote that since this is a\nPartial of CreateUserDto,\nany field there is optional here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                currentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user.dto.ts:19\n                        \n                    \n\n            \n                \n                    User current password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\n\n/** Describes the User fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateUserDto,\n * any field there is optional here\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n  /**\n   * User current password\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  currentPassword?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserRoleDto.html":{"url":"classes/UpdateUserRoleDto.html","title":"class - UpdateUserRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/update-user-role.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to update an User role\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user-role.dto.ts:11\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user-role.dto.ts:18\n                        \n                    \n\n            \n                \n                    User new role\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Role } from '@prisma/client';\nimport { IsEmail, IsEnum } from 'class-validator';\n\n/** Describes the information needed to update an User role */\nexport class UpdateUserRoleDto {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsEmail()\n  email: string;\n\n  /**\n   * User new role\n   * @example \"ADMIN\"\n   */\n  @IsEnum(Role)\n  role: Role;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of an User in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                role\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:43\n                        \n                    \n\n            \n                \n                    User address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:49\n                        \n                    \n\n            \n                \n                    User createdAt dateString\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:25\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:9\n                        \n                    \n\n            \n                \n                    User ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:37\n                        \n                    \n\n            \n                \n                    User name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:31\n                        \n                    \n\n            \n                \n                    User password\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:19\n                        \n                    \n\n            \n                \n                    User's Role.\nCan be \"USER\" or \"ADMIN\".\nAdmin users can handle products\nDefaults to \"USER\"\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:55\n                        \n                    \n\n            \n                \n                    User updatedAt dateString\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma, Role } from '@prisma/client';\n\n/** Describes the properties of an User in the database */\nexport class User implements Prisma.UserUncheckedCreateInput {\n  /**\n   * User ID as UUID\n   * @example \"d31fc56c-7aed-441e-9f7f-151be8d85634\"\n   */\n  id?: string;\n\n  /**\n   * User's Role.\n   * Can be \"USER\" or \"ADMIN\".\n   * Admin users can handle products\n   *\n   * Defaults to \"USER\"\n   * @example \"USER\"\n   */\n  role?: Role;\n\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  email: string;\n\n  /**\n   * User password\n   * @example \"$2b$10$1XpzUYu8FuvuaBb3SC0xzuR9DX7KakbMLt0vLNoZ.UnLntDMFc4LK\"\n   */\n  password: string;\n\n  /**\n   * User name\n   * @example \"John Doe\"\n   */\n  name?: string;\n\n  /**\n   * User address\n   * @example \"World Street 0\"\n   */\n  address?: string;\n\n  /**\n   * User createdAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  createdAt?: string | Date;\n\n  /**\n   * User updatedAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  updatedAt?: string | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                Exposes user CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                updateUserRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@ApiOperation({summary: 'Creates a new user'})@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:37\n                \n            \n\n\n            \n                \n                    Creates a new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Gets user's own profile'})@ApiBearerAuth()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:45\n                \n            \n\n\n            \n                \n                    Returns user's own profile information without password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(request: Request, deleteUserDto: DeleteUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes user'})@ApiBearerAuth()@Delete()@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:80\n                \n            \n\n\n            \n                \n                    Deletes user and all user related information from the system\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    deleteUserDto\n                                    \n                                                DeleteUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(request: Request, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates user'})@ApiBearerAuth()@Patch()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:55\n                \n            \n\n\n            \n                \n                    Updates user information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserRole\n                        \n                    \n                \n            \n            \n                \nupdateUserRole(updateUserRoleDto: UpdateUserRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin set user's role'})@ApiBearerAuth()@IsAdmin()@Patch('role')\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:69\n                \n            \n\n\n            \n                \n                    Updates user role, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserRoleDto\n                                    \n                                                UpdateUserRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Patch,\n  Post,\n  Req,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { Public } from 'src/auth/public.decorator';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { DeleteUserDto } from './dto/delete-user.dto';\nimport { UpdateUserRoleDto } from './dto/update-user-role.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserWithoutPassword } from './entities/user-without-password.entity';\nimport { UserService } from './user.service';\n\n/** Exposes user CRUD endpoints */\n@ApiTags('user')\n@Controller('user')\nexport class UserController {\n  /** Exposes user CRUD endpoints\n   *\n   * Instantiate class and UserService dependency\n   */\n  constructor(private readonly userService: UserService) {}\n\n  /** Creates a new user */\n  @Public()\n  @ApiOperation({ summary: 'Creates a new user' })\n  @Post()\n  create(@Body() createUserDto: CreateUserDto): Promise {\n    return this.userService.create(createUserDto);\n  }\n\n  /** Returns user's own profile information without password */\n  @ApiOperation({ summary: \"Gets user's own profile\" })\n  @ApiBearerAuth()\n  @Get()\n  async findById(@Req() request: Request): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.findById(userId);\n  }\n\n  /** Updates user information */\n  @ApiOperation({ summary: 'Updates user' })\n  @ApiBearerAuth()\n  @Patch()\n  update(\n    @Req() request: Request,\n    @Body() updateUserDto: UpdateUserDto,\n  ): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.update(userId, updateUserDto);\n  }\n\n  /** Updates user role, only for admins */\n  @ApiOperation({ summary: \"Admin set user's role\" })\n  @ApiBearerAuth()\n  @IsAdmin()\n  @Patch('role')\n  updateUserRole(\n    @Body() updateUserRoleDto: UpdateUserRoleDto,\n  ): Promise {\n    return this.userService.updateUserRole(updateUserRoleDto);\n  }\n\n  /** Deletes user and all user related information from the system */\n  @ApiOperation({ summary: 'Deletes user' })\n  @ApiBearerAuth()\n  @Delete()\n  @HttpCode(HttpStatus.NO_CONTENT)\n  remove(\n    @Req() request: Request,\n    @Body() deleteUserDto: DeleteUserDto,\n  ): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.remove(userId, deleteUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserInputExceptionHandler.html":{"url":"classes/UserInputExceptionHandler.html","title":"class - UserInputExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserInputExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/user-input-exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Catches user input errors and throws the\nrespective HTTP error\n\n            \n\n\n            \n                Implements\n            \n            \n                            ExceptionHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/user-input-exception.handler.ts:13\n                \n            \n\n\n            \n                \n                    Catches user input errors and throws the\nrespective HTTP error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\nimport { ProductServiceInputException } from 'src/models/product/exceptions/product-service-input.exception';\nimport { UserServiceInputException } from 'src/models/user/exceptions/user-service-input.exception';\nimport { ExceptionHandler } from './exception.handler';\n\n/** Catches user input errors and throws the\n * respective HTTP error\n */\nexport class UserInputExceptionHandler implements ExceptionHandler {\n  /** Catches user input errors and throws the\n   * respective HTTP error\n   */\n  handle(error: Error): void {\n    if (error instanceof UserServiceInputException) {\n      throw new BadRequestException(error.message);\n    }\n\n    if (error instanceof ProductServiceInputException) {\n      throw new BadRequestException(error.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  controllers: [UserController],\n  providers: [UserService],\n  imports: [PrismaModule],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotFoundException.html":{"url":"classes/UserNotFoundException.html","title":"class - UserNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/user/user-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\nan user email or id that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/user/user-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'User not found'. Used when the user inputs an user\nemail or id that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * an user email or id that is not registered in the system\n */\nexport class UserNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'User not found'. Used when the user inputs an user\n   * email or id that is not registered in the system\n   */\n  constructor() {\n    super('User not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing users in the database.\nCRUD endpoints are available for users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Private\n                                    Async\n                                hashIfUpdatingPassword\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateUserRole\n                            \n                            \n                                    Private\n                                    Async\n                                validateCurrentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/user/user.service.ts:17\n                            \n                        \n\n                \n                    \n                            Responsible for managing users in the database.\nCRUD endpoints are available for users.\nInstantiate the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:26\n                \n            \n\n\n            \n                \n                    Creates a new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:56\n                \n            \n\n\n            \n                \n                    Finds user by email and returns the user with password.\nUsed mainly in login to compare if the inputted password matches\nthe hashed one.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:44\n                \n            \n\n\n            \n                \n                    Finds user by id and returns the user without password.\nUsed for default in app requests where the hashed password\nwon't be compared\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        hashIfUpdatingPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashIfUpdatingPassword(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:107\n                \n            \n\n\n            \n                \n                    If the user inputted both new password and current password\nthe new password is hashed to be saved in the database replacing\nthe current one.\nIf only the new password or current password were inputted the user\nprobably forgot about the other one and an error is thrown\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string, deleteUserDto: DeleteUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:94\n                \n            \n\n\n            \n                \n                    Removes user from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    deleteUserDto\n                                    \n                                                DeleteUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:63\n                \n            \n\n\n            \n                \n                    Updates user information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserRole(updateUserRoleDto: UpdateUserRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:80\n                \n            \n\n\n            \n                \n                    Updates user role\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserRoleDto\n                                    \n                                                UpdateUserRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateCurrentPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateCurrentPassword(id: string, currentPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:132\n                \n            \n\n\n            \n                \n                    Compares if the inputted current password matches the\nuser hashed password saved in the database\nIf it doesn't, an error is thrown\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { compare, hash } from 'bcrypt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { DeleteUserDto } from './dto/delete-user.dto';\nimport { UpdateUserRoleDto } from './dto/update-user-role.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserWithoutPassword } from './entities/user-without-password.entity';\nimport { User } from './entities/user.entity';\nimport { InvalidPasswordUpdateException } from './exceptions/invalid-password-update.exception';\nimport { MissingPasswordUpdateException } from './exceptions/missing-password-update.exception';\n\n/** Responsible for managing users in the database.\n * CRUD endpoints are available for users.\n */\n@Injectable()\nexport class UserService {\n  /** Responsible for managing users in the database.\n   * CRUD endpoints are available for users.\n   *\n   * Instantiate the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new user */\n  async create(createUserDto: CreateUserDto): Promise {\n    const hashedPassword = await hash(createUserDto.password, 10);\n\n    const lowerCaseEmail = createUserDto.email.toLowerCase();\n\n    await this.prisma.user.create({\n      data: {\n        ...createUserDto,\n        email: lowerCaseEmail,\n        password: hashedPassword,\n      },\n    });\n  }\n\n  /** Finds user by id and returns the user without password.\n   * Used for default in app requests where the hashed password\n   * won't be compared\n   */\n  async findById(id: string): Promise {\n    const user = await this.prisma.user.findUnique({ where: { id } });\n\n    delete user.password;\n\n    return { ...user };\n  }\n\n  /** Finds user by email and returns the user with password.\n   * Used mainly in login to compare if the inputted password matches\n   * the hashed one.\n   */\n  async findByEmail(email: string): Promise {\n    const lowerCaseEmail = email.toLowerCase();\n\n    return this.prisma.user.findUnique({ where: { email: lowerCaseEmail } });\n  }\n\n  /** Updates user information */\n  async update(\n    id: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    await this.hashIfUpdatingPassword(id, updateUserDto);\n\n    const user = await this.prisma.user.update({\n      where: { id },\n      data: { ...updateUserDto, updatedAt: new Date() },\n    });\n\n    delete user.password;\n\n    return { ...user };\n  }\n\n  /** Updates user role */\n  async updateUserRole(\n    updateUserRoleDto: UpdateUserRoleDto,\n  ): Promise {\n    const user = await this.prisma.user.update({\n      where: { email: updateUserRoleDto.email },\n      data: { role: updateUserRoleDto.role },\n    });\n\n    delete user.password;\n\n    return user;\n  }\n\n  /** Removes user from database */\n  async remove(id: string, deleteUserDto: DeleteUserDto): Promise {\n    await this.validateCurrentPassword(id, deleteUserDto.currentPassword);\n\n    await this.prisma.user.delete({ where: { id } });\n  }\n\n  /** If the user inputted both new password and current password\n   * the new password is hashed to be saved in the database replacing\n   * the current one.\n   *\n   * If only the new password or current password were inputted the user\n   * probably forgot about the other one and an error is thrown\n   */\n  private async hashIfUpdatingPassword(\n    id: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    if (updateUserDto.password && updateUserDto.currentPassword) {\n      await this.validateCurrentPassword(id, updateUserDto.currentPassword);\n\n      const hashedPassword = await hash(updateUserDto.password, 10);\n\n      updateUserDto.password = hashedPassword;\n      delete updateUserDto.currentPassword;\n\n      return;\n    }\n\n    if (updateUserDto.password || updateUserDto.currentPassword) {\n      throw new MissingPasswordUpdateException();\n    }\n  }\n\n  /** Compares if the inputted current password matches the\n   * user hashed password saved in the database\n   *\n   * If it doesn't, an error is thrown\n   */\n  private async validateCurrentPassword(\n    id: string,\n    currentPassword: string,\n  ): Promise {\n    const user = await this.prisma.user.findUnique({ where: { id } });\n\n    const isCorrectPassword = await compare(currentPassword, user.password);\n\n    if (!isCorrectPassword) {\n      throw new InvalidPasswordUpdateException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserServiceInputException.html":{"url":"classes/UserServiceInputException.html","title":"class - UserServiceInputException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserServiceInputException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/exceptions/user-service-input.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to extend another exception to make it\ninstanceof UserServiceInputException\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/user/exceptions/user-service-input.exception.ts:5\n                            \n                        \n\n                \n                    \n                            Used to extend another exception to make it\ninstanceof UserServiceInputException\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserServiceInputException extends Error {\n  /**\n   * Used to extend another exception to make it\n   * instanceof UserServiceInputException\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserWithoutPassword.html":{"url":"classes/UserWithoutPassword.html","title":"class - UserWithoutPassword","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserWithoutPassword\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/entities/user-without-password.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This entity is the same as\nUser\nbut omitting the password field\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { User } from './user.entity';\n\n/** This entity is the same as\n * User\n * but omitting the password field\n */\nexport class UserWithoutPassword extends OmitType(User, [\n  'password',\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidateReturn.html":{"url":"interfaces/ValidateReturn.html","title":"interface - ValidateReturn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidateReturn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                What is returned to the application after JsonWebToken is validated\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                                \n                                        \n                                            userRole\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User ID\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userRole\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userRole:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User role\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { jwtConfig } from 'src/config/jwt.config';\n\n/** Decrypted JsonWebToken content */\ninterface Payload {\n  /** Token subject, user ID used\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  sub: string;\n\n  /** User role\n   * @example \"user\"\n   */\n  role: string;\n}\n\n/** What is returned to the application after JsonWebToken is validated */\ninterface ValidateReturn {\n  /** User ID\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  userId: string;\n\n  /** User role\n   * @example \"user\"\n   */\n  userRole: string;\n}\n\n/** Passport library JsonWebToken configuration */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /** Passport library JsonWebToken configuration */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConfig.secret,\n    });\n  }\n\n  /** Validates and returns data after JsonWebToken is decrypted */\n  async validate(payload: Payload): Promise {\n    return {\n      userId: payload.sub,\n      userRole: payload.role,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/dto/login-credentials.dto.ts\n            \n            class\n            LoginCredentialsDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login.response.ts\n            \n            class\n            LoginResponse\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/errors/invalid-email-or-password.error..ts\n            \n            class\n            InvalidEmailOrPasswordError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            Payload\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            ValidateReturn\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/is-admin.decorator.ts\n            \n            function\n            IsAdmin\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/is-admin.decorator.ts\n            \n            variable\n            IS_ADMIN_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/exceptions/product/product-name-in-use.exception.ts\n            \n            class\n            ProductNameInUseException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/product/product-not-found.exception.ts\n            \n            class\n            ProductNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/user/email-in-use.exception.ts\n            \n            class\n            EmailInUseException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/user/user-not-found.exception.ts\n            \n            class\n            UserNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/exception.interceptor.ts\n            \n            injectable\n            ExceptionInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/exception.handler.ts\n            \n            interface\n            ExceptionHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/prisma-exception.handler.ts\n            \n            class\n            PrismaExceptionHandler\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/user-input-exception.handler.ts\n            \n            class\n            UserInputExceptionHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            jwtConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer-upload.config.ts\n            \n            variable\n            maxImageUploadSize\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer-upload.config.ts\n            \n            variable\n            multerUploadConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer-upload.config.ts\n            \n            variable\n            validImageUploadTypesRegex\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/product/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/models/product/dto/find-all-products.dto.ts\n            \n            class\n            FindAllProductsDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/models/product/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/product/entities/product.entity.ts\n            \n            class\n            Product\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/models/product/exceptions/file-type.exception.ts\n            \n            class\n            FileTypeError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/product/exceptions/product-service-input.exception.ts\n            \n            class\n            ProductServiceInputException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/product/product.controller.ts\n            \n            controller\n            ProductController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/models/product/product.service.ts\n            \n            injectable\n            ProductService\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/models/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/models/user/dto/delete-user.dto.ts\n            \n            class\n            DeleteUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/dto/update-user-role.dto.ts\n            \n            class\n            UpdateUserRoleDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/models/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/entities/user-without-password.entity.ts\n            \n            class\n            UserWithoutPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/models/user/exceptions/invalid-password-update.exception.ts\n            \n            class\n            InvalidPasswordUpdateException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/exceptions/missing-password-update.exception.ts\n            \n            class\n            MissingPasswordUpdateException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/exceptions/user-service-input.exception.ts\n            \n            class\n            UserServiceInputException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/models/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                100 %\n                (3/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.4.4\n        \n            @nestjs/core : ^8.4.4\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.4.4\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @prisma/client : 3.12.0\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            prisma-error-enum : ^0.1.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            IsAdmin   (src/.../is-admin.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Starts the application\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    src/common/decorators/is-admin.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsAdmin\n                        \n                    \n                \n            \n            \n                \nIsAdmin()\n                \n            \n\n\n\n\n            \n                \n                    Makes an endpoint accessible only by admin users\nExample: Create, update and remove products\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nE-Commerce Backend\nAPI com endpoints para criação de usuários, produtos, compras e avaliações com autenticação e autorização\n🔗 Documentação com Compodoc e GitHub Pages\n\n\n  \n  \n  \n  \n\n\n📑 Índice\n\n\n📌 Features\n🔧 Instalação\n💻 Tecnologias\n📄 Licença\n\n📌 Features\n\n CRUD de usuários\n Autenticação de usuário\n Autorização de usuário (admin)\n CRUD de produtos\n Upload de imagens\n\n\n CRUD de categorias\n CRUD de compras\n\n🔧 Instalação\n\nVocê precisará ter o Node.js instalado\n\nInstalação\n\n\n  # Clona o projeto para sua máquina\n  git clone https://github.com/alvaromrveiga/ecommerce-backend\n\n  # Entra na pasta do projeto\n  cd ecommerce-backend\n\n  # Instala as dependências\n  yarn\nCrie um arquivo .env na raiz do projeto preenchendo as informações descritas no .env.example\n\nIniciar servidor\n\n\n  # Roda as migrations\n  yarn migrate:dev \n\n  # Inicia o servidor em modo de desenvolvimento\n  yarn start:dev\n\n  # O servidor abrirá na porta 3000. \n  # Você pode acessar a documentação com Swagger em http://localhost:3000/api/\n\n  # Para visualizar o banco de dados\n  yarn prisma studio\nRodar os testes\nCrie um arquivo .env.test na raiz do projeto alterando no mínimo o banco de dados que colocou no .env\nExemplo: postgresql://username:password@localhost:5432/ecommerce-test?schema=public\n\n\n\n\n\n  # Roda as migrations no bando de testes\n  yarn migrate:test \n\n  # Roda todos os testes\n  yarn test:all\n\n  # Roda apenas os testes unitários\n  yarn test\n\n  # Roda apenas os testes de integração\n  yarn test:e2e\n\n  # Para visualizar o banco de dados de testes\n  yarn studio:test💻 Tecnologias\n\nTypescript - minimizar erros e tooling\nNode.js e NestJS com Express - construir o servidor\nPrisma com PostgreSQL - armazenar dados\nPassport e passport-jwt - autenticação com Json Web Token\nClass-validator e class-transformer - validações nos dados de entrada dos endpoints\nBcrypt - hashs de senhas\nPrisma-error-enum - identificar os códigos para tratar as exceções do prisma\nJest, SuperTest e ms - testes\nSwagger UI Express e compodoc - documentação\nESLint e Prettier - linting e formatação de código\n\n📄 Licença\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Álvaro Veiga\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nPrismaModule->ProductModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    24 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : alvaromrveiga\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IS_ADMIN_KEY   (src/.../is-admin.decorator.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            jwtConfig   (src/.../jwt.config.ts)\n                        \n                        \n                            maxImageUploadSize   (src/.../multer-upload.config.ts)\n                        \n                        \n                            multerUploadConfig   (src/.../multer-upload.config.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            validImageUploadTypesRegex   (src/.../multer-upload.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/is-admin.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_ADMIN_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isAdmin'\n                    \n                \n\n            \n                \n                    Value to verify if @IsAdmin() is being used in the endpoint\nConsult RolesGuard\n\n                \n            \n\n        \n    \n\n    src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n            \n                \n                    Value to verify if @Public() is being used in the endpoint\nConsult JwtAuthGuard\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CustomDecorator => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n            \n                \n                    Makes an endpoint accessible by unauthenticated users\nExample: Create user and Login endpoints\n\n                \n            \n\n        \n    \n\n    src/config/jwt.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.JWT_SECRET,\n  signOptions: { expiresIn: '15m' },\n}\n                    \n                \n\n            \n                \n                    Configurations for the jsonwebtoken library used for authentication\n\n                \n            \n\n        \n    \n\n    src/config/multer-upload.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        maxImageUploadSize\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 3 * 1024 * 1024\n                    \n                \n\n            \n                \n                    Constant that sets the maximum image upload file size\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        multerUploadConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MulterOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  storage: diskStorage({\n    destination: './tmp',\n    filename: (request, file, callback) => {\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);\n      const fileName = `${uniqueSuffix}-${file.originalname}`;\n\n      return callback(null, fileName);\n    },\n  }),\n\n  fileFilter: (request, file, callback) => {\n    const mimetype = validImageUploadTypesRegex.test(file.mimetype);\n    const extname = validImageUploadTypesRegex.test(\n      path.extname(file.originalname).toLowerCase(),\n    );\n\n    if (mimetype && extname) {\n      return callback(null, true);\n    }\n\n    return callback(new FileTypeError(validImageUploadTypesRegex), false);\n  },\n\n  limits: {\n    fileSize: maxImageUploadSize,\n  },\n}\n                    \n                \n\n            \n                \n                    Configurations for the multer library used for file upload.\nAccepts types jpeg, jpg and png of size up to 3MB\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validImageUploadTypesRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /jpeg|jpg|png/\n                    \n                \n\n            \n                \n                    Constant containing a Regular Expression\nwith the valid image upload types\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
