var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessJwtAuthGuard.html",[0,1.295,1,2.84]],["body/injectables/AccessJwtAuthGuard.html",[0,1.703,1,3.737,2,1.87,3,0.15,4,0.15,5,0.105,6,4.683,7,3.583,8,3.255,9,0.247,10,6.117,11,4.643,12,5.062,13,6.804,14,5.623,15,5.507,16,5.623,17,5.052,18,5.062,19,4.309,20,5.623,21,5.623,22,0.568,23,1.841,24,5.202,25,1.093,26,3.255,27,6.399,28,0.468,29,3.747,30,3.468,31,0.398,32,2.601,33,1.578,34,0.015,35,1.045,36,0.694,37,0.893,38,3.255,39,5.062,40,3.747,41,3.052,42,5.21,43,5.21,44,4.074,45,1.273,46,4.074,47,1.994,48,4.683,49,0.418,50,0.781,51,2.688,52,2.688,53,2.688,54,2.93,55,3.255,56,0.15,57,0.977,58,3.747,59,1.783,60,3.255,61,1.702,62,4.525,63,3.747,64,3.255,65,3.255,66,1.994,67,2.333,68,3.747,69,0.009,70,0.009]],["title/injectables/AccessJwtStrategy.html",[0,1.295,71,2.636]],["body/injectables/AccessJwtStrategy.html",[0,1.859,2,2.126,3,0.17,4,0.17,5,0.119,6,5.004,7,3.147,9,0.281,11,5.103,12,5.339,22,0.646,23,2.009,25,1.867,28,0.511,31,0.283,33,1.29,34,0.015,35,0.854,36,0.568,37,0.73,45,2.174,47,2.176,49,0.45,50,0.887,52,3.055,56,0.17,57,1.111,60,3.699,66,1.63,69,0.01,70,0.01,71,3.784,72,3.699,73,4.259,74,5.723,75,6.828,76,3.044,77,5.685,78,4.259,79,5.685,80,5.931,81,4.259,82,4.938,83,3.784,84,4.938,85,4.938,86,5.685,87,4.259,88,5.685,89,3.055,90,3.699,91,3.699,92,5.685,93,4.078,94,3.699,95,4.259,96,4.259,97,4.259,98,3.33,99,4.259,100,4.259,101,2.495,102,4.259,103,3.055,104,4.259]],["title/modules/AppModule.html",[105,1.648,106,2.84]],["body/modules/AppModule.html",[1,4.151,3,0.175,4,0.175,5,0.122,7,2.421,31,0.291,34,0.015,49,0.475,50,0.911,51,3.137,56,0.175,69,0.01,70,0.01,105,2.408,106,5.785,107,2.183,108,2.753,109,3.799,110,3.799,111,4.908,112,4.908,113,3.871,114,4.908,115,4.908,116,4.591,117,3.203,118,2.421,119,2.183,120,4.374,121,3.603,122,5.787,123,4.374,124,4.374,125,4.374,126,4.374,127,4.374,128,4.374,129,4.374,130,4.374,131,2.562,132,4.374,133,4.374]],["title/controllers/AuthController.html",[134,1.884,135,2.84]],["body/controllers/AuthController.html",[3,0.181,4,0.181,5,0.126,9,0.298,17,4.24,22,0.685,23,2.089,28,0.406,31,0.3,33,1.369,34,0.015,35,0.906,36,0.602,37,0.775,41,3.463,45,1.535,47,2.263,49,0.457,50,0.941,55,3.925,56,0.181,59,2.15,66,1.73,69,0.01,70,0.01,76,3.135,134,2.812,135,4.24,136,2.15,137,3.925,138,1.399,139,2.812,140,4.386,141,4.519,142,5.013,143,1.535,144,3.008,145,5.912,146,4.519,147,4.519,148,5.912,149,3.935,150,3.008,151,3.008,152,3.008,153,3.935,154,3.008,155,1.802,156,4.102,157,3.925,158,4.519,159,4.519,160,3.241,161,4.519,162,4.519,163,2.256,164,3.008,165,4.519,166,4.519,167,1.963,168,2.46,169,4.519]],["title/modules/AuthModule.html",[105,1.648,111,2.636]],["body/modules/AuthModule.html",[3,0.192,4,0.192,5,0.134,31,0.32,34,0.015,49,0.473,50,1.002,52,3.452,56,0.192,69,0.011,70,0.011,71,5.037,73,3.203,105,2.562,107,2.402,108,2.929,111,5.279,116,4.712,117,3.408,118,2.664,119,2.402,121,3.834,131,3.607,135,4.87,136,2.929,156,4.712,157,4.18,170,4.18,171,4.18,172,4.813,173,4.813,174,4.813,175,3.763,176,6.158,177,4.813,178,4.813,179,4.813,180,4.813]],["title/injectables/AuthService.html",[0,1.295,156,2.465]],["body/injectables/AuthService.html",[0,1.519,2,1.592,3,0.127,4,0.127,5,0.089,7,2.571,9,0.21,22,0.484,23,1.641,25,1.355,28,0.492,31,0.364,33,1.66,34,0.015,35,1.099,36,0.73,37,0.939,45,2.045,47,2.304,49,0.423,50,0.664,56,0.127,61,2.734,66,1.778,69,0.008,70,0.008,76,3.177,82,5.228,85,2.77,89,3.332,90,2.77,108,2.21,138,1.39,140,3.647,156,2.892,163,2.319,167,3.069,168,3.119,175,2.494,181,2.77,182,3.747,183,6.019,184,4.258,185,4.645,186,3.189,187,4.137,188,7.203,189,3.189,190,2.892,191,3.189,192,1.684,193,3.189,194,6.135,195,6.019,196,5.228,197,5.228,198,4.706,199,4.317,200,4.759,201,4.645,202,3.189,203,1.778,204,2.21,205,2.77,206,2.287,207,3.189,208,3.189,209,3.332,210,3.189,211,3.189,212,3.411,213,3.189,214,3.189,215,3.189,216,1.868,217,3.189,218,3.189,219,3.189,220,4.645,221,3.189,222,2.77,223,2.77,224,1.986,225,1.221]],["title/classes/Category.html",[31,0.263,226,1.72]],["body/classes/Category.html",[3,0.2,4,0.2,5,0.14,9,0.33,22,0.759,28,0.567,31,0.333,34,0.015,35,1.501,36,0.841,37,1.082,49,0.307,56,0.2,69,0.011,70,0.011,192,1.631,226,3.411,227,0.759,228,4.344,229,1.986,230,2.374,231,2.867,232,3.002,233,2.986,234,5.002,235,4.2,236,5.002,237,2.272,238,2.497,239,5.002,240,1.986,241,5.002,242,5.002,243,5.002,244,5.002,245,5.002,246,4.344]],["title/controllers/CategoryController.html",[134,1.884,247,2.84]],["body/controllers/CategoryController.html",[3,0.094,4,0.094,5,0.066,9,0.155,22,0.357,23,1.304,28,0.534,31,0.245,32,1.175,33,1.8,34,0.015,35,1.442,36,0.792,37,1.019,41,2.667,45,2.382,47,2.683,49,0.416,50,0.49,56,0.094,59,1.12,66,2.274,69,0.009,70,0.007,76,3.547,134,1.12,136,1.12,139,2.166,143,2.019,144,3.954,149,3.03,150,1.566,151,1.566,152,2.456,153,4.134,154,1.566,155,0.939,163,1.175,164,3.954,190,1.465,192,1.575,225,1.973,226,3.316,231,1.676,233,2.699,247,2.647,248,2.044,249,1.688,250,3.265,251,2.39,252,1.488,253,2.834,254,3.265,255,3.954,256,1.937,257,2.068,258,2.044,259,3.699,260,3.376,261,2.853,262,2.353,263,2.353,264,4.28,265,2.353,266,3.954,267,2.353,268,2.353,269,3.03,270,2.298,271,1.842,272,2.298,273,2.706,274,1.535,275,2.298,276,1.676,277,1.756,278,3.205,279,2.298,280,1.688,281,4.259,282,2.647,283,2.353,284,2.353,285,3.209,286,2.044,287,2.353,288,2.353,289,1.378,290,3.697,291,2.353,292,2.353,293,1.378,294,4.28,295,2.853,296,2.353,297,2.353,298,1.472,299,1.688,300,1.84,301,1.378,302,3.431,303,1.84,304,3.099,305,1.378,306,1.566,307,2.044,308,1.688,309,3.209,310,2.044,311,1.303,312,2.886,313,1.465,314,2.044,315,1.303,316,1.84,317,2.353,318,2.353,319,2.353,320,2.353,321,2.043,322,2.044,323,2.886,324,2.353,325,2.353,326,2.353,327,2.353,328,1.84,329,2.353,330,1.84,331,1.688,332,1.84,333,2.353]],["title/modules/CategoryModule.html",[105,1.648,112,2.636]],["body/modules/CategoryModule.html",[3,0.207,4,0.207,5,0.144,31,0.344,34,0.014,49,0.452,50,1.078,56,0.207,69,0.011,70,0.011,105,2.683,107,2.584,108,3.067,112,5.261,113,4.047,117,3.569,118,2.866,119,2.584,121,4.014,131,3.777,136,3.067,247,5.037,309,4.8,310,4.496,334,4.496,335,4.496,336,5.177,337,5.177,338,5.177,339,3.713]],["title/classes/CategoryNameInUseException.html",[31,0.263,340,2.84]],["body/classes/CategoryNameInUseException.html",[3,0.188,4,0.188,5,0.131,9,0.311,25,1.961,28,0.423,31,0.313,34,0.014,35,1.571,49,0.289,50,0.981,56,0.188,57,1.584,69,0.011,70,0.011,138,1.37,203,2.718,226,3.269,227,0.714,340,4.356,341,4.356,342,3.378,343,3.378,344,3.931,345,5.552,346,2.413,347,3.378,348,5.986,349,3.931,350,3.727,351,4.821,352,3.683,353,2.325,354,4.821,355,4.091]],["title/classes/CategoryNotFoundException.html",[31,0.263,356,2.84]],["body/classes/CategoryNotFoundException.html",[3,0.197,4,0.197,5,0.137,9,0.324,25,2.002,28,0.442,31,0.327,34,0.014,49,0.302,50,1.025,56,0.197,57,1.629,69,0.011,70,0.011,138,1.392,203,2.762,226,3.307,227,0.746,341,4.479,343,3.433,344,3.994,346,2.452,347,3.433,349,3.994,350,3.788,353,2.39,355,4.272,356,4.479,357,3.274,358,5.176,359,4.566,360,3.528,361,4.271]],["title/injectables/CategoryService.html",[0,1.295,309,2.465]],["body/injectables/CategoryService.html",[0,0.989,2,0.917,3,0.073,4,0.073,5,0.051,9,0.121,22,0.279,23,1.069,25,0.536,28,0.546,30,2.013,31,0.256,32,1.51,33,1.842,34,0.015,35,1.556,36,0.81,37,1.043,45,2.127,47,2.595,49,0.345,50,0.383,56,0.073,59,0.874,61,2.762,66,2.246,67,3.898,69,0.008,70,0.005,76,3.38,83,2.566,138,0.584,139,2.126,163,0.917,182,2.782,184,3.537,192,1.624,199,2.17,212,3.075,223,2.627,225,1.71,226,3.298,231,2.414,233,2.742,237,1.374,251,2.345,252,0.989,253,2.4,254,2.765,255,3.348,256,1.588,257,1.751,258,2.627,259,3.308,261,1.674,266,2.974,269,4.167,270,1.883,271,1.51,272,1.883,273,3.286,274,2.442,275,1.883,276,2.244,277,1.439,279,1.883,280,1.318,281,3.29,285,2.782,286,1.596,289,1.772,293,1.076,294,4.632,295,2.941,298,1.207,307,1.596,308,1.318,309,1.883,311,1.017,312,2.365,313,1.144,314,1.596,315,1.017,316,1.437,321,2.941,346,1.028,362,1.596,363,3.205,364,3.205,365,3.025,366,3.855,367,1.318,368,2.789,369,1.838,370,3.025,371,1.838,372,3.025,373,2.627,374,2.627,375,1.838,376,1.437,377,1.838,378,2.17,379,1.838,380,3.205,381,1.838,382,1.838,383,2.17,384,1.838,385,1.838,386,1.838,387,2.627,388,1.318,389,1.838,390,1.838,391,2.627,392,3.785,393,3.025,394,1.838,395,3.014,396,3.014,397,3.014,398,3.348,399,3.348,400,1.437,401,1.596,402,3.494,403,3.881,404,3.025,405,2.365,406,2.365,407,1.883,408,1.674,409,2.365,410,1.838,411,1.838,412,1.838,413,3.025,414,1.838,415,1.838,416,1.838,417,1.838]],["title/classes/CreateCategoryDto.html",[31,0.263,259,2.465]],["body/classes/CreateCategoryDto.html",[3,0.206,4,0.206,5,0.144,9,0.339,22,0.781,28,0.462,31,0.427,34,0.015,35,1.514,36,0.686,49,0.395,56,0.206,69,0.011,70,0.011,143,1.749,192,1.443,226,3.393,227,0.781,229,2.022,230,2.1,232,3.056,240,1.619,246,4.47,252,2.1,259,4,316,4.024,418,5.58,419,4.024,420,3.207,421,3.207,422,4.024,423,5.147,424,4.276,425,3.207,426,2.141]],["title/classes/CreateProductDto.html",[31,0.263,427,2.465]],["body/classes/CreateProductDto.html",[3,0.13,4,0.13,5,0.091,9,0.444,22,0.494,28,0.604,31,0.314,34,0.015,35,1.294,36,0.897,37,1.218,49,0.374,56,0.13,57,0.85,61,1.481,69,0.008,70,0.008,143,2.286,155,1.3,192,1.596,226,2.05,227,0.494,229,1.485,230,1.543,233,1.3,240,2.117,252,1.543,269,3.692,276,1.481,407,2.029,408,1.804,420,2.355,421,2.355,422,2.549,424,3.692,425,2.769,426,1.356,427,2.938,428,6.027,429,2.549,430,2.484,431,4.818,432,4.818,433,5.605,434,3.531,435,4.628,436,3.26,437,3.26,438,3.385,439,4.099,440,4.099,441,3.141,442,3.385,443,3.385,444,3.385,445,3.26,446,3.26,447,4.099,448,2.549,449,3.26,450,3.26,451,3.26,452,4.099,453,4.099,454,4.047,455,4.361,456,3.26,457,3.26,458,3.26,459,2.764,460,2.549,461,2.549,462,4.719,463,3.141,464,4.818,465,3.572,466,2.549,467,3.26,468,2.029,469,2.831,470,4.099,471,3.385,472,2.831,473,2.831,474,2.831,475,3.26,476,3.26,477,3.26,478,3.26,479,3.26,480,3.26,481,3.26,482,3.26,483,3.26,484,3.26]],["title/classes/CreatePurchaseDto.html",[31,0.263,485,2.465]],["body/classes/CreatePurchaseDto.html",[3,0.157,4,0.157,5,0.11,9,0.259,22,0.596,28,0.552,31,0.358,34,0.015,36,0.818,37,0.923,49,0.406,56,0.157,57,1.025,69,0.01,70,0.01,101,2.302,143,2.087,155,1.567,192,1.484,227,0.596,229,1.694,230,1.76,233,2.45,235,3.583,240,1.932,252,1.76,274,2.24,277,2.561,420,2.687,421,2.687,426,1.635,430,2.337,434,3.468,435,4.964,438,3.861,441,3.583,442,3.861,443,3.861,444,3.861,454,3.583,459,4.287,460,3.073,461,3.073,464,5.334,465,2.98,468,2.446,485,3.352,486,5.738,487,2.818,488,2.922,489,4.088,490,5.334,491,3.93,492,3.93,493,3.861,494,5.384,495,3.93,496,3.93,497,3.93,498,4.676,499,4.676,500,4.405,501,3.93,502,2.818,503,3.93,504,3.073,505,3.073,506,3.413,507,3.413,508,3.413,509,3.413,510,3.413,511,3.413,512,3.413]],["title/classes/CreateUserDto.html",[31,0.263,513,2.465]],["body/classes/CreateUserDto.html",[3,0.15,4,0.15,5,0.105,9,0.247,22,0.568,28,0.581,31,0.346,34,0.015,35,1.364,36,0.863,37,1.11,49,0.32,56,0.15,69,0.009,70,0.009,138,1.501,143,2.2,167,2.956,168,3.113,192,1.655,198,2.93,227,0.568,229,1.639,230,1.703,232,2.479,240,2.037,252,1.703,274,3.065,353,2.604,374,5.623,420,2.601,421,2.601,425,3.231,426,1.559,434,3.398,448,4.074,455,2.688,465,3.315,513,3.244,514,5.909,515,2.688,516,5.909,517,3.747,518,3.747,519,4.074,520,4.525,521,3.747,522,3.747,523,3.747,524,5.21,525,3.747,526,5.21,527,6.474,528,3.747,529,4.525,530,3.747,531,3.255,532,2.688,533,2.688,534,3.747,535,3.747,536,3.747,537,3.255,538,3.255,539,3.255,540,3.255]],["title/classes/DeleteUserDto.html",[31,0.263,541,2.636]],["body/classes/DeleteUserDto.html",[3,0.21,4,0.21,5,0.147,9,0.346,22,0.797,28,0.472,31,0.433,34,0.014,36,0.7,49,0.323,56,0.21,69,0.012,70,0.012,138,1.425,143,1.785,168,2.707,192,1.462,227,0.797,229,2.047,230,2.127,240,1.653,301,3.811,420,3.248,421,3.248,422,4.108,424,4.331,425,3.248,426,2.186,515,3.768,533,3.768,541,4.331,542,5.652,543,5.528,544,5.253,545,4.331]],["title/classes/EmailInUseException.html",[31,0.263,546,2.84]],["body/classes/EmailInUseException.html",[3,0.191,4,0.191,5,0.134,9,0.316,25,1.976,28,0.43,31,0.318,34,0.014,49,0.294,50,0.997,56,0.191,57,1.601,69,0.011,70,0.011,138,1.378,167,3.104,203,2.735,227,0.726,342,3.433,343,3.398,344,3.954,345,5.586,346,2.427,347,3.398,348,6.009,349,3.954,350,3.75,351,4.858,352,3.743,353,2.349,354,4.858,519,4.798,520,5.883,546,4.401,547,4.798,548,4.787]],["title/interfaces/ExceptionHandler.html",[549,2.84,550,2.636]],["body/interfaces/ExceptionHandler.html",[3,0.218,4,0.218,5,0.152,9,0.36,22,0.829,23,2.355,28,0.491,33,1.655,34,0.014,35,1.095,36,0.728,37,0.937,45,1.856,56,0.218,69,0.012,70,0.012,204,3.716,549,4.781,550,4.437,551,5.463,552,4.745,553,3.024,554,5.463,555,5.372,556,5.212,557,5.463,558,5.789,559,6.666,560,5.212,561,4.781]],["title/injectables/ExceptionInterceptor.html",[0,1.295,562,3.096]],["body/injectables/ExceptionInterceptor.html",[0,1.835,2,2.086,3,0.167,4,0.167,5,0.117,9,0.276,10,4.875,18,5.298,19,4.51,22,0.634,23,1.983,28,0.375,31,0.278,33,1.266,34,0.015,35,0.838,36,0.557,37,0.717,39,5.298,44,4.389,45,1.42,47,2.149,48,4.956,49,0.416,50,0.87,53,2.997,56,0.167,66,1.6,69,0.01,70,0.01,203,2.149,204,3.015,224,2.602,225,2.149,232,1.988,271,2.802,298,2.239,343,3.224,562,4.389,563,3.63,564,5.613,565,5.613,566,5.298,567,4.875,568,5.298,569,5.613,570,6.776,571,6.339,572,4.179,573,6.339,574,6.776,575,4.179,576,4.389,577,4.389,578,4.875,579,5.613,580,4.179,581,2.997,582,4.179,583,4.389,584,2.997,585,4.179,586,3.268,587,4.179,588,4.179,589,4.179,590,4.179]],["title/classes/FileTypeError.html",[31,0.263,591,3.096]],["body/classes/FileTypeError.html",[3,0.186,4,0.186,5,0.213,9,0.307,25,1.356,28,0.417,31,0.309,33,1.408,34,0.014,35,0.932,36,0.975,37,0.797,49,0.286,56,0.186,57,1.571,69,0.011,70,0.011,138,1.363,203,2.305,227,0.705,346,2.401,347,3.361,353,2.305,408,3.911,430,1.52,553,3.333,591,4.709,592,5.23,593,4.038,594,5.525,595,7.066,596,4.446,597,6.022,598,6.68,599,4.649,600,4.446,601,6.68,602,5.802,603,7.633,604,2.44,605,3.094,606,4.649]],["title/classes/FileUploadDto.html",[31,0.263,607,3.096]],["body/classes/FileUploadDto.html",[3,0.208,4,0.208,5,0.215,9,0.343,22,0.79,28,0.468,31,0.346,34,0.015,36,0.862,49,0.32,56,0.208,69,0.011,70,0.011,143,1.769,155,2.077,192,1.454,227,0.79,229,2.036,230,2.116,240,1.638,298,2.581,408,3.582,421,3.23,430,2.116,600,4.307,607,5.06,608,5.621,609,4.523,610,5.06,611,5.207,612,5.621,613,6.472,614,5.207,615,6.472,616,5.207]],["title/classes/FindCategoriesDto.html",[31,0.263,266,2.636]],["body/classes/FindCategoriesDto.html",[3,0.171,4,0.171,5,0.119,9,0.282,22,0.649,28,0.576,31,0.426,34,0.015,35,1.143,36,0.977,37,1.257,49,0.35,56,0.171,69,0.01,70,0.01,143,2.18,192,1.537,226,2.478,227,0.649,229,1.795,230,1.864,240,2.018,266,3.796,269,4.878,273,3.927,274,1.78,276,1.944,277,2.713,298,2.275,378,4.091,380,4.907,391,5.571,392,3.994,425,2.847,426,1.78,434,3.847,459,3.341,463,4.269,465,3.787,500,4.601,617,5.942,618,3.717,619,3.346,620,4.28,621,4.46,622,4.46,623,4.28,624,4.28,625,2.848,626,3.346]],["title/classes/FindProductsDto.html",[31,0.263,281,2.32]],["body/classes/FindProductsDto.html",[3,0.171,4,0.171,5,0.119,9,0.282,22,0.649,28,0.576,31,0.426,34,0.015,35,1.143,36,0.977,37,1.257,49,0.35,56,0.171,69,0.01,70,0.01,143,2.18,192,1.537,227,0.649,229,1.795,230,1.864,240,2.018,273,3.927,274,1.78,276,1.944,277,2.713,281,3.341,298,2.275,321,4.057,378,4.091,380,4.907,392,3.994,402,5.016,425,2.847,426,1.78,430,1.864,434,3.847,459,3.341,463,4.269,465,3.787,500,4.601,619,3.346,621,4.46,622,4.46,625,2.848,626,3.346,627,5.942,628,3.717,629,4.28,630,4.28,631,4.28]],["title/classes/FindPurchasesDto.html",[31,0.263,632,2.636]],["body/classes/FindPurchasesDto.html",[3,0.157,4,0.157,5,0.109,9,0.259,22,0.595,28,0.593,31,0.408,34,0.015,36,0.975,37,1.277,49,0.33,56,0.157,69,0.01,70,0.013,101,3.593,138,1.037,143,2.243,192,1.673,227,0.595,229,1.691,230,1.757,233,2.633,240,2.077,273,3.839,274,1.631,276,1.781,277,2.557,298,2.144,378,3.856,380,4.734,392,3.819,425,3.062,426,1.631,430,1.757,434,3.749,459,3.149,463,4.083,465,3.828,489,4.083,500,4.4,619,4.203,622,4.203,625,2.61,632,3.578,633,6.006,634,3.405,635,5.585,636,3.921,637,3.921,638,3.921,639,3.921,640,3.921,641,3.921,642,3.921,643,3.921,644,3.921,645,3.921,646,3.921,647,3.921,648,3.921,649,3.921]],["title/classes/InvalidEmailOrPasswordError.html",[31,0.263,209,2.84]],["body/classes/InvalidEmailOrPasswordError.html",[3,0.185,4,0.185,5,0.129,9,0.306,25,1.946,28,0.416,31,0.308,34,0.014,49,0.285,50,0.966,56,0.185,57,1.568,69,0.011,70,0.011,138,1.362,167,3.487,168,3.174,203,2.702,209,4.312,227,0.703,343,3.358,344,3.907,346,2.398,347,3.358,349,4.28,350,3.705,353,2.301,594,4.701,650,5.222,651,4.027,652,7.059,653,6.131,654,6.672,655,4.637,656,4.027]],["title/classes/InvalidPasswordUpdateException.html",[31,0.263,657,2.84]],["body/classes/InvalidPasswordUpdateException.html",[3,0.19,4,0.19,5,0.133,9,0.314,25,1.971,28,0.428,31,0.317,34,0.014,49,0.292,56,0.19,57,1.595,69,0.011,70,0.011,138,1.423,168,3.351,203,2.341,225,2.729,227,0.722,252,2.331,346,2.423,347,3.392,353,2.341,545,5.108,553,3.385,594,4.782,604,2.499,605,3.169,653,6.192,656,4.135,657,4.386,658,5.311,659,3.723,660,7.13,661,4.206,662,4.761]],["title/classes/LoginCredentialsDto.html",[31,0.263,142,2.84]],["body/classes/LoginCredentialsDto.html",[3,0.196,4,0.196,5,0.137,9,0.323,22,0.742,28,0.559,31,0.414,34,0.015,36,0.829,49,0.301,56,0.196,69,0.011,70,0.011,138,1.466,142,4.463,143,2.114,167,3.23,168,3.094,192,1.618,227,0.742,229,1.958,230,2.034,240,1.958,298,2.482,421,3.106,424,4.554,425,3.415,426,2.035,532,3.509,533,3.509,663,5.943,664,4.249,665,6.222,666,4.463,667,6.222,668,4.892,669,4.892]],["title/classes/LoginResponse.html",[31,0.263,160,2.84]],["body/classes/LoginResponse.html",[3,0.222,4,0.222,5,0.155,7,3.732,9,0.367,15,4.352,17,4.835,22,0.844,28,0.5,31,0.37,34,0.014,36,0.742,56,0.222,69,0.012,70,0.012,93,4.835,140,3.704,160,4.835,192,1.514,200,6.299,227,0.844,229,1.751,230,2.204,240,1.751,670,4.834,671,5.566,672,5.566,673,5.566,674,5.566,675,5.566,676,5.566]],["title/classes/MissingPasswordUpdateException.html",[31,0.263,677,2.84]],["body/classes/MissingPasswordUpdateException.html",[3,0.181,4,0.181,5,0.126,9,0.299,25,1.925,28,0.407,31,0.301,34,0.014,49,0.278,56,0.181,57,1.545,69,0.01,70,0.01,138,1.401,168,3.405,203,2.267,225,2.904,227,0.687,257,3.178,346,2.377,347,3.328,353,2.267,421,3.492,545,5.049,553,3.278,604,2.378,605,3.015,659,3.542,661,4.107,677,4.247,678,5.143,679,6.589,680,4.53,681,5.922,682,6.597,683,4.53]],["title/classes/NotPurchaseOwnerException.html",[31,0.263,684,2.84]],["body/classes/NotPurchaseOwnerException.html",[3,0.204,4,0.204,5,0.142,9,0.337,25,2.036,28,0.458,31,0.339,34,0.014,49,0.313,56,0.204,57,1.667,69,0.011,70,0.011,203,2.446,227,0.774,346,2.485,353,2.446,361,4.344,488,3.782,553,3.537,604,2.678,605,3.396,684,4.583,685,5.55,686,4.432,687,4.283,688,7.313,689,4.867,690,4.644,691,5.103,692,4.432]],["title/classes/PrismaExceptionHandler.html",[31,0.263,581,2.84]],["body/classes/PrismaExceptionHandler.html",[3,0.075,4,0.075,5,0.053,9,0.125,22,0.286,23,1.093,28,0.567,31,0.126,33,1.914,34,0.015,35,1.433,36,0.818,37,1.083,45,2.557,46,5.588,49,0.388,56,0.075,66,2.351,69,0.005,70,0.005,138,0.597,167,1.707,184,5.031,203,1.739,204,3.751,224,4.251,225,2.529,226,2.177,227,0.286,232,1.472,237,3.215,252,1.011,257,1.405,271,0.943,301,1.812,302,4.206,340,2.219,341,2.219,343,2.161,356,3.258,361,2.446,397,2.419,407,1.176,430,1.858,461,1.477,488,1.869,546,2.219,547,1.477,550,2.615,555,2.219,556,2.419,561,2.219,568,3.552,576,3.552,577,3.552,581,2.219,583,1.477,693,5.621,694,1.477,695,3.945,696,3.093,697,3.929,698,3.093,699,3.093,700,3.093,701,3.093,702,3.929,703,3.093,704,3.093,705,1.888,706,3.093,707,7.411,708,1.888,709,7.004,710,7.004,711,1.888,712,1.888,713,3.351,714,3.093,715,1.888,716,3.093,717,3.929,718,1.888,719,1.888,720,3.093,721,1.888,722,2.687,723,3.093,724,3.093,725,3.093,726,3.093,727,1.888,728,1.888,729,1.888,730,3.093,731,1.888,732,3.093,733,1.888,734,1.888,735,1.477,736,3.929,737,4.543,738,2.219,739,2.219,740,3.258,741,2.818,742,1.477,743,2.219,744,1.477,745,1.257,746,1.888,747,1.888,748,3.412,749,1.888,750,1.888,751,1.888,752,1.888,753,3.929,754,1.888,755,3.093,756,1.888,757,1.888,758,1.888,759,1.888,760,1.888,761,1.888,762,3.929,763,1.888,764,1.888,765,3.929,766,1.888,767,3.093,768,1.888,769,1.888,770,1.888,771,1.888,772,1.888]],["title/modules/PrismaModule.html",[105,1.648,113,2.079]],["body/modules/PrismaModule.html",[3,0.216,4,0.216,5,0.151,31,0.359,34,0.014,49,0.406,50,1.124,56,0.216,69,0.012,70,0.012,105,2.753,107,2.694,108,3.147,113,4.141,117,3.662,118,2.987,119,2.694,131,3.875,368,4.278,773,4.687,774,4.687,775,4.687,776,5.397,777,5.746,778,5.397]],["title/injectables/PrismaService.html",[0,1.295,368,2.079]],["body/injectables/PrismaService.html",[0,1.793,2,2.015,3,0.161,4,0.161,5,0.113,9,0.266,19,3.65,22,0.612,23,1.937,28,0.492,31,0.268,33,1.223,34,0.015,35,0.809,36,0.538,37,1.068,45,1.863,47,2.557,49,0.337,50,0.841,56,0.161,57,1.43,69,0.01,70,0.01,76,3.506,119,2.737,182,3.414,212,3.414,231,3.035,232,1.92,237,3.273,238,2.015,368,2.878,373,4.763,566,3.156,578,4.763,666,3.933,695,4.763,779,3.506,780,5.484,781,7.205,782,6.228,783,6.681,784,7.205,785,5.484,786,6.681,787,4.037,788,5.484,789,5.484,790,6.681,791,5.484,792,6.681,793,5.484,794,5.484,795,5.484,796,5.484,797,4.037,798,5.484,799,4.763,800,5.484,801,4.037,802,4.037,803,4.037]],["title/classes/Product.html",[31,0.263,430,1.295]],["body/classes/Product.html",[3,0.129,4,0.129,5,0.09,9,0.442,22,0.489,28,0.649,31,0.214,34,0.015,35,1.387,36,0.962,37,1.288,49,0.198,56,0.129,69,0.008,70,0.008,192,1.717,227,0.489,229,1.473,230,1.978,231,2.127,232,2.227,233,2.563,235,3.116,237,1.465,238,1.609,240,2.272,276,1.465,407,3.432,408,3.557,430,2.599,431,4.788,432,4.788,433,5.58,434,3.518,435,3.358,438,3.358,439,4.066,440,4.066,441,3.116,442,3.358,443,3.358,444,3.358,452,4.066,453,4.066,454,4.027,455,4.339,459,2.742,468,4,469,4.066,470,4.788,471,3.954,472,2.8,473,2.8,474,2.8,804,2.8,805,4.066,806,3.224,807,3.116,808,3.224,809,3.661,810,3.224,811,3.224,812,3.224,813,3.224,814,3.224,815,3.224,816,3.224,817,4.682,818,3.661,819,3.224,820,3.224,821,3.224,822,3.224,823,3.224,824,3.224,825,3.224,826,2.312,827,2.8,828,2.8]],["title/controllers/ProductController.html",[134,1.884,829,2.84]],["body/controllers/ProductController.html",[3,0.088,4,0.088,5,0.169,9,0.146,14,3.05,16,3.05,22,0.335,23,1.241,28,0.544,31,0.233,32,1.103,33,1.837,34,0.015,35,1.359,36,0.864,37,1.04,41,2.56,45,2.304,47,2.715,49,0.408,50,0.46,56,0.088,59,1.051,66,2.321,69,0.009,70,0.006,134,1.051,136,1.051,139,2.079,143,2.06,144,4.036,149,2.337,150,1.471,151,1.471,152,2.337,153,4.188,154,1.471,155,0.882,163,1.103,164,4.036,190,1.376,192,1.612,225,2.408,231,1.595,233,2.704,249,1.585,250,3.134,251,2.294,252,1.148,253,2.186,254,2.519,256,1.843,257,1.985,260,3.621,261,2.756,264,4.188,270,2.186,271,1.753,272,2.186,273,2.613,274,1.461,275,2.186,276,1.595,277,1.671,278,3.05,279,2.186,280,1.585,281,2.916,282,3.571,285,3.099,289,1.294,290,3.571,293,1.294,295,2.756,298,1.401,299,1.585,300,1.728,301,1.294,302,1.471,303,1.728,304,3.201,305,1.294,306,1.471,308,1.585,311,1.223,313,1.376,315,1.223,321,2.419,322,1.919,323,2.746,328,1.728,330,1.728,331,1.585,332,1.728,407,2.721,408,2.419,427,3.6,430,2.517,466,1.728,610,3.417,818,2.746,829,2.519,830,1.919,831,3.05,832,4.37,833,1.919,834,2.21,835,2.21,836,2.21,837,2.21,838,2.21,839,3.512,840,2.21,841,2.21,842,1.919,843,2.21,844,2.21,845,2.21,846,2.21,847,4.188,848,2.21,849,2.21,850,2.21,851,4.324,852,2.21,853,2.21,854,3.05,855,3.05,856,3.05,857,3.05,858,3.05,859,2.519,860,3.512,861,3.512,862,2.746,863,1.728,864,2.21,865,2.746,866,3.099,867,1.919,868,2.21,869,2.21,870,1.919,871,2.21,872,2.21,873,2.21,874,2.21,875,2.21,876,2.21,877,2.21,878,2.21,879,2.21,880,2.21,881,2.21,882,2.21]],["title/modules/ProductModule.html",[105,1.648,114,2.636]],["body/modules/ProductModule.html",[3,0.199,4,0.199,5,0.139,31,0.332,34,0.015,49,0.469,50,1.039,56,0.199,69,0.011,70,0.011,105,2.621,107,2.49,108,2.997,113,4.009,114,5.223,117,3.487,118,2.761,119,2.49,121,3.922,131,3.69,136,2.997,339,3.578,829,4.952,859,3.578,866,4.756,867,4.332,883,4.332,884,4.332,885,4.988,886,4.988,887,4.988,888,4.988,889,4.332,890,3.105,891,3.9,892,4.988,893,4.988]],["title/classes/ProductNameInUseException.html",[31,0.263,738,2.84]],["body/classes/ProductNameInUseException.html",[3,0.188,4,0.188,5,0.131,9,0.311,25,1.961,28,0.423,31,0.313,34,0.014,35,1.571,49,0.289,50,0.981,56,0.188,57,1.584,69,0.011,70,0.011,138,1.37,203,2.718,227,0.714,342,3.378,343,3.378,344,3.931,345,5.552,346,2.413,347,3.378,348,5.986,349,3.931,350,3.727,351,4.821,352,3.683,353,2.325,354,4.821,430,2.46,738,4.356,739,4.356,894,4.091]],["title/classes/ProductNotFoundException.html",[31,0.263,740,2.84]],["body/classes/ProductNotFoundException.html",[3,0.197,4,0.197,5,0.137,9,0.324,25,2.002,28,0.442,31,0.327,34,0.014,49,0.302,50,1.025,56,0.197,57,1.629,69,0.011,70,0.011,138,1.392,203,2.762,227,0.746,343,3.433,344,3.994,346,2.452,347,3.433,349,3.994,350,3.788,353,2.39,357,3.274,358,5.176,359,4.566,360,3.528,361,4.271,430,2.488,739,4.479,740,4.479,894,4.272]],["title/injectables/ProductService.html",[0,1.295,866,2.465]],["body/injectables/ProductService.html",[0,0.908,2,0.828,3,0.066,4,0.066,5,0.117,9,0.109,22,0.252,23,0.982,25,0.484,28,0.557,30,1.85,31,0.238,32,1.387,33,1.88,34,0.015,35,1.492,36,0.827,37,1.064,45,2.158,47,2.598,49,0.33,50,0.346,56,0.066,59,0.789,61,2.657,66,2.375,67,3.145,69,0.007,70,0.005,76,3.395,83,2.792,138,0.536,139,1.995,163,0.828,182,2.611,184,3.893,192,1.656,199,1.993,212,1.73,225,1.934,226,0.721,231,2.295,233,2.67,237,2.121,238,0.828,240,0.874,251,2.202,252,0.908,253,2.232,254,1.993,256,2.202,257,1.629,261,1.538,269,4.13,270,1.73,271,1.387,272,1.73,273,2.652,274,1.745,275,1.73,276,1.629,277,1.322,279,1.73,280,1.993,281,2.457,285,2.611,289,1.628,293,0.972,295,2.796,298,1.108,302,1.85,308,1.19,311,0.918,313,1.033,315,0.918,321,3.343,346,0.944,363,3.008,364,3.008,367,1.19,368,2.652,376,1.297,383,1.993,387,3.643,388,1.19,392,2.232,395,1.297,396,1.297,397,1.297,398,1.441,399,1.441,400,1.297,401,1.441,402,2.173,403,2.414,405,3.28,406,3.28,407,3.76,408,1.985,409,2.173,427,3.145,430,2.293,447,2.414,466,1.297,610,2.804,612,2.414,626,2.804,748,2.414,799,2.414,818,2.173,831,2.414,833,2.414,842,2.414,847,4.517,851,2.414,865,2.173,866,1.73,895,1.441,896,3.586,897,2.779,898,3.586,899,2.779,900,1.659,901,1.659,902,1.659,903,2.779,904,2.779,905,2.779,906,1.659,907,1.659,908,1.659,909,1.659,910,2.779,911,1.659,912,2.779,913,2.173,914,2.779,915,2.779,916,2.779,917,2.779,918,5.052,919,2.779,920,4.194,921,2.779,922,2.779,923,2.779,924,1.993,925,2.779,926,2.779,927,3.586,928,2.779,929,1.659,930,1.659,931,1.659,932,1.659,933,1.659,934,1.659,935,2.779,936,1.659,937,1.659,938,1.659,939,1.659,940,3.586,941,1.659,942,1.659,943,2.779,944,1.659,945,1.659,946,1.659,947,1.659,948,1.659,949,1.659,950,1.659,951,1.659,952,1.659,953,2.779,954,1.659,955,1.659,956,1.659,957,3.586,958,1.659]],["title/classes/ProductServiceInputException.html",[31,0.263,596,2.636]],["body/classes/ProductServiceInputException.html",[3,0.21,4,0.21,5,0.147,9,0.346,25,1.533,28,0.472,31,0.349,33,1.592,34,0.014,35,1.053,36,0.7,37,0.901,56,0.21,57,1.697,69,0.012,70,0.012,192,1.588,204,3.096,227,0.797,346,2.402,353,2.011,553,3.913,596,5.055,604,3.416,745,4.705,924,5.07,959,5.088,960,3.768,961,5.528,962,5.528,963,5.088,964,4.108,965,4.108]],["title/classes/Purchase.html",[31,0.263,488,1.884]],["body/classes/Purchase.html",[3,0.133,4,0.133,5,0.093,9,0.22,22,0.505,28,0.642,31,0.222,34,0.015,36,0.953,37,1.267,49,0.205,56,0.133,69,0.008,70,0.008,101,3.29,138,0.925,192,1.699,227,0.505,229,1.509,230,2.009,231,2.178,232,2.281,233,2.904,235,4.512,237,1.514,238,1.664,240,2.249,274,2.556,277,2.281,430,2.416,434,3.558,435,3.44,438,3.44,441,3.192,442,3.44,443,3.44,444,3.44,454,3.192,459,4.092,468,4.053,471,2.39,488,3.401,489,3.739,490,4.879,493,3.44,498,4.165,499,4.165,504,4.392,505,4.392,506,2.895,507,2.895,508,2.895,509,2.895,510,2.895,511,2.895,512,2.895,689,4.089,805,4.165,807,3.192,809,3.75,826,2.39,966,2.895,967,3.333,968,3.333,969,3.333,970,3.333,971,3.333,972,4.165,973,3.333,974,2.986,975,4.392,976,3.333,977,3.333,978,3.333,979,3.333,980,3.333,981,3.333,982,3.333,983,3.333,984,3.333,985,3.333,986,3.333,987,3.333,988,3.333,989,2.895,990,3.333,991,3.333]],["title/controllers/PurchaseController.html",[134,1.884,992,2.84]],["body/controllers/PurchaseController.html",[3,0.077,4,0.077,5,0.053,9,0.126,22,0.29,23,1.105,28,0.513,31,0.208,32,0.956,33,1.732,34,0.015,35,1.146,36,0.762,37,0.98,45,2.293,47,2.623,49,0.39,50,0.399,56,0.077,59,0.911,61,2.081,66,2.189,69,0.01,70,0.01,76,3.49,101,3.885,103,2.845,134,0.911,136,0.911,138,0.604,139,1.887,143,1.943,144,3.806,149,3.049,150,1.274,151,1.274,152,2.082,153,3.97,154,1.274,155,0.764,163,0.956,164,3.806,190,1.192,192,1.595,225,1.753,231,1.421,233,2.281,249,1.373,250,2.845,251,2.082,252,1.297,253,2.47,256,1.642,257,1.802,260,2.844,261,2.535,264,3.97,270,2.852,271,2.286,272,2.852,273,3.131,274,1.906,275,2.852,276,2.081,277,2.179,279,2.852,282,3.285,285,1.948,289,1.122,290,3.285,293,1.122,295,2.535,298,1.248,299,1.373,300,1.497,301,1.122,302,2.64,304,2.535,305,1.122,306,1.274,311,1.06,313,1.192,315,1.06,323,3.102,328,1.497,330,1.497,331,1.373,332,1.497,430,1.297,485,3.713,488,3.466,489,3.049,493,3.285,502,1.373,632,4.414,635,4.664,687,3.174,689,2.64,807,3.049,890,1.192,992,2.244,993,1.663,994,3.967,995,3.445,996,1.915,997,5.262,998,1.915,999,1.915,1000,3.129,1001,1.915,1002,1.915,1003,1.915,1004,2.717,1005,4.581,1006,1.915,1007,1.915,1008,1.915,1009,1.915,1010,4.966,1011,1.915,1012,1.915,1013,2.717,1014,1.915,1015,1.915,1016,1.915,1017,3.97,1018,4.581,1019,1.915,1020,1.915,1021,3.129,1022,3.97,1023,1.915,1024,1.915,1025,4.385,1026,4.385,1027,3.102,1028,1.663,1029,1.663,1030,2.852,1031,1.663,1032,1.915,1033,1.915,1034,3.978,1035,1.915,1036,1.915,1037,3.129,1038,1.915,1039,1.915,1040,1.915,1041,1.915,1042,1.915,1043,1.915,1044,1.915]],["title/modules/PurchaseModule.html",[105,1.648,115,2.636]],["body/modules/PurchaseModule.html",[3,0.207,4,0.207,5,0.144,31,0.344,34,0.014,49,0.452,50,1.078,56,0.207,69,0.011,70,0.011,105,2.683,107,2.584,108,3.067,113,4.047,115,5.261,117,3.569,118,2.866,119,2.584,121,4.014,131,3.777,136,3.067,339,3.713,992,5.037,1030,4.8,1031,4.496,1045,4.496,1046,4.496,1047,5.177,1048,5.177,1049,5.177]],["title/classes/PurchaseNotFoundException.html",[31,0.263,741,2.84]],["body/classes/PurchaseNotFoundException.html",[3,0.197,4,0.197,5,0.137,9,0.324,25,2.002,28,0.442,31,0.327,34,0.014,49,0.302,50,1.025,56,0.197,57,1.629,69,0.011,70,0.011,138,1.392,203,2.762,227,0.746,343,3.433,344,3.994,346,2.452,347,3.433,349,3.994,350,3.788,353,2.39,357,3.274,358,5.176,359,4.566,360,3.528,361,4.271,488,3.621,692,4.272,741,4.479,742,4.882]],["title/injectables/PurchaseService.html",[0,1.295,1030,2.465]],["body/injectables/PurchaseService.html",[0,1.04,2,0.976,3,0.078,4,0.078,5,0.055,9,0.129,22,0.296,23,1.124,25,0.57,28,0.518,30,2.118,31,0.268,32,1.588,33,1.747,34,0.015,35,1.381,36,0.769,37,0.989,45,2.043,47,2.554,49,0.382,50,0.407,56,0.078,59,0.93,61,2.485,66,1.954,67,4.154,69,0.008,70,0.006,76,3.424,83,2.678,101,3.975,103,3.326,138,0.985,139,2.206,163,0.976,167,2.218,182,2.887,192,1.683,212,3.406,216,1.145,224,1.981,225,1.775,231,2.485,233,2.549,237,1.445,238,0.976,251,2.434,252,1.315,253,2.505,256,1.67,257,1.828,261,1.761,264,2.118,270,1.981,271,1.588,272,1.981,273,2.872,274,1.929,275,1.981,276,1.828,277,1.514,279,1.981,285,1.981,289,1.864,293,1.145,295,1.761,298,1.269,311,1.082,313,1.217,315,1.082,321,1.761,363,3.326,364,3.326,367,1.402,368,2.872,376,1.529,383,2.282,388,1.402,392,2.505,395,1.529,396,1.529,400,1.529,405,3.991,406,4.998,409,2.488,430,1.669,468,1.217,485,3.743,488,3.393,489,2.678,493,2.282,502,1.402,632,3.086,635,5.386,684,2.886,687,2.716,689,3.397,995,3.495,1010,5.222,1013,2.764,1017,4.002,1022,4.002,1027,3.146,1028,1.698,1029,1.698,1030,1.981,1050,1.698,1051,1.955,1052,1.955,1053,1.955,1054,1.955,1055,1.955,1056,1.955,1057,1.955,1058,1.955,1059,1.955,1060,1.955,1061,1.955,1062,1.955,1063,1.955,1064,3.182,1065,1.955,1066,3.182,1067,1.955,1068,3.182,1069,1.698,1070,3.182,1071,3.182,1072,1.955]],["title/classes/PurchaseServiceInputException.html",[31,0.263,690,2.636]],["body/classes/PurchaseServiceInputException.html",[3,0.21,4,0.21,5,0.147,9,0.346,25,1.533,28,0.472,31,0.349,33,1.592,34,0.014,35,1.053,36,0.7,37,0.901,56,0.21,57,1.697,69,0.012,70,0.012,192,1.588,204,3.096,227,0.797,346,2.402,353,2.011,553,3.913,604,3.416,690,5.055,745,4.705,924,5.07,960,3.768,961,5.528,962,5.528,963,5.088,964,4.108,965,4.108,1073,5.088]],["title/classes/ReviewPurchaseDto.html",[31,0.263,1017,2.636]],["body/classes/ReviewPurchaseDto.html",[3,0.182,4,0.182,5,0.127,9,0.3,22,0.691,28,0.534,31,0.395,34,0.015,36,0.792,37,1.019,49,0.406,56,0.182,57,1.188,69,0.011,70,0.011,143,2.019,155,1.816,192,1.335,227,0.691,229,1.87,230,1.942,240,1.87,274,2.472,420,2.966,421,2.966,425,2.966,426,1.895,430,2.292,434,3.119,448,3.561,463,3.955,465,3.289,471,3.266,487,3.266,488,3.146,502,3.266,504,5.481,505,5.481,689,4.963,972,5.16,974,3.699,975,5.171,989,3.955,1017,3.955,1074,5.744,1075,4.554,1076,4.554,1077,4.554,1078,4.554,1079,4.554,1080,4.554,1081,4.554,1082,4.554,1083,4.554]],["title/guards/RolesGuard.html",[1084,3.096,1085,2.84]],["body/guards/RolesGuard.html",[0,1.734,3,0.154,4,0.154,5,0.107,9,0.254,15,5.118,18,5.118,19,4.356,20,5.964,21,5.685,22,0.583,23,1.874,24,5.964,25,1.122,26,3.339,27,6.439,28,0.476,30,3.53,31,0.404,32,2.647,33,1.607,34,0.015,35,1.063,36,0.707,37,0.909,38,3.339,39,5.118,44,4.147,45,1.306,46,4.147,47,2.03,48,4.747,49,0.422,50,0.801,51,2.757,53,2.757,56,0.154,59,1.829,61,2.758,64,3.339,65,3.339,66,2.03,67,2.394,69,0.009,70,0.009,73,3.53,98,3.006,103,3.804,138,1.37,216,2.252,232,1.829,238,1.919,260,3.727,304,2.936,306,2.559,722,5.685,997,2.757,1034,3.339,1069,3.339,1085,3.804,1086,3.339,1087,6.546,1088,3.845,1089,3.845,1090,5.304,1091,3.006,1092,3.845,1093,3.845,1094,3.845]],["title/classes/UpdateCategoryDto.html",[31,0.263,294,2.636]],["body/classes/UpdateCategoryDto.html",[3,0.217,4,0.217,5,0.152,9,0.358,31,0.361,34,0.014,37,1.139,49,0.408,56,0.217,57,1.416,69,0.012,70,0.012,155,2.166,226,2.885,227,0.823,229,2.09,252,1.775,259,4.466,294,4.42,312,4.246,419,4.246,420,3.315,713,4.134,974,4.134,1095,4.716,1096,4.763,1097,4.763,1098,4.763,1099,3.894,1100,5.43]],["title/classes/UpdateProductDto.html",[31,0.263,847,2.636]],["body/classes/UpdateProductDto.html",[3,0.217,4,0.217,5,0.152,9,0.358,31,0.361,34,0.014,37,1.139,49,0.408,56,0.217,57,1.416,69,0.012,70,0.012,155,2.166,227,0.823,229,2.09,252,1.775,420,3.315,427,4.466,429,4.246,430,2.171,713,4.134,847,4.42,865,4.246,974,4.134,1096,4.763,1097,4.763,1098,4.763,1099,3.894,1101,4.716,1102,5.43]],["title/classes/UpdatePurchaseDto.html",[31,0.263,1022,2.636]],["body/classes/UpdatePurchaseDto.html",[3,0.217,4,0.217,5,0.152,9,0.358,31,0.361,34,0.014,37,1.139,49,0.408,56,0.217,57,1.416,69,0.012,70,0.012,155,2.166,227,0.823,229,2.09,252,1.775,420,3.315,485,4.466,487,3.894,488,3.159,713,4.134,974,4.134,1022,4.42,1027,4.246,1096,4.763,1097,4.763,1098,4.763,1099,3.894,1103,4.716,1104,5.43]],["title/classes/UpdateUserDto.html",[31,0.263,1105,2.636]],["body/classes/UpdateUserDto.html",[3,0.192,4,0.192,5,0.134,9,0.317,22,0.73,28,0.432,31,0.409,34,0.015,36,0.641,37,1.227,49,0.417,56,0.192,57,1.255,69,0.011,70,0.011,138,1.381,143,1.635,155,1.92,168,2.562,192,1.383,227,0.73,229,1.938,230,2.013,240,1.514,252,1.573,420,3.074,424,4.098,425,3.074,426,2.002,465,3.408,513,4.228,515,3.452,533,3.452,543,5.31,545,4.098,713,3.834,974,3.834,1096,4.416,1097,4.416,1098,4.416,1099,3.452,1105,4.098,1106,4.815,1107,4.813,1108,4.813,1109,3.763,1110,4.813]],["title/classes/UpdateUserRoleDto.html",[31,0.263,1111,2.636]],["body/classes/UpdateUserRoleDto.html",[3,0.191,4,0.191,5,0.134,9,0.316,22,0.726,28,0.551,31,0.408,34,0.015,36,0.818,49,0.377,56,0.191,69,0.011,70,0.011,138,1.517,143,2.085,167,3.209,192,1.379,216,4.642,225,2.349,227,0.726,229,1.931,230,2.006,238,2.389,240,1.931,257,2.787,260,2.512,298,2.448,421,3.063,426,1.991,529,5.883,532,3.433,1106,5.296,1111,4.084,1112,4.157,1113,4.787,1114,6.137,1115,4.787,1116,4.787]],["title/classes/User.html",[31,0.263,138,0.764]],["body/classes/User.html",[3,0.137,4,0.137,5,0.096,9,0.226,22,0.519,28,0.647,31,0.228,34,0.015,35,1.319,36,0.959,37,1.303,49,0.21,56,0.137,69,0.009,70,0.009,138,1.548,167,2.857,168,2.736,192,1.735,216,4.217,227,0.519,229,1.538,230,2.033,231,2.22,232,2.325,233,2.624,235,3.253,237,1.555,238,1.708,240,2.265,260,3.264,321,2.706,454,3.253,455,2.455,468,4.095,516,5.713,532,2.455,537,2.973,538,2.973,539,2.973,540,2.973,555,3.506,687,2.863,807,4.139,809,4.863,826,3.506,827,4.245,828,4.245,1117,2.973,1118,5.713,1119,3.423,1120,3.423,1121,3.423,1122,3.423,1123,3.423,1124,3.423,1125,3.423,1126,4.245,1127,3.423,1128,3.423,1129,3.423,1130,3.423,1131,3.423,1132,3.423,1133,3.423,1134,3.423]],["title/controllers/UserController.html",[134,1.884,1135,2.84]],["body/controllers/UserController.html",[3,0.106,4,0.106,5,0.074,9,0.174,22,0.4,23,1.425,28,0.53,31,0.268,32,1.318,33,1.789,34,0.015,35,1.184,36,0.787,37,1.012,41,2.363,45,2.201,47,2.673,49,0.436,50,0.55,56,0.106,59,1.256,61,2.224,66,2.26,69,0.007,70,0.007,76,2.329,101,2.867,134,1.256,136,1.256,138,1.467,139,2.329,143,2.006,144,3.93,149,3.648,150,1.757,151,1.757,152,2.685,153,4.143,154,1.757,155,1.053,163,1.318,164,3.93,168,1.678,187,3.21,190,1.644,216,2.867,225,2.098,249,1.893,250,3.511,251,2.57,252,1.319,256,2.57,257,2.224,260,2.117,261,3.034,264,2.685,282,2.893,290,3.931,295,3.446,298,2.483,299,2.893,301,2.363,303,2.064,304,2.233,305,1.546,306,1.757,311,1.461,315,2.233,331,1.893,350,2.117,513,3.876,541,4.445,870,2.293,890,1.644,997,5.378,1025,4.252,1026,4.76,1105,4.445,1109,3.828,1111,4.143,1126,5.407,1135,2.893,1136,2.293,1137,3.504,1138,4.252,1139,2.293,1140,2.64,1141,2.64,1142,2.64,1143,2.64,1144,2.64,1145,4.896,1146,3.258,1147,2.64,1148,2.64,1149,2.64,1150,4.034,1151,2.64,1152,2.64,1153,2.64,1154,2.293,1155,4.034,1156,2.64,1157,2.64,1158,2.293,1159,2.293,1160,1.757,1161,2.293,1162,2.293,1163,2.293,1164,2.64,1165,2.64,1166,2.64,1167,2.64,1168,4.896,1169,2.64,1170,2.64,1171,2.64,1172,2.64,1173,2.64]],["title/classes/UserInputExceptionHandler.html",[31,0.263,584,2.84]],["body/classes/UserInputExceptionHandler.html",[3,0.171,4,0.171,5,0.12,9,0.283,22,0.651,23,2.018,28,0.385,31,0.285,33,1.3,34,0.015,35,0.86,36,0.572,37,0.736,45,1.458,49,0.438,50,0.894,56,0.171,69,0.01,70,0.01,138,1.321,203,2.621,204,3.729,224,3.998,225,2.458,227,0.651,232,2.718,343,3.258,351,3.077,359,2.855,550,4.275,555,4.097,556,4.467,561,4.097,568,5.355,576,5.355,577,5.355,583,3.354,584,4.097,586,5.735,596,3.802,604,3.371,605,4.275,661,3.556,690,3.802,694,3.354,745,4.275,959,3.354,1073,3.354,1174,4.961,1175,4.29,1176,3.354,1177,5.713,1178,4.29]],["title/modules/UserModule.html",[105,1.648,116,2.465]],["body/modules/UserModule.html",[3,0.201,4,0.201,5,0.14,31,0.333,34,0.014,49,0.447,50,1.045,56,0.201,69,0.011,70,0.011,105,2.63,107,2.504,108,3.007,113,4.015,116,4.935,117,3.499,118,2.777,119,2.504,121,3.936,131,3.703,136,3.007,187,4.729,339,3.598,777,5.491,1135,4.965,1163,4.357,1179,4.357,1180,4.357,1181,5.016,1182,4.357,1183,5.016,1184,5.016]],["title/classes/UserNotFoundException.html",[31,0.263,743,2.84]],["body/classes/UserNotFoundException.html",[3,0.192,4,0.192,5,0.134,9,0.317,25,1.981,28,0.432,31,0.32,34,0.014,49,0.296,50,1.002,56,0.192,57,1.606,69,0.011,70,0.011,138,1.53,167,3.11,203,2.74,227,0.73,233,2.855,343,3.405,344,3.962,346,2.432,347,3.405,349,3.962,350,3.757,353,2.357,357,3.203,358,5.134,359,4.52,360,3.452,361,4.228,743,4.416,744,4.815,1185,4.813]],["title/injectables/UserService.html",[0,1.295,187,2.32]],["body/injectables/UserService.html",[0,0.967,2,0.893,3,0.072,4,0.072,5,0.05,9,0.118,22,0.271,23,1.046,25,0.522,28,0.541,31,0.252,32,1.477,33,1.824,34,0.015,35,1.207,36,0.802,37,1.032,45,2.209,47,2.647,49,0.391,50,0.373,56,0.072,59,0.851,61,2.735,66,1.864,69,0.005,70,0.005,76,3.513,83,2.519,138,1.47,139,2.091,140,1.97,163,0.893,167,2.279,168,3.089,182,2.737,184,3.491,187,1.733,190,1.842,192,1.627,194,5.043,196,2.57,197,5.043,198,3.438,199,3.762,204,2.091,205,3.286,206,1.283,212,4.047,216,2.216,222,3.818,224,1.842,225,2.436,231,2.818,233,2.685,237,1.344,251,2.308,252,0.967,256,1.553,257,1.719,261,1.638,271,1.477,276,1.344,289,1.733,293,1.048,295,2.434,298,1.18,301,2.575,311,0.991,315,1.638,346,1.494,363,3.153,364,3.153,367,1.283,368,2.753,383,2.123,388,1.283,441,2.926,513,3.266,531,1.554,541,3.695,543,2.959,545,3.864,566,2.314,657,2.123,677,2.123,679,2.57,687,3.401,807,1.191,1105,4.545,1109,2.959,1111,3.491,1118,1.554,1137,2.57,1138,3.286,1139,2.57,1146,2.519,1154,1.554,1158,1.554,1159,1.554,1160,1.191,1161,1.554,1162,1.554,1186,1.554,1187,2.959,1188,3.784,1189,3.784,1190,1.79,1191,1.79,1192,2.959,1193,1.79,1194,4.397,1195,2.959,1196,2.959,1197,1.79,1198,2.959,1199,2.959,1200,2.959,1201,1.79,1202,1.79,1203,2.959,1204,2.959,1205,2.959,1206,4.397,1207,1.79,1208,1.79,1209,1.79,1210,1.79,1211,1.79,1212,2.959,1213,1.79,1214,1.79,1215,2.959,1216,1.79,1217,4.397,1218,1.79,1219,4.397,1220,1.79,1221,1.79,1222,3.784,1223,1.79,1224,1.79,1225,2.959,1226,1.79,1227,1.79,1228,2.959,1229,1.79,1230,1.79,1231,3.784,1232,4.397,1233,1.79,1234,2.959,1235,1.79]],["title/classes/UserServiceInputException.html",[31,0.263,661,2.465]],["body/classes/UserServiceInputException.html",[3,0.21,4,0.21,5,0.147,9,0.346,25,1.533,28,0.472,31,0.349,33,1.592,34,0.014,35,1.053,36,0.7,37,0.901,56,0.21,57,1.697,69,0.012,70,0.012,192,1.588,204,3.096,227,0.797,346,2.402,353,2.011,553,3.913,604,3.416,661,4.728,745,4.705,924,5.07,960,3.768,961,5.528,962,5.528,963,5.088,964,4.108,965,4.108,1176,5.088]],["title/classes/UserWithoutPassword.html",[31,0.263,1160,2.636]],["body/classes/UserWithoutPassword.html",[3,0.221,4,0.221,5,0.154,9,0.365,31,0.368,34,0.015,49,0.413,56,0.221,57,1.443,61,2.513,69,0.012,70,0.012,138,1.395,155,2.206,168,3.009,227,0.839,460,4.325,713,4.181,1146,3.681,1160,4.47,1236,4.804,1237,4.804,1238,6.716,1239,6.716,1240,6.716,1241,5.531,1242,5.531]],["title/coverage.html",[1243,4.701]],["body/coverage.html",[0,2.184,1,1.746,5,0.068,6,2.963,7,1.347,8,2.114,31,0.534,34,0.015,35,0.76,36,0.324,41,1.426,54,1.903,69,0.007,70,0.007,71,1.62,72,2.114,89,1.746,134,2.706,135,1.746,137,2.114,138,0.731,142,1.746,156,1.515,160,1.746,167,1.057,168,1.576,181,2.114,187,1.426,209,1.746,225,0.932,226,1.057,228,2.114,247,1.746,248,2.114,259,1.515,266,1.62,281,1.426,294,1.62,304,1.347,305,2.219,309,1.515,340,1.746,341,2.717,342,3.337,356,1.746,357,3.494,362,2.114,368,1.278,418,2.114,419,2.963,427,1.515,428,2.114,429,2.963,430,0.796,485,1.515,486,2.114,487,3.337,488,1.802,513,1.515,514,2.114,515,3.337,541,1.62,542,2.114,546,1.746,547,1.903,549,1.746,550,1.62,552,2.114,558,4.04,562,1.903,563,2.114,581,1.746,584,1.746,586,1.903,591,1.903,592,2.114,593,2.114,596,1.62,604,2.442,607,1.903,608,2.114,609,2.114,617,2.114,618,2.114,627,2.114,628,2.114,632,1.62,633,2.114,634,2.114,650,2.114,651,2.114,657,1.746,658,2.114,659,2.963,661,1.515,663,2.114,664,2.114,670,2.114,677,1.746,678,2.114,684,1.746,685,2.114,686,2.114,690,1.62,693,2.114,694,2.963,738,1.746,739,2.717,740,1.746,741,1.746,742,1.903,743,1.746,744,1.903,779,2.114,804,2.114,829,1.746,830,2.114,847,1.62,859,1.746,862,1.903,863,1.903,866,1.515,891,3.638,895,2.114,959,1.903,960,3.337,966,2.114,992,1.746,993,2.114,1017,1.62,1022,1.62,1030,1.515,1050,2.114,1073,1.903,1074,2.114,1084,1.903,1085,1.746,1086,2.114,1091,1.903,1095,2.114,1101,2.114,1103,2.114,1105,1.62,1106,2.963,1111,1.62,1112,2.114,1117,2.114,1135,1.746,1136,2.114,1146,1.62,1160,1.62,1174,2.114,1176,1.903,1186,2.114,1236,2.114,1237,2.114,1243,2.114,1244,2.114,1245,2.434,1246,2.434,1247,8.229,1248,6.505,1249,7.737,1250,5.25,1251,3.291,1252,6.29,1253,7.247,1254,2.114,1255,2.963,1256,2.434,1257,2.114,1258,4.04,1259,2.114,1260,2.114,1261,2.114,1262,2.114,1263,3.789,1264,4.652,1265,4.652,1266,2.434,1267,3.789,1268,3.789,1269,2.434,1270,2.434,1271,2.434]],["title/dependencies.html",[108,2.267,1272,2.869]],["body/dependencies.html",[7,2.882,11,4.642,31,0.43,34,0.015,50,1.085,51,3.735,52,3.735,53,3.735,69,0.011,70,0.011,108,2.477,155,2.077,175,4.072,204,2.477,206,3.735,237,2.365,238,2.599,426,2.166,560,4.072,625,3.466,735,4.072,889,4.523,890,4.029,1273,7.042,1274,5.207,1275,5.207,1276,5.207,1277,5.207,1278,5.207,1279,5.207,1280,5.207,1281,5.207,1282,5.207,1283,5.207,1284,5.207,1285,5.207,1286,5.207,1287,5.207,1288,5.207,1289,5.207,1290,5.207,1291,4.523,1292,4.523,1293,5.207]],["title/miscellaneous/functions.html",[1294,2.057,1295,4.138]],["body/miscellaneous/functions.html",[5,0.151,22,0.821,34,0.014,45,2.434,47,2.072,69,0.012,70,0.012,143,1.839,240,2.086,252,1.77,256,2.841,257,2.459,260,2.841,304,3.966,305,3.171,321,2.996,408,2.996,430,1.77,561,4.754,600,4.412,666,3.883,687,3.171,862,5.602,863,4.233,913,4.233,1254,5.757,1255,5.183,1261,4.702,1262,6.223,1294,3.37,1295,4.702,1296,5.413,1297,5.413,1298,4.702,1299,5.413,1300,5.413,1301,5.413,1302,4.702,1303,4.702]],["title/index.html",[22,0.501,1304,2.869,1305,2.869]],["body/index.html",[7,1.75,11,3.31,19,2.104,31,0.307,34,0.014,69,0.008,70,0.008,93,2.267,139,2.195,204,1.504,206,2.267,237,2.723,251,3.146,260,1.659,426,1.315,519,5.852,567,2.745,600,2.104,625,2.104,735,2.472,890,2.873,1291,4.008,1292,2.745,1306,3.161,1307,5.451,1308,3.161,1309,6.874,1310,6.375,1311,3.161,1312,7.808,1313,4.615,1314,4.615,1315,4.615,1316,3.161,1317,5.451,1318,4.615,1319,5.451,1320,4.615,1321,3.161,1322,3.161,1323,3.161,1324,4.615,1325,5.451,1326,4.615,1327,4.615,1328,4.615,1329,3.161,1330,3.161,1331,4.615,1332,3.161,1333,3.161,1334,7.046,1335,4.615,1336,3.161,1337,3.161,1338,5.994,1339,3.161,1340,3.161,1341,3.161,1342,3.161,1343,3.161,1344,3.161,1345,5.994,1346,3.161,1347,3.161,1348,3.161,1349,3.161,1350,3.161,1351,7.186,1352,4.615,1353,4.615,1354,4.615,1355,4.615,1356,4.615,1357,3.161,1358,3.161,1359,3.161,1360,3.161,1361,3.161,1362,5.994,1363,6.375,1364,4.615,1365,3.161,1366,3.161,1367,4.615,1368,3.161,1369,3.161,1370,3.161,1371,3.161,1372,3.161,1373,3.161,1374,3.161,1375,3.161,1376,3.161,1377,4.615,1378,5.451,1379,6.375,1380,3.161,1381,3.161,1382,6.375,1383,6.874,1384,3.161,1385,3.161,1386,3.161,1387,3.161,1388,3.161,1389,3.161,1390,3.161,1391,3.161,1392,3.161,1393,3.161,1394,3.161,1395,3.161,1396,4.615,1397,3.161,1398,3.161,1399,3.161,1400,3.161,1401,3.161,1402,3.161,1403,3.161,1404,3.161,1405,3.161,1406,3.161,1407,3.161,1408,3.161,1409,3.161,1410,3.161,1411,3.161,1412,3.161,1413,3.161,1414,3.161,1415,3.161,1416,3.161,1417,3.161,1418,3.161,1419,3.161,1420,3.161,1421,3.161,1422,3.161,1423,3.161,1424,3.161,1425,3.161,1426,3.161,1427,3.161,1428,2.745]],["title/license.html",[1304,2.869,1305,2.869,1429,2.583]],["body/license.html",[34,0.011,69,0.011,70,0.011,119,2.402,354,4.416,602,4.18,826,3.452,890,2.996,1004,4.18,1146,4.52,1244,4.18,1428,4.18,1429,3.763,1430,6.791,1431,4.813,1432,4.813,1433,4.813,1434,6.158,1435,4.813,1436,4.813,1437,4.813,1438,4.813,1439,4.813,1440,4.813,1441,6.158,1442,7.869,1443,4.813,1444,4.813,1445,4.813,1446,4.813,1447,6.158,1448,4.813,1449,4.813,1450,4.813,1451,4.813,1452,4.813,1453,4.813,1454,4.813,1455,4.813,1456,6.158,1457,4.813,1458,4.813,1459,4.813,1460,4.813,1461,4.813,1462,4.813,1463,6.158,1464,6.158,1465,4.813,1466,4.813,1467,4.813,1468,4.813,1469,4.813,1470,4.813,1471,4.813,1472,4.813,1473,4.813,1474,4.813,1475,4.813,1476,4.813,1477,4.813,1478,4.813,1479,4.813,1480,4.813,1481,4.813,1482,4.813,1483,4.813,1484,4.813,1485,4.813,1486,4.813,1487,4.813,1488,4.813,1489,4.813,1490,4.813,1491,4.813,1492,4.813,1493,4.813]],["title/modules.html",[107,2.701]],["body/modules.html",[34,0.012,69,0.012,70,0.012,106,4.081,107,2.84,111,3.788,112,3.788,113,2.987,114,3.788,115,3.788,116,3.543,1494,7.975,1495,7.975,1496,7.975,1497,7.975]],["title/overview.html",[1498,4.701]],["body/overview.html",[2,2.096,34,0.014,69,0.01,70,0.01,71,4.229,106,5.708,107,2.096,108,2.679,109,3.647,110,3.647,111,5.102,112,4.955,113,4.065,114,4.955,115,4.955,116,4.772,117,3.117,118,2.324,119,2.096,136,1.997,156,3.956,170,3.647,171,3.647,187,4.361,227,0.637,274,2.343,309,3.956,334,3.647,335,3.647,368,3.908,549,3.011,773,3.647,774,3.647,775,3.647,866,3.956,883,3.647,884,3.647,975,3.283,1030,3.956,1045,3.647,1046,3.647,1084,3.283,1179,3.647,1180,3.647,1182,3.647,1498,3.647,1499,4.199,1500,4.199,1501,4.199]],["title/properties.html",[230,1.558,1272,2.869]],["body/properties.html",[9,0.407,34,0.014,69,0.013,70,0.013,230,2.015,1429,4.82,1502,6.164,1503,6.164,1504,6.164,1505,6.164,1506,6.164]],["title/miscellaneous/typealiases.html",[1294,2.057,1507,4.765]],["body/miscellaneous/typealiases.html",[22,0.871,34,0.012,36,0.98,69,0.012,70,0.012,73,4.574,74,5.373,80,5.968,84,4.99,91,5.968,93,5.464,94,4.99,666,4.121,1294,3.577,1508,5.746,1509,6.872,1510,6.872,1511,6.872,1512,6.872,1513,5.746,1514,5.746,1515,6.872]],["title/miscellaneous/variables.html",[1294,2.057,1516,4.138]],["body/miscellaneous/variables.html",[5,0.178,12,2.84,17,2.605,22,0.551,34,0.015,36,0.851,41,3.45,54,3.986,61,2.901,62,3.155,66,2.255,67,3.174,69,0.009,70,0.009,73,2.418,74,2.84,89,3.657,98,2.84,138,0.701,139,1.728,140,2.418,192,1.145,240,1.143,252,1.187,271,3.575,304,2.822,305,2.128,346,2.17,560,3.986,600,3.921,621,2.84,687,2.128,854,3.155,855,3.155,856,3.155,857,3.155,858,3.155,859,3.657,891,2.84,913,2.84,997,3.657,1085,2.605,1091,3.986,1251,3.155,1255,3.986,1257,3.155,1258,5.547,1259,5.116,1260,4.428,1294,2.261,1298,3.155,1302,5.116,1303,3.155,1516,3.155,1517,3.633,1518,5.098,1519,5.891,1520,3.633,1521,7.43,1522,3.633,1523,3.633,1524,3.633,1525,3.633,1526,5.098,1527,5.098,1528,5.098,1529,5.098,1530,3.633,1531,3.633,1532,3.633,1533,3.633,1534,3.633,1535,5.098,1536,5.098,1537,3.633,1538,5.098,1539,5.098,1540,3.633,1541,3.633,1542,3.633,1543,3.633,1544,3.633,1545,5.891,1546,5.098,1547,5.098,1548,3.633,1549,3.633,1550,3.633,1551,3.633,1552,5.098,1553,3.633,1554,5.098,1555,3.633,1556,5.098,1557,3.633,1558,3.633,1559,3.633,1560,3.633,1561,3.633,1562,3.633,1563,3.633,1564,3.633,1565,3.633,1566,3.633,1567,3.633,1568,3.633,1569,3.633]]],"invertedIndex":[["",{"_index":34,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":455,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["0.0.1",{"_index":1503,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1287,"title":{},"body":{"dependencies.html":{}}}],["0.1.2",{"_index":1284,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1281,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1280,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":1282,"title":{},"body":{"dependencies.html":{}}}],["03",{"_index":827,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["05",{"_index":990,"title":{},"body":{"classes/Purchase.html":{}}}],["0878",{"_index":481,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["1",{"_index":274,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"overview.html":{}}}],["1/1",{"_index":1253,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":276,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["10/10",{"_index":1264,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1247,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":1535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11/11",{"_index":1256,"title":{},"body":{"coverage.html":{}}}],["12/12",{"_index":1266,"title":{},"body":{"coverage.html":{}}}],["138.75",{"_index":512,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["13t15:41:28.527z",{"_index":991,"title":{},"body":{"classes/Purchase.html":{}}}],["151be8d85634",{"_index":1133,"title":{},"body":{"classes/User.html":{}}}],["15m",{"_index":1525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1811c405c0f7",{"_index":983,"title":{},"body":{"classes/Purchase.html":{}}}],["1e9",{"_index":1550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":511,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["2/2",{"_index":1249,"title":{},"body":{"coverage.html":{}}}],["2022",{"_index":826,"title":{},"body":{"classes/Product.html":{},"classes/Purchase.html":{},"classes/User.html":{},"license.html":{}}}],["25d18b3976a0",{"_index":510,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["26c3fd79",{"_index":645,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["26t15:41:28.527z",{"_index":828,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["2b$10$1xpzuyu8fuvuabb3sc0xzur9dx7kakbmlt0vlnoz.unlntdmfc4lk",{"_index":1134,"title":{},"body":{"classes/User.html":{}}}],["2e651e21b871",{"_index":479,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["3",{"_index":1534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":1289,"title":{},"body":{"dependencies.html":{}}}],["3.14.0",{"_index":1278,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1248,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":1373,"title":{},"body":{"index.html":{}}}],["306e52f9e686",{"_index":644,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["32d0226134e2",{"_index":649,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["39",{"_index":1501,"title":{},"body":{"overview.html":{}}}],["3mb",{"_index":858,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":1283,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":1293,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1250,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":345,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["401",{"_index":652,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{}}}],["404",{"_index":358,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["42",{"_index":473,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["4302",{"_index":822,"title":{},"body":{"classes/Product.html":{}}}],["4368",{"_index":981,"title":{},"body":{"classes/Purchase.html":{}}}],["438c",{"_index":242,"title":{},"body":{"classes/Category.html":{}}}],["441e",{"_index":1131,"title":{},"body":{"classes/User.html":{}}}],["463b",{"_index":642,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["4646",{"_index":647,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["4688",{"_index":482,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["4889",{"_index":986,"title":{},"body":{"classes/Purchase.html":{}}}],["49f3",{"_index":477,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["4fce",{"_index":243,"title":{},"body":{"classes/Category.html":{}}}],["4fde",{"_index":508,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["5",{"_index":975,"title":{},"body":{"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{},"overview.html":{}}}],["5.0.1",{"_index":1279,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":1277,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1267,"title":{},"body":{"coverage.html":{}}}],["541c",{"_index":641,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["5c68ae94",{"_index":506,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["6/6",{"_index":1269,"title":{},"body":{"coverage.html":{}}}],["6f4ca8a4",{"_index":820,"title":{},"body":{"classes/Product.html":{}}}],["7",{"_index":1499,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":1290,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1263,"title":{},"body":{"coverage.html":{}}}],["70.00",{"_index":472,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["7aed",{"_index":1130,"title":{},"body":{"classes/User.html":{}}}],["7b5547f01b0a",{"_index":824,"title":{},"body":{"classes/Product.html":{}}}],["8",{"_index":535,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8'})@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":525,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.0.0",{"_index":1274,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":1276,"title":{},"body":{"dependencies.html":{}}}],["8.4.4",{"_index":1273,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1265,"title":{},"body":{"coverage.html":{}}}],["857cd575",{"_index":475,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["8aa0",{"_index":821,"title":{},"body":{"classes/Product.html":{}}}],["8d85",{"_index":244,"title":{},"body":{"classes/Category.html":{}}}],["8fd6",{"_index":643,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["9",{"_index":1500,"title":{},"body":{"overview.html":{}}}],["9/9",{"_index":1268,"title":{},"body":{"coverage.html":{}}}],["949e",{"_index":982,"title":{},"body":{"classes/Purchase.html":{}}}],["956b",{"_index":476,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["95f273eb70e1",{"_index":988,"title":{},"body":{"classes/Purchase.html":{}}}],["979e",{"_index":987,"title":{},"body":{"classes/Purchase.html":{}}}],["9f7f",{"_index":1132,"title":{},"body":{"classes/User.html":{}}}],["a04bb2db",{"_index":984,"title":{},"body":{"classes/Purchase.html":{}}}],["a287",{"_index":648,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["a75e",{"_index":478,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["abc123456",{"_index":533,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{}}}],["above",{"_index":1462,"title":{},"body":{"license.html":{}}}],["abrir",{"_index":1371,"title":{},"body":{"index.html":{}}}],["ac1b",{"_index":823,"title":{},"body":{"classes/Product.html":{}}}],["ac63",{"_index":483,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["accepts",{"_index":1564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access",{"_index":73,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"modules/AuthModule.html":{},"guards/RolesGuard.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["accessible",{"_index":1303,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["accessing",{"_index":1087,"title":{},"body":{"guards/RolesGuard.html":{}}}],["accessjwtauthguard",{"_index":1,"title":{"injectables/AccessJwtAuthGuard.html":{}},"body":{"injectables/AccessJwtAuthGuard.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["accessjwtconfig",{"_index":89,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["accessjwtconfig.secret",{"_index":100,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["accessjwtstrategy",{"_index":71,"title":{"injectables/AccessJwtStrategy.html":{}},"body":{"injectables/AccessJwtStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["accesstoken",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginResponse.html":{}}}],["accesstokencontent",{"_index":91,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["accesstokenpayload",{"_index":80,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["acessar",{"_index":1375,"title":{},"body":{"index.html":{}}}],["action",{"_index":1487,"title":{},"body":{"license.html":{}}}],["add",{"_index":1300,"title":{},"body":{"miscellaneous/functions.html":{}}}],["address",{"_index":516,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["admin",{"_index":260,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["admin.decorator",{"_index":306,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{}}}],["admin.decorator.ts",{"_index":1255,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["admins",{"_index":264,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{}}}],["aliases",{"_index":1508,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed",{"_index":1090,"title":{},"body":{"guards/RolesGuard.html":{}}}],["already",{"_index":348,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["alterando",{"_index":1385,"title":{},"body":{"index.html":{}}}],["alvaromrveiga",{"_index":1506,"title":{},"body":{"properties.html":{}}}],["amazing",{"_index":989,"title":{},"body":{"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["amount",{"_index":459,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["and/or",{"_index":1004,"title":{},"body":{"controllers/PurchaseController.html":{},"license.html":{}}}],["another",{"_index":962,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["apenas",{"_index":1396,"title":{},"body":{"index.html":{}}}],["api",{"_index":1308,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":1026,"title":{},"body":{"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["apioperation",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":615,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["apiproperty({type",{"_index":611,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["apitags",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["apitags('authentication",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('category",{"_index":317,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apitags('product",{"_index":868,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags('purchase",{"_index":1032,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["apitags('user",{"_index":1164,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":566,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["app.close",{"_index":803,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app_guard",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["application",{"_index":666,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["appmodule",{"_index":106,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arising",{"_index":1491,"title":{},"body":{"license.html":{}}}],["armazenar",{"_index":1407,"title":{},"body":{"index.html":{}}}],["arquivo",{"_index":1354,"title":{},"body":{"index.html":{}}}],["array",{"_index":903,"title":{},"body":{"injectables/ProductService.html":{}}}],["asc",{"_index":401,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["associated",{"_index":1443,"title":{},"body":{"license.html":{}}}],["async",{"_index":76,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["autenticação",{"_index":1317,"title":{},"body":{"index.html":{}}}],["auth.controller",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["auth.guard.ts",{"_index":8,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:13",{"_index":29,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["auth.guard.ts:28",{"_index":40,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["auth.service",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/access",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.module",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":135,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":665,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["authenticates",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticating",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":17,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{},"classes/LoginResponse.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":13,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["authguard('access",{"_index":58,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["authmodule",{"_index":111,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1505,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":1480,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":156,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autorização",{"_index":1318,"title":{},"body":{"index.html":{}}}],["available",{"_index":364,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["avaliações",{"_index":1316,"title":{},"body":{"index.html":{}}}],["await",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["b01f",{"_index":509,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["b076f72e",{"_index":979,"title":{},"body":{"classes/Purchase.html":{}}}],["b0e0c99e",{"_index":640,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["backend",{"_index":1307,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":351,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"classes/UserInputExceptionHandler.html":{}}}],["badrequestexception(error.message",{"_index":1177,"title":{},"body":{"classes/UserInputExceptionHandler.html":{}}}],["banco",{"_index":1378,"title":{},"body":{"index.html":{}}}],["bando",{"_index":1392,"title":{},"body":{"index.html":{}}}],["baseprice",{"_index":431,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["bcrypt",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["becomes",{"_index":928,"title":{},"body":{"injectables/ProductService.html":{}}}],["before",{"_index":794,"title":{},"body":{"injectables/PrismaService.html":{}}}],["being",{"_index":1528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["between",{"_index":922,"title":{},"body":{"injectables/ProductService.html":{}}}],["bf3e",{"_index":507,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["binary",{"_index":613,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["black",{"_index":470,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["body",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["boilerplate",{"_index":578,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{}}}],["boolean",{"_index":46,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"classes/PrismaExceptionHandler.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":1262,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":679,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{},"injectables/UserService.html":{}}}],["brand",{"_index":469,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["brand1",{"_index":927,"title":{},"body":{"injectables/ProductService.html":{}}}],["break",{"_index":753,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["browse",{"_index":1497,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1494,"title":{},"body":{"modules.html":{}}}],["c",{"_index":1431,"title":{},"body":{"license.html":{}}}],["calculations",{"_index":442,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["call",{"_index":792,"title":{},"body":{"injectables/PrismaService.html":{}}}],["callback",{"_index":1546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(new",{"_index":1559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":1552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["called",{"_index":674,"title":{},"body":{"classes/LoginResponse.html":{}}}],["callhandler",{"_index":574,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["canactivate",{"_index":24,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":38,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["capitalize",{"_index":372,"title":{},"body":{"injectables/CategoryService.html":{}}}],["capitalizeonlyfirstletter",{"_index":365,"title":{},"body":{"injectables/CategoryService.html":{}}}],["capitalizeonlyfirstletter(name",{"_index":370,"title":{},"body":{"injectables/CategoryService.html":{}}}],["case",{"_index":748,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{}}}],["catcherror",{"_index":580,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["catcherror((error",{"_index":588,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["catches",{"_index":576,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["categorias",{"_index":1330,"title":{},"body":{"index.html":{}}}],["categories",{"_index":269,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"injectables/ProductService.html":{}}}],["categories'})@public()@get",{"_index":267,"title":{},"body":{"controllers/CategoryController.html":{}}}],["categories.dto",{"_index":314,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["categories.dto.ts",{"_index":618,"title":{},"body":{"classes/FindCategoriesDto.html":{},"coverage.html":{}}}],["categories.dto.ts:11",{"_index":620,"title":{},"body":{"classes/FindCategoriesDto.html":{}}}],["categories.dto.ts:20",{"_index":624,"title":{},"body":{"classes/FindCategoriesDto.html":{}}}],["categories.dto.ts:29",{"_index":623,"title":{},"body":{"classes/FindCategoriesDto.html":{}}}],["categories.map((category",{"_index":958,"title":{},"body":{"injectables/ProductService.html":{}}}],["categoriesconnection",{"_index":957,"title":{},"body":{"injectables/ProductService.html":{}}}],["categoriestoskip",{"_index":393,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category",{"_index":226,"title":{"classes/Category.html":{}},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category'})@isadmin()@delete(':id')@httpcode(httpstatus.no_content",{"_index":291,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category'})@isadmin()@patch(':id",{"_index":296,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category'})@isadmin()@post",{"_index":262,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category.controller",{"_index":338,"title":{},"body":{"modules/CategoryModule.html":{}}}],["category.dto",{"_index":312,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts",{"_index":419,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:12",{"_index":423,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.service",{"_index":310,"title":{},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{}}}],["categorycontroller",{"_index":247,"title":{"controllers/CategoryController.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"coverage.html":{}}}],["categorymodule",{"_index":112,"title":{"modules/CategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["categoryname",{"_index":391,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{}}}],["categorynameinuseexception",{"_index":340,"title":{"classes/CategoryNameInUseException.html":{}},"body":{"classes/CategoryNameInUseException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["categorynotfoundexception",{"_index":356,"title":{"classes/CategoryNotFoundException.html":{}},"body":{"classes/CategoryNotFoundException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["categoryservice",{"_index":309,"title":{"injectables/CategoryService.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["cd",{"_index":1347,"title":{},"body":{"index.html":{}}}],["chair",{"_index":626,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"injectables/ProductService.html":{}}}],["chair&quot",{"_index":930,"title":{},"body":{"injectables/ProductService.html":{}}}],["charge",{"_index":1438,"title":{},"body":{"license.html":{}}}],["check",{"_index":14,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/ProductController.html":{}}}],["checks",{"_index":722,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"guards/RolesGuard.html":{}}}],["claim",{"_index":1483,"title":{},"body":{"license.html":{}}}],["class",{"_index":31,"title":{"classes/Category.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":227,"title":{},"body":{"classes/Category.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"overview.html":{}}}],["clientversion",{"_index":723,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["clona",{"_index":1337,"title":{},"body":{"index.html":{}}}],["clone",{"_index":1342,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categorymodule",{"_index":334,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_imports",{"_index":336,"title":{},"body":{"modules/CategoryModule.html":{}}}],["cluster_categorymodule_providers",{"_index":335,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":773,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":774,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":775,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_productmodule",{"_index":883,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_productmodule_imports",{"_index":885,"title":{},"body":{"modules/ProductModule.html":{}}}],["cluster_productmodule_providers",{"_index":884,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_purchasemodule",{"_index":1045,"title":{},"body":{"modules/PurchaseModule.html":{},"overview.html":{}}}],["cluster_purchasemodule_imports",{"_index":1047,"title":{},"body":{"modules/PurchaseModule.html":{}}}],["cluster_purchasemodule_providers",{"_index":1046,"title":{},"body":{"modules/PurchaseModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1179,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1180,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1181,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1182,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["colocou",{"_index":1388,"title":{},"body":{"index.html":{}}}],["com",{"_index":1309,"title":{},"body":{"index.html":{}}}],["comment",{"_index":972,"title":{},"body":{"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["commerce",{"_index":1306,"title":{},"body":{"index.html":{}}}],["compare",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["compare(currentpassword",{"_index":1235,"title":{},"body":{"injectables/UserService.html":{}}}],["compare(password",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["compared",{"_index":1200,"title":{},"body":{"injectables/UserService.html":{}}}],["compares",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["compodoc",{"_index":1320,"title":{},"body":{"index.html":{}}}],["compras",{"_index":1315,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":1461,"title":{},"body":{"license.html":{}}}],["configuration",{"_index":75,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["configurations",{"_index":1526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connect",{"_index":799,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/ProductService.html":{}}}],["connectcategoriesbyid",{"_index":896,"title":{},"body":{"injectables/ProductService.html":{}}}],["connectcategoriesbyid(categories",{"_index":901,"title":{},"body":{"injectables/ProductService.html":{}}}],["connecting",{"_index":780,"title":{},"body":{"injectables/PrismaService.html":{}}}],["connection",{"_index":1492,"title":{},"body":{"license.html":{}}}],["considering",{"_index":439,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["const",{"_index":61,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":1536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constructor",{"_index":25,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{}}}],["constructor(filetypes",{"_index":597,"title":{},"body":{"classes/FileTypeError.html":{}}}],["constructor(message",{"_index":963,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["constructor(prisma",{"_index":367,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":59,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(reflector",{"_index":26,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["constructor(userservice",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["construir",{"_index":1405,"title":{},"body":{"index.html":{}}}],["consult",{"_index":1529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contain",{"_index":527,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["containing",{"_index":621,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"miscellaneous/variables.html":{}}}],["contains",{"_index":397,"title":{},"body":{"injectables/CategoryService.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{}}}],["content",{"_index":94,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["content.ts",{"_index":1510,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["context",{"_index":44,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":65,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":64,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":1094,"title":{},"body":{"guards/RolesGuard.html":{}}}],["contract",{"_index":1488,"title":{},"body":{"license.html":{}}}],["controller",{"_index":134,"title":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('category",{"_index":318,"title":{},"body":{"controllers/CategoryController.html":{}}}],["controller('product",{"_index":869,"title":{},"body":{"controllers/ProductController.html":{}}}],["controller('purchase",{"_index":1033,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["controller('user",{"_index":1165,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["copies",{"_index":1456,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1441,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1430,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":1243,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":252,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":870,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["create(createcategorydto",{"_index":258,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["create(createproductdto",{"_index":833,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["create(createuserdto",{"_index":1139,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(request",{"_index":996,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["create(userid",{"_index":1052,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["createcategorydto",{"_index":259,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["createdat",{"_index":468,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{}}}],["createproductdto",{"_index":427,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["createpurchasedto",{"_index":485,"title":{"classes/CreatePurchaseDto.html":{}},"body":{"classes/CreatePurchaseDto.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["creates",{"_index":261,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":513,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email.tolowercase",{"_index":1220,"title":{},"body":{"injectables/UserService.html":{}}}],["credentials.dto",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":664,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:11",{"_index":668,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["credentials.dto.ts:19",{"_index":669,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["criação",{"_index":1311,"title":{},"body":{"index.html":{}}}],["crie",{"_index":1352,"title":{},"body":{"index.html":{}}}],["crud",{"_index":251,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["currency.js",{"_index":444,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["current",{"_index":545,"title":{},"body":{"classes/DeleteUserDto.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["currentpassword",{"_index":543,"title":{},"body":{"classes/DeleteUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["customdecorator",{"_index":1531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["código",{"_index":1427,"title":{},"body":{"index.html":{}}}],["códigos",{"_index":1417,"title":{},"body":{"index.html":{}}}],["d31fc56c",{"_index":1129,"title":{},"body":{"classes/User.html":{}}}],["dados",{"_index":1379,"title":{},"body":{"index.html":{}}}],["damages",{"_index":1484,"title":{},"body":{"license.html":{}}}],["data",{"_index":83,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["database",{"_index":231,"title":{},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["date",{"_index":807,"title":{},"body":{"classes/Product.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["date.now",{"_index":1548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datestring",{"_index":809,"title":{},"body":{"classes/Product.html":{},"classes/Purchase.html":{},"classes/User.html":{}}}],["db3d22db270a",{"_index":245,"title":{},"body":{"classes/Category.html":{}}}],["de",{"_index":1312,"title":{},"body":{"index.html":{}}}],["deal",{"_index":1445,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1493,"title":{},"body":{"license.html":{}}}],["decimal",{"_index":435,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["decoration",{"_index":246,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{}}}],["decorator",{"_index":42,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["decorators",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["decorators/is",{"_index":1092,"title":{},"body":{"guards/RolesGuard.html":{}}}],["decrypted",{"_index":84,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["default",{"_index":271,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":454,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/User.html":{}}}],["defined",{"_index":28,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{}}}],["delete",{"_index":301,"title":{},"body":{"controllers/CategoryController.html":{},"classes/DeleteUserDto.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(':id",{"_index":330,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["deletes",{"_index":290,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["deleteuserdto",{"_index":541,"title":{"classes/DeleteUserDto.html":{}},"body":{"classes/DeleteUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["deleteuserdto.currentpassword",{"_index":1229,"title":{},"body":{"injectables/UserService.html":{}}}],["dependencies",{"_index":108,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":32,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dependências",{"_index":1350,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1067,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["describes",{"_index":229,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{}}}],["description",{"_index":9,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"properties.html":{}}}],["descritas",{"_index":1359,"title":{},"body":{"index.html":{}}}],["desenvolvimento",{"_index":1369,"title":{},"body":{"index.html":{}}}],["destination",{"_index":1543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["discount",{"_index":452,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["discountpercentage",{"_index":432,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["discounts",{"_index":440,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["diskstorage",{"_index":1542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distribute",{"_index":1453,"title":{},"body":{"license.html":{}}}],["docs",{"_index":860,"title":{},"body":{"controllers/ProductController.html":{}}}],["documentation",{"_index":1244,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["documentação",{"_index":1319,"title":{},"body":{"index.html":{}}}],["doe",{"_index":538,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["doesn't",{"_index":1212,"title":{},"body":{"injectables/UserService.html":{}}}],["dos",{"_index":1413,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":311,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/delete",{"_index":1158,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/find",{"_index":313,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["dto/login",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/login.response",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/review",{"_index":1029,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["dto/update",{"_index":315,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e",{"_index":519,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"index.html":{}}}],["e3ecf4939a89",{"_index":484,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["e6cf9a58",{"_index":241,"title":{},"body":{"classes/Category.html":{}}}],["ecommerce",{"_index":1348,"title":{},"body":{"index.html":{}}}],["em",{"_index":1367,"title":{},"body":{"index.html":{}}}],["email",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/LoginCredentialsDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PurchaseService.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["email.tolowercase",{"_index":1223,"title":{},"body":{"injectables/UserService.html":{}}}],["emailinuseexception",{"_index":546,"title":{"classes/EmailInUseException.html":{}},"body":{"classes/EmailInUseException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["enableshutdownhooks",{"_index":783,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":785,"title":{},"body":{"injectables/PrismaService.html":{}}}],["endpoint",{"_index":1302,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["enter",{"_index":682,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["entities/category.entity",{"_index":316,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{}}}],["entities/product.entity",{"_index":466,"title":{},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["entities/purchase.entity",{"_index":502,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{}}}],["entities/user",{"_index":1161,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entities/user.entity",{"_index":531,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":1238,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["entra",{"_index":1344,"title":{},"body":{"index.html":{}}}],["entrada",{"_index":1412,"title":{},"body":{"index.html":{}}}],["enum",{"_index":735,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"dependencies.html":{},"index.html":{}}}],["env",{"_index":1355,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":1360,"title":{},"body":{"index.html":{}}}],["env.test",{"_index":1384,"title":{},"body":{"index.html":{}}}],["equals",{"_index":1066,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["error",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"dependencies.html":{},"index.html":{}}}],["error.clientversion",{"_index":763,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.code",{"_index":747,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message",{"_index":762,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.category",{"_index":767,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product",{"_index":766,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product.create",{"_index":771,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product.delete",{"_index":770,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product.update",{"_index":769,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.purchase",{"_index":772,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.user",{"_index":768,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["errormeta",{"_index":719,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["errors",{"_index":568,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["errors/invalid",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["erros",{"_index":567,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"index.html":{}}}],["eslint",{"_index":1423,"title":{},"body":{"index.html":{}}}],["event",{"_index":1479,"title":{},"body":{"license.html":{}}}],["example",{"_index":240,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["exception",{"_index":553,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/FileTypeError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["exception.handler",{"_index":583,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["exception.handler.ts",{"_index":694,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["exception.handler.ts:110",{"_index":712,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:120",{"_index":733,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:125",{"_index":727,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:133",{"_index":715,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:138",{"_index":708,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:14",{"_index":1175,"title":{},"body":{"classes/UserInputExceptionHandler.html":{}}}],["exception.handler.ts:143",{"_index":731,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:19",{"_index":705,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:89",{"_index":721,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:94",{"_index":718,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:99",{"_index":729,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exceptionhandler",{"_index":550,"title":{"interfaces/ExceptionHandler.html":{}},"body":{"interfaces/ExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["exceptioninterceptor",{"_index":562,"title":{"injectables/ExceptionInterceptor.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"coverage.html":{}}}],["exceptions/invalid",{"_index":1214,"title":{},"body":{"injectables/UserService.html":{}}}],["exceptions/missing",{"_index":1216,"title":{},"body":{"injectables/UserService.html":{}}}],["exceptions/not",{"_index":1061,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["exceções",{"_index":1419,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":39,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{}}}],["exemplo",{"_index":1389,"title":{},"body":{"index.html":{}}}],["exists",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":1524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":56,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}}}],["exports",{"_index":777,"title":{},"body":{"modules/PrismaModule.html":{},"modules/UserModule.html":{}}}],["exposes",{"_index":250,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["express",{"_index":890,"title":{},"body":{"modules/ProductModule.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"dependencies.html":{},"index.html":{},"license.html":{}}}],["express.multer.file",{"_index":610,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["expression",{"_index":1568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extend",{"_index":961,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["extends",{"_index":57,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"injectables/PrismaService.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}}}],["extname",{"_index":1556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":87,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":96,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjzdwiioii5nwfkmznhns0wyjk4ltq2odytyjfmms1hmtkwnzm0nwjmyzcilcjpyxqioje2ndg0nzu3mzesimv4cci6mty0odq3njyzmx0.h3z3jdvhoi6y5c_n0kt6tdp2nwk_dhbzxioqn7vanno",{"_index":676,"title":{},"body":{"classes/LoginResponse.html":{}}}],["f5bd",{"_index":646,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["f70b",{"_index":980,"title":{},"body":{"classes/Purchase.html":{}}}],["fa244865",{"_index":480,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["false",{"_index":98,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["features",{"_index":1324,"title":{},"body":{"index.html":{}}}],["fecd",{"_index":985,"title":{},"body":{"classes/Purchase.html":{}}}],["field",{"_index":713,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserWithoutPassword.html":{}}}],["fields",{"_index":420,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["file.filename",{"_index":941,"title":{},"body":{"injectables/ProductService.html":{}}}],["file.originalname",{"_index":1551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filefilter",{"_index":1553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filename",{"_index":1545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":1444,"title":{},"body":{"license.html":{}}}],["filesize",{"_index":1562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filetypeerror",{"_index":591,"title":{"classes/FileTypeError.html":{}},"body":{"classes/FileTypeError.html":{},"coverage.html":{}}}],["filetypeerror(validimageuploadtypesregex",{"_index":1560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filetypes",{"_index":603,"title":{},"body":{"classes/FileTypeError.html":{}}}],["fileupload",{"_index":862,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["fileuploaddto",{"_index":607,"title":{"classes/FileUploadDto.html":{}},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["find",{"_index":285,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["findall",{"_index":253,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["findall(@query",{"_index":872,"title":{},"body":{"controllers/ProductController.html":{}}}],["findall(findallproductsdto",{"_index":836,"title":{},"body":{"controllers/ProductController.html":{}}}],["findall(findcategoriesdto",{"_index":265,"title":{},"body":{"controllers/CategoryController.html":{}}}],["findall(findpurchasesdto",{"_index":1001,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["findall(undefined",{"_index":376,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["findallmine",{"_index":994,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["findallmine(request",{"_index":1006,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["findallproductsdto",{"_index":839,"title":{},"body":{"controllers/ProductController.html":{}}}],["findbyemail",{"_index":1187,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyemail(email",{"_index":1192,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid",{"_index":1137,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findbyid(@req",{"_index":1167,"title":{},"body":{"controllers/UserController.html":{}}}],["findbyid(id",{"_index":1196,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(request",{"_index":1142,"title":{},"body":{"controllers/UserController.html":{}}}],["findcategoriesdto",{"_index":266,"title":{"classes/FindCategoriesDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"coverage.html":{}}}],["findone",{"_index":995,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["findone(purchaseid",{"_index":1055,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["findone(request",{"_index":1009,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["findonebyid",{"_index":254,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyid(@param('id",{"_index":874,"title":{},"body":{"controllers/ProductController.html":{}}}],["findonebyid(id",{"_index":280,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyname",{"_index":255,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["findonebyname(name",{"_index":286,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["findonebyurlname",{"_index":831,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyurlname(@param('urlname",{"_index":877,"title":{},"body":{"controllers/ProductController.html":{}}}],["findonebyurlname(urlname",{"_index":842,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findproductsdto",{"_index":281,"title":{"classes/FindProductsDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["findpurchasesdto",{"_index":632,"title":{"classes/FindPurchasesDto.html":{}},"body":{"classes/FindPurchasesDto.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"coverage.html":{}}}],["findpurchasesdto.userid",{"_index":1038,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["finds",{"_index":1194,"title":{},"body":{"injectables/UserService.html":{}}}],["fire",{"_index":796,"title":{},"body":{"injectables/PrismaService.html":{}}}],["first",{"_index":373,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/PrismaService.html":{}}}],["fitness",{"_index":1475,"title":{},"body":{"license.html":{}}}],["following",{"_index":602,"title":{},"body":{"classes/FileTypeError.html":{},"license.html":{}}}],["forgot",{"_index":1205,"title":{},"body":{"injectables/UserService.html":{}}}],["format",{"_index":612,"title":{},"body":{"classes/FileUploadDto.html":{},"injectables/ProductService.html":{}}}],["formatação",{"_index":1426,"title":{},"body":{"index.html":{}}}],["formats",{"_index":387,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["formaturlname",{"_index":897,"title":{},"body":{"injectables/ProductService.html":{}}}],["formaturlname(name",{"_index":910,"title":{},"body":{"injectables/ProductService.html":{}}}],["found",{"_index":361,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["found.exception",{"_index":737,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["found.exception.ts",{"_index":357,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["found.exception.ts:6",{"_index":360,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["free",{"_index":1437,"title":{},"body":{"license.html":{}}}],["function",{"_index":558,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"coverage.html":{}}}],["functions",{"_index":1295,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1459,"title":{},"body":{"license.html":{}}}],["generate",{"_index":912,"title":{},"body":{"injectables/ProductService.html":{}}}],["get('/admin",{"_index":1036,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["get('/id/:id",{"_index":322,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{}}}],["get(':id",{"_index":1039,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["get(':name",{"_index":325,"title":{},"body":{"controllers/CategoryController.html":{}}}],["get(':urlname",{"_index":876,"title":{},"body":{"controllers/ProductController.html":{}}}],["gets",{"_index":282,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["getting",{"_index":1304,"title":{"index.html":{},"license.html":{}},"body":{}}],["git",{"_index":1341,"title":{},"body":{"index.html":{}}}],["github",{"_index":1321,"title":{},"body":{"index.html":{}}}],["granted",{"_index":1436,"title":{},"body":{"license.html":{}}}],["guard",{"_index":1084,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":20,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["handle",{"_index":555,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{}}}],["handle(error",{"_index":556,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["handled",{"_index":443,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["handlers",{"_index":554,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["handlers/prisma",{"_index":582,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["handlers/user",{"_index":585,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["happened",{"_index":710,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["hash",{"_index":1213,"title":{},"body":{"injectables/UserService.html":{}}}],["hash(createuserdto.password",{"_index":1218,"title":{},"body":{"injectables/UserService.html":{}}}],["hash(updateuserdto.password",{"_index":1233,"title":{},"body":{"injectables/UserService.html":{}}}],["hashed",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["hashedpassword",{"_index":1217,"title":{},"body":{"injectables/UserService.html":{}}}],["hashifupdatingpassword",{"_index":1188,"title":{},"body":{"injectables/UserService.html":{}}}],["hashifupdatingpassword(id",{"_index":1201,"title":{},"body":{"injectables/UserService.html":{}}}],["hashs",{"_index":1414,"title":{},"body":{"index.html":{}}}],["here",{"_index":1098,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["hereby",{"_index":1435,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1481,"title":{},"body":{"license.html":{}}}],["hooks",{"_index":795,"title":{},"body":{"injectables/PrismaService.html":{}}}],["http",{"_index":343,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{}}}],["http://localhost:3000/api",{"_index":1376,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":331,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://docs.nestjs.com/guards",{"_index":21,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["https://docs.nestjs.com/interceptors",{"_index":570,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["https://docs.nestjs.com/recipes/prisma",{"_index":781,"title":{},"body":{"injectables/PrismaService.html":{}}}],["https://github.com/alvaromrveiga/ecommerce",{"_index":1343,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["hyphens",{"_index":925,"title":{},"body":{"injectables/ProductService.html":{}}}],["id",{"_index":233,"title":{},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{}}}],["id'})@apibearerauth()@get(':id",{"_index":1011,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["id'})@isadmin()@get('/id/:id",{"_index":840,"title":{},"body":{"controllers/ProductController.html":{}}}],["identificar",{"_index":1416,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":1245,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":447,"title":{},"body":{"classes/CreateProductDto.html":{},"injectables/ProductService.html":{}}}],["ignoreexpiration",{"_index":97,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["image",{"_index":1538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image.jpg",{"_index":825,"title":{},"body":{"classes/Product.html":{}}}],["imagens",{"_index":1329,"title":{},"body":{"index.html":{}}}],["implements",{"_index":232,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{}}}],["implied",{"_index":1471,"title":{},"body":{"license.html":{}}}],["import",{"_index":49,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{}}}],["imports",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}}}],["include",{"_index":405,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["included",{"_index":1465,"title":{},"body":{"license.html":{}}}],["including",{"_index":1447,"title":{},"body":{"license.html":{}}}],["index",{"_index":22,"title":{"index.html":{}},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":786,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}}}],["information",{"_index":298,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["informações",{"_index":1358,"title":{},"body":{"index.html":{}}}],["inicia",{"_index":1366,"title":{},"body":{"index.html":{}}}],["iniciar",{"_index":1361,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["input",{"_index":586,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["input.exception",{"_index":605,"title":{},"body":{"classes/FileTypeError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/UserInputExceptionHandler.html":{}}}],["input.exception.ts",{"_index":960,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["input.exception.ts:5",{"_index":964,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["inputs",{"_index":347,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["inputted",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["insensitive",{"_index":399,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["instala",{"_index":1349,"title":{},"body":{"index.html":{}}}],["instalado",{"_index":1336,"title":{},"body":{"index.html":{}}}],["instalação",{"_index":1325,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":745,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{}}}],["instantiate",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["instantiates",{"_index":30,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{}}}],["integração",{"_index":1399,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":571,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["intercept(context",{"_index":572,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interceptor",{"_index":564,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interceptors",{"_index":569,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interface",{"_index":549,"title":{"interfaces/ExceptionHandler.html":{}},"body":{"interfaces/ExceptionHandler.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":551,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["interferes",{"_index":788,"title":{},"body":{"injectables/PrismaService.html":{}}}],["invalid",{"_index":594,"title":{},"body":{"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{}}}],["invalidemailorpassworderror",{"_index":209,"title":{"classes/InvalidEmailOrPasswordError.html":{}},"body":{"injectables/AuthService.html":{},"classes/InvalidEmailOrPasswordError.html":{},"coverage.html":{}}}],["invalidpasswordupdateexception",{"_index":657,"title":{"classes/InvalidPasswordUpdateException.html":{}},"body":{"classes/InvalidPasswordUpdateException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["is_admin_key",{"_index":1091,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["is_public_key",{"_index":54,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isadmin",{"_index":304,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["isarray",{"_index":462,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["iscategoryerror",{"_index":696,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscategoryerror(error",{"_index":706,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscategorynameconstraintviolation",{"_index":697,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscategorynameconstraintviolation(error",{"_index":711,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscorrectpassword",{"_index":1234,"title":{},"body":{"injectables/UserService.html":{}}}],["iscreateproducterror",{"_index":698,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscreateproducterror(error",{"_index":714,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isemail",{"_index":529,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserRoleDto.html":{}}}],["isemail({message",{"_index":518,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemailconstraintviolation",{"_index":699,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isemailconstraintviolation(errormeta",{"_index":716,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isenum",{"_index":1116,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["isenum(role",{"_index":1114,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["isint",{"_index":463,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/ReviewPurchaseDto.html":{}}}],["isint()@isoptional",{"_index":457,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isint()@min(1)@max(5",{"_index":1076,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["isnotempty",{"_index":424,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty()@isstring",{"_index":667,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["isnumber",{"_index":464,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{}}}],["isnumber()@isnotempty",{"_index":436,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isnumber()@isoptional",{"_index":450,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isnumber()@ispositive",{"_index":496,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["isnumber()@ispositive()@isoptional",{"_index":491,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["isoptional",{"_index":465,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isarray",{"_index":445,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isoptional()@isstring",{"_index":619,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["isoptional()@type(undefined)@isint()@ispositive",{"_index":622,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["ispasswordvalid",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispositive",{"_index":500,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["isprismaunknownerror",{"_index":700,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isprismaunknownerror(error",{"_index":720,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproducterror",{"_index":701,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproducterror(error",{"_index":726,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproductnameconstraintviolation",{"_index":702,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproductnameconstraintviolation(error",{"_index":728,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["ispublic",{"_index":62,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["ispurchaseerror",{"_index":703,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["ispurchaseerror(error",{"_index":730,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isstring",{"_index":425,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":422,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/DeleteUserDto.html":{}}}],["isstring()@isnotempty()@isoptional",{"_index":1107,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isstring()@isoptional",{"_index":448,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/ReviewPurchaseDto.html":{}}}],["isstring()@minlength(8",{"_index":523,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isusererror",{"_index":704,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isusererror(error",{"_index":732,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isuuid",{"_index":501,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["isuuid(4",{"_index":494,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["jest",{"_index":1420,"title":{},"body":{"index.html":{}}}],["john",{"_index":537,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["join",{"_index":955,"title":{},"body":{"injectables/ProductService.html":{}}}],["jpeg",{"_index":854,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["jpeg|jpg|png",{"_index":1566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jpg",{"_index":855,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["json",{"_index":1408,"title":{},"body":{"index.html":{}}}],["jsonwebtoken",{"_index":74,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["jwt",{"_index":7,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.strategy",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt.strategy.ts",{"_index":72,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"coverage.html":{}}}],["jwt.strategy.ts:13",{"_index":78,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["jwt.strategy.ts:24",{"_index":81,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["jwtauthguard",{"_index":1530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":95,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["jwtmodule",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtsignoptions",{"_index":1520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kind",{"_index":1470,"title":{},"body":{"license.html":{}}}],["lazily",{"_index":800,"title":{},"body":{"injectables/PrismaService.html":{}}}],["leading",{"_index":915,"title":{},"body":{"injectables/ProductService.html":{}}}],["leave",{"_index":798,"title":{},"body":{"injectables/PrismaService.html":{}}}],["length",{"_index":524,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letter",{"_index":374,"title":{},"body":{"injectables/CategoryService.html":{},"classes/CreateUserDto.html":{}}}],["liability",{"_index":1485,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1482,"title":{},"body":{"license.html":{}}}],["library",{"_index":12,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["license",{"_index":1429,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["licença",{"_index":1327,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":1448,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1472,"title":{},"body":{"license.html":{}}}],["limits",{"_index":1561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linting",{"_index":1425,"title":{},"body":{"index.html":{}}}],["listens",{"_index":789,"title":{},"body":{"injectables/PrismaService.html":{}}}],["literal",{"_index":1515,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["logged",{"_index":1000,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["login",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["login(email",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(undefined",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["logincredentialsdto",{"_index":142,"title":{"classes/LoginCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["loginresponse",{"_index":160,"title":{"classes/LoginResponse.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginResponse.html":{},"coverage.html":{}}}],["logs",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["lower",{"_index":914,"title":{},"body":{"injectables/ProductService.html":{}}}],["lowercaseemail",{"_index":1219,"title":{},"body":{"injectables/UserService.html":{}}}],["lowercaseurlname",{"_index":947,"title":{},"body":{"injectables/ProductService.html":{}}}],["lowercaseurlname.trim",{"_index":950,"title":{},"body":{"injectables/ProductService.html":{}}}],["lvaro",{"_index":1432,"title":{},"body":{"license.html":{}}}],["mail",{"_index":520,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{}}}],["mainly",{"_index":1195,"title":{},"body":{"injectables/UserService.html":{}}}],["make",{"_index":924,"title":{},"body":{"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["makes",{"_index":913,"title":{},"body":{"injectables/ProductService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["making",{"_index":724,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["managing",{"_index":363,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["matches",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":536,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":70,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.round(math.random",{"_index":1549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["max",{"_index":1079,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["max(5",{"_index":1083,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["maximageuploadsize",{"_index":1259,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":857,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":1474,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1451,"title":{},"body":{"license.html":{}}}],["message",{"_index":353,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{}}}],["metadata",{"_index":1286,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":23,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{}}}],["migrate:dev",{"_index":1365,"title":{},"body":{"index.html":{}}}],["migrate:test",{"_index":1393,"title":{},"body":{"index.html":{}}}],["migrations",{"_index":1364,"title":{},"body":{"index.html":{}}}],["mimetype",{"_index":1554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["min",{"_index":1080,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["min(1",{"_index":1082,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["minimizar",{"_index":1404,"title":{},"body":{"index.html":{}}}],["minlength",{"_index":530,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":534,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1294,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missingpasswordupdateexception",{"_index":677,"title":{"classes/MissingPasswordUpdateException.html":{}},"body":{"classes/MissingPasswordUpdateException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["mit",{"_index":1428,"title":{},"body":{"index.html":{},"license.html":{}}}],["mode",{"_index":398,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["models/category/category.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["models/product/product.module",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["models/purchase/purchase.module",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["models/user/user.module",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["modify",{"_index":1450,"title":{},"body":{"license.html":{}}}],["modo",{"_index":1368,"title":{},"body":{"index.html":{}}}],["module",{"_index":105,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":107,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":18,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{}}}],["ms",{"_index":1422,"title":{},"body":{"index.html":{}}}],["multer",{"_index":1563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multermodule",{"_index":888,"title":{},"body":{"modules/ProductModule.html":{}}}],["multermodule.register(multeruploadconfig",{"_index":893,"title":{},"body":{"modules/ProductModule.html":{}}}],["multeroptions",{"_index":1540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multeruploadconfig",{"_index":859,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["multiple",{"_index":921,"title":{},"body":{"injectables/ProductService.html":{}}}],["multiplied",{"_index":499,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["máquina",{"_index":1340,"title":{},"body":{"index.html":{}}}],["mínimo",{"_index":1386,"title":{},"body":{"index.html":{}}}],["na",{"_index":1345,"title":{},"body":{"index.html":{}}}],["name",{"_index":35,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["name.substring(1).tolocalelowercase",{"_index":416,"title":{},"body":{"injectables/CategoryService.html":{}}}],["name.tolocalelowercase",{"_index":948,"title":{},"body":{"injectables/ProductService.html":{}}}],["name[0].touppercase",{"_index":415,"title":{},"body":{"injectables/CategoryService.html":{}}}],["ndice",{"_index":1323,"title":{},"body":{"index.html":{}}}],["need",{"_index":43,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["needed",{"_index":421,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserRoleDto.html":{}}}],["needs",{"_index":16,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/ProductController.html":{}}}],["nestinterceptor",{"_index":579,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["nestjs",{"_index":19,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"index.html":{}}}],["nestjs/common",{"_index":50,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/InvalidEmailOrPasswordError.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":51,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"modules/AppModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1275,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":52,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":889,"title":{},"body":{"modules/ProductModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/FileUploadDto.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserWithoutPassword.html":{},"dependencies.html":{}}}],["new",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["next",{"_index":573,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["next.handle().pipe",{"_index":587,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["node.js",{"_index":1335,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":1478,"title":{},"body":{"license.html":{}}}],["normal",{"_index":1013,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["nos",{"_index":1411,"title":{},"body":{"index.html":{}}}],["note",{"_index":974,"title":{},"body":{"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["notfoundexception",{"_index":359,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{}}}],["notfoundexception(error.message",{"_index":1178,"title":{},"body":{"classes/UserInputExceptionHandler.html":{}}}],["notice",{"_index":1463,"title":{},"body":{"license.html":{}}}],["notpurchaseownerexception",{"_index":684,"title":{"classes/NotPurchaseOwnerException.html":{}},"body":{"classes/NotPurchaseOwnerException.html":{},"injectables/PurchaseService.html":{},"coverage.html":{}}}],["number",{"_index":434,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["o",{"_index":1334,"title":{},"body":{"index.html":{}}}],["object",{"_index":717,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["object.values(error.meta)[0][0",{"_index":765,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["object.values(errormeta)[0][0",{"_index":764,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["observable",{"_index":48,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{}}}],["obtaining",{"_index":1440,"title":{},"body":{"license.html":{}}}],["offices",{"_index":474,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["offset",{"_index":392,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["omitting",{"_index":1240,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["omittype",{"_index":460,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/UserWithoutPassword.html":{}}}],["omittype(product",{"_index":467,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["omittype(purchase",{"_index":503,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["omittype(user",{"_index":1242,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["once",{"_index":1301,"title":{},"body":{"miscellaneous/functions.html":{}}}],["one",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["onmoduleinit",{"_index":784,"title":{},"body":{"injectables/PrismaService.html":{}}}],["optional",{"_index":37,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{}}}],["orderby",{"_index":400,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["ordering",{"_index":279,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["orm",{"_index":695,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{}}}],["os",{"_index":1382,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":1490,"title":{},"body":{"license.html":{}}}],["out",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":1498,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":1021,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["owner.exception",{"_index":1062,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["owner.exception.ts",{"_index":686,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"coverage.html":{}}}],["owner.exception.ts:4",{"_index":691,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{}}}],["package",{"_index":1272,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":273,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["pages",{"_index":1322,"title":{},"body":{"index.html":{}}}],["pagination",{"_index":270,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["para",{"_index":1310,"title":{},"body":{"index.html":{}}}],["param",{"_index":300,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["param('id",{"_index":323,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["param('name",{"_index":326,"title":{},"body":{"controllers/CategoryController.html":{}}}],["parameters",{"_index":33,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{}}}],["partial",{"_index":1097,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype",{"_index":1099,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createcategorydto",{"_index":1100,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["partialtype(createproductdto",{"_index":1102,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createpurchasedto",{"_index":1104,"title":{},"body":{"classes/UpdatePurchaseDto.html":{}}}],["partialtype(createuserdto",{"_index":1110,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["particular",{"_index":1476,"title":{},"body":{"license.html":{}}}],["passport",{"_index":11,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["passportmodule",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":86,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["password",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["password.entity",{"_index":1162,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["password.entity.ts",{"_index":1237,"title":{},"body":{"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["password.error",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["password.error..ts",{"_index":651,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"coverage.html":{}}}],["password.error..ts:7",{"_index":655,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{}}}],["pasta",{"_index":1346,"title":{},"body":{"index.html":{}}}],["patch",{"_index":299,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["patch('/review/:id",{"_index":1041,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["patch(':id",{"_index":328,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["patch('picture/:id",{"_index":879,"title":{},"body":{"controllers/ProductController.html":{}}}],["patch('role",{"_index":1171,"title":{},"body":{"controllers/UserController.html":{}}}],["path.extname(file.originalname).tolowercase",{"_index":1558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payed",{"_index":498,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["payload",{"_index":85,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{}}}],["payload.role",{"_index":104,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["payload.sub",{"_index":102,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["payload.ts",{"_index":1511,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["per",{"_index":277,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreatePurchaseDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["percentage",{"_index":453,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["permission",{"_index":1434,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1457,"title":{},"body":{"license.html":{}}}],["person",{"_index":1439,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1458,"title":{},"body":{"license.html":{}}}],["picktype",{"_index":1078,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["picktype(purchase",{"_index":1081,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["picture",{"_index":408,"title":{},"body":{"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"miscellaneous/functions.html":{}}}],["picture'})@isadmin()@fileupload()@patch('picture/:id",{"_index":852,"title":{},"body":{"controllers/ProductController.html":{}}}],["picture.png",{"_index":616,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["please",{"_index":681,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["png",{"_index":856,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["pode",{"_index":1374,"title":{},"body":{"index.html":{}}}],["porta",{"_index":1372,"title":{},"body":{"index.html":{}}}],["portions",{"_index":1467,"title":{},"body":{"license.html":{}}}],["post",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["post('login",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgresql",{"_index":1406,"title":{},"body":{"index.html":{}}}],["postgresql://username:password@localhost:5432/ecommerce",{"_index":1390,"title":{},"body":{"index.html":{}}}],["precisar",{"_index":1332,"title":{},"body":{"index.html":{}}}],["preenchendo",{"_index":1357,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":249,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["prettier",{"_index":1424,"title":{},"body":{"index.html":{}}}],["price",{"_index":438,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["prisma",{"_index":237,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["prisma.categoryuncheckedcreateinput",{"_index":239,"title":{},"body":{"classes/Category.html":{}}}],["prisma.categoryuncheckedcreatenestedmanywithoutproductsinput",{"_index":905,"title":{},"body":{"injectables/ProductService.html":{}}}],["prisma.decimal",{"_index":805,"title":{},"body":{"classes/Product.html":{},"classes/Purchase.html":{}}}],["prisma.productuncheckedcreateinput",{"_index":819,"title":{},"body":{"classes/Product.html":{}}}],["prisma.purchaseuncheckedcreateinput",{"_index":978,"title":{},"body":{"classes/Purchase.html":{}}}],["prisma.service",{"_index":778,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.useruncheckedcreateinput",{"_index":1128,"title":{},"body":{"classes/User.html":{}}}],["prisma/client",{"_index":238,"title":{},"body":{"classes/Category.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"dependencies.html":{}}}],["prisma/client/runtime",{"_index":461,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/PrismaExceptionHandler.html":{}}}],["prisma/prisma.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":782,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientknownrequesterror",{"_index":707,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror",{"_index":734,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror.foreignconstraintviolation",{"_index":754,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror.recordsnotfound",{"_index":756,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror.uniqueconstraintviolation",{"_index":749,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaexceptionhandler",{"_index":581,"title":{"classes/PrismaExceptionHandler.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["prismaexceptionhandler().handle(error",{"_index":590,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["prismamodule",{"_index":113,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":368,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/CategoryService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["probably",{"_index":1204,"title":{},"body":{"injectables/UserService.html":{}}}],["process.env.jwt_secret",{"_index":1523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.exit",{"_index":793,"title":{},"body":{"injectables/PrismaService.html":{}}}],["product",{"_index":430,"title":{"classes/Product.html":{}},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["product'})@apibearerauth()@patch('/review/:id",{"_index":1019,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["product'})@isadmin()@delete(':id')@httpcode(httpstatus.no_content",{"_index":845,"title":{},"body":{"controllers/ProductController.html":{}}}],["product'})@isadmin()@patch(':id",{"_index":848,"title":{},"body":{"controllers/ProductController.html":{}}}],["product'})@isadmin()@post",{"_index":834,"title":{},"body":{"controllers/ProductController.html":{}}}],["product.controller",{"_index":887,"title":{},"body":{"modules/ProductModule.html":{}}}],["product.dto",{"_index":865,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts",{"_index":429,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:26",{"_index":456,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:36",{"_index":437,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:44",{"_index":451,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:51",{"_index":458,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:59",{"_index":449,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:67",{"_index":446,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.service",{"_index":867,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{}}}],["product/dto/find",{"_index":307,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["productcontroller",{"_index":829,"title":{"controllers/ProductController.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{}}}],["productid",{"_index":489,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["productmodule",{"_index":114,"title":{"modules/ProductModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules.html":{},"overview.html":{}}}],["productname",{"_index":402,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindProductsDto.html":{},"injectables/ProductService.html":{}}}],["productnameinuseexception",{"_index":738,"title":{"classes/ProductNameInUseException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"coverage.html":{}}}],["productnotfoundexception",{"_index":740,"title":{"classes/ProductNotFoundException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductNotFoundException.html":{},"coverage.html":{}}}],["products",{"_index":321,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"miscellaneous/functions.html":{}}}],["products'})@isadmin()@get('/id/:id",{"_index":283,"title":{},"body":{"controllers/CategoryController.html":{}}}],["products'})@public()@get",{"_index":837,"title":{},"body":{"controllers/ProductController.html":{}}}],["products'})@public()@get(':name",{"_index":287,"title":{},"body":{"controllers/CategoryController.html":{}}}],["products.dto",{"_index":308,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["products.dto.ts",{"_index":628,"title":{},"body":{"classes/FindProductsDto.html":{},"coverage.html":{}}}],["products.dto.ts:11",{"_index":631,"title":{},"body":{"classes/FindProductsDto.html":{}}}],["products.dto.ts:20",{"_index":630,"title":{},"body":{"classes/FindProductsDto.html":{}}}],["products.dto.ts:29",{"_index":629,"title":{},"body":{"classes/FindProductsDto.html":{}}}],["productservice",{"_index":866,"title":{"injectables/ProductService.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{},"overview.html":{}}}],["productserviceinputexception",{"_index":596,"title":{"classes/ProductServiceInputException.html":{}},"body":{"classes/FileTypeError.html":{},"classes/ProductServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["productstoskip",{"_index":403,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["produtos",{"_index":1314,"title":{},"body":{"index.html":{}}}],["profile",{"_index":1145,"title":{},"body":{"controllers/UserController.html":{}}}],["profile'})@apibearerauth()@get",{"_index":1143,"title":{},"body":{"controllers/UserController.html":{}}}],["projeto",{"_index":1338,"title":{},"body":{"index.html":{}}}],["promise",{"_index":47,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":230,"title":{"properties.html":{}},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"properties.html":{}}}],["provide",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":1468,"title":{},"body":{"license.html":{}}}],["providers",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":41,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public.decorator",{"_index":55,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{}}}],["publish",{"_index":1452,"title":{},"body":{"license.html":{}}}],["purchase",{"_index":488,"title":{"classes/Purchase.html":{}},"body":{"classes/CreatePurchaseDto.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["purchase'})@apibearerauth()@post",{"_index":998,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchase'})@isadmin()@delete(':id')@httpcode(httpstatus.no_content",{"_index":1014,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchase'})@isadmin()@patch(':id",{"_index":1023,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchase.controller",{"_index":1049,"title":{},"body":{"modules/PurchaseModule.html":{}}}],["purchase.dto",{"_index":1027,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdatePurchaseDto.html":{}}}],["purchase.dto.ts",{"_index":487,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["purchase.dto.ts:16",{"_index":1077,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["purchase.dto.ts:18",{"_index":495,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["purchase.dto.ts:23",{"_index":1075,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["purchase.dto.ts:27",{"_index":492,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["purchase.dto.ts:36",{"_index":497,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["purchase.service",{"_index":1031,"title":{},"body":{"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{}}}],["purchase.userid",{"_index":1070,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["purchasecontroller",{"_index":992,"title":{"controllers/PurchaseController.html":{}},"body":{"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"coverage.html":{}}}],["purchased",{"_index":493,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["purchaseid",{"_index":1010,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["purchasemodule",{"_index":115,"title":{"modules/PurchaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PurchaseModule.html":{},"modules.html":{},"overview.html":{}}}],["purchasenotfoundexception",{"_index":741,"title":{"classes/PurchaseNotFoundException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/PurchaseNotFoundException.html":{},"coverage.html":{}}}],["purchases",{"_index":635,"title":{},"body":{"classes/FindPurchasesDto.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["purchases'})@apibearerauth()@get",{"_index":1007,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchases'})@isadmin()@get('/admin",{"_index":1002,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchases.dto",{"_index":1028,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["purchases.dto.ts",{"_index":634,"title":{},"body":{"classes/FindPurchasesDto.html":{},"coverage.html":{}}}],["purchases.dto.ts:11",{"_index":639,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["purchases.dto.ts:18",{"_index":638,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["purchases.dto.ts:27",{"_index":637,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["purchases.dto.ts:36",{"_index":636,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["purchaseservice",{"_index":1030,"title":{"injectables/PurchaseService.html":{}},"body":{"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"injectables/PurchaseService.html":{},"coverage.html":{},"overview.html":{}}}],["purchaseserviceinputexception",{"_index":690,"title":{"classes/PurchaseServiceInputException.html":{}},"body":{"classes/NotPurchaseOwnerException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["purchasestoskip",{"_index":1064,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["purpose",{"_index":1477,"title":{},"body":{"license.html":{}}}],["que",{"_index":1387,"title":{},"body":{"index.html":{}}}],["query",{"_index":302,"title":{},"body":{"controllers/CategoryController.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{}}}],["quot",{"_index":926,"title":{},"body":{"injectables/ProductService.html":{}}}],["quot;brand1",{"_index":929,"title":{},"body":{"injectables/ProductService.html":{}}}],["raiz",{"_index":1356,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["received",{"_index":672,"title":{},"body":{"classes/LoginResponse.html":{}}}],["recent",{"_index":1005,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["reflect",{"_index":1285,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":27,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["regexp",{"_index":598,"title":{},"body":{"classes/FileTypeError.html":{}}}],["registered",{"_index":349,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["regular",{"_index":1567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rejectonnotfound",{"_index":409,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["related",{"_index":1150,"title":{},"body":{"controllers/UserController.html":{}}}],["remove",{"_index":256,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["remove(@param('id",{"_index":332,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["remove(id",{"_index":289,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["remove(request",{"_index":1147,"title":{},"body":{"controllers/UserController.html":{}}}],["removes",{"_index":383,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["replacing",{"_index":1203,"title":{},"body":{"injectables/UserService.html":{}}}],["req",{"_index":1025,"title":{},"body":{"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["request",{"_index":997,"title":{},"body":{"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":1034,"title":{},"body":{"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{}}}],["request.user['userid",{"_index":1168,"title":{},"body":{"controllers/UserController.html":{}}}],["requests",{"_index":1198,"title":{},"body":{"injectables/UserService.html":{}}}],["reset",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["respective",{"_index":577,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["response",{"_index":671,"title":{},"body":{"classes/LoginResponse.html":{}}}],["responsible",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["restriction",{"_index":1446,"title":{},"body":{"license.html":{}}}],["results",{"_index":69,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":66,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1513,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["returns",{"_index":45,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["review",{"_index":689,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{}}}],["review(request",{"_index":1016,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["review(userid",{"_index":1058,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["reviewcomment",{"_index":505,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["reviewnote",{"_index":504,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["reviewpurchasedto",{"_index":1017,"title":{"classes/ReviewPurchaseDto.html":{}},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"coverage.html":{}}}],["reviews",{"_index":1018,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["rights",{"_index":1449,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1288,"title":{},"body":{"dependencies.html":{}}}],["roda",{"_index":1363,"title":{},"body":{"index.html":{}}}],["rodar",{"_index":1381,"title":{},"body":{"index.html":{}}}],["role",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role'})@isadmin()@patch('role",{"_index":1156,"title":{},"body":{"controllers/UserController.html":{}}}],["role.admin",{"_index":1069,"title":{},"body":{"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{}}}],["role.dto",{"_index":1159,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role.dto.ts",{"_index":1112,"title":{},"body":{"classes/UpdateUserRoleDto.html":{},"coverage.html":{}}}],["role.dto.ts:11",{"_index":1113,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["role.dto.ts:18",{"_index":1115,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["rolesguard",{"_index":1085,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["route",{"_index":15,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"classes/LoginResponse.html":{},"guards/RolesGuard.html":{}}}],["rxjs",{"_index":53,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["same",{"_index":1239,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["saved",{"_index":441,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"injectables/UserService.html":{}}}],["search",{"_index":378,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["searching",{"_index":278,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{}}}],["secret",{"_index":1522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":99,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["select",{"_index":406,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["sell",{"_index":1455,"title":{},"body":{"license.html":{}}}],["senhas",{"_index":1415,"title":{},"body":{"index.html":{}}}],["service",{"_index":604,"title":{},"body":{"classes/FileTypeError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["servidor",{"_index":1362,"title":{},"body":{"index.html":{}}}],["set",{"_index":1155,"title":{},"body":{"controllers/UserController.html":{}}}],["setmetadata(is_public_key",{"_index":1532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sets",{"_index":1537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":1464,"title":{},"body":{"license.html":{}}}],["show",{"_index":380,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["showing",{"_index":275,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["shutdown",{"_index":790,"title":{},"body":{"injectables/PrismaService.html":{}}}],["signals",{"_index":791,"title":{},"body":{"injectables/PrismaService.html":{}}}],["single",{"_index":920,"title":{},"body":{"injectables/ProductService.html":{}}}],["singlespaceurlname",{"_index":951,"title":{},"body":{"injectables/ProductService.html":{}}}],["singlespaceurlname.split",{"_index":954,"title":{},"body":{"injectables/ProductService.html":{}}}],["size",{"_index":1539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skip",{"_index":395,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["software",{"_index":1442,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}}}],["spaces",{"_index":918,"title":{},"body":{"injectables/ProductService.html":{}}}],["spacetohyphenurlname",{"_index":953,"title":{},"body":{"injectables/ProductService.html":{}}}],["specific",{"_index":559,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["src/.../access",{"_index":1509,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../file",{"_index":1297,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../is",{"_index":1298,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../jwt.config.ts",{"_index":1517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1296,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../multer",{"_index":1519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":1518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/access",{"_index":6,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:19",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:11",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:27",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:45",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/login",{"_index":663,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.response.ts",{"_index":670,"title":{},"body":{"classes/LoginResponse.html":{},"coverage.html":{}}}],["src/auth/dto/login.response.ts:7",{"_index":675,"title":{},"body":{"classes/LoginResponse.html":{}}}],["src/auth/errors/invalid",{"_index":650,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"coverage.html":{}}}],["src/auth/public.decorator",{"_index":303,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["src/auth/public.decorator.ts",{"_index":1251,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/types/access",{"_index":1512,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/common/decorators/file",{"_index":863,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/decorators/is",{"_index":305,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/common/exceptions/category/category",{"_index":341,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["src/common/exceptions/product/product",{"_index":739,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"coverage.html":{}}}],["src/common/exceptions/purchase/purchase",{"_index":742,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/PurchaseNotFoundException.html":{},"coverage.html":{}}}],["src/common/exceptions/user/email",{"_index":547,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["src/common/exceptions/user/user",{"_index":744,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts",{"_index":1086,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts:12",{"_index":1088,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/guards/roles.guard.ts:22",{"_index":1089,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/interceptors/exception.interceptor.ts",{"_index":563,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/exception.interceptor.ts:23",{"_index":575,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["src/common/interceptors/handlers/exception.handler.ts",{"_index":552,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"coverage.html":{}}}],["src/common/interceptors/handlers/exception.handler.ts:4",{"_index":557,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["src/common/interceptors/handlers/prisma",{"_index":693,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["src/common/interceptors/handlers/user",{"_index":1174,"title":{},"body":{"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["src/config/jwt.config",{"_index":90,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{}}}],["src/config/jwt.config.ts",{"_index":1257,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/multer",{"_index":891,"title":{},"body":{"modules/ProductModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1261,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/models/category/category.controller.ts",{"_index":248,"title":{},"body":{"controllers/CategoryController.html":{},"coverage.html":{}}}],["src/models/category/category.controller.ts:37",{"_index":263,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:51",{"_index":268,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:61",{"_index":284,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:72",{"_index":288,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:83",{"_index":297,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:95",{"_index":292,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.module.ts",{"_index":337,"title":{},"body":{"modules/CategoryModule.html":{}}}],["src/models/category/category.service.ts",{"_index":362,"title":{},"body":{"injectables/CategoryService.html":{},"coverage.html":{}}}],["src/models/category/category.service.ts:102",{"_index":384,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:119",{"_index":382,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:124",{"_index":371,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:13",{"_index":369,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:132",{"_index":386,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:22",{"_index":375,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:36",{"_index":377,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:54",{"_index":379,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:77",{"_index":381,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/dto/create",{"_index":418,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/models/category/dto/find",{"_index":617,"title":{},"body":{"classes/FindCategoriesDto.html":{},"coverage.html":{}}}],["src/models/category/dto/update",{"_index":1095,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/models/category/entities/category.entity.ts",{"_index":228,"title":{},"body":{"classes/Category.html":{},"coverage.html":{}}}],["src/models/category/entities/category.entity.ts:15",{"_index":236,"title":{},"body":{"classes/Category.html":{}}}],["src/models/category/entities/category.entity.ts:9",{"_index":234,"title":{},"body":{"classes/Category.html":{}}}],["src/models/product/dto/create",{"_index":428,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/models/product/dto/file",{"_index":608,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["src/models/product/dto/find",{"_index":627,"title":{},"body":{"classes/FindProductsDto.html":{},"coverage.html":{}}}],["src/models/product/dto/update",{"_index":1101,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/models/product/entities/product.entity.ts",{"_index":804,"title":{},"body":{"classes/Product.html":{},"coverage.html":{}}}],["src/models/product/entities/product.entity.ts:15",{"_index":813,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:21",{"_index":816,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:27",{"_index":814,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:35",{"_index":806,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:41",{"_index":811,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:46",{"_index":815,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:52",{"_index":810,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:58",{"_index":808,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:9",{"_index":812,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/exceptions/file",{"_index":592,"title":{},"body":{"classes/FileTypeError.html":{},"coverage.html":{}}}],["src/models/product/exceptions/product",{"_index":959,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["src/models/product/product.controller.ts",{"_index":830,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{}}}],["src/models/product/product.controller.ts:104",{"_index":846,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:38",{"_index":835,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:50",{"_index":838,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:58",{"_index":841,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:66",{"_index":844,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:81",{"_index":853,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:92",{"_index":849,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.module.ts",{"_index":886,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/models/product/product.service.ts",{"_index":895,"title":{},"body":{"injectables/ProductService.html":{},"coverage.html":{}}}],["src/models/product/product.service.ts:103",{"_index":931,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:115",{"_index":911,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:128",{"_index":934,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:13",{"_index":900,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:143",{"_index":902,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:22",{"_index":906,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:40",{"_index":936,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:51",{"_index":907,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:70",{"_index":908,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:79",{"_index":909,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:88",{"_index":932,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/purchase/dto/create",{"_index":486,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"coverage.html":{}}}],["src/models/purchase/dto/find",{"_index":633,"title":{},"body":{"classes/FindPurchasesDto.html":{},"coverage.html":{}}}],["src/models/purchase/dto/review",{"_index":1074,"title":{},"body":{"classes/ReviewPurchaseDto.html":{},"coverage.html":{}}}],["src/models/purchase/dto/update",{"_index":1103,"title":{},"body":{"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["src/models/purchase/entities/purchase.entity.ts",{"_index":966,"title":{},"body":{"classes/Purchase.html":{},"coverage.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:13",{"_index":977,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:18",{"_index":970,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:24",{"_index":967,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:31",{"_index":976,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:36",{"_index":973,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:41",{"_index":971,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:46",{"_index":968,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:8",{"_index":969,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/exceptions/not",{"_index":685,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"coverage.html":{}}}],["src/models/purchase/exceptions/purchase",{"_index":1073,"title":{},"body":{"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["src/models/purchase/purchase.controller.ts",{"_index":993,"title":{},"body":{"controllers/PurchaseController.html":{},"coverage.html":{}}}],["src/models/purchase/purchase.controller.ts:101",{"_index":1020,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:115",{"_index":1024,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:127",{"_index":1015,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:38",{"_index":999,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:55",{"_index":1003,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:69",{"_index":1008,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:85",{"_index":1012,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.module.ts",{"_index":1048,"title":{},"body":{"modules/PurchaseModule.html":{}}}],["src/models/purchase/purchase.service.ts",{"_index":1050,"title":{},"body":{"injectables/PurchaseService.html":{},"coverage.html":{}}}],["src/models/purchase/purchase.service.ts:118",{"_index":1060,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:135",{"_index":1057,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:15",{"_index":1051,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:24",{"_index":1053,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:43",{"_index":1054,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:71",{"_index":1056,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:93",{"_index":1059,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/user/dto/create",{"_index":514,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/models/user/dto/delete",{"_index":542,"title":{},"body":{"classes/DeleteUserDto.html":{},"coverage.html":{}}}],["src/models/user/dto/update",{"_index":1106,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"coverage.html":{}}}],["src/models/user/entities/user",{"_index":1236,"title":{},"body":{"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["src/models/user/entities/user.entity",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/models/user/entities/user.entity.ts",{"_index":1117,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/models/user/entities/user.entity.ts:19",{"_index":1125,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:25",{"_index":1121,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:31",{"_index":1124,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:37",{"_index":1123,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:43",{"_index":1119,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:49",{"_index":1120,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:55",{"_index":1127,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:9",{"_index":1122,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/exceptions/invalid",{"_index":658,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{},"coverage.html":{}}}],["src/models/user/exceptions/missing",{"_index":678,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{},"coverage.html":{}}}],["src/models/user/exceptions/user",{"_index":1176,"title":{},"body":{"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["src/models/user/user.controller.ts",{"_index":1136,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/models/user/user.controller.ts:37",{"_index":1141,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:45",{"_index":1144,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:55",{"_index":1153,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:68",{"_index":1157,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:79",{"_index":1149,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.module",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/models/user/user.module.ts",{"_index":1183,"title":{},"body":{"modules/UserModule.html":{}}}],["src/models/user/user.service",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/models/user/user.service.ts",{"_index":1186,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/models/user/user.service.ts:107",{"_index":1202,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:132",{"_index":1211,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:17",{"_index":1190,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:26",{"_index":1191,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:44",{"_index":1197,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:56",{"_index":1193,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:63",{"_index":1208,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:80",{"_index":1209,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:94",{"_index":1207,"title":{},"body":{"injectables/UserService.html":{}}}],["src/prisma/prisma.module",{"_index":339,"title":{},"body":{"modules/CategoryModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}}}],["src/prisma/prisma.module.ts",{"_index":776,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":388,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":779,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:15",{"_index":797,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:25",{"_index":787,"title":{},"body":{"injectables/PrismaService.html":{}}}],["start:dev",{"_index":1370,"title":{},"body":{"index.html":{}}}],["started",{"_index":1305,"title":{"index.html":{},"license.html":{}},"body":{}}],["starting",{"_index":272,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["starts",{"_index":1299,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statements",{"_index":1246,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":344,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["stock",{"_index":433,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["storage",{"_index":1541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategy",{"_index":88,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["street",{"_index":540,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["string",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"miscellaneous/variables.html":{}}}],["studio",{"_index":1380,"title":{},"body":{"index.html":{}}}],["studio:test",{"_index":1401,"title":{},"body":{"index.html":{}}}],["sua",{"_index":1339,"title":{},"body":{"index.html":{}}}],["sub",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":1460,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1454,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1466,"title":{},"body":{"license.html":{}}}],["successfully",{"_index":673,"title":{},"body":{"classes/LoginResponse.html":{}}}],["summary",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":60,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{}}}],["super('category",{"_index":355,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{}}}],["super('e",{"_index":548,"title":{},"body":{"classes/EmailInUseException.html":{}}}],["super('invalid",{"_index":656,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{}}}],["super('please",{"_index":683,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["super('product",{"_index":894,"title":{},"body":{"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{}}}],["super('purchase",{"_index":692,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"classes/PurchaseNotFoundException.html":{}}}],["super('user",{"_index":1185,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["super(`file",{"_index":606,"title":{},"body":{"classes/FileTypeError.html":{}}}],["super(message",{"_index":965,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["super.canactivate(context",{"_index":68,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["supertest",{"_index":1421,"title":{},"body":{"index.html":{}}}],["support",{"_index":1495,"title":{},"body":{"modules.html":{}}}],["supports",{"_index":601,"title":{},"body":{"classes/FileTypeError.html":{}}}],["svg",{"_index":1496,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1291,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["switch",{"_index":746,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["system",{"_index":350,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"controllers/UserController.html":{},"classes/UserNotFoundException.html":{}}}],["table",{"_index":1271,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1270,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":396,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["tecnologias",{"_index":1326,"title":{},"body":{"index.html":{}}}],["ter",{"_index":1333,"title":{},"body":{"index.html":{}}}],["test",{"_index":1398,"title":{},"body":{"index.html":{}}}],["test:all",{"_index":1395,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1400,"title":{},"body":{"index.html":{}}}],["test?schema=public",{"_index":1391,"title":{},"body":{"index.html":{}}}],["testes",{"_index":1383,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":801,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":802,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.authservice.login(email",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.capitalizeonlyfirstletter(createcategorydto.name",{"_index":389,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.capitalizeonlyfirstletter(name",{"_index":410,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.capitalizeonlyfirstletter(updatecategorydto.name",{"_index":417,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryservice.create(createcategorydto",{"_index":319,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findall(findcategoriesdto",{"_index":320,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findonebyid(id",{"_index":324,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findonebyname(name",{"_index":327,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.remove(id",{"_index":333,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.update(id",{"_index":329,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.connectcategoriesbyid(createproductdto.categories",{"_index":938,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.formaturlname(createproductdto.name",{"_index":937,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.formaturlname(updateproductdto.name",{"_index":956,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.hashifupdatingpassword(id",{"_index":1224,"title":{},"body":{"injectables/UserService.html":{}}}],["this.iscategoryerror(error",{"_index":760,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.iscategorynameconstraintviolation(error",{"_index":752,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.iscreateproducterror(error",{"_index":759,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isemailconstraintviolation(error.meta",{"_index":750,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isprismaunknownerror(error",{"_index":761,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isproducterror(error",{"_index":758,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isproductnameconstraintviolation(error",{"_index":751,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.ispurchaseerror(error",{"_index":755,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isusererror(error",{"_index":757,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.jwtservice.sign(payload",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.category.create",{"_index":390,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.delete",{"_index":414,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.findmany",{"_index":394,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.findunique",{"_index":404,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.update",{"_index":413,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.product.create",{"_index":939,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.delete",{"_index":946,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.findmany",{"_index":942,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.findunique",{"_index":943,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.update",{"_index":940,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.purchase.create",{"_index":1063,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.purchase.delete",{"_index":1072,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.purchase.findmany",{"_index":1065,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.purchase.findunique",{"_index":1068,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.purchase.update",{"_index":1071,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.user.create",{"_index":1221,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.delete",{"_index":1230,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":1222,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":1225,"title":{},"body":{"injectables/UserService.html":{}}}],["this.productservice.create(createproductdto",{"_index":871,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findall(findallproductsdto",{"_index":873,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findonebyid(id",{"_index":875,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findonebyurlname(urlname",{"_index":878,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.remove(id",{"_index":882,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.update(id",{"_index":881,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.uploadpicture(id",{"_index":880,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.purchaseservice.create(userid",{"_index":1035,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.findall(findpurchasesdto",{"_index":1037,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.findone(purchaseid",{"_index":1040,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.remove(id",{"_index":1044,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.review(userid",{"_index":1042,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.update(id",{"_index":1043,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.reflector.getallandoverride(is_admin_key",{"_index":1093,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":63,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["this.updatecategoryandname(id",{"_index":412,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.updateproductandurlname(id",{"_index":945,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.userservice.create(createuserdto",{"_index":1166,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyemail(email",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyid(userid",{"_index":1169,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(userid",{"_index":1173,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(userid",{"_index":1170,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateuserrole(updateuserroledto",{"_index":1172,"title":{},"body":{"controllers/UserController.html":{}}}],["this.validatecurrentpassword(id",{"_index":1228,"title":{},"body":{"injectables/UserService.html":{}}}],["this.validateuser(email",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PurchaseService.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{}}}],["thrown",{"_index":1206,"title":{},"body":{"injectables/UserService.html":{}}}],["throws",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{}}}],["tmp",{"_index":1544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["todos",{"_index":1394,"title":{},"body":{"index.html":{}}}],["token",{"_index":93,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"classes/LoginResponse.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["tooling",{"_index":1403,"title":{},"body":{"index.html":{}}}],["tort",{"_index":1489,"title":{},"body":{"license.html":{}}}],["totalprice",{"_index":490,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["trailing",{"_index":916,"title":{},"body":{"injectables/ProductService.html":{}}}],["transform",{"_index":565,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["transformer",{"_index":625,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"dependencies.html":{},"index.html":{}}}],["tratar",{"_index":1418,"title":{},"body":{"index.html":{}}}],["trimmedurlname",{"_index":949,"title":{},"body":{"injectables/ProductService.html":{}}}],["trimmedurlname.replace(/\\s\\s+/g",{"_index":952,"title":{},"body":{"injectables/ProductService.html":{}}}],["true",{"_index":67,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":688,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{}}}],["trying",{"_index":660,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{}}}],["turn",{"_index":919,"title":{},"body":{"injectables/ProductService.html":{}}}],["turned",{"_index":817,"title":{},"body":{"classes/Product.html":{}}}],["type",{"_index":36,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.exception.ts",{"_index":593,"title":{},"body":{"classes/FileTypeError.html":{},"coverage.html":{}}}],["type.exception.ts:6",{"_index":599,"title":{},"body":{"classes/FileTypeError.html":{}}}],["typealiases",{"_index":1507,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":560,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["types/access",{"_index":92,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["typescript",{"_index":1402,"title":{},"body":{"index.html":{}}}],["ui",{"_index":1292,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["um",{"_index":1353,"title":{},"body":{"index.html":{}}}],["unauthenticated",{"_index":1533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":654,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{}}}],["undefined",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{}}}],["uniquesuffix",{"_index":1547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unitários",{"_index":1397,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":725,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["unlicensed",{"_index":1504,"title":{},"body":{"properties.html":{}}}],["up",{"_index":1565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updatable",{"_index":1096,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["update",{"_index":257,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["update(id",{"_index":293,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["update(request",{"_index":1151,"title":{},"body":{"controllers/UserController.html":{}}}],["update.exception",{"_index":1215,"title":{},"body":{"injectables/UserService.html":{}}}],["update.exception.ts",{"_index":659,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"coverage.html":{}}}],["update.exception.ts:6",{"_index":662,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{}}}],["update.exception.ts:7",{"_index":680,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["updatecategoryandname",{"_index":366,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatecategoryandname(id",{"_index":385,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatecategorydto",{"_index":294,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatecategorydto.name",{"_index":411,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatedat",{"_index":1118,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{}}}],["updateproductandurlname",{"_index":898,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateproductandurlname(id",{"_index":933,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateproductdto",{"_index":847,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updateproductdto.name",{"_index":944,"title":{},"body":{"injectables/ProductService.html":{}}}],["updatepurchasedto",{"_index":1022,"title":{"classes/UpdatePurchaseDto.html":{}},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["updates",{"_index":295,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserdto",{"_index":1105,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserdto.currentpassword",{"_index":1232,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto.password",{"_index":1231,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserrole",{"_index":1138,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserrole(updateuserroledto",{"_index":1154,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserroledto",{"_index":1111,"title":{"classes/UpdateUserRoleDto.html":{}},"body":{"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserroledto.email",{"_index":1226,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserroledto.role",{"_index":1227,"title":{},"body":{"injectables/UserService.html":{}}}],["upload",{"_index":600,"title":{},"body":{"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["upload.config",{"_index":892,"title":{},"body":{"modules/ProductModule.html":{}}}],["upload.config.ts",{"_index":1258,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["upload.decorator",{"_index":864,"title":{},"body":{"controllers/ProductController.html":{}}}],["upload.decorator.ts",{"_index":1254,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["upload.dto.ts",{"_index":609,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["upload.dto.ts:10",{"_index":614,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["uploadedfile",{"_index":861,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploading",{"_index":595,"title":{},"body":{"classes/FileTypeError.html":{}}}],["uploadphoto",{"_index":832,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploadphoto(id",{"_index":850,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploadpicture",{"_index":899,"title":{},"body":{"injectables/ProductService.html":{}}}],["uploadpicture(id",{"_index":935,"title":{},"body":{"injectables/ProductService.html":{}}}],["uploads",{"_index":851,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["url",{"_index":818,"title":{},"body":{"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["urlname",{"_index":407,"title":{},"body":{"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["urlname'})@public()@get(':urlname",{"_index":843,"title":{},"body":{"controllers/ProductController.html":{}}}],["use",{"_index":354,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"license.html":{}}}],["use.exception",{"_index":736,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["use.exception.ts",{"_index":342,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"coverage.html":{}}}],["use.exception.ts:6",{"_index":352,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["useclass",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":346,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":138,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":1126,"title":{},"body":{"classes/User.html":{},"controllers/UserController.html":{}}}],["user'})@apibearerauth()@delete()@httpcode(httpstatus.no_content",{"_index":1148,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@apibearerauth()@patch",{"_index":1152,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@public()@post",{"_index":1140,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@public()@post('login')@httpcode(httpstatus.ok",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.controller",{"_index":1184,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":1109,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":515,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":544,"title":{},"body":{"classes/DeleteUserDto.html":{}}}],["user.dto.ts:17",{"_index":521,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":1108,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:28",{"_index":528,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":522,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:44",{"_index":517,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":1241,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["user.id",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.role",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":1163,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user@example.com",{"_index":532,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{}}}],["usercontroller",{"_index":1135,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":101,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"classes/CreatePurchaseDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{}}}],["userinputexceptionhandler",{"_index":584,"title":{"classes/UserInputExceptionHandler.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["userinputexceptionhandler().handle(error",{"_index":589,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["usermodule",{"_index":116,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["usernotfoundexception",{"_index":743,"title":{"classes/UserNotFoundException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["userrole",{"_index":103,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{}}}],["users",{"_index":687,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":187,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userserviceinputexception",{"_index":661,"title":{"classes/UserServiceInputException.html":{}},"body":{"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["userwithoutpassword",{"_index":1160,"title":{"classes/UserWithoutPassword.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["uses",{"_index":10,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{}}}],["usuário",{"_index":1328,"title":{},"body":{"index.html":{}}}],["usuários",{"_index":1313,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":235,"title":{},"body":{"classes/Category.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/User.html":{}}}],["valid",{"_index":1569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":77,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["validate(payload",{"_index":79,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["validatecurrentpassword",{"_index":1189,"title":{},"body":{"injectables/UserService.html":{}}}],["validatecurrentpassword(id",{"_index":1210,"title":{},"body":{"injectables/UserService.html":{}}}],["validated",{"_index":1514,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["validates",{"_index":82,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{}}}],["validateuser",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":426,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"dependencies.html":{},"index.html":{}}}],["validações",{"_index":1410,"title":{},"body":{"index.html":{}}}],["validimageuploadtypesregex",{"_index":1260,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["validimageuploadtypesregex.test",{"_index":1557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validimageuploadtypesregex.test(file.mimetype",{"_index":1555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["value",{"_index":1521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":1252,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1516,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["veiga",{"_index":1433,"title":{},"body":{"license.html":{}}}],["verify",{"_index":1527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1502,"title":{},"body":{"properties.html":{}}}],["visualizar",{"_index":1377,"title":{},"body":{"index.html":{}}}],["voc",{"_index":1331,"title":{},"body":{"index.html":{}}}],["void",{"_index":561,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"miscellaneous/functions.html":{}}}],["warranties",{"_index":1473,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1469,"title":{},"body":{"license.html":{}}}],["way",{"_index":904,"title":{},"body":{"injectables/ProductService.html":{}}}],["web",{"_index":1409,"title":{},"body":{"index.html":{}}}],["wether",{"_index":709,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["wheelchair",{"_index":471,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["whether",{"_index":1486,"title":{},"body":{"license.html":{}}}],["white",{"_index":917,"title":{},"body":{"injectables/ProductService.html":{}}}],["without",{"_index":1146,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"license.html":{}}}],["won't",{"_index":1199,"title":{},"body":{"injectables/UserService.html":{}}}],["words",{"_index":923,"title":{},"body":{"injectables/ProductService.html":{}}}],["world",{"_index":539,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["wrong",{"_index":653,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{}}}],["yarn",{"_index":1351,"title":{},"body":{"index.html":{}}}],["z",{"_index":526,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessJwtAuthGuard.html":{"url":"injectables/AccessJwtAuthGuard.html","title":"injectable - AccessJwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessJwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/access-jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Uses the passport library AuthGuard to check\nif the route needs authentication\nFor more on NestJs Guards: https://docs.nestjs.com/guards\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/access-jwt-auth.guard.ts:13\n                            \n                        \n\n                \n                    \n                            Uses the passport library AuthGuard to check\nif the route needs authentication\nFor more on NestJs Guards: https://docs.nestjs.com/guards\nInstantiates the class and the Reflector dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/access-jwt-auth.guard.ts:28\n                \n            \n\n\n            \n                \n                    If the route uses the Public decorator it\ndoes not need authentication, else it does\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Observable } from 'rxjs';\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n/** Uses the passport library AuthGuard to check\n * if the route needs authentication\n *\n * For more on NestJs Guards: https://docs.nestjs.com/guards\n */\n@Injectable()\nexport class AccessJwtAuthGuard extends AuthGuard('access-jwt') {\n  /** Uses the passport library AuthGuard to check\n   * if the route needs authentication\n   *\n   * For more on NestJs Guards: https://docs.nestjs.com/guards\n   *\n   * Instantiates the class and the Reflector dependency\n   */\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  /** If the route uses the Public decorator it\n   * does not need authentication, else it does\n   */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessJwtStrategy.html":{"url":"injectables/AccessJwtStrategy.html","title":"injectable - AccessJwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessJwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/access-jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Passport library Access JsonWebToken configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/access-jwt.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            Passport library JsonWebToken configuration\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: AccessTokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/access-jwt.strategy.ts:24\n                \n            \n\n\n            \n                \n                    Validates and returns data after JsonWebToken is decrypted\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                AccessTokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { accessJwtConfig } from 'src/config/jwt.config';\nimport { AccessTokenContent } from './types/access-token-content';\nimport { AccessTokenPayload } from './types/access-token-payload';\n\n/** Passport library Access JsonWebToken configuration */\n@Injectable()\nexport class AccessJwtStrategy extends PassportStrategy(\n  Strategy,\n  'access-jwt',\n) {\n  /** Passport library JsonWebToken configuration */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: accessJwtConfig.secret,\n    });\n  }\n\n  /** Validates and returns data after JsonWebToken is decrypted */\n  async validate(payload: AccessTokenPayload): Promise {\n    return {\n      userId: payload.sub,\n      userRole: payload.role,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nPurchaseModule\n\nPurchaseModule\n\nAppModule -->\n\nPurchaseModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CategoryModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            ProductModule\n                        \n                        \n                            PurchaseModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthModule } from './auth/auth.module';\nimport { AccessJwtAuthGuard } from './auth/access-jwt-auth.guard';\nimport { UserModule } from './models/user/user.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { ProductModule } from './models/product/product.module';\nimport { CategoryModule } from './models/category/category.module';\nimport { PurchaseModule } from './models/purchase/purchase.module';\n\n@Module({\n  imports: [\n    UserModule,\n    AuthModule,\n    PrismaModule,\n    ProductModule,\n    CategoryModule,\n    PurchaseModule,\n  ],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: AccessJwtAuthGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                User authentication endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(undefined: LoginCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Logs in user'})@Public()@Post('login')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:19\n                \n            \n\n\n            \n                \n                    Authenticates the User\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { LoginCredentialsDto } from './dto/login-credentials.dto';\nimport { LoginResponse } from './dto/login.response';\nimport { Public } from './public.decorator';\n\n/** User authentication endpoints */\n@ApiTags('authentication')\n@Controller()\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  /** Authenticates the User */\n  @ApiOperation({ summary: 'Logs in user' })\n  @Public()\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  async login(\n    @Body() { email, password }: LoginCredentialsDto,\n  ): Promise {\n    return this.authService.login(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAccessJwtStrategy\n\nAccessJwtStrategy\n\nAuthModule -->\n\nAccessJwtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessJwtStrategy\n                        \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { UserModule } from 'src/models/user/user.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AccessJwtStrategy } from './access-jwt.strategy';\n\n@Module({\n  imports: [UserModule, PassportModule, JwtModule.register({})],\n  providers: [AuthService, AccessJwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for authenticating the user\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Private\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:11\n                            \n                        \n\n                \n                    \n                            Responsible for authenticating the user\nInstantiate the class and the UserService and\nJwtService dependencies\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:27\n                \n            \n\n\n            \n                \n                    Validates if the inputted email exists and\ncompares if the hashed password matches the inputted one.\nIf so, returns the JWT accessToken\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:45\n                \n            \n\n\n            \n                \n                    Validates if the inputted email exists and\ncompares if the hashed password matches the inputted one.\nIf not, throws an error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { compare } from 'bcrypt';\nimport { accessJwtConfig } from 'src/config/jwt.config';\nimport { User } from 'src/models/user/entities/user.entity';\nimport { UserService } from 'src/models/user/user.service';\nimport { InvalidEmailOrPasswordError } from './errors/invalid-email-or-password.error.';\n\n/** Responsible for authenticating the user */\n@Injectable()\nexport class AuthService {\n  /** Responsible for authenticating the user\n   *\n   * Instantiate the class and the UserService and\n   * JwtService dependencies\n   */\n  constructor(\n    private readonly userService: UserService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  /** Validates if the inputted email exists and\n   * compares if the hashed password matches the inputted one.\n   *\n   * If so, returns the JWT accessToken\n   */\n  async login(\n    email: string,\n    password: string,\n  ): Promise {\n    const user = await this.validateUser(email, password);\n\n    const payload = { sub: user.id, role: user.role };\n\n    return {\n      accessToken: this.jwtService.sign(payload, accessJwtConfig),\n    };\n  }\n\n  /** Validates if the inputted email exists and\n   * compares if the hashed password matches the inputted one.\n   *\n   * If not, throws an error\n   */\n  private async validateUser(email: string, password: string): Promise {\n    const user = await this.userService.findByEmail(email);\n\n    if (user) {\n      const isPasswordValid = await compare(password, user.password);\n\n      if (isPasswordValid) {\n        return { ...user, password: undefined };\n      }\n    }\n\n    throw new InvalidEmailOrPasswordError();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/entities/category.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of a Category in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/category/entities/category.entity.ts:9\n                        \n                    \n\n            \n                \n                    Category ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/category/entities/category.entity.ts:15\n                        \n                    \n\n            \n                \n                    Category name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\n/** Describes the properties of a Category in the database */\nexport class Category implements Prisma.CategoryUncheckedCreateInput {\n  /**\n   * Category ID as UUID\n   * @example \"e6cf9a58-438c-4fce-8d85-db3d22db270a\"\n   */\n  id?: string;\n\n  /**\n   * Category name\n   * @example \"Decoration\"\n   */\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoryController.html":{"url":"controllers/CategoryController.html","title":"controller - CategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                category\n            \n\n\n            \n                Description\n            \n            \n                Exposes category CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByName\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin creates a new category'})@IsAdmin()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:37\n                \n            \n\n\n            \n                \n                    Creates a new category, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(findCategoriesDto: FindCategoriesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns all categories'})@Public()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:51\n                \n            \n\n\n            \n                \n                    Returns all categories with pagination\nDefault is starting on page 1 showing 10 results per page,\nsearching and ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findCategoriesDto\n                                    \n                                                FindCategoriesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string, findProductsDto: FindProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin gets category by ID and its products'})@IsAdmin()@Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:61\n                \n            \n\n\n            \n                \n                    Find category by ID, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    findProductsDto\n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByName(name: string, findProductsDto: FindProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns category by name and its products'})@Public()@Get(':name')\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:72\n                \n            \n\n\n            \n                \n                    Find category by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    findProductsDto\n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin deletes category'})@IsAdmin()@Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:95\n                \n            \n\n\n            \n                \n                    Deletes category from database, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin updates category'})@IsAdmin()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:83\n                \n            \n\n\n            \n                \n                    Updates category information, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Public } from 'src/auth/public.decorator';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { FindProductsDto } from '../product/dto/find-products.dto';\nimport { CategoryService } from './category.service';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { FindCategoriesDto } from './dto/find-categories.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { Category } from './entities/category.entity';\n\n/** Exposes category CRUD endpoints */\n@ApiTags('category')\n@Controller('category')\nexport class CategoryController {\n  /** Exposes category CRUD endpoints\n   *\n   * Instantiate class and CategoryService dependency\n   */\n  constructor(private readonly categoryService: CategoryService) {}\n\n  /** Creates a new category, only for admins */\n  @ApiOperation({ summary: 'Admin creates a new category' })\n  @IsAdmin()\n  @Post()\n  async create(\n    @Body() createCategoryDto: CreateCategoryDto,\n  ): Promise {\n    return this.categoryService.create(createCategoryDto);\n  }\n\n  /** Returns all categories with pagination\n   *\n   * Default is starting on page 1 showing 10 results per page,\n   * searching and ordering by name\n   */\n  @ApiOperation({ summary: 'Returns all categories' })\n  @Public()\n  @Get()\n  async findAll(\n    @Query() findCategoriesDto: FindCategoriesDto,\n  ): Promise {\n    return this.categoryService.findAll(findCategoriesDto);\n  }\n\n  /** Find category by ID, only for admins */\n  @ApiOperation({ summary: 'Admin gets category by ID and its products' })\n  @IsAdmin()\n  @Get('/id/:id')\n  async findOneById(\n    @Param('id') id: string,\n    @Query() findProductsDto: FindProductsDto,\n  ): Promise {\n    return this.categoryService.findOneById(id, findProductsDto);\n  }\n\n  /** Find category by name */\n  @ApiOperation({ summary: 'Returns category by name and its products' })\n  @Public()\n  @Get(':name')\n  async findOneByName(\n    @Param('name') name: string,\n    @Query() findProductsDto: FindProductsDto,\n  ): Promise {\n    return this.categoryService.findOneByName(name, findProductsDto);\n  }\n\n  /** Updates category information, only for admins */\n  @ApiOperation({ summary: 'Admin updates category' })\n  @IsAdmin()\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updateCategoryDto: UpdateCategoryDto,\n  ): Promise {\n    return this.categoryService.update(id, updateCategoryDto);\n  }\n\n  /** Deletes category from database, only for admins */\n  @ApiOperation({ summary: 'Admin deletes category' })\n  @IsAdmin()\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async remove(@Param('id') id: string): Promise {\n    return this.categoryService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoryModule.html":{"url":"modules/CategoryModule.html","title":"module - CategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_CategoryModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nPrismaModule->CategoryModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/category/category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoryService } from './category.service';\nimport { CategoryController } from './category.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\n\n@Module({\n  controllers: [CategoryController],\n  imports: [PrismaModule],\n  providers: [CategoryService],\n})\nexport class CategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryNameInUseException.html":{"url":"classes/CategoryNameInUseException.html","title":"class - CategoryNameInUseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryNameInUseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/category/category-name-in-use.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\na category name that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/category/category-name-in-use.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'Category name already in use'. Used when the user inputs\na category name that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * a category name that is already registered in the system\n */\nexport class CategoryNameInUseException extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'Category name already in use'. Used when the user inputs\n   * a category name that is already registered in the system\n   */\n  constructor() {\n    super('Category name already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryNotFoundException.html":{"url":"classes/CategoryNotFoundException.html","title":"class - CategoryNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/category/category-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\na category that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/category/category-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'Category not found'. Used when the user inputs\na category that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * a category that is not registered in the system\n */\nexport class CategoryNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'Category not found'. Used when the user inputs\n   * a category that is not registered in the system\n   */\n  constructor() {\n    super('Category not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/category.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing categories in the database.\nCRUD endpoints are available for categories.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                capitalizeOnlyFirstLetter\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByName\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Private\n                                updateCategoryAndName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/category/category.service.ts:13\n                            \n                        \n\n                \n                    \n                            Responsible for managing categories in the database.\nCRUD endpoints are available for categories.\nInstantiates the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        capitalizeOnlyFirstLetter\n                        \n                    \n                \n            \n            \n                \n                    \n                    capitalizeOnlyFirstLetter(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:124\n                \n            \n\n\n            \n                \n                    Capitalize only the first letter of the category name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:22\n                \n            \n\n\n            \n                \n                    Creates a new category\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: FindCategoriesDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:36\n                \n            \n\n\n            \n                \n                    Returns all categories with pagination and can search by name\nDefault is starting on page 1 showing 10 results per page\nand ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindCategoriesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string, undefined: FindProductsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:54\n                \n            \n\n\n            \n                \n                    Find category by ID and show the products that have this category\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByName(name: string, undefined: FindProductsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:77\n                \n            \n\n\n            \n                \n                    Find category by name and show the products that have this category\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:119\n                \n            \n\n\n            \n                \n                    Removes category from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:102\n                \n            \n\n\n            \n                \n                    Updates category information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        updateCategoryAndName\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCategoryAndName(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:132\n                \n            \n\n\n            \n                \n                    Formats name and updates the category with the new one.\nUsed when the user updates the category name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { FindProductsDto } from '../product/dto/find-products.dto';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { FindCategoriesDto } from './dto/find-categories.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { Category } from './entities/category.entity';\n\n/** Responsible for managing categories in the database.\n * CRUD endpoints are available for categories.\n */\n@Injectable()\nexport class CategoryService {\n  /** Responsible for managing categories in the database.\n   * CRUD endpoints are available for categories.\n   *\n   * Instantiates the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new category */\n  async create(createCategoryDto: CreateCategoryDto): Promise {\n    const name = this.capitalizeOnlyFirstLetter(createCategoryDto.name);\n\n    const category = await this.prisma.category.create({\n      data: { ...createCategoryDto, name },\n    });\n\n    return category;\n  }\n\n  /** Returns all categories with pagination and can search by name\n   * Default is starting on page 1 showing 10 results per page\n   * and ordering by name\n   */\n  async findAll({\n    categoryName = '',\n    page = 1,\n    offset = 10,\n  }: FindCategoriesDto): Promise {\n    const categoriesToSkip = (page - 1) * offset;\n\n    return this.prisma.category.findMany({\n      skip: categoriesToSkip,\n      take: offset,\n      where: {\n        name: { contains: categoryName, mode: 'insensitive' },\n      },\n      orderBy: { name: 'asc' },\n    });\n  }\n\n  /** Find category by ID and show the products that have this category */\n  async findOneById(\n    id: string,\n    { productName = '', page = 1, offset = 10 }: FindProductsDto,\n  ): Promise {\n    const productsToSkip = (page - 1) * offset;\n\n    const category = await this.prisma.category.findUnique({\n      where: { id },\n      include: {\n        products: {\n          select: { id: true, name: true, urlName: true, picture: true },\n          where: { name: { contains: productName, mode: 'insensitive' } },\n          skip: productsToSkip,\n          take: offset,\n        },\n      },\n      rejectOnNotFound: true,\n    });\n\n    return category;\n  }\n\n  /** Find category by name and show the products that have this category */\n  async findOneByName(\n    name: string,\n    { productName = '', page = 1, offset = 10 }: FindProductsDto,\n  ): Promise {\n    const productsToSkip = (page - 1) * offset;\n\n    name = this.capitalizeOnlyFirstLetter(name);\n\n    const category = await this.prisma.category.findUnique({\n      where: { name },\n      include: {\n        products: {\n          select: { id: true, name: true, urlName: true, picture: true },\n          where: { name: { contains: productName, mode: 'insensitive' } },\n          skip: productsToSkip,\n          take: offset,\n        },\n      },\n      rejectOnNotFound: true,\n    });\n\n    return category;\n  }\n\n  /** Updates category information */\n  async update(\n    id: string,\n    updateCategoryDto: UpdateCategoryDto,\n  ): Promise {\n    if (updateCategoryDto.name) {\n      return this.updateCategoryAndName(id, updateCategoryDto);\n    }\n\n    const category = await this.prisma.category.update({\n      where: { id },\n      data: { ...updateCategoryDto },\n    });\n\n    return category;\n  }\n\n  /** Removes category from database */\n  async remove(id: string): Promise {\n    await this.prisma.category.delete({ where: { id } });\n  }\n\n  /** Capitalize only the first letter of the category name */\n  private capitalizeOnlyFirstLetter(name: string): string {\n    return name[0].toUpperCase() + name.substring(1).toLocaleLowerCase();\n  }\n\n  /** Formats name and updates the category with the new one.\n   *\n   * Used when the user updates the category name.\n   */\n  private updateCategoryAndName(\n    id: string,\n    updateCategoryDto: UpdateCategoryDto,\n  ): Promise {\n    const name = this.capitalizeOnlyFirstLetter(updateCategoryDto.name);\n\n    return this.prisma.category.update({\n      where: { id },\n      data: { ...updateCategoryDto, name },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/dto/create-category.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create a Category\n\n            \n\n\n            \n                Implements\n            \n            \n                            Category\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/create-category.dto.ts:12\n                        \n                    \n\n            \n                \n                    Category name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { Category } from '../entities/category.entity';\n\n/** Describes the fields needed to create a Category */\nexport class CreateCategoryDto implements Category {\n  /**\n   * Category name\n   * @example \"Decoration\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/create-product.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create a Product\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                basePrice\n                            \n                            \n                                    Optional\n                                categories\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                discountPercentage\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                stock\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        basePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Decimal\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:36\n                        \n                    \n\n            \n                \n                    Product price not considering discounts.\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:67\n                        \n                    \n\n            \n                \n                    Category IDs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:59\n                        \n                    \n\n            \n                \n                    Product description\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        discountPercentage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:44\n                        \n                    \n\n            \n                \n                    Product discount in percentage. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:26\n                        \n                    \n\n            \n                \n                    Product name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:51\n                        \n                    \n\n            \n                \n                    Product stock amount. Defaults to 0\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { Decimal } from '@prisma/client/runtime';\nimport {\n  IsArray,\n  IsInt,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { Product } from '../entities/product.entity';\n\n/** Describes the fields needed to create a Product */\nexport class CreateProductDto extends OmitType(Product, [\n  'id',\n  'createdAt',\n  'urlName',\n  'picture',\n] as const) {\n  /**\n   * Product name\n   * @example \"Brand black wheelchair\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Product price not considering discounts.\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 70.00\n   */\n  @IsNumber()\n  @IsNotEmpty()\n  basePrice: string | number | Decimal;\n\n  /**\n   * Product discount in percentage. Defaults to 0\n   * @example 10\n   */\n  @IsNumber()\n  @IsOptional()\n  discountPercentage?: number;\n\n  /** Product stock amount. Defaults to 0\n   * @example 42\n   */\n  @IsInt()\n  @IsOptional()\n  stock?: number;\n\n  /**\n   * Product description\n   * @example \"Black wheelchair for offices\"\n   */\n  @IsString()\n  @IsOptional()\n  description?: string;\n\n  /**\n   * Category IDs\n   * @example [\"857cd575-956b-49f3-a75e-2e651e21b871\", \"fa244865-0878-4688-ac63-e3ecf4939a89\"]\n   */\n  @IsOptional()\n  @IsArray()\n  categories?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePurchaseDto.html":{"url":"classes/CreatePurchaseDto.html","title":"class - CreatePurchaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePurchaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/dto/create-purchase.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create a Purchase\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                amount\n                            \n                            \n                                productId\n                            \n                            \n                                totalPrice\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsPositive()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/create-purchase.dto.ts:27\n                        \n                    \n\n            \n                \n                    Amount purchased of the product\nDefaults to 1\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/create-purchase.dto.ts:18\n                        \n                    \n\n            \n                \n                    Product ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Decimal\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/create-purchase.dto.ts:36\n                        \n                    \n\n            \n                \n                    Price payed per product multiplied by the amount\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { Decimal } from '@prisma/client/runtime';\nimport { IsNumber, IsOptional, IsPositive, IsUUID } from 'class-validator';\nimport { Purchase } from '../entities/purchase.entity';\n\n/** Describes the fields needed to create a Purchase */\nexport class CreatePurchaseDto extends OmitType(Purchase, [\n  'id',\n  'userId',\n  'createdAt',\n  'reviewNote',\n  'reviewComment',\n]) {\n  /** Product ID as UUID\n   * @example \"5c68ae94-bf3e-4fde-b01f-25d18b3976a0\"\n   */\n  @IsUUID(4)\n  productId: string;\n\n  /** Amount purchased of the product\n   * Defaults to 1\n   * @example 2\n   */\n  @IsNumber()\n  @IsPositive()\n  @IsOptional()\n  amount?: number;\n\n  /** Price payed per product multiplied by the amount\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 138.75\n   */\n  @IsNumber()\n  @IsPositive()\n  totalPrice: string | number | Decimal;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create an User\n\n            \n\n\n            \n                Implements\n            \n            \n                            User\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:44\n                        \n                    \n\n            \n                \n                    User address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({message: 'Must be an e-mail'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:17\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:36\n                        \n                    \n\n            \n                \n                    User name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8, {message: 'Password must have length of at least 8'})@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[a-z]).*$/, {message: 'Password must contain at least 1 number and 1 letter'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:28\n                        \n                    \n\n            \n                \n                    User password must contain at least 1 number and 1 letter\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\nimport { User } from '../entities/user.entity';\n\n/** Describes the fields needed to create an User */\nexport class CreateUserDto implements User {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsEmail({ message: 'Must be an e-mail' })\n  email: string;\n\n  /**\n   * User password must contain at least 1 number and 1 letter\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @MinLength(8, { message: 'Password must have length of at least 8' })\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[a-z]).*$/, {\n    message: 'Password must contain at least 1 number and 1 letter',\n  })\n  password: string;\n\n  /**\n   * User name\n   * @example \"John Doe\"\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  /**\n   * User address\n   * @example \"World Street 0\"\n   */\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserDto.html":{"url":"classes/DeleteUserDto.html","title":"class - DeleteUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/delete-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to delete an User\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/delete-user.dto.ts:11\n                        \n                    \n\n            \n                \n                    User current password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/** Describes the fields needed to delete an User */\nexport class DeleteUserDto {\n  /**\n   * User current password\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  currentPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailInUseException.html":{"url":"classes/EmailInUseException.html","title":"class - EmailInUseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailInUseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/user/email-in-use.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\nan email that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/user/email-in-use.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'E-mail already in use'. Used when the user inputs\nan email that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * an email that is already registered in the system\n */\nexport class EmailInUseException extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'E-mail already in use'. Used when the user inputs\n   * an email that is already registered in the system\n   */\n  constructor() {\n    super('E-mail already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExceptionHandler.html":{"url":"interfaces/ExceptionHandler.html","title":"interface - ExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for Exception Handlers\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        handle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/exception.handler.ts:4\n                \n            \n\n\n            \n                \n                    Function to handle specific error types\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface ExceptionHandler {\n  /** Function to handle specific error types */\n  handle(error: Error): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExceptionInterceptor.html":{"url":"injectables/ExceptionInterceptor.html","title":"injectable - ExceptionInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExceptionInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/exception.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor to transform app erros into HTTP errors\nFor more about NestJs interceptors: https://docs.nestjs.com/interceptors\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler<>)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/exception.interceptor.ts:23\n                \n            \n\n\n            \n                \n                    Catches app errors and throws the\nrespective HTTP error\nUses default NestJs boilerplate, for more\ninformation: https://docs.nestjs.com/interceptors\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler<>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { catchError, Observable } from 'rxjs';\nimport { PrismaExceptionHandler } from './handlers/prisma-exception.handler';\nimport { UserInputExceptionHandler } from './handlers/user-input-exception.handler';\n\n/** Interceptor to transform app erros into HTTP errors\n *\n * For more about NestJs interceptors: https://docs.nestjs.com/interceptors\n */\n@Injectable()\nexport class ExceptionInterceptor implements NestInterceptor {\n  /** Catches app errors and throws the\n   * respective HTTP error\n   *\n   * Uses default NestJs boilerplate, for more\n   * information: https://docs.nestjs.com/interceptors\n   */\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | Promise> {\n    return next.handle().pipe(\n      catchError((error) => {\n        new UserInputExceptionHandler().handle(error);\n\n        new PrismaExceptionHandler().handle(error);\n\n        throw error;\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileTypeError.html":{"url":"classes/FileTypeError.html","title":"class - FileTypeError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileTypeError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/exceptions/file-type.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs an invalid file type\nuploading a picture\n\n            \n\n            \n                Extends\n            \n            \n                        ProductServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fileTypes: RegExp)\n                    \n                \n                        \n                            \n                                Defined in src/models/product/exceptions/file-type.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'File upload only supports the following\nfiletypes - {fileTypes}'.\nUsed when the user inputs an invalid file type\nuploading a picture\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileTypes\n                                                  \n                                                        \n                                                                    RegExp\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ProductServiceInputException } from './product-service-input.exception';\n\n/** Used when the user inputs an invalid file type\n * uploading a picture\n */\nexport class FileTypeError extends ProductServiceInputException {\n  /** Throws exception with message 'File upload only supports the following\n   * filetypes - {fileTypes}'.\n   *\n   * Used when the user inputs an invalid file type\n   * uploading a picture\n   */\n  constructor(fileTypes: RegExp) {\n    super(`File upload only supports the following filetypes - ${fileTypes}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/file-upload.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to upload a file\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', format: 'binary'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/file-upload.dto.ts:10\n                        \n                    \n\n            \n                \n                    Product picture\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\n/** Describes the information needed to upload a file */\nexport class FileUploadDto {\n  /**\n   * Product picture\n   * @example \"picture.png\"\n   */\n  @ApiProperty({ type: 'string', format: 'binary' })\n  file: Express.Multer.File;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindCategoriesDto.html":{"url":"classes/FindCategoriesDto.html","title":"class - FindCategoriesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindCategoriesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/dto/find-categories.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information to search for categories\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                categoryName\n                            \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        categoryName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/find-categories.dto.ts:11\n                        \n                    \n\n            \n                \n                    String containing in category name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/find-categories.dto.ts:29\n                        \n                    \n\n            \n                \n                    Show this amount of categories per page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/find-categories.dto.ts:20\n                        \n                    \n\n            \n                \n                    Show categories in this page\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsInt, IsOptional, IsPositive, IsString } from 'class-validator';\n\n/** Describes the information to search for categories */\nexport class FindCategoriesDto {\n  /** String containing in category name\n   * @example \"chair\"\n   */\n  @IsOptional()\n  @IsString()\n  categoryName?: string;\n\n  /** Show categories in this page\n   * @example 1\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  page?: number;\n\n  /** Show this amount of categories per page\n   * @example 10\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  offset?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindProductsDto.html":{"url":"classes/FindProductsDto.html","title":"class - FindProductsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindProductsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/find-products.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information to search for products\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                page\n                            \n                            \n                                    Optional\n                                productName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-products.dto.ts:29\n                        \n                    \n\n            \n                \n                    Show this amount of products per page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-products.dto.ts:20\n                        \n                    \n\n            \n                \n                    Show products in this page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        productName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-products.dto.ts:11\n                        \n                    \n\n            \n                \n                    String containing in product name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsInt, IsOptional, IsPositive, IsString } from 'class-validator';\n\n/** Describes the information to search for products */\nexport class FindProductsDto {\n  /** String containing in product name\n   * @example \"chair\"\n   */\n  @IsOptional()\n  @IsString()\n  productName?: string;\n\n  /** Show products in this page\n   * @example 1\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  page?: number;\n\n  /** Show this amount of products per page\n   * @example 10\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  offset?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindPurchasesDto.html":{"url":"classes/FindPurchasesDto.html","title":"class - FindPurchasesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindPurchasesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/dto/find-purchases.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information to search for purchases\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                page\n                            \n                            \n                                    Optional\n                                productId\n                            \n                            \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/find-purchases.dto.ts:36\n                        \n                    \n\n            \n                \n                    Show this amount of purchases per page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/find-purchases.dto.ts:27\n                        \n                    \n\n            \n                \n                    Show purchases in this page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/find-purchases.dto.ts:18\n                        \n                    \n\n            \n                \n                    String matching product ID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/find-purchases.dto.ts:11\n                        \n                    \n\n            \n                \n                    String matching user ID\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsInt, IsOptional, IsPositive, IsString } from 'class-validator';\n\n/** Describes the information to search for purchases */\nexport class FindPurchasesDto {\n  /** String matching user ID\n   * @example \"b0e0c99e-541c-463b-8fd6-306e52f9e686\"\n   */\n  @IsOptional()\n  @IsString()\n  userId?: string;\n\n  /** String matching product ID\n   * @example \"26c3fd79-f5bd-4646-a287-32d0226134e2\"\n   */\n  @IsOptional()\n  @IsString()\n  productId?: string;\n\n  /** Show purchases in this page\n   * @example 1\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  page?: number;\n\n  /** Show this amount of purchases per page\n   * @example 10\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  offset?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidEmailOrPasswordError.html":{"url":"classes/InvalidEmailOrPasswordError.html","title":"class - InvalidEmailOrPasswordError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidEmailOrPasswordError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/errors/invalid-email-or-password.error..ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 401. Used when the user inputs\nan email that is not registered in the system\nor the wrong password for a registered email\n\n            \n\n            \n                Extends\n            \n            \n                    UnauthorizedException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/errors/invalid-email-or-password.error..ts:7\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 401 with message 'Invalid email or password'.\nUsed when the user inputs an email that is not registered\nin the system or the wrong password for a registered email\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UnauthorizedException } from '@nestjs/common';\n\n/** Throws HTTP status 401. Used when the user inputs\n * an email that is not registered in the system\n * or the wrong password for a registered email\n */\nexport class InvalidEmailOrPasswordError extends UnauthorizedException {\n  /** Throws HTTP status 401 with message 'Invalid email or password'.\n   * Used when the user inputs an email that is not registered\n   * in the system or the wrong password for a registered email\n   */\n  constructor() {\n    super('Invalid email or password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidPasswordUpdateException.html":{"url":"classes/InvalidPasswordUpdateException.html","title":"class - InvalidPasswordUpdateException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidPasswordUpdateException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/exceptions/invalid-password-update.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs the wrong\ncurrent password when trying to create a new password\n\n            \n\n            \n                Extends\n            \n            \n                        UserServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/models/user/exceptions/invalid-password-update.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Invalid current password'.\nUsed when the user inputs the wrong current password when\ntrying to create a new password\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserServiceInputException } from './user-service-input.exception';\n\n/** Used when the user inputs the wrong\n * current password when trying to create a new password\n */\nexport class InvalidPasswordUpdateException extends UserServiceInputException {\n  /** Throws exception with message 'Invalid current password'.\n   *\n   * Used when the user inputs the wrong current password when\n   * trying to create a new password\n   */\n  constructor() {\n    super('Invalid current password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginCredentialsDto.html":{"url":"classes/LoginCredentialsDto.html","title":"class - LoginCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-credentials.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to authenticate an User to the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-credentials.dto.ts:11\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-credentials.dto.ts:19\n                        \n                    \n\n            \n                \n                    User password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/** Describes the information needed to authenticate an User to the application */\nexport class LoginCredentialsDto {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  email: string;\n\n  /**\n   * User password\n   * @example \"abc123456\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginResponse.html":{"url":"classes/LoginResponse.html","title":"class - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.response.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the response received when the Login route is successfully called\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.response.ts:7\n                        \n                    \n\n            \n                \n                    JWT Authentication token\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LoginResponse {\n  /**\n   * JWT Authentication token\n   * @example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5NWFkMzNhNS0wYjk4LTQ2ODYtYjFmMS1hMTkwNzM0NWJmYzciLCJpYXQiOjE2NDg0NzU3MzEsImV4cCI6MTY0ODQ3NjYzMX0.h3z3JDvHOi6y5C_N0Kt6tdP2nWK_dHBZxioQn7VANNo\"\n   */\n  accessToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MissingPasswordUpdateException.html":{"url":"classes/MissingPasswordUpdateException.html","title":"class - MissingPasswordUpdateException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MissingPasswordUpdateException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/exceptions/missing-password-update.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs only the current password\nor the new password, but both are needed to update\nthe password\n\n            \n\n            \n                Extends\n            \n            \n                        UserServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/models/user/exceptions/missing-password-update.exception.ts:7\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Please enter both new\npassword and current password'.\nUsed when the user inputs only the current password\nor the new password, but both are needed to update\nthe password\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserServiceInputException } from './user-service-input.exception';\n\n/** Used when the user inputs only the current password\n * or the new password, but both are needed to update\n * the password\n */\nexport class MissingPasswordUpdateException extends UserServiceInputException {\n  /** Throws exception with message 'Please enter both new\n   * password and current password'.\n   *\n   * Used when the user inputs only the current password\n   * or the new password, but both are needed to update\n   * the password\n   */\n  constructor() {\n    super('Please enter both new password and current password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotPurchaseOwnerException.html":{"url":"classes/NotPurchaseOwnerException.html","title":"class - NotPurchaseOwnerException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotPurchaseOwnerException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/exceptions/not-purchase-owner.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used if the users try to review a purchase that they do not own\n\n            \n\n            \n                Extends\n            \n            \n                        PurchaseServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/models/purchase/exceptions/not-purchase-owner.exception.ts:4\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Purchase not found'.\nUsed if the users try to review a purchase that they do not own\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PurchaseServiceInputException } from './purchase-service-input.exception';\n\n/** Used if the users try to review a purchase that they do not own */\nexport class NotPurchaseOwnerException extends PurchaseServiceInputException {\n  /** Throws exception with message 'Purchase not found'.\n   *\n   * Used if the users try to review a purchase that they do not own\n   */\n  constructor() {\n    super('Purchase not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrismaExceptionHandler.html":{"url":"classes/PrismaExceptionHandler.html","title":"class - PrismaExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrismaExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/prisma-exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Catches Prisma ORM errors and throws the\nrespective HTTP error\n\n            \n\n\n            \n                Implements\n            \n            \n                            ExceptionHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                            \n                                    Private\n                                isCategoryError\n                            \n                            \n                                    Private\n                                isCategoryNameConstraintViolation\n                            \n                            \n                                    Private\n                                isCreateProductError\n                            \n                            \n                                    Private\n                                isEmailConstraintViolation\n                            \n                            \n                                    Private\n                                isPrismaUnknownError\n                            \n                            \n                                    Private\n                                isProductError\n                            \n                            \n                                    Private\n                                isProductNameConstraintViolation\n                            \n                            \n                                    Private\n                                isPurchaseError\n                            \n                            \n                                    Private\n                                isUserError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:19\n                \n            \n\n\n            \n                \n                    Catches Prisma ORM errors and throws the\nrespective HTTP error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isCategoryError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isCategoryError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:138\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an category prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isCategoryNameConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isCategoryNameConstraintViolation(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:110\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the category name field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isCreateProductError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isCreateProductError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:133\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an create product prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isEmailConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isEmailConstraintViolation(errorMeta: object)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:94\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the email field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorMeta\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isPrismaUnknownError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isPrismaUnknownError(error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:89\n                \n            \n\n\n            \n                \n                    Checks if the error contains clientVersion,\nmaking it an unknown prisma error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isProductError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isProductError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:125\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an update or delete product prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isProductNameConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isProductNameConstraintViolation(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:99\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the product name field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isPurchaseError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isPurchaseError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:143\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an purchase prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isUserError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isUserError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:120\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an user prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PrismaClientKnownRequestError } from '@prisma/client/runtime';\nimport { PrismaError } from 'prisma-error-enum';\nimport { CategoryNameInUseException } from 'src/common/exceptions/category/category-name-in-use.exception';\nimport { CategoryNotFoundException } from 'src/common/exceptions/category/category-not-found.exception';\nimport { ProductNameInUseException } from 'src/common/exceptions/product/product-name-in-use.exception';\nimport { ProductNotFoundException } from 'src/common/exceptions/product/product-not-found.exception';\nimport { PurchaseNotFoundException } from 'src/common/exceptions/purchase/purchase-not-found.exception';\nimport { EmailInUseException } from 'src/common/exceptions/user/email-in-use.exception';\nimport { UserNotFoundException } from 'src/common/exceptions/user/user-not-found.exception';\nimport { ExceptionHandler } from './exception.handler';\n\n/** Catches Prisma ORM errors and throws the\n * respective HTTP error\n */\nexport class PrismaExceptionHandler implements ExceptionHandler {\n  /** Catches Prisma ORM errors and throws the\n   * respective HTTP error\n   */\n  handle(error: Error): void {\n    if (error instanceof PrismaClientKnownRequestError) {\n      switch (error.code) {\n        case PrismaError.UniqueConstraintViolation:\n          if (this.isEmailConstraintViolation(error.meta)) {\n            throw new EmailInUseException();\n          }\n\n          if (this.isProductNameConstraintViolation(error)) {\n            throw new ProductNameInUseException();\n          }\n\n          if (this.isCategoryNameConstraintViolation(error)) {\n            throw new CategoryNameInUseException();\n          }\n          break;\n\n        case PrismaError.ForeignConstraintViolation:\n          if (this.isPurchaseError(error)) {\n            throw new ProductNotFoundException();\n          }\n          break;\n\n        case PrismaError.RecordsNotFound:\n          if (this.isUserError(error)) {\n            throw new UserNotFoundException();\n          }\n\n          if (this.isProductError(error)) {\n            throw new ProductNotFoundException();\n          }\n\n          if (this.isCreateProductError(error)) {\n            throw new CategoryNotFoundException();\n          }\n\n          if (this.isCategoryError(error)) {\n            throw new CategoryNotFoundException();\n          }\n\n          if (this.isPurchaseError(error)) {\n            throw new PurchaseNotFoundException();\n          }\n          break;\n\n        default:\n          throw error;\n      }\n    }\n\n    if (this.isPrismaUnknownError(error)) {\n      if (error.message === 'No Product found') {\n        throw new ProductNotFoundException();\n      }\n\n      if (error.message === 'No Category found') {\n        throw new CategoryNotFoundException();\n      }\n\n      if (error.message === 'No Purchase found') {\n        throw new PurchaseNotFoundException();\n      }\n    }\n\n    throw error;\n  }\n\n  /** Checks if the error contains clientVersion,\n   * making it an unknown prisma error\n   * */\n  private isPrismaUnknownError(error): boolean {\n    return !!error.clientVersion;\n  }\n\n  /** Returns wether the error happened in the email field or not */\n  private isEmailConstraintViolation(errorMeta: object): boolean {\n    return Object.values(errorMeta)[0][0] === 'email';\n  }\n\n  /** Returns wether the error happened in the product name field or not */\n  private isProductNameConstraintViolation(\n    error: PrismaClientKnownRequestError,\n  ): boolean {\n    return (\n      (Object.values(error.meta)[0][0] === 'name' ||\n        Object.values(error.meta)[0][0] === 'urlName') &&\n      error.message.includes('prisma.product')\n    );\n  }\n\n  /** Returns wether the error happened in the category name field or not */\n  private isCategoryNameConstraintViolation(\n    error: PrismaClientKnownRequestError,\n  ): boolean {\n    return (\n      Object.values(error.meta)[0][0] === 'name' &&\n      error.message.includes('prisma.category')\n    );\n  }\n\n  /** Returns wether the error happened on an user prisma query or not */\n  private isUserError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.user');\n  }\n\n  /** Returns wether the error happened on an update or delete product prisma query or not */\n  private isProductError(error: PrismaClientKnownRequestError): boolean {\n    return (\n      error.message.includes('prisma.product.update') ||\n      error.message.includes('prisma.product.delete')\n    );\n  }\n\n  /** Returns wether the error happened on an create product prisma query or not */\n  private isCreateProductError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.product.create');\n  }\n\n  /** Returns wether the error happened on an category prisma query or not */\n  private isCategoryError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.category');\n  }\n\n  /** Returns wether the error happened on an purchase prisma query or not */\n  private isPurchaseError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.purchase');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n            \n                Description\n            \n            \n                ORM responsible for connecting to the database\nBoilerplate from https://docs.nestjs.com/recipes/prisma\n\n            \n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:25\n                \n            \n\n\n            \n                \n                    Prisma interferes with NestJS enableShutdownHooks.\nPrisma listens for shutdown signals and will call process.exit()\nbefore your application shutdown hooks fire.\nhttps://docs.nestjs.com/recipes/prisma\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:15\n                \n            \n\n\n            \n                \n                    Optional — if you leave it out,\nPrisma will connect lazily on its first call to the database.\nhttps://docs.nestjs.com/recipes/prisma\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n/** ORM responsible for connecting to the database\n *\n * Boilerplate from https://docs.nestjs.com/recipes/prisma\n */\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  /** Optional — if you leave it out,\n   * Prisma will connect lazily on its first call to the database.\n   *\n   * https://docs.nestjs.com/recipes/prisma\n   */\n  async onModuleInit(): Promise {\n    await this.$connect();\n  }\n\n  /** Prisma interferes with NestJS enableShutdownHooks.\n   * Prisma listens for shutdown signals and will call process.exit()\n   * before your application shutdown hooks fire.\n   *\n   * https://docs.nestjs.com/recipes/prisma\n   */\n  async enableShutdownHooks(app: INestApplication): Promise {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Product.html":{"url":"classes/Product.html","title":"class - Product","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/entities/product.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of a Product in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                basePrice\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                discountPercentage\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                picture\n                            \n                            \n                                    Optional\n                                stock\n                            \n                            \n                                urlName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        basePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Prisma.Decimal\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:35\n                        \n                    \n\n            \n                \n                    Product price not considering discounts.\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:58\n                        \n                    \n\n            \n                \n                    Product createdAt dateString\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:52\n                        \n                    \n\n            \n                \n                    Product description\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        discountPercentage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:41\n                        \n                    \n\n            \n                \n                    Product discount in percentage. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:9\n                        \n                    \n\n            \n                \n                    Product ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:15\n                        \n                    \n\n            \n                \n                    Product name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:27\n                        \n                    \n\n            \n                \n                    Product picture\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:46\n                        \n                    \n\n            \n                \n                    Product stock amount. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        urlName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:21\n                        \n                    \n\n            \n                \n                    Product name turned to url\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\n/** Describes the properties of a Product in the database */\nexport class Product implements Prisma.ProductUncheckedCreateInput {\n  /**\n   * Product ID as UUID\n   * @example \"6f4ca8a4-8aa0-4302-ac1b-7b5547f01b0a\"\n   */\n  id?: string;\n\n  /**\n   * Product name\n   * @example \"Brand black wheelchair\"\n   */\n  name: string;\n\n  /**\n   * Product name turned to url\n   * @example \"brand-black-wheelchair\"\n   */\n  urlName: string;\n\n  /**\n   * Product picture\n   * @example \"image.jpg\"\n   */\n  picture?: string;\n\n  /**\n   * Product price not considering discounts.\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 70.00\n   */\n  basePrice: string | number | Prisma.Decimal;\n\n  /**\n   * Product discount in percentage. Defaults to 0\n   * @example 10\n   */\n  discountPercentage?: number;\n\n  /** Product stock amount. Defaults to 0\n   * @example 42\n   */\n  stock?: number;\n\n  /**\n   * Product description\n   * @example \"Black wheelchair for offices\"\n   */\n  description?: string;\n\n  /**\n   * Product createdAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  createdAt?: string | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductController.html":{"url":"controllers/ProductController.html","title":"controller - ProductController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                product\n            \n\n\n            \n                Description\n            \n            \n                Exposes product CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOneById\n                            \n                            \n                                findOneByUrlName\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                uploadPhoto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createProductDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin creates a new product'})@IsAdmin()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:38\n                \n            \n\n\n            \n                \n                    Creates a new product, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(findAllProductsDto: FindProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns all products'})@Public()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:50\n                \n            \n\n\n            \n                \n                    Returns all products with pagination\nDefault is starting on page 1 showing 10 results per page,\nsearching and ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findAllProductsDto\n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin gets product by ID'})@IsAdmin()@Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:58\n                \n            \n\n\n            \n                \n                    Find product by ID, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByUrlName\n                        \n                    \n                \n            \n            \n                \nfindOneByUrlName(urlName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Gets product by urlName'})@Public()@Get(':urlName')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:66\n                \n            \n\n\n            \n                \n                    Find product by Url Name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    urlName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin deletes product'})@IsAdmin()@Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:104\n                \n            \n\n\n            \n                \n                    Deletes product from database, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin updates product'})@IsAdmin()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:92\n                \n            \n\n\n            \n                \n                    Updates product information, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadPhoto\n                        \n                    \n                \n            \n            \n                \nuploadPhoto(id: string, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin uploads a new product picture'})@IsAdmin()@FileUpload()@Patch('picture/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:81\n                \n            \n\n\n            \n                \n                    Admin uploads a new picture for the product.\nNeeds to be type jpeg, jpg or png and maximum 3MB.\nCheck \nmulterUploadConfig file in the docs.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UploadedFile,\n} from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Public } from 'src/auth/public.decorator';\nimport { FileUpload } from 'src/common/decorators/file-upload.decorator';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { FindProductsDto } from './dto/find-products.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { Product } from './entities/product.entity';\nimport { ProductService } from './product.service';\n\n/** Exposes product CRUD endpoints */\n@ApiTags('product')\n@Controller('product')\nexport class ProductController {\n  /** Exposes product CRUD endpoints\n   *\n   * Instantiate class and ProductService dependency\n   */\n  constructor(private readonly productService: ProductService) {}\n\n  /** Creates a new product, only for admins */\n  @ApiOperation({ summary: 'Admin creates a new product' })\n  @IsAdmin()\n  @Post()\n  create(@Body() createProductDto: CreateProductDto): Promise {\n    return this.productService.create(createProductDto);\n  }\n\n  /** Returns all products with pagination\n   *\n   * Default is starting on page 1 showing 10 results per page,\n   * searching and ordering by name\n   */\n  @ApiOperation({ summary: 'Returns all products' })\n  @Public()\n  @Get()\n  findAll(@Query() findAllProductsDto: FindProductsDto): Promise {\n    return this.productService.findAll(findAllProductsDto);\n  }\n\n  /** Find product by ID, only for admins */\n  @ApiOperation({ summary: 'Admin gets product by ID' })\n  @IsAdmin()\n  @Get('/id/:id')\n  findOneById(@Param('id') id: string): Promise {\n    return this.productService.findOneById(id);\n  }\n\n  /** Find product by Url Name */\n  @ApiOperation({ summary: 'Gets product by urlName' })\n  @Public()\n  @Get(':urlName')\n  findOneByUrlName(@Param('urlName') urlName: string): Promise {\n    return this.productService.findOneByUrlName(urlName);\n  }\n\n  /**\n   * Admin uploads a new picture for the product.\n   * Needs to be type jpeg, jpg or png and maximum 3MB.\n   *\n   * Check \n   * multerUploadConfig file in the docs.\n   */\n  @ApiOperation({ summary: 'Admin uploads a new product picture' })\n  @IsAdmin()\n  @FileUpload()\n  @Patch('picture/:id')\n  uploadPhoto(\n    @Param('id') id: string,\n    @UploadedFile() file: Express.Multer.File,\n  ): Promise {\n    return this.productService.uploadPicture(id, file);\n  }\n\n  /** Updates product information, only for admins */\n  @ApiOperation({ summary: 'Admin updates product' })\n  @IsAdmin()\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateProductDto: UpdateProductDto,\n  ): Promise {\n    return this.productService.update(id, updateProductDto);\n  }\n\n  /** Deletes product from database, only for admins */\n  @ApiOperation({ summary: 'Admin deletes product' })\n  @IsAdmin()\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  remove(@Param('id') id: string): Promise {\n    return this.productService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductModule.html":{"url":"modules/ProductModule.html","title":"module - ProductModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_ProductModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nPrismaModule->ProductModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/product/product.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductService } from './product.service';\nimport { ProductController } from './product.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { multerUploadConfig } from 'src/config/multer-upload.config';\n\n@Module({\n  controllers: [ProductController],\n  imports: [PrismaModule, MulterModule.register(multerUploadConfig)],\n  providers: [ProductService],\n})\nexport class ProductModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductNameInUseException.html":{"url":"classes/ProductNameInUseException.html","title":"class - ProductNameInUseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductNameInUseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/product/product-name-in-use.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\na product name that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/product/product-name-in-use.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'Product name already in use'. Used when the user inputs\na product name that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * a product name that is already registered in the system\n */\nexport class ProductNameInUseException extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'Product name already in use'. Used when the user inputs\n   * a product name that is already registered in the system\n   */\n  constructor() {\n    super('Product name already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductNotFoundException.html":{"url":"classes/ProductNotFoundException.html","title":"class - ProductNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/product/product-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\na product that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/product/product-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'Product not found'. Used when the user inputs\na product that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * a product that is not registered in the system\n */\nexport class ProductNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'Product not found'. Used when the user inputs\n   * a product that is not registered in the system\n   */\n  constructor() {\n    super('Product not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductService.html":{"url":"injectables/ProductService.html","title":"injectable - ProductService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/product.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing products in the database.\nCRUD endpoints are available for products.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                connectCategoriesById\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUrlName\n                            \n                            \n                                    Private\n                                formatUrlName\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Private\n                                updateProductAndUrlName\n                            \n                            \n                                    Async\n                                uploadPicture\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/product/product.service.ts:13\n                            \n                        \n\n                \n                    \n                            Responsible for managing products in the database.\nCRUD endpoints are available for products.\nInstantiates the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        connectCategoriesById\n                        \n                    \n                \n            \n            \n                \n                    \n                    connectCategoriesById(categories: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:143\n                \n            \n\n\n            \n                \n                    Format the categories IDs array into the prisma query way\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categories\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Prisma.CategoryUncheckedCreateNestedManyWithoutProductsInput\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createProductDto: CreateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:22\n                \n            \n\n\n            \n                \n                    Creates a new product\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: FindProductsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:51\n                \n            \n\n\n            \n                \n                    Returns all products with pagination\nDefault is starting on page 1 showing 10 results per page\nand ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:70\n                \n            \n\n\n            \n                \n                    Find product by ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUrlName(urlName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:79\n                \n            \n\n\n            \n                \n                    Find product by Url Name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    urlName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        formatUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    formatUrlName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:115\n                \n            \n\n\n            \n                \n                    Formats the name to generate an urlName.\nMakes the name lower case, remove leading and trailing white spaces,\nturn to single the multiple spaces between words and make\nsingle spaces hyphens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            &quot; BraNd1    chAir   &quot; becomes &quot;brand1-chair&quot;\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:103\n                \n            \n\n\n            \n                \n                    Removes product from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:88\n                \n            \n\n\n            \n                \n                    Updates product information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        updateProductAndUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProductAndUrlName(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:128\n                \n            \n\n\n            \n                \n                    Formats UrlName and updates the product with the new one.\nUsed when the user updates the product name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPicture\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPicture(id: string, file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:40\n                \n            \n\n\n            \n                \n                    Uploads new product picture\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { FindProductsDto } from './dto/find-products.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { Product } from './entities/product.entity';\n\n/** Responsible for managing products in the database.\n * CRUD endpoints are available for products.\n */\n@Injectable()\nexport class ProductService {\n  /** Responsible for managing products in the database.\n   * CRUD endpoints are available for products.\n   *\n   * Instantiates the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new product */\n  async create(createProductDto: CreateProductDto): Promise {\n    const urlName = this.formatUrlName(createProductDto.name);\n\n    const categories = this.connectCategoriesById(createProductDto.categories);\n\n    const product = await this.prisma.product.create({\n      data: {\n        ...createProductDto,\n        urlName,\n        categories,\n      },\n      include: { categories: { select: { name: true } } },\n    });\n\n    return product;\n  }\n\n  /** Uploads new product picture */\n  async uploadPicture(id: string, file: Express.Multer.File): Promise {\n    return this.prisma.product.update({\n      where: { id },\n      data: { picture: file.filename },\n    });\n  }\n\n  /** Returns all products with pagination\n   * Default is starting on page 1 showing 10 results per page\n   * and ordering by name\n   */\n  async findAll({\n    productName = '',\n    page = 1,\n    offset = 10,\n  }: FindProductsDto): Promise {\n    const productsToSkip = (page - 1) * offset;\n\n    return this.prisma.product.findMany({\n      skip: productsToSkip,\n      take: offset,\n      where: {\n        name: { contains: productName, mode: 'insensitive' },\n      },\n      orderBy: { name: 'asc' },\n      include: { categories: { select: { name: true } } },\n    });\n  }\n\n  /** Find product by ID */\n  async findOneById(id: string): Promise {\n    return this.prisma.product.findUnique({\n      where: { id },\n      include: { categories: { select: { name: true } } },\n      rejectOnNotFound: true,\n    });\n  }\n\n  /** Find product by Url Name */\n  async findOneByUrlName(urlName: string): Promise {\n    return this.prisma.product.findUnique({\n      where: { urlName },\n      include: { categories: { select: { name: true } } },\n      rejectOnNotFound: true,\n    });\n  }\n\n  /** Updates product information */\n  async update(\n    id: string,\n    updateProductDto: UpdateProductDto,\n  ): Promise {\n    if (updateProductDto.name) {\n      return this.updateProductAndUrlName(id, updateProductDto);\n    }\n\n    return this.prisma.product.update({\n      where: { id },\n      data: { ...updateProductDto },\n    });\n  }\n\n  /** Removes product from database */\n  async remove(id: string): Promise {\n    await this.prisma.product.delete({ where: { id } });\n  }\n\n  /** Formats the name to generate an urlName.\n   *\n   * Makes the name lower case, remove leading and trailing white spaces,\n   * turn to single the multiple spaces between words and make\n   * single spaces hyphens\n   *\n   * @example \" BraNd1    chAir   \" becomes \"brand1-chair\"\n   */\n  private formatUrlName(name: string): string {\n    const lowerCaseUrlName = name.toLocaleLowerCase();\n    const trimmedUrlName = lowerCaseUrlName.trim();\n    const singleSpaceUrlName = trimmedUrlName.replace(/\\s\\s+/g, ' ');\n    const spaceToHyphenUrlName = singleSpaceUrlName.split(' ').join('-');\n\n    return spaceToHyphenUrlName;\n  }\n\n  /** Formats UrlName and updates the product with the new one.\n   *\n   * Used when the user updates the product name.\n   */\n  private updateProductAndUrlName(\n    id: string,\n    updateProductDto: UpdateProductDto,\n  ): Promise {\n    const urlName = this.formatUrlName(updateProductDto.name);\n\n    return this.prisma.product.update({\n      where: { id },\n      data: { ...updateProductDto, urlName },\n    });\n  }\n\n  /**\n   * Format the categories IDs array into the prisma query way\n   */\n  private connectCategoriesById(\n    categories: string[],\n  ): Prisma.CategoryUncheckedCreateNestedManyWithoutProductsInput {\n    let categoriesConnection = { connect: [] };\n\n    if (categories) {\n      categoriesConnection = {\n        connect: categories.map((category) => {\n          return { id: category };\n        }),\n      };\n    }\n\n    return categoriesConnection;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductServiceInputException.html":{"url":"classes/ProductServiceInputException.html","title":"class - ProductServiceInputException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductServiceInputException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/exceptions/product-service-input.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to extend another exception to make it\ninstanceof ProductServiceInputException\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/product/exceptions/product-service-input.exception.ts:5\n                            \n                        \n\n                \n                    \n                            Used to extend another exception to make it\ninstanceof ProductServiceInputException\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ProductServiceInputException extends Error {\n  /**\n   * Used to extend another exception to make it\n   * instanceof ProductServiceInputException\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Purchase.html":{"url":"classes/Purchase.html","title":"class - Purchase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Purchase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/entities/purchase.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of a Purchase in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                amount\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                productId\n                            \n                            \n                                    Optional\n                                reviewComment\n                            \n                            \n                                    Optional\n                                reviewNote\n                            \n                            \n                                totalPrice\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:24\n                        \n                    \n\n            \n                \n                    Amount purchased of the product\nDefaults to 1\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:46\n                        \n                    \n\n            \n                \n                    Purchase createdAt dateString\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:8\n                        \n                    \n\n            \n                \n                    Purchase ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:18\n                        \n                    \n\n            \n                \n                    Product ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        reviewComment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:41\n                        \n                    \n\n            \n                \n                    Product review comment\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        reviewNote\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:36\n                        \n                    \n\n            \n                \n                    Product review note, from 1 to 5\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Prisma.Decimal\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:31\n                        \n                    \n\n            \n                \n                    Price payed per product multiplied by the amount\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:13\n                        \n                    \n\n            \n                \n                    User ID as UUID\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\n/** Describes the properties of a Purchase in the database */\nexport class Purchase implements Prisma.PurchaseUncheckedCreateInput {\n  /** Purchase ID as UUID\n   * @example \"b076f72e-f70b-4368-949e-1811c405c0f7\"\n   */\n  id?: string;\n\n  /** User ID as UUID\n   * @example \"a04bb2db-fecd-4889-979e-95f273eb70e1\"\n   */\n  userId: string;\n\n  /** Product ID as UUID\n   * @example \"5c68ae94-bf3e-4fde-b01f-25d18b3976a0\"\n   */\n  productId: string;\n\n  /** Amount purchased of the product\n   * Defaults to 1\n   * @example 2\n   */\n  amount?: number;\n\n  /** Price payed per product multiplied by the amount\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 138.75\n   */\n  totalPrice: string | number | Prisma.Decimal;\n\n  /** Product review note, from 1 to 5\n   * @example 5\n   */\n  reviewNote?: number;\n\n  /** Product review comment\n   * @example \"Amazing wheelchair!\"\n   */\n  reviewComment?: string;\n\n  /** Purchase createdAt dateString\n   * @example \"2022-05-13T15:41:28.527Z\"\n   */\n  createdAt?: string | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PurchaseController.html":{"url":"controllers/PurchaseController.html","title":"controller - PurchaseController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PurchaseController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/purchase.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                purchase\n            \n\n\n            \n                Description\n            \n            \n                Exposes purchase CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllMine\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                review\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(request: Request, createPurchaseDto: CreatePurchaseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new purchase'})@ApiBearerAuth()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:38\n                \n            \n\n\n            \n                \n                    Creates a new purchase, only for logged users\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPurchaseDto\n                                    \n                                                CreatePurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(findPurchasesDto: FindPurchasesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin gets all purchases'})@IsAdmin()@Get('/admin')\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:55\n                \n            \n\n\n            \n                \n                    Returns all purchases with pagination, only for admins\nDefault is starting on page 1 showing 10 results per page,\nmatching by userId and/or productId and ordering by most recent date\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findPurchasesDto\n                                    \n                                                FindPurchasesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllMine\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllMine(request: Request, findPurchasesDto: FindPurchasesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'User gets all their purchases'})@ApiBearerAuth()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:69\n                \n            \n\n\n            \n                \n                    Returns all users' purchases with pagination,\nDefault is starting on page 1 showing 10 results per page,\nmatching by productId and ordering by most recent date\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    findPurchasesDto\n                                    \n                                                FindPurchasesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(request: Request, purchaseId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns purchase by ID'})@ApiBearerAuth()@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:85\n                \n            \n\n\n            \n                \n                    Find purchase by ID, normal users can only get their purchases,\nAdmins can get any.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    purchaseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin deletes purchase'})@IsAdmin()@Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:127\n                \n            \n\n\n            \n                \n                    Deletes purchase from database, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        review\n                        \n                    \n                \n            \n            \n                \n                    \n                    review(request: Request, purchaseId: string, reviewPurchaseDto: ReviewPurchaseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Reviews purchased product'})@ApiBearerAuth()@Patch('/review/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:101\n                \n            \n\n\n            \n                \n                    Reviews purchased product, must be purchase owner\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    purchaseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reviewPurchaseDto\n                                    \n                                                ReviewPurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updatePurchaseDto: UpdatePurchaseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin updates purchase'})@IsAdmin()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:115\n                \n            \n\n\n            \n                \n                    Updates purchase information, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePurchaseDto\n                                    \n                                                UpdatePurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  Query,\n  Req,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { CreatePurchaseDto } from './dto/create-purchase.dto';\nimport { FindPurchasesDto } from './dto/find-purchases.dto';\nimport { ReviewPurchaseDto } from './dto/review-purchase.dto';\nimport { UpdatePurchaseDto } from './dto/update-purchase.dto';\nimport { Purchase } from './entities/purchase.entity';\nimport { PurchaseService } from './purchase.service';\n\n/** Exposes purchase CRUD endpoints */\n@ApiTags('purchase')\n@Controller('purchase')\nexport class PurchaseController {\n  /** Exposes purchase CRUD endpoints\n   *\n   * Instantiate class and PurchaseService dependency\n   */\n  constructor(private readonly purchaseService: PurchaseService) {}\n\n  /** Creates a new purchase, only for logged users */\n  @ApiOperation({ summary: 'Creates a new purchase' })\n  @ApiBearerAuth()\n  @Post()\n  async create(\n    @Req() request: Request,\n    @Body() createPurchaseDto: CreatePurchaseDto,\n  ): Promise {\n    const { userId } = request.user as { userId: string };\n\n    return this.purchaseService.create(userId, createPurchaseDto);\n  }\n\n  /** Returns all purchases with pagination, only for admins\n   *\n   * Default is starting on page 1 showing 10 results per page,\n   * matching by userId and/or productId and ordering by most recent date\n   */\n  @ApiOperation({ summary: 'Admin gets all purchases' })\n  @IsAdmin()\n  @Get('/admin')\n  async findAll(\n    @Query() findPurchasesDto: FindPurchasesDto,\n  ): Promise {\n    return this.purchaseService.findAll(findPurchasesDto);\n  }\n\n  /** Returns all users' purchases with pagination,\n   *\n   * Default is starting on page 1 showing 10 results per page,\n   * matching by productId and ordering by most recent date\n   */\n  @ApiOperation({ summary: 'User gets all their purchases' })\n  @ApiBearerAuth()\n  @Get()\n  async findAllMine(\n    @Req() request: Request,\n    @Query() findPurchasesDto: FindPurchasesDto,\n  ): Promise {\n    const { userId } = request.user as { userId: string };\n    findPurchasesDto.userId = userId;\n\n    return this.purchaseService.findAll(findPurchasesDto);\n  }\n\n  /** Find purchase by ID, normal users can only get their purchases,\n   * Admins can get any.\n   */\n  @ApiOperation({ summary: 'Returns purchase by ID' })\n  @ApiBearerAuth()\n  @Get(':id')\n  async findOne(\n    @Req() request: Request,\n    @Param('id') purchaseId: string,\n  ): Promise {\n    const { userId, userRole } = request.user as {\n      userId: string;\n      userRole: string;\n    };\n\n    return this.purchaseService.findOne(purchaseId, userId, userRole);\n  }\n\n  /** Reviews purchased product, must be purchase owner */\n  @ApiOperation({ summary: 'Reviews purchased product' })\n  @ApiBearerAuth()\n  @Patch('/review/:id')\n  async review(\n    @Req() request: Request,\n    @Param('id') purchaseId: string,\n    @Body() reviewPurchaseDto: ReviewPurchaseDto,\n  ): Promise {\n    const { userId } = request.user as { userId: string };\n\n    return this.purchaseService.review(userId, purchaseId, reviewPurchaseDto);\n  }\n\n  /** Updates purchase information, only for admins */\n  @ApiOperation({ summary: 'Admin updates purchase' })\n  @IsAdmin()\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updatePurchaseDto: UpdatePurchaseDto,\n  ): Promise {\n    return this.purchaseService.update(id, updatePurchaseDto);\n  }\n\n  /** Deletes purchase from database, only for admins */\n  @ApiOperation({ summary: 'Admin deletes purchase' })\n  @IsAdmin()\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async remove(@Param('id') id: string): Promise {\n    return this.purchaseService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PurchaseModule.html":{"url":"modules/PurchaseModule.html","title":"module - PurchaseModule","body":"\n                   \n\n\n\n\n    Modules\n    PurchaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PurchaseModule\n\n\n\ncluster_PurchaseModule_providers\n\n\n\ncluster_PurchaseModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPurchaseModule\n\nPurchaseModule\n\nPurchaseModule -->\n\nPrismaModule->PurchaseModule\n\n\n\n\n\nPurchaseService\n\nPurchaseService\n\nPurchaseModule -->\n\nPurchaseService->PurchaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/purchase/purchase.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PurchaseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PurchaseController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PurchaseService } from './purchase.service';\nimport { PurchaseController } from './purchase.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\n\n@Module({\n  controllers: [PurchaseController],\n  imports: [PrismaModule],\n  providers: [PurchaseService],\n})\nexport class PurchaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PurchaseNotFoundException.html":{"url":"classes/PurchaseNotFoundException.html","title":"class - PurchaseNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PurchaseNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/purchase/purchase-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\na purchase that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/purchase/purchase-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'Purchase not found'. Used when the user inputs\na purchase that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * a purchase that is not registered in the system\n */\nexport class PurchaseNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'Purchase not found'. Used when the user inputs\n   * a purchase that is not registered in the system\n   */\n  constructor() {\n    super('Purchase not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PurchaseService.html":{"url":"injectables/PurchaseService.html","title":"injectable - PurchaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PurchaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/purchase.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing purchases in the database.\nCRUD endpoints are available for purchases.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                review\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/purchase/purchase.service.ts:15\n                            \n                        \n\n                \n                    \n                            Responsible for managing purchases in the database.\nCRUD endpoints are available for purchases.\nInstantiates the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userId: string, createPurchaseDto: CreatePurchaseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:24\n                \n            \n\n\n            \n                \n                    Creates a new purchase\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPurchaseDto\n                                    \n                                                CreatePurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: FindPurchasesDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:43\n                \n            \n\n\n            \n                \n                    Returns all purchases with pagination\nDefault is starting on page 1 showing 10 results per page\nand ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindPurchasesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(purchaseId: string, userId: string, userRole: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:71\n                \n            \n\n\n            \n                \n                    Find purchase by ID, normal users can only get their purchases,\nAdmins can get any.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    purchaseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userRole\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:135\n                \n            \n\n\n            \n                \n                    Removes purchase from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        review\n                        \n                    \n                \n            \n            \n                \n                    \n                    review(userId: string, purchaseId: string, reviewPurchaseDto: ReviewPurchaseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:93\n                \n            \n\n\n            \n                \n                    Users review products purchased by them\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    purchaseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reviewPurchaseDto\n                                    \n                                                ReviewPurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updatePurchaseDto: UpdatePurchaseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:118\n                \n            \n\n\n            \n                \n                    Updates purchase information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePurchaseDto\n                                    \n                                                UpdatePurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Role } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreatePurchaseDto } from './dto/create-purchase.dto';\nimport { FindPurchasesDto } from './dto/find-purchases.dto';\nimport { ReviewPurchaseDto } from './dto/review-purchase.dto';\nimport { UpdatePurchaseDto } from './dto/update-purchase.dto';\nimport { Purchase } from './entities/purchase.entity';\nimport { NotPurchaseOwnerException } from './exceptions/not-purchase-owner.exception';\n\n/** Responsible for managing purchases in the database.\n * CRUD endpoints are available for purchases.\n */\n@Injectable()\nexport class PurchaseService {\n  /** Responsible for managing purchases in the database.\n   * CRUD endpoints are available for purchases.\n   *\n   * Instantiates the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new purchase */\n  async create(\n    userId: string,\n    createPurchaseDto: CreatePurchaseDto,\n  ): Promise {\n    const purchase = await this.prisma.purchase.create({\n      data: { ...createPurchaseDto, userId },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n    });\n\n    return purchase;\n  }\n\n  /** Returns all purchases with pagination\n   * Default is starting on page 1 showing 10 results per page\n   * and ordering by name\n   */\n  async findAll({\n    userId,\n    productId,\n    page = 1,\n    offset = 10,\n  }: FindPurchasesDto): Promise {\n    const purchasesToSkip = (page - 1) * offset;\n\n    const purchases = await this.prisma.purchase.findMany({\n      skip: purchasesToSkip,\n      take: offset,\n      where: {\n        userId: { equals: userId },\n        productId: { equals: productId },\n      },\n      orderBy: { createdAt: 'desc' },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n    });\n\n    return purchases;\n  }\n\n  /** Find purchase by ID, normal users can only get their purchases,\n   * Admins can get any.\n   */\n  async findOne(\n    purchaseId: string,\n    userId: string,\n    userRole: string,\n  ): Promise {\n    const purchase = await this.prisma.purchase.findUnique({\n      where: { id: purchaseId },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n      rejectOnNotFound: true,\n    });\n\n    if (userRole !== Role.ADMIN && purchase.userId !== userId) {\n      throw new NotPurchaseOwnerException();\n    }\n\n    return purchase;\n  }\n\n  /** Users review products purchased by them */\n  async review(\n    userId: string,\n    purchaseId: string,\n    reviewPurchaseDto: ReviewPurchaseDto,\n  ): Promise {\n    const purchase = await this.prisma.purchase.findUnique({\n      where: { id: purchaseId },\n      rejectOnNotFound: true,\n    });\n\n    if (userId !== purchase.userId) {\n      throw new NotPurchaseOwnerException();\n    }\n\n    return this.prisma.purchase.update({\n      where: { id: purchaseId },\n      data: { ...reviewPurchaseDto },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n    });\n  }\n\n  /** Updates purchase information */\n  async update(\n    id: string,\n    updatePurchaseDto: UpdatePurchaseDto,\n  ): Promise {\n    const purchase = await this.prisma.purchase.update({\n      where: { id },\n      data: { ...updatePurchaseDto },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n    });\n\n    return purchase;\n  }\n\n  /** Removes purchase from database */\n  async remove(id: string): Promise {\n    await this.prisma.purchase.delete({ where: { id } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PurchaseServiceInputException.html":{"url":"classes/PurchaseServiceInputException.html","title":"class - PurchaseServiceInputException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PurchaseServiceInputException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/exceptions/purchase-service-input.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to extend another exception to make it\ninstanceof PurchaseServiceInputException\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/purchase/exceptions/purchase-service-input.exception.ts:5\n                            \n                        \n\n                \n                    \n                            Used to extend another exception to make it\ninstanceof PurchaseServiceInputException\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PurchaseServiceInputException extends Error {\n  /**\n   * Used to extend another exception to make it\n   * instanceof PurchaseServiceInputException\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReviewPurchaseDto.html":{"url":"classes/ReviewPurchaseDto.html","title":"class - ReviewPurchaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReviewPurchaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/dto/review-purchase.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to review a Purchase\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                reviewComment\n                            \n                            \n                                reviewNote\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        reviewComment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/review-purchase.dto.ts:23\n                        \n                    \n\n            \n                \n                    Product review comment\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reviewNote\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)@Max(5)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/review-purchase.dto.ts:16\n                        \n                    \n\n            \n                \n                    Product review note, from 1 to 5\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { IsInt, IsOptional, IsString, Max, Min } from 'class-validator';\nimport { Purchase } from '../entities/purchase.entity';\n\n/** Describes the fields needed to review a Purchase */\nexport class ReviewPurchaseDto extends PickType(Purchase, [\n  'reviewNote',\n  'reviewComment',\n]) {\n  /** Product review note, from 1 to 5\n   * @example 5\n   */\n  @IsInt()\n  @Min(1)\n  @Max(5)\n  reviewNote: number;\n\n  /** Product review comment\n   * @example \"Amazing wheelchair!\"\n   */\n  @IsString()\n  @IsOptional()\n  reviewComment?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/roles.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Checks if the user accessing the route is an admin\nFor more on NestJs Guards: https://docs.nestjs.com/guards\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/roles.guard.ts:12\n                            \n                        \n\n                \n                    \n                            Checks if the user accessing the route is an admin\nFor more on NestJs Guards: https://docs.nestjs.com/guards\nInstantiates the class and the Reflector dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guards/roles.guard.ts:22\n                \n            \n\n\n            \n                \n                    If the user is an Admin, access is allowed\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '@prisma/client';\nimport { Observable } from 'rxjs';\nimport { IS_ADMIN_KEY } from '../decorators/is-admin.decorator';\n\n/** Checks if the user accessing the route is an admin\n *\n * For more on NestJs Guards: https://docs.nestjs.com/guards\n */\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  /** Checks if the user accessing the route is an admin\n   *\n   * For more on NestJs Guards: https://docs.nestjs.com/guards\n   *\n   * Instantiates the class and the Reflector dependency\n   */\n  constructor(private reflector: Reflector) {}\n\n  /** If the user is an Admin, access is allowed */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const isAdmin = this.reflector.getAllAndOverride(IS_ADMIN_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    const request = context.switchToHttp().getRequest();\n    const { userRole } = request.user;\n\n    if (isAdmin && userRole === Role.ADMIN) {\n      return true;\n    }\n\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/dto/update-category.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the Category fields that are updatable\nNote that since this is a\nPartial of CreateCategoryDto,\nany field there is optional here\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCategoryDto } from './create-category.dto';\n\n/** Describes the Category fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateCategoryDto,\n * any field there is optional here\n */\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/update-product.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the Product fields that are updatable\nNote that since this is a\nPartial of CreateProductDto,\nany field there is optional here\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateProductDto } from './create-product.dto';\n\n/** Describes the Product fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateProductDto,\n * any field there is optional here\n */\nexport class UpdateProductDto extends PartialType(CreateProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePurchaseDto.html":{"url":"classes/UpdatePurchaseDto.html","title":"class - UpdatePurchaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePurchaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/dto/update-purchase.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the Purchase fields that are updatable\nNote that since this is a\nPartial of CreatePurchaseDto,\nany field there is optional here\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreatePurchaseDto } from './create-purchase.dto';\n\n/** Describes the Purchase fields that are updatable\n *\n * Note that since this is a\n * Partial of CreatePurchaseDto,\n * any field there is optional here\n */\nexport class UpdatePurchaseDto extends PartialType(CreatePurchaseDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the User fields that are updatable\nNote that since this is a\nPartial of CreateUserDto,\nany field there is optional here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                currentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user.dto.ts:19\n                        \n                    \n\n            \n                \n                    User current password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\n\n/** Describes the User fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateUserDto,\n * any field there is optional here\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n  /**\n   * User current password\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  currentPassword?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserRoleDto.html":{"url":"classes/UpdateUserRoleDto.html","title":"class - UpdateUserRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/update-user-role.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to update an User role\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user-role.dto.ts:11\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user-role.dto.ts:18\n                        \n                    \n\n            \n                \n                    User new role\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Role } from '@prisma/client';\nimport { IsEmail, IsEnum } from 'class-validator';\n\n/** Describes the information needed to update an User role */\nexport class UpdateUserRoleDto {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsEmail()\n  email: string;\n\n  /**\n   * User new role\n   * @example \"ADMIN\"\n   */\n  @IsEnum(Role)\n  role: Role;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of an User in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                role\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:43\n                        \n                    \n\n            \n                \n                    User address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:49\n                        \n                    \n\n            \n                \n                    User createdAt dateString\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:25\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:9\n                        \n                    \n\n            \n                \n                    User ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:37\n                        \n                    \n\n            \n                \n                    User name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:31\n                        \n                    \n\n            \n                \n                    User password\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:19\n                        \n                    \n\n            \n                \n                    User's Role.\nCan be \"USER\" or \"ADMIN\".\nAdmin users can handle products\nDefaults to \"USER\"\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:55\n                        \n                    \n\n            \n                \n                    User updatedAt dateString\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma, Role } from '@prisma/client';\n\n/** Describes the properties of an User in the database */\nexport class User implements Prisma.UserUncheckedCreateInput {\n  /**\n   * User ID as UUID\n   * @example \"d31fc56c-7aed-441e-9f7f-151be8d85634\"\n   */\n  id?: string;\n\n  /**\n   * User's Role.\n   * Can be \"USER\" or \"ADMIN\".\n   * Admin users can handle products\n   *\n   * Defaults to \"USER\"\n   * @example \"USER\"\n   */\n  role?: Role;\n\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  email: string;\n\n  /**\n   * User password\n   * @example \"$2b$10$1XpzUYu8FuvuaBb3SC0xzuR9DX7KakbMLt0vLNoZ.UnLntDMFc4LK\"\n   */\n  password: string;\n\n  /**\n   * User name\n   * @example \"John Doe\"\n   */\n  name?: string;\n\n  /**\n   * User address\n   * @example \"World Street 0\"\n   */\n  address?: string;\n\n  /**\n   * User createdAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  createdAt?: string | Date;\n\n  /**\n   * User updatedAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  updatedAt?: string | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                Exposes user CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                updateUserRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new user'})@Public()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:37\n                \n            \n\n\n            \n                \n                    Creates a new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Gets user's own profile'})@ApiBearerAuth()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:45\n                \n            \n\n\n            \n                \n                    Returns user's own profile information without password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(request: Request, deleteUserDto: DeleteUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes user'})@ApiBearerAuth()@Delete()@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:79\n                \n            \n\n\n            \n                \n                    Deletes user and all user related information from the system\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    deleteUserDto\n                                    \n                                                DeleteUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(request: Request, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates user'})@ApiBearerAuth()@Patch()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:55\n                \n            \n\n\n            \n                \n                    Updates user information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserRole\n                        \n                    \n                \n            \n            \n                \nupdateUserRole(updateUserRoleDto: UpdateUserRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin set user's role'})@IsAdmin()@Patch('role')\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:68\n                \n            \n\n\n            \n                \n                    Updates user role, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserRoleDto\n                                    \n                                                UpdateUserRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Patch,\n  Post,\n  Req,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { Public } from 'src/auth/public.decorator';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { DeleteUserDto } from './dto/delete-user.dto';\nimport { UpdateUserRoleDto } from './dto/update-user-role.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserWithoutPassword } from './entities/user-without-password.entity';\nimport { UserService } from './user.service';\n\n/** Exposes user CRUD endpoints */\n@ApiTags('user')\n@Controller('user')\nexport class UserController {\n  /** Exposes user CRUD endpoints\n   *\n   * Instantiate class and UserService dependency\n   */\n  constructor(private readonly userService: UserService) {}\n\n  /** Creates a new user */\n  @ApiOperation({ summary: 'Creates a new user' })\n  @Public()\n  @Post()\n  create(@Body() createUserDto: CreateUserDto): Promise {\n    return this.userService.create(createUserDto);\n  }\n\n  /** Returns user's own profile information without password */\n  @ApiOperation({ summary: \"Gets user's own profile\" })\n  @ApiBearerAuth()\n  @Get()\n  async findById(@Req() request: Request): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.findById(userId);\n  }\n\n  /** Updates user information */\n  @ApiOperation({ summary: 'Updates user' })\n  @ApiBearerAuth()\n  @Patch()\n  update(\n    @Req() request: Request,\n    @Body() updateUserDto: UpdateUserDto,\n  ): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.update(userId, updateUserDto);\n  }\n\n  /** Updates user role, only for admins */\n  @ApiOperation({ summary: \"Admin set user's role\" })\n  @IsAdmin()\n  @Patch('role')\n  updateUserRole(\n    @Body() updateUserRoleDto: UpdateUserRoleDto,\n  ): Promise {\n    return this.userService.updateUserRole(updateUserRoleDto);\n  }\n\n  /** Deletes user and all user related information from the system */\n  @ApiOperation({ summary: 'Deletes user' })\n  @ApiBearerAuth()\n  @Delete()\n  @HttpCode(HttpStatus.NO_CONTENT)\n  remove(\n    @Req() request: Request,\n    @Body() deleteUserDto: DeleteUserDto,\n  ): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.remove(userId, deleteUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserInputExceptionHandler.html":{"url":"classes/UserInputExceptionHandler.html","title":"class - UserInputExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserInputExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/user-input-exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Catches user input errors and throws the\nrespective HTTP error\n\n            \n\n\n            \n                Implements\n            \n            \n                            ExceptionHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/user-input-exception.handler.ts:14\n                \n            \n\n\n            \n                \n                    Catches user input errors and throws the\nrespective HTTP error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException, NotFoundException } from '@nestjs/common';\nimport { ProductServiceInputException } from 'src/models/product/exceptions/product-service-input.exception';\nimport { PurchaseServiceInputException } from 'src/models/purchase/exceptions/purchase-service-input.exception';\nimport { UserServiceInputException } from 'src/models/user/exceptions/user-service-input.exception';\nimport { ExceptionHandler } from './exception.handler';\n\n/** Catches user input errors and throws the\n * respective HTTP error\n */\nexport class UserInputExceptionHandler implements ExceptionHandler {\n  /** Catches user input errors and throws the\n   * respective HTTP error\n   */\n  handle(error: Error): void {\n    if (error instanceof UserServiceInputException) {\n      throw new BadRequestException(error.message);\n    }\n\n    if (error instanceof ProductServiceInputException) {\n      throw new BadRequestException(error.message);\n    }\n\n    if (error instanceof PurchaseServiceInputException) {\n      throw new NotFoundException(error.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  controllers: [UserController],\n  providers: [UserService],\n  imports: [PrismaModule],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotFoundException.html":{"url":"classes/UserNotFoundException.html","title":"class - UserNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/user/user-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\nan user email or id that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/user/user-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'User not found'. Used when the user inputs an user\nemail or id that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * an user email or id that is not registered in the system\n */\nexport class UserNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'User not found'. Used when the user inputs an user\n   * email or id that is not registered in the system\n   */\n  constructor() {\n    super('User not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing users in the database.\nCRUD endpoints are available for users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Private\n                                    Async\n                                hashIfUpdatingPassword\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateUserRole\n                            \n                            \n                                    Private\n                                    Async\n                                validateCurrentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/user/user.service.ts:17\n                            \n                        \n\n                \n                    \n                            Responsible for managing users in the database.\nCRUD endpoints are available for users.\nInstantiate the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:26\n                \n            \n\n\n            \n                \n                    Creates a new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:56\n                \n            \n\n\n            \n                \n                    Finds user by email and returns the user with password.\nUsed mainly in login to compare if the inputted password matches\nthe hashed one.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:44\n                \n            \n\n\n            \n                \n                    Finds user by id and returns the user without password.\nUsed for default in app requests where the hashed password\nwon't be compared\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        hashIfUpdatingPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashIfUpdatingPassword(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:107\n                \n            \n\n\n            \n                \n                    If the user inputted both new password and current password\nthe new password is hashed to be saved in the database replacing\nthe current one.\nIf only the new password or current password were inputted the user\nprobably forgot about the other one and an error is thrown\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string, deleteUserDto: DeleteUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:94\n                \n            \n\n\n            \n                \n                    Removes user from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    deleteUserDto\n                                    \n                                                DeleteUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:63\n                \n            \n\n\n            \n                \n                    Updates user information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserRole(updateUserRoleDto: UpdateUserRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:80\n                \n            \n\n\n            \n                \n                    Updates user role\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserRoleDto\n                                    \n                                                UpdateUserRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateCurrentPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateCurrentPassword(id: string, currentPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:132\n                \n            \n\n\n            \n                \n                    Compares if the inputted current password matches the\nuser hashed password saved in the database\nIf it doesn't, an error is thrown\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { compare, hash } from 'bcrypt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { DeleteUserDto } from './dto/delete-user.dto';\nimport { UpdateUserRoleDto } from './dto/update-user-role.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserWithoutPassword } from './entities/user-without-password.entity';\nimport { User } from './entities/user.entity';\nimport { InvalidPasswordUpdateException } from './exceptions/invalid-password-update.exception';\nimport { MissingPasswordUpdateException } from './exceptions/missing-password-update.exception';\n\n/** Responsible for managing users in the database.\n * CRUD endpoints are available for users.\n */\n@Injectable()\nexport class UserService {\n  /** Responsible for managing users in the database.\n   * CRUD endpoints are available for users.\n   *\n   * Instantiate the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new user */\n  async create(createUserDto: CreateUserDto): Promise {\n    const hashedPassword = await hash(createUserDto.password, 10);\n\n    const lowerCaseEmail = createUserDto.email.toLowerCase();\n\n    await this.prisma.user.create({\n      data: {\n        ...createUserDto,\n        email: lowerCaseEmail,\n        password: hashedPassword,\n      },\n    });\n  }\n\n  /** Finds user by id and returns the user without password.\n   * Used for default in app requests where the hashed password\n   * won't be compared\n   */\n  async findById(id: string): Promise {\n    const user = await this.prisma.user.findUnique({ where: { id } });\n\n    delete user.password;\n\n    return { ...user };\n  }\n\n  /** Finds user by email and returns the user with password.\n   * Used mainly in login to compare if the inputted password matches\n   * the hashed one.\n   */\n  async findByEmail(email: string): Promise {\n    const lowerCaseEmail = email.toLowerCase();\n\n    return this.prisma.user.findUnique({ where: { email: lowerCaseEmail } });\n  }\n\n  /** Updates user information */\n  async update(\n    id: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    await this.hashIfUpdatingPassword(id, updateUserDto);\n\n    const user = await this.prisma.user.update({\n      where: { id },\n      data: { ...updateUserDto, updatedAt: new Date() },\n    });\n\n    delete user.password;\n\n    return { ...user };\n  }\n\n  /** Updates user role */\n  async updateUserRole(\n    updateUserRoleDto: UpdateUserRoleDto,\n  ): Promise {\n    const user = await this.prisma.user.update({\n      where: { email: updateUserRoleDto.email },\n      data: { role: updateUserRoleDto.role },\n    });\n\n    delete user.password;\n\n    return user;\n  }\n\n  /** Removes user from database */\n  async remove(id: string, deleteUserDto: DeleteUserDto): Promise {\n    await this.validateCurrentPassword(id, deleteUserDto.currentPassword);\n\n    await this.prisma.user.delete({ where: { id } });\n  }\n\n  /** If the user inputted both new password and current password\n   * the new password is hashed to be saved in the database replacing\n   * the current one.\n   *\n   * If only the new password or current password were inputted the user\n   * probably forgot about the other one and an error is thrown\n   */\n  private async hashIfUpdatingPassword(\n    id: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    if (updateUserDto.password && updateUserDto.currentPassword) {\n      await this.validateCurrentPassword(id, updateUserDto.currentPassword);\n\n      const hashedPassword = await hash(updateUserDto.password, 10);\n\n      updateUserDto.password = hashedPassword;\n      delete updateUserDto.currentPassword;\n\n      return;\n    }\n\n    if (updateUserDto.password || updateUserDto.currentPassword) {\n      throw new MissingPasswordUpdateException();\n    }\n  }\n\n  /** Compares if the inputted current password matches the\n   * user hashed password saved in the database\n   *\n   * If it doesn't, an error is thrown\n   */\n  private async validateCurrentPassword(\n    id: string,\n    currentPassword: string,\n  ): Promise {\n    const user = await this.prisma.user.findUnique({ where: { id } });\n\n    const isCorrectPassword = await compare(currentPassword, user.password);\n\n    if (!isCorrectPassword) {\n      throw new InvalidPasswordUpdateException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserServiceInputException.html":{"url":"classes/UserServiceInputException.html","title":"class - UserServiceInputException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserServiceInputException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/exceptions/user-service-input.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to extend another exception to make it\ninstanceof UserServiceInputException\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/user/exceptions/user-service-input.exception.ts:5\n                            \n                        \n\n                \n                    \n                            Used to extend another exception to make it\ninstanceof UserServiceInputException\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserServiceInputException extends Error {\n  /**\n   * Used to extend another exception to make it\n   * instanceof UserServiceInputException\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserWithoutPassword.html":{"url":"classes/UserWithoutPassword.html","title":"class - UserWithoutPassword","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserWithoutPassword\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/entities/user-without-password.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This entity is the same as\nUser\nbut omitting the password field\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { User } from './user.entity';\n\n/** This entity is the same as\n * User\n * but omitting the password field\n */\nexport class UserWithoutPassword extends OmitType(User, [\n  'password',\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/access-jwt-auth.guard.ts\n            \n            injectable\n            AccessJwtAuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/access-jwt.strategy.ts\n            \n            injectable\n            AccessJwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/dto/login-credentials.dto.ts\n            \n            class\n            LoginCredentialsDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login.response.ts\n            \n            class\n            LoginResponse\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/errors/invalid-email-or-password.error..ts\n            \n            class\n            InvalidEmailOrPasswordError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/file-upload.decorator.ts\n            \n            function\n            FileUpload\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/is-admin.decorator.ts\n            \n            function\n            IsAdmin\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/is-admin.decorator.ts\n            \n            variable\n            IS_ADMIN_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/exceptions/category/category-name-in-use.exception.ts\n            \n            class\n            CategoryNameInUseException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/category/category-not-found.exception.ts\n            \n            class\n            CategoryNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/product/product-name-in-use.exception.ts\n            \n            class\n            ProductNameInUseException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/product/product-not-found.exception.ts\n            \n            class\n            ProductNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/purchase/purchase-not-found.exception.ts\n            \n            class\n            PurchaseNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/user/email-in-use.exception.ts\n            \n            class\n            EmailInUseException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/user/user-not-found.exception.ts\n            \n            class\n            UserNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/exception.interceptor.ts\n            \n            injectable\n            ExceptionInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/exception.handler.ts\n            \n            interface\n            ExceptionHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/prisma-exception.handler.ts\n            \n            class\n            PrismaExceptionHandler\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/user-input-exception.handler.ts\n            \n            class\n            UserInputExceptionHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            accessJwtConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer-upload.config.ts\n            \n            variable\n            maxImageUploadSize\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer-upload.config.ts\n            \n            variable\n            multerUploadConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer-upload.config.ts\n            \n            variable\n            validImageUploadTypesRegex\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/category/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/models/category/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/models/category/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/category/dto/find-categories.dto.ts\n            \n            class\n            FindCategoriesDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/models/category/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/category/entities/category.entity.ts\n            \n            class\n            Category\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/models/product/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/models/product/dto/file-upload.dto.ts\n            \n            class\n            FileUploadDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/product/dto/find-products.dto.ts\n            \n            class\n            FindProductsDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/models/product/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/product/entities/product.entity.ts\n            \n            class\n            Product\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/models/product/exceptions/file-type.exception.ts\n            \n            class\n            FileTypeError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/product/exceptions/product-service-input.exception.ts\n            \n            class\n            ProductServiceInputException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/product/product.controller.ts\n            \n            controller\n            ProductController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/models/product/product.service.ts\n            \n            injectable\n            ProductService\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/models/purchase/dto/create-purchase.dto.ts\n            \n            class\n            CreatePurchaseDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/models/purchase/dto/find-purchases.dto.ts\n            \n            class\n            FindPurchasesDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/models/purchase/dto/review-purchase.dto.ts\n            \n            class\n            ReviewPurchaseDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/models/purchase/dto/update-purchase.dto.ts\n            \n            class\n            UpdatePurchaseDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/purchase/entities/purchase.entity.ts\n            \n            class\n            Purchase\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/models/purchase/exceptions/not-purchase-owner.exception.ts\n            \n            class\n            NotPurchaseOwnerException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/purchase/exceptions/purchase-service-input.exception.ts\n            \n            class\n            PurchaseServiceInputException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/purchase/purchase.controller.ts\n            \n            controller\n            PurchaseController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/models/purchase/purchase.service.ts\n            \n            injectable\n            PurchaseService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/models/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/models/user/dto/delete-user.dto.ts\n            \n            class\n            DeleteUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/dto/update-user-role.dto.ts\n            \n            class\n            UpdateUserRoleDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/models/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/entities/user-without-password.entity.ts\n            \n            class\n            UserWithoutPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/models/user/exceptions/invalid-password-update.exception.ts\n            \n            class\n            InvalidPasswordUpdateException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/exceptions/missing-password-update.exception.ts\n            \n            class\n            MissingPasswordUpdateException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/exceptions/user-service-input.exception.ts\n            \n            class\n            UserServiceInputException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/models/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                100 %\n                (3/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.4.4\n        \n            @nestjs/core : ^8.4.4\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.4.4\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @prisma/client : 3.14.0\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            prisma-error-enum : ^0.1.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            FileUpload   (src/.../file-upload.decorator.ts)\n                        \n                        \n                            IsAdmin   (src/.../is-admin.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Starts the application\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    src/common/decorators/file-upload.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FileUpload\n                        \n                    \n                \n            \n            \n                \nFileUpload()\n                \n            \n\n\n\n\n            \n                \n                    Add all file upload decorators at once\nExample: Upload product picture\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    src/common/decorators/is-admin.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsAdmin\n                        \n                    \n                \n            \n            \n                \nIsAdmin()\n                \n            \n\n\n\n\n            \n                \n                    Makes an endpoint accessible only by admin users\nExample: Create, update and remove products\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nE-Commerce Backend\nAPI com endpoints para criação de usuários, produtos, compras e avaliações com autenticação e autorização\n🔗 Documentação com Compodoc e GitHub Pages\n\n\n  \n  \n  \n  \n\n\n📑 Índice\n\n\n📌 Features\n🔧 Instalação\n💻 Tecnologias\n📄 Licença\n\n📌 Features\n\n CRUD de usuários\n Autenticação de usuário\n Autorização de usuário (admin)\n CRUD de produtos\n Upload de imagens\n\n\n CRUD de categorias\n CRUD de compras\n\n🔧 Instalação\n\nVocê precisará ter o Node.js instalado\n\nInstalação\n\n\n  # Clona o projeto para sua máquina\n  git clone https://github.com/alvaromrveiga/ecommerce-backend\n\n  # Entra na pasta do projeto\n  cd ecommerce-backend\n\n  # Instala as dependências\n  yarn\nCrie um arquivo .env na raiz do projeto preenchendo as informações descritas no .env.example\n\nIniciar servidor\n\n\n  # Roda as migrations\n  yarn migrate:dev \n\n  # Inicia o servidor em modo de desenvolvimento\n  yarn start:dev\n\n  # O servidor abrirá na porta 3000. \n  # Você pode acessar a documentação com Swagger em http://localhost:3000/api/\n\n  # Para visualizar o banco de dados\n  yarn prisma studio\nRodar os testes\nCrie um arquivo .env.test na raiz do projeto alterando no mínimo o banco de dados que colocou no .env\nExemplo: postgresql://username:password@localhost:5432/ecommerce-test?schema=public\n\n\n\n\n\n  # Roda as migrations no bando de testes\n  yarn migrate:test \n\n  # Roda todos os testes\n  yarn test:all\n\n  # Roda apenas os testes unitários\n  yarn test\n\n  # Roda apenas os testes de integração\n  yarn test:e2e\n\n  # Para visualizar o banco de dados de testes\n  yarn studio:test💻 Tecnologias\n\nTypescript - tooling e minimizar erros\nNode.js e NestJS com Express - construir o servidor\nPrisma com PostgreSQL - armazenar dados\nPassport e passport-jwt - autenticação com Json Web Token\nClass-validator e class-transformer - validações nos dados de entrada dos endpoints\nBcrypt - hashs de senhas\nPrisma-error-enum - identificar os códigos para tratar as exceções do prisma\nJest, SuperTest e ms - testes\nSwagger UI Express e compodoc - documentação\nESLint e Prettier - linting e formatação de código\n\n📄 Licença\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Álvaro Veiga\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PurchaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_PurchaseModule\n\n\n\ncluster_PurchaseModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nCategoryModule -->\n\nPrismaModule->CategoryModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nPrismaModule->ProductModule\n\n\n\n\n\nPurchaseModule\n\nPurchaseModule\n\nPurchaseModule -->\n\nPrismaModule->PurchaseModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\nAppModule -->\n\nPurchaseModule->AppModule\n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAccessJwtStrategy\n\nAccessJwtStrategy\n\nAuthModule -->\n\nAccessJwtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nPurchaseService\n\nPurchaseService\n\nPurchaseModule -->\n\nPurchaseService->PurchaseModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    39 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : alvaromrveiga\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AccessTokenContent   (src/.../access-token-content.ts)\n                        \n                        \n                            AccessTokenPayload   (src/.../access-token-payload.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/types/access-token-content.ts\n    \n    \n        \n            \n                \n                    \n                    AccessTokenContent\n                \n            \n            \n                \n                    What is returned to the application after Access JsonWebToken is validated\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/auth/types/access-token-payload.ts\n    \n    \n        \n            \n                \n                    \n                    AccessTokenPayload\n                \n            \n            \n                \n                    Decrypted Access JsonWebToken content\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            accessJwtConfig   (src/.../jwt.config.ts)\n                        \n                        \n                            IS_ADMIN_KEY   (src/.../is-admin.decorator.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            maxImageUploadSize   (src/.../multer-upload.config.ts)\n                        \n                        \n                            multerUploadConfig   (src/.../multer-upload.config.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            validImageUploadTypesRegex   (src/.../multer-upload.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/jwt.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        accessJwtConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JwtSignOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.JWT_SECRET,\n  expiresIn: '15m',\n}\n                    \n                \n\n            \n                \n                    Configurations for the access jsonwebtoken used for authentication\n\n                \n            \n\n        \n    \n\n    src/common/decorators/is-admin.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_ADMIN_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isAdmin'\n                    \n                \n\n            \n                \n                    Value to verify if @IsAdmin() is being used in the endpoint\nConsult RolesGuard\n\n                \n            \n\n        \n    \n\n    src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n            \n                \n                    Value to verify if @Public() is being used in the endpoint\nConsult JwtAuthGuard\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CustomDecorator => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n            \n                \n                    Makes an endpoint accessible by unauthenticated users\nExample: Create user and Login endpoints\n\n                \n            \n\n        \n    \n\n    src/config/multer-upload.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        maxImageUploadSize\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 3 * 1024 * 1024\n                    \n                \n\n            \n                \n                    Constant that sets the maximum image upload file size\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        multerUploadConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MulterOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  storage: diskStorage({\n    destination: './tmp',\n    filename: (request, file, callback) => {\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);\n      const fileName = `${uniqueSuffix}-${file.originalname}`;\n\n      return callback(null, fileName);\n    },\n  }),\n\n  fileFilter: (request, file, callback) => {\n    const mimetype = validImageUploadTypesRegex.test(file.mimetype);\n    const extname = validImageUploadTypesRegex.test(\n      path.extname(file.originalname).toLowerCase(),\n    );\n\n    if (mimetype && extname) {\n      return callback(null, true);\n    }\n\n    return callback(new FileTypeError(validImageUploadTypesRegex), false);\n  },\n\n  limits: {\n    fileSize: maxImageUploadSize,\n  },\n}\n                    \n                \n\n            \n                \n                    Configurations for the multer library used for file upload.\nAccepts types jpeg, jpg and png of size up to 3MB\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validImageUploadTypesRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /jpeg|jpg|png/\n                    \n                \n\n            \n                \n                    Constant containing a Regular Expression\nwith the valid image upload types\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
