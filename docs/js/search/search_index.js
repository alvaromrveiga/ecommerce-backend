var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessJwtAuthGuard.html",[0,1.308,1,2.853]],["body/injectables/AccessJwtAuthGuard.html",[0,1.739,1,3.792,2,1.91,3,0.15,4,0.15,5,0.105,6,4.74,7,3.838,8,3.315,9,0.247,10,6.169,11,4.695,12,5.116,13,6.863,14,5.68,15,5.557,16,5.68,17,5.099,18,5.116,19,4.358,20,5.68,21,5.68,22,0.566,23,1.878,24,5.263,25,1.122,26,3.315,27,6.447,28,0.465,29,3.814,30,3.521,31,0.406,32,2.645,33,1.613,34,0.015,35,1.073,36,0.689,37,0.921,38,3.315,39,5.116,40,3.814,41,3.101,42,5.28,43,5.28,44,4.133,45,1.305,46,4.133,47,2.033,48,4.74,49,0.414,50,0.805,51,2.739,52,2.739,53,2.739,54,2.985,55,3.315,56,0.15,57,1.005,58,3.814,59,1.821,60,3.315,61,1.665,62,4.588,63,3.814,64,3.315,65,3.315,66,2.033,67,2.38,68,3.814,69,0.009,70,0.009]],["title/injectables/AccessJwtStrategy.html",[0,1.308,71,2.649]],["body/injectables/AccessJwtStrategy.html",[0,1.893,2,2.166,3,0.17,4,0.17,5,0.119,6,5.055,7,3.376,9,0.28,11,5.147,12,5.388,22,0.641,23,2.044,25,1.9,28,0.506,31,0.29,33,1.32,34,0.014,35,0.879,36,0.564,37,0.754,45,2.21,47,2.213,49,0.444,50,0.913,52,3.106,56,0.17,57,1.139,60,3.757,66,1.664,69,0.01,70,0.01,71,3.833,72,3.757,73,3.793,74,5.767,75,5.982,76,3.085,77,5.749,78,4.324,79,5.749,80,5.982,81,4.324,82,4.996,83,3.587,84,4.996,85,4.996,86,5.749,87,4.324,88,5.749,89,3.106,90,3.757,91,3.757,92,5.749,93,3.587,94,3.757,95,4.324,96,4.324,97,4.324,98,3.384,99,4.324,100,4.324,101,2.277,102,4.324,103,3.106,104,4.324]],["title/modules/AppModule.html",[105,1.661,106,2.853]],["body/modules/AppModule.html",[1,4.201,3,0.174,4,0.174,5,0.122,7,2.606,31,0.297,34,0.015,49,0.469,50,0.937,51,3.188,56,0.174,69,0.01,70,0.01,105,2.446,106,5.821,107,2.223,108,2.793,109,3.857,110,3.857,111,4.949,112,4.949,113,3.718,114,4.949,115,4.949,116,4.631,117,3.247,118,2.464,119,2.12,120,4.438,121,3.65,122,5.85,123,4.438,124,4.438,125,4.438,126,4.438,127,4.438,128,4.438,129,4.438,130,4.438,131,2.606,132,4.438,133,4.438]],["title/controllers/AuthController.html",[134,1.897,135,2.853]],["body/controllers/AuthController.html",[3,0.136,4,0.136,5,0.095,9,0.224,17,3.539,22,0.513,23,1.752,28,0.506,31,0.232,33,1.754,34,0.015,35,1.167,36,0.749,37,1.001,41,2.893,45,1.964,47,2.648,49,0.436,50,0.73,55,3.004,56,0.136,59,1.651,61,1.509,66,2.21,69,0.009,70,0.009,76,3.517,101,2.595,119,3.456,134,2.353,135,3.539,136,1.651,137,3.004,138,1.438,139,2.353,140,3.828,141,3.857,142,4.282,143,3.457,144,4.495,145,1.891,146,3.828,147,7.47,148,3.457,149,3.457,150,4.928,151,3.457,152,4.495,153,3.457,154,3.457,155,3.074,156,4.928,157,3.457,158,4.586,159,3.457,160,3.457,161,5.742,162,3.285,163,2.305,164,2.305,165,2.305,166,2.706,167,4.494,168,4.173,169,2.305,170,1.386,171,2.03,172,3.582,173,3.004,174,3.457,175,3.457,176,2.305,177,3.004,178,3.457,179,3.457,180,1.731,181,3.828,182,3.457,183,5.742,184,1.509,185,2.06,186,3.457,187,3.457,188,3.457,189,2.483,190,3.457,191,3.457,192,3.457,193,2.706,194,0.73,195,3.457]],["title/modules/AuthModule.html",[105,1.661,111,2.649]],["body/modules/AuthModule.html",[3,0.185,4,0.185,5,0.129,31,0.316,34,0.014,49,0.469,50,0.994,52,3.383,56,0.185,69,0.011,70,0.011,71,5.03,73,2.766,105,2.542,107,2.359,108,2.904,111,5.352,113,3.779,116,4.707,117,3.375,118,2.615,119,2.249,121,3.794,131,3.571,135,4.837,136,2.904,172,4.707,173,4.093,196,4.093,197,4.711,198,4.093,199,4.711,200,4.711,201,3.687,202,6.081,203,4.711,204,4.711,205,4.711,206,3.141,207,4.711]],["title/injectables/AuthService.html",[0,1.308,172,2.479]],["body/injectables/AuthService.html",[0,1.085,2,1.021,3,0.08,4,0.08,5,0.056,9,0.132,22,0.303,23,1.172,25,0.969,28,0.557,31,0.278,33,1.87,34,0.015,35,1.245,36,0.799,37,1.068,45,2.315,47,2.605,49,0.4,50,0.43,56,0.08,61,2.954,66,2.012,69,0.006,70,0.006,73,1.935,76,3.477,82,4.137,83,1.272,85,2.863,89,2.366,90,1.772,93,3.487,101,3.097,108,1.573,138,1.191,140,2.197,141,2.579,142,2.863,172,2.056,176,1.36,177,1.772,180,2.077,184,2.567,185,2.83,189,4.941,194,1.641,201,1.596,208,1.772,209,2.97,210,4.761,211,4.854,212,3.295,213,3.295,214,4.761,215,4.146,216,3.295,217,2.039,218,3.595,219,6.324,220,2.946,221,2.039,222,2.056,223,3.295,224,2.077,225,2.039,226,2.863,227,1.735,228,4.761,229,3.295,230,3.945,231,3.295,232,2.039,233,1.735,234,4.398,235,4.761,236,2.439,237,2.039,238,3.295,239,3.295,240,2.039,241,5.321,242,4.761,243,4.137,244,4.857,245,3.726,246,3.419,247,3.295,248,3.295,249,2.039,250,3.174,251,3.295,252,2.039,253,2.579,254,3.295,255,2.039,256,5.226,257,2.039,258,1.833,259,3.295,260,2.039,261,1.268,262,1.573,263,1.772,264,1.464,265,2.579,266,2.039,267,2.039,268,1.36,269,2.366,270,2.039,271,2.039,272,2.039,273,3.295,274,1.197,275,2.579,276,4.052,277,2.039,278,3.295,279,2.039,280,1.197,281,2.039,282,2.863,283,3.295,284,2.039,285,3.295,286,2.039,287,3.295,288,2.039,289,1.772,290,1.772,291,1.272,292,4.146,293,2.039,294,4.761,295,2.039,296,2.039,297,2.039,298,2.039,299,2.039,300,3.295,301,2.039,302,2.039,303,3.295,304,2.039]],["title/classes/Category.html",[31,0.266,305,1.734]],["body/classes/Category.html",[3,0.199,4,0.199,5,0.139,9,0.327,22,0.751,28,0.56,31,0.339,34,0.014,35,1.531,36,0.83,37,1.11,49,0.305,56,0.199,69,0.011,70,0.011,194,1.542,236,2.777,274,3.737,305,3.444,306,0.751,307,4.396,308,1.944,309,2.317,310,3.039,311,3.019,312,5.059,313,5.059,314,2.308,315,2.534,316,5.059,317,1.944,318,5.059,319,5.059,320,5.059,321,5.059,322,5.059,323,4.396]],["title/controllers/CategoryController.html",[134,1.897,324,2.853]],["body/controllers/CategoryController.html",[3,0.095,4,0.095,5,0.066,9,0.156,22,0.358,23,1.339,28,0.53,31,0.252,32,1.208,33,1.837,34,0.014,35,1.474,36,0.785,37,1.049,41,2.72,45,2.419,47,2.722,49,0.412,50,0.509,56,0.095,59,1.152,66,2.315,69,0.009,70,0.007,76,3.587,134,1.152,136,1.152,139,2.212,145,1.981,146,4.011,162,3.088,163,1.608,164,1.608,165,2.511,168,4.189,169,1.608,170,0.967,180,1.208,181,4.011,194,1.492,222,1.505,233,2.756,236,1.643,250,3.489,258,2.015,305,3.354,311,2.739,324,2.705,325,2.096,326,1.733,327,3.327,328,2.439,329,1.525,330,2.89,331,3.327,332,4.025,333,1.983,334,2.113,335,2.096,336,3.753,337,3.423,338,2.412,339,2.412,340,4.334,341,2.412,342,4.011,343,2.412,344,2.412,345,3.088,346,2.349,347,1.886,348,2.349,349,2.756,350,1.574,351,2.349,352,1.718,353,1.798,354,3.272,355,2.349,356,1.733,357,4.303,358,2.705,359,2.412,360,2.412,361,3.265,362,2.096,363,2.412,364,2.412,365,1.417,366,2.412,367,2.412,368,1.417,369,4.334,370,2.905,371,2.412,372,2.412,373,1.393,374,1.733,375,1.888,376,1.417,377,3.489,378,1.888,379,3.151,380,1.417,381,1.608,382,2.096,383,1.733,384,3.265,385,2.096,386,1.339,387,2.947,388,1.505,389,2.096,390,1.339,391,1.888,392,2.412,393,2.412,394,2.412,395,2.412,396,2.09,397,2.096,398,2.947,399,2.412,400,2.412,401,2.412,402,2.412,403,1.888,404,2.412,405,1.888,406,1.733,407,1.888,408,2.412]],["title/modules/CategoryModule.html",[105,1.661,112,2.649]],["body/modules/CategoryModule.html",[3,0.205,4,0.205,5,0.143,31,0.351,34,0.014,49,0.446,50,1.104,56,0.205,69,0.011,70,0.011,105,2.717,107,2.62,108,3.104,112,5.295,113,3.882,117,3.607,118,2.904,119,2.498,121,4.055,131,3.816,136,3.104,206,3.488,324,5.078,384,4.836,385,4.546,409,4.546,410,5.232,411,4.546,412,5.232,413,5.232]],["title/classes/CategoryNameInUseException.html",[31,0.266,414,2.853]],["body/classes/CategoryNameInUseException.html",[3,0.187,4,0.187,5,0.131,9,0.309,25,1.994,28,0.42,31,0.32,34,0.014,35,1.602,49,0.288,50,1.007,56,0.187,57,1.615,69,0.011,70,0.011,138,1.347,261,2.753,305,3.304,306,0.708,414,4.404,415,4.404,416,3.427,417,3.415,418,3.969,419,5.597,420,2.446,421,3.415,422,6.026,423,3.969,424,3.765,425,4.866,426,3.734,427,2.36,428,4.866,429,4.146]],["title/classes/CategoryNotFoundException.html",[31,0.266,430,2.853]],["body/classes/CategoryNotFoundException.html",[3,0.195,4,0.195,5,0.136,9,0.322,25,2.033,28,0.438,31,0.334,34,0.014,49,0.3,50,1.051,56,0.195,57,1.659,69,0.011,70,0.011,138,1.369,261,2.796,305,3.34,306,0.738,415,4.524,417,3.469,418,4.032,420,2.485,421,3.469,423,4.032,424,3.825,427,2.425,429,4.325,430,4.524,431,3.319,432,5.217,433,4.608,434,3.575,435,4.312]],["title/injectables/CategoryService.html",[0,1.308,384,2.479]],["body/injectables/CategoryService.html",[0,1.019,2,0.946,3,0.074,4,0.074,5,0.052,9,0.122,22,0.28,23,1.101,25,0.556,28,0.542,30,2.064,31,0.264,32,1.551,33,1.88,34,0.015,35,1.587,36,0.803,37,1.073,45,2.167,47,2.635,49,0.343,50,0.399,56,0.074,59,0.902,61,2.686,66,2.289,67,3.952,69,0.008,70,0.005,76,3.422,83,2.454,138,0.583,139,2.173,180,0.946,194,1.538,209,2.838,211,3.596,220,2.702,233,1.63,236,2.354,246,2.223,258,1.751,268,1.259,276,3.133,290,2.69,305,3.336,311,2.782,314,1.412,328,2.395,329,1.019,330,2.454,331,2.825,332,3.418,333,1.63,334,1.794,335,2.69,336,3.365,342,3.033,345,4.223,346,1.931,347,1.551,348,1.931,349,3.335,350,2.486,351,1.931,352,2.29,353,1.478,355,1.931,356,1.357,357,3.344,361,2.838,362,1.641,365,1.818,368,1.109,369,4.682,370,2.994,373,1.145,382,1.641,383,1.357,384,1.931,386,1.048,387,2.423,388,1.178,389,1.641,390,1.048,391,1.478,396,2.994,420,1.059,436,1.641,437,3.267,438,3.267,439,3.096,440,3.934,441,1.357,442,1.889,443,3.096,444,1.889,445,3.096,446,2.69,447,2.69,448,1.889,449,1.478,450,1.889,451,2.223,452,1.889,453,3.267,454,1.889,455,1.889,456,2.223,457,1.889,458,1.889,459,1.889,460,2.69,461,1.889,462,1.889,463,2.69,464,3.84,465,3.096,466,1.889,467,3.079,468,3.079,469,3.079,470,3.418,471,3.418,472,1.478,473,1.641,474,3.561,475,3.953,476,3.096,477,2.423,478,2.423,479,1.931,480,1.718,481,2.423,482,1.889,483,1.889,484,1.889,485,3.096,486,1.889,487,1.889,488,1.889,489,1.889]],["title/classes/CreateCategoryDto.html",[31,0.266,336,2.479]],["body/classes/CreateCategoryDto.html",[3,0.204,4,0.204,5,0.143,9,0.337,22,0.772,28,0.458,31,0.434,34,0.014,35,1.543,36,0.679,49,0.39,56,0.204,69,0.011,70,0.011,145,1.713,194,1.367,305,3.426,306,0.772,308,1.978,309,2.053,310,3.093,317,1.589,323,4.52,329,2.132,336,4.04,391,4.071,490,5.628,491,4.071,492,3.244,493,3.093,494,4.071,495,5.202,496,4.318,497,3.244,498,2.086]],["title/classes/CreateProductDto.html",[31,0.266,499,2.479]],["body/classes/CreateProductDto.html",[3,0.131,4,0.131,5,0.091,9,0.439,22,0.493,28,0.598,31,0.321,34,0.015,35,1.325,36,0.886,37,1.249,49,0.371,56,0.131,57,0.876,61,1.451,69,0.008,70,0.008,145,2.236,170,1.334,194,1.512,224,3.401,227,2.524,305,2.092,306,0.493,308,1.464,309,1.52,311,1.334,317,2.074,329,1.578,345,3.747,352,1.517,479,2.075,480,1.846,492,2.401,493,2.289,494,2.603,496,3.747,497,2.815,498,1.334,499,2.99,500,6.082,501,2.603,502,2.518,503,4.883,504,4.883,505,5.665,506,4.682,507,3.326,508,3.326,509,3.443,510,4.165,511,4.165,512,3.196,513,3.443,514,3.443,515,3.443,516,3.326,517,3.326,518,4.165,519,2.603,520,3.326,521,3.326,522,3.326,523,4.165,524,4.165,525,4.1,526,4.417,527,3.326,528,3.326,529,3.326,530,2.603,531,2.603,532,4.793,533,3.196,534,4.883,535,3.618,536,2.603,537,3.326,538,2.075,539,2.89,540,4.165,541,3.443,542,2.89,543,2.89,544,2.89,545,3.326,546,3.326,547,3.326,548,3.326,549,3.326,550,3.326,551,3.326,552,3.326,553,3.326,554,3.326]],["title/classes/CreatePurchaseDto.html",[31,0.266,555,2.479]],["body/classes/CreatePurchaseDto.html",[3,0.157,4,0.157,5,0.11,9,0.259,22,0.593,28,0.546,31,0.365,34,0.014,36,0.81,37,0.951,49,0.402,56,0.157,57,1.053,69,0.009,70,0.009,101,2.104,145,2.043,170,1.602,194,1.407,224,3.339,227,3.881,274,3.201,306,0.593,308,1.665,309,1.729,311,2.488,317,1.895,329,1.795,350,2.279,353,2.604,492,2.731,493,2.604,498,1.602,502,2.371,506,5.011,509,3.916,512,3.635,513,3.916,514,3.916,515,3.916,525,3.635,530,3.128,531,3.128,534,5.393,535,3.026,538,2.493,555,3.401,556,5.793,557,2.87,558,2.963,559,4.138,560,5.393,561,3.996,562,3.996,563,3.916,564,5.452,565,3.996,566,3.996,567,3.996,568,4.738,569,4.738,570,4.457,571,3.996,572,2.87,573,3.996,574,3.128,575,3.128,576,3.473,577,3.473,578,3.473,579,3.473,580,3.473,581,3.473,582,3.473]],["title/classes/CreateUserDto.html",[31,0.266,583,2.479]],["body/classes/CreateUserDto.html",[3,0.15,4,0.15,5,0.105,9,0.247,22,0.566,28,0.576,31,0.354,34,0.014,35,1.395,36,0.853,37,1.14,49,0.318,56,0.15,69,0.009,70,0.009,138,1.474,145,2.152,184,2.995,185,3.149,194,1.566,224,3.274,245,2.985,306,0.566,308,1.613,309,1.674,310,2.522,317,1.996,329,1.739,350,3.102,427,2.642,447,5.68,492,2.645,493,2.522,497,3.274,498,1.529,519,4.133,526,2.739,535,3.362,583,3.294,584,5.964,585,2.739,586,5.964,587,3.814,588,3.814,589,4.133,590,4.588,591,3.814,592,3.814,593,3.814,594,5.28,595,3.814,596,5.28,597,6.537,598,3.814,599,4.588,600,3.814,601,3.315,602,2.739,603,2.739,604,3.814,605,3.814,606,3.814,607,3.315,608,3.315,609,3.315,610,3.315]],["title/classes/DeleteUserDto.html",[31,0.266,611,2.649]],["body/classes/DeleteUserDto.html",[3,0.208,4,0.208,5,0.145,9,0.343,22,0.787,28,0.467,31,0.439,34,0.014,36,0.692,49,0.32,56,0.208,69,0.011,70,0.011,138,1.4,145,1.747,155,4.091,185,2.741,194,1.384,306,0.787,308,2.002,309,2.079,317,1.621,376,3.85,492,3.284,493,3.131,494,4.153,496,4.372,497,3.284,498,2.128,585,3.811,603,3.811,611,4.372,612,5.698,613,5.569,614,5.307]],["title/classes/EmailInUseException.html",[31,0.266,615,2.853]],["body/classes/EmailInUseException.html",[3,0.19,4,0.19,5,0.133,9,0.314,25,2.008,28,0.427,31,0.325,34,0.014,49,0.292,50,1.023,56,0.19,57,1.631,69,0.011,70,0.011,138,1.355,184,3.139,261,2.769,306,0.719,416,3.481,417,3.435,418,3.993,419,5.63,420,2.461,421,3.435,422,6.048,423,3.993,424,3.787,425,4.902,426,3.793,427,2.384,428,4.902,589,4.847,590,5.931,615,4.448,616,4.847,617,4.847]],["title/interfaces/ExceptionHandler.html",[618,2.853,619,2.649]],["body/interfaces/ExceptionHandler.html",[3,0.216,4,0.216,5,0.151,9,0.357,22,0.818,23,2.387,28,0.485,33,1.684,34,0.014,35,1.121,36,0.719,37,0.961,45,1.886,56,0.216,69,0.012,70,0.012,262,3.749,618,4.82,619,4.475,620,5.513,621,4.791,622,3.06,623,5.513,624,5.409,625,5.253,626,5.513,627,5.832,628,6.712,629,5.253,630,4.82]],["title/injectables/ExceptionInterceptor.html",[0,1.308,631,3.11]],["body/injectables/ExceptionInterceptor.html",[0,1.87,2,2.126,3,0.167,4,0.167,5,0.116,9,0.275,10,4.935,18,5.348,19,4.556,22,0.63,23,2.019,28,0.374,31,0.284,33,1.296,34,0.014,35,0.863,36,0.554,37,0.74,39,5.348,44,4.444,45,1.452,47,2.186,48,5.009,49,0.412,50,0.896,53,3.048,56,0.167,66,1.634,69,0.01,70,0.01,258,2.186,261,2.186,262,3.056,291,2.648,310,2.027,347,2.844,373,2.1,417,3.263,631,4.444,632,3.688,633,5.679,634,5.679,635,5.348,636,4.935,637,5.348,638,5.679,639,6.833,640,6.399,641,4.244,642,6.399,643,6.833,644,4.244,645,4.444,646,4.444,647,4.935,648,5.679,649,4.244,650,3.048,651,4.244,652,4.444,653,3.048,654,4.244,655,3.322,656,4.244,657,4.244,658,4.244,659,4.244]],["title/classes/FileTypeError.html",[31,0.266,660,3.11]],["body/classes/FileTypeError.html",[3,0.185,4,0.185,5,0.21,9,0.305,25,1.386,28,0.415,31,0.316,33,1.438,34,0.014,35,0.958,36,0.961,37,0.821,49,0.284,56,0.185,57,1.602,69,0.011,70,0.011,138,1.341,261,2.341,306,0.699,420,2.434,421,3.398,427,2.341,480,3.95,502,1.551,622,3.375,660,4.76,661,5.284,662,4.093,663,5.57,664,7.117,665,4.49,666,6.081,667,6.734,668,4.711,669,4.49,670,6.734,671,5.852,672,7.677,673,2.48,674,3.141,675,4.711]],["title/classes/FileUploadDto.html",[31,0.266,676,3.11]],["body/classes/FileUploadDto.html",[3,0.207,4,0.207,5,0.213,9,0.34,22,0.781,28,0.463,31,0.353,34,0.014,36,0.851,49,0.317,56,0.207,69,0.011,70,0.011,145,1.732,170,2.11,194,1.377,306,0.781,308,1.992,309,2.068,317,1.607,373,2.412,480,3.62,493,3.114,502,2.147,669,4.348,676,5.105,677,5.667,678,4.572,679,5.105,680,5.261,681,5.667,682,6.522,683,5.261,684,6.522,685,5.261]],["title/classes/FindCategoriesDto.html",[31,0.266,342,2.649]],["body/classes/FindCategoriesDto.html",[3,0.171,4,0.171,5,0.119,9,0.281,22,0.645,28,0.57,31,0.434,34,0.014,35,1.172,36,0.963,37,1.286,49,0.348,56,0.171,69,0.01,70,0.01,145,2.132,194,1.456,224,3.696,227,3.037,305,2.517,306,0.645,308,1.761,309,1.829,317,1.977,342,3.845,345,4.92,349,3.964,350,1.816,352,1.982,353,2.754,373,2.133,451,4.142,453,4.953,463,5.626,464,4.039,497,2.889,498,1.742,533,4.317,535,3.828,570,4.65,686,5.993,687,3.775,688,3.4,689,4.344,690,4.514,691,4.514,692,4.344,693,4.344,694,2.897,695,3.4]],["title/classes/FindProductsDto.html",[31,0.266,357,2.333]],["body/classes/FindProductsDto.html",[3,0.171,4,0.171,5,0.119,9,0.281,22,0.645,28,0.57,31,0.434,34,0.014,35,1.172,36,0.963,37,1.286,49,0.348,56,0.171,69,0.01,70,0.01,145,2.132,194,1.456,224,3.696,227,3.037,306,0.645,308,1.761,309,1.829,317,1.977,349,3.964,350,1.816,352,1.982,353,2.754,357,3.387,373,2.133,396,4.096,451,4.142,453,4.953,464,4.039,474,5.067,497,2.889,498,1.742,502,1.899,533,4.317,535,3.828,570,4.65,688,3.4,690,4.514,691,4.514,694,2.897,695,3.4,696,5.993,697,3.775,698,4.344,699,4.344,700,4.344]],["title/classes/FindPurchasesDto.html",[31,0.266,701,2.649]],["body/classes/FindPurchasesDto.html",[3,0.157,4,0.157,5,0.109,9,0.258,22,0.592,28,0.586,31,0.415,34,0.014,36,0.961,37,1.307,49,0.328,56,0.157,69,0.009,70,0.013,101,3.264,138,1.026,145,2.193,194,1.583,224,3.604,227,2.866,306,0.592,308,1.662,309,1.726,311,2.671,317,2.034,349,3.878,350,1.667,352,1.819,353,2.6,373,2.013,451,3.91,453,4.784,464,3.867,497,3.105,498,1.599,502,1.792,533,4.133,535,3.87,559,4.133,570,4.452,688,4.261,691,4.261,694,2.659,701,3.63,702,6.058,703,3.465,704,5.632,705,3.987,706,3.987,707,3.987,708,3.987,709,3.987,710,3.987,711,3.987,712,3.987,713,3.987,714,3.987,715,3.987,716,3.987,717,3.987,718,3.987]],["title/classes/InvalidEmailOrPasswordError.html",[31,0.266,269,2.853]],["body/classes/InvalidEmailOrPasswordError.html",[3,0.184,4,0.184,5,0.129,9,0.304,25,1.979,28,0.414,31,0.315,34,0.014,49,0.283,50,0.992,56,0.184,57,1.599,69,0.011,70,0.011,138,1.34,184,3.52,185,3.208,261,2.737,269,4.36,306,0.697,417,3.395,418,3.946,420,2.432,421,3.395,423,4.316,424,3.744,427,2.337,663,4.752,719,5.276,720,4.083,721,7.11,722,6.178,723,6.726,724,4.699,725,4.083]],["title/classes/InvalidPasswordUpdateException.html",[31,0.266,726,2.853]],["body/classes/InvalidPasswordUpdateException.html",[3,0.189,4,0.189,5,0.132,9,0.312,25,2.003,28,0.424,31,0.323,34,0.014,49,0.291,56,0.189,57,1.626,69,0.011,70,0.011,138,1.398,155,4.815,185,3.383,258,2.763,261,2.376,306,0.715,329,2.364,420,2.456,421,3.428,427,2.376,622,3.426,663,4.831,673,2.539,674,3.215,722,6.238,725,4.19,726,4.433,727,5.364,728,3.773,729,7.179,730,4.248,731,4.821]],["title/classes/LoginCredentialsDto.html",[31,0.266,144,2.853]],["body/classes/LoginCredentialsDto.html",[3,0.194,4,0.194,5,0.136,9,0.32,22,0.734,28,0.553,31,0.421,34,0.014,36,0.819,49,0.298,56,0.194,69,0.011,70,0.011,138,1.44,144,4.509,145,2.067,184,3.265,185,3.128,194,1.53,306,0.734,308,1.917,309,1.99,317,1.917,373,2.322,493,2.998,496,4.596,497,3.453,498,1.985,602,3.556,603,3.556,732,5.991,733,4.302,734,6.278,735,4.186,736,6.278,737,4.951,738,4.951]],["title/classes/LoginResponse.html",[31,0.266,176,2.649]],["body/classes/LoginResponse.html",[3,0.205,4,0.205,5,0.143,7,4.338,9,0.338,15,4.083,17,5.306,22,0.774,28,0.571,31,0.35,34,0.014,36,0.846,56,0.205,69,0.011,70,0.011,73,3.809,93,4.609,140,3.478,176,4.325,189,5.071,194,1.559,234,4.659,282,6.136,306,0.774,308,1.593,309,2.057,317,1.981,739,4.533,740,5.217,741,5.217,742,5.217,743,5.217,744,5.217,745,5.217,746,5.217,747,4.533]],["title/classes/LogoutDto.html",[31,0.266,152,2.853]],["body/classes/LogoutDto.html",[3,0.21,4,0.21,5,0.146,9,0.345,22,0.792,28,0.47,31,0.441,34,0.014,36,0.696,49,0.322,56,0.21,69,0.011,70,0.011,93,4.105,138,1.403,141,5.15,145,1.757,152,4.726,189,5.123,194,1.389,234,4.726,306,0.792,308,2.009,309,2.086,317,1.63,373,2.434,493,3.142,498,2.14,735,4.387,747,4.638,748,4.638,749,7.134,750,5.338]],["title/classes/MissingPasswordUpdateException.html",[31,0.266,751,2.853]],["body/classes/MissingPasswordUpdateException.html",[3,0.18,4,0.18,5,0.126,9,0.297,25,1.958,28,0.404,31,0.308,34,0.014,49,0.277,56,0.18,57,1.576,69,0.01,70,0.01,138,1.377,155,4.761,185,3.437,258,2.938,261,2.303,306,0.681,334,3.215,420,2.411,421,3.366,427,2.303,493,3.366,622,3.321,673,2.419,674,3.062,728,3.595,730,4.151,751,4.297,752,5.199,753,6.631,754,4.593,755,5.983,756,6.653,757,4.593]],["title/classes/NotPurchaseOwnerException.html",[31,0.266,758,2.853]],["body/classes/NotPurchaseOwnerException.html",[3,0.202,4,0.202,5,0.141,9,0.334,25,2.067,28,0.454,31,0.346,34,0.014,49,0.311,56,0.202,57,1.697,69,0.011,70,0.011,261,2.48,306,0.765,420,2.517,427,2.48,435,4.383,558,3.815,622,3.576,673,2.716,674,3.439,758,4.627,759,5.598,760,4.483,761,4.32,762,7.358,763,4.906,764,4.684,765,5.158,766,4.483]],["title/classes/PrismaExceptionHandler.html",[31,0.266,650,2.853]],["body/classes/PrismaExceptionHandler.html",[3,0.076,4,0.076,5,0.053,9,0.126,22,0.288,23,1.125,28,0.563,31,0.13,33,1.952,34,0.015,35,1.465,36,0.811,37,1.114,45,2.593,46,5.641,49,0.385,56,0.076,66,2.392,69,0.006,70,0.006,138,0.596,184,1.749,211,5.076,258,2.569,261,1.78,262,3.787,291,4.3,305,2.223,306,0.288,310,1.511,314,3.257,329,1.042,334,1.444,347,0.972,376,1.858,377,4.261,414,2.273,415,2.273,417,2.208,430,3.321,435,2.5,469,2.477,479,1.211,502,1.897,531,1.519,558,1.914,615,2.273,616,1.519,619,2.672,624,2.273,625,2.477,630,2.273,637,3.619,645,3.619,646,3.619,650,2.273,652,1.519,767,5.685,768,1.519,769,4.018,770,3.165,771,4.008,772,3.165,773,3.165,774,3.165,775,3.165,776,4.008,777,3.165,778,3.165,779,1.94,780,3.165,781,7.467,782,1.94,783,7.066,784,7.066,785,1.94,786,1.94,787,3.408,788,3.165,789,1.94,790,3.165,791,3.483,792,1.94,793,1.94,794,3.165,795,1.94,796,2.75,797,3.165,798,3.165,799,3.165,800,3.165,801,1.94,802,1.94,803,1.94,804,3.165,805,1.94,806,3.165,807,1.94,808,1.94,809,1.519,810,4.008,811,4.624,812,2.273,813,2.273,814,3.321,815,2.878,816,1.519,817,2.273,818,1.519,819,1.294,820,1.94,821,1.94,822,3.483,823,1.94,824,1.94,825,1.94,826,1.94,827,4.008,828,1.94,829,3.165,830,1.94,831,1.94,832,1.94,833,1.94,834,1.94,835,1.94,836,4.008,837,1.94,838,1.94,839,4.008,840,1.94,841,3.165,842,1.94,843,1.94,844,1.94,845,1.94,846,1.94]],["title/modules/PrismaModule.html",[105,1.661,113,1.99]],["body/modules/PrismaModule.html",[3,0.214,4,0.214,5,0.149,31,0.365,34,0.014,49,0.402,50,1.15,56,0.214,69,0.012,70,0.012,105,2.786,107,2.729,108,3.182,113,3.97,117,3.699,118,3.024,119,2.602,131,3.913,220,4.1,847,4.734,848,4.734,849,4.734,850,5.448,851,5.79,852,5.448]],["title/injectables/PrismaService.html",[0,1.308,220,1.99]],["body/injectables/PrismaService.html",[0,1.828,2,2.055,3,0.161,4,0.161,5,0.112,9,0.265,19,3.701,22,0.609,23,1.974,28,0.489,31,0.275,33,1.253,34,0.014,35,0.834,36,0.535,37,1.097,45,1.899,47,2.594,49,0.335,50,0.866,56,0.161,57,1.462,69,0.01,70,0.01,76,3.544,119,2.651,209,3.463,220,2.78,236,2.941,276,3.463,310,1.959,314,3.311,315,2.055,446,4.823,635,3.211,647,4.823,735,3.701,769,4.823,853,3.565,854,5.551,855,7.258,856,6.29,857,6.74,858,7.258,859,5.551,860,6.74,861,4.103,862,5.551,863,5.551,864,6.74,865,5.551,866,6.74,867,5.551,868,5.551,869,5.551,870,5.551,871,4.103,872,5.551,873,4.823,874,5.551,875,4.103,876,4.103,877,4.103]],["title/classes/Product.html",[31,0.266,502,1.308]],["body/classes/Product.html",[3,0.129,4,0.129,5,0.09,9,0.438,22,0.488,28,0.641,31,0.221,34,0.015,35,1.418,36,0.949,37,1.319,49,0.198,56,0.129,69,0.008,70,0.008,194,1.624,224,3.389,227,2.504,230,2.967,236,2.076,274,2.793,306,0.488,308,1.452,309,1.94,310,2.271,311,2.603,314,1.501,315,1.648,317,2.222,352,1.501,479,3.485,480,3.603,502,2.632,503,4.854,504,4.854,505,5.641,506,3.416,509,3.416,510,4.133,511,4.133,512,3.171,513,3.416,514,3.416,515,3.416,523,4.133,524,4.133,525,4.08,526,4.395,538,4.05,539,4.133,540,4.854,541,4.012,542,2.859,543,2.859,544,2.859,878,2.859,879,4.133,880,3.29,881,3.29,882,3.722,883,3.29,884,3.29,885,3.29,886,3.29,887,3.29,888,3.29,889,3.29,890,4.756,891,3.722,892,3.29,893,3.29,894,3.29,895,3.29,896,3.29,897,3.29,898,3.29,899,2.363,900,2.859,901,2.859]],["title/controllers/ProductController.html",[134,1.897,902,2.853]],["body/controllers/ProductController.html",[3,0.089,4,0.089,5,0.168,9,0.147,14,3.116,16,3.116,22,0.336,23,1.275,28,0.54,31,0.24,32,1.136,33,1.874,34,0.014,35,1.391,36,0.855,37,1.07,41,2.613,45,2.342,47,2.754,49,0.405,50,0.478,56,0.089,59,1.083,66,2.362,69,0.009,70,0.006,134,1.083,136,1.083,139,2.125,145,2.021,146,4.092,162,2.391,163,1.512,164,1.512,165,2.391,168,4.243,169,1.512,170,0.909,180,1.136,181,4.092,194,1.527,222,1.414,233,2.663,236,1.565,250,3.372,258,2.449,311,2.745,326,1.628,327,3.196,328,2.343,329,1.181,330,2.237,331,2.576,333,1.888,334,2.03,337,3.666,340,4.243,346,2.237,347,1.796,348,2.237,349,2.663,350,1.499,351,2.237,352,1.636,353,1.713,354,3.116,355,2.237,356,1.628,357,2.97,358,3.633,361,3.155,365,1.331,368,1.331,370,2.807,373,1.326,374,1.628,375,1.774,376,1.331,377,1.512,378,1.774,379,3.252,380,1.331,381,1.512,383,1.628,386,1.258,388,1.414,390,1.258,396,2.47,397,1.97,398,2.807,403,1.774,405,1.774,406,1.628,407,1.774,479,2.776,480,2.47,499,3.655,502,2.551,536,1.774,679,3.482,891,2.807,902,2.576,903,1.97,904,3.116,905,4.449,906,1.97,907,2.267,908,2.267,909,2.267,910,2.267,911,2.267,912,3.586,913,2.267,914,2.267,915,1.97,916,2.267,917,2.267,918,2.267,919,2.267,920,4.243,921,2.267,922,2.267,923,2.267,924,4.395,925,2.267,926,2.267,927,3.116,928,3.116,929,3.116,930,3.116,931,3.116,932,2.576,933,3.586,934,3.586,935,2.807,936,1.774,937,2.267,938,2.807,939,3.155,940,1.97,941,2.267,942,2.267,943,1.97,944,2.267,945,2.267,946,2.267,947,2.267,948,2.267,949,2.267,950,2.267,951,2.267,952,2.267,953,2.267,954,2.267,955,2.267]],["title/modules/ProductModule.html",[105,1.661,114,2.649]],["body/modules/ProductModule.html",[3,0.198,4,0.198,5,0.138,31,0.338,34,0.014,49,0.463,50,1.065,56,0.198,69,0.011,70,0.011,105,2.656,107,2.527,108,3.034,113,3.847,114,5.258,117,3.527,118,2.801,119,2.409,121,3.964,131,3.731,136,3.034,171,2.963,206,3.364,902,4.995,932,3.624,939,4.792,940,4.384,956,4.384,957,4.384,958,5.046,959,5.046,960,5.046,961,5.046,962,4.384,963,3.949,964,5.046,965,5.046]],["title/classes/ProductNameInUseException.html",[31,0.266,812,2.853]],["body/classes/ProductNameInUseException.html",[3,0.187,4,0.187,5,0.131,9,0.309,25,1.994,28,0.42,31,0.32,34,0.014,35,1.602,49,0.288,50,1.007,56,0.187,57,1.615,69,0.011,70,0.011,138,1.347,261,2.753,306,0.708,416,3.427,417,3.415,418,3.969,419,5.597,420,2.446,421,3.415,422,6.026,423,3.969,424,3.765,425,4.866,426,3.734,427,2.36,428,4.866,502,2.493,812,4.404,813,4.404,966,4.146]],["title/classes/ProductNotFoundException.html",[31,0.266,814,2.853]],["body/classes/ProductNotFoundException.html",[3,0.195,4,0.195,5,0.136,9,0.322,25,2.033,28,0.438,31,0.334,34,0.014,49,0.3,50,1.051,56,0.195,57,1.659,69,0.011,70,0.011,138,1.369,261,2.796,306,0.738,417,3.469,418,4.032,420,2.485,421,3.469,423,4.032,424,3.825,427,2.425,431,3.319,432,5.217,433,4.608,434,3.575,435,4.312,502,2.52,813,4.524,814,4.524,966,4.325]],["title/injectables/ProductService.html",[0,1.308,939,2.479]],["body/injectables/ProductService.html",[0,0.937,2,0.855,3,0.067,4,0.067,5,0.117,9,0.11,22,0.253,23,1.012,25,0.502,28,0.553,30,1.898,31,0.245,32,1.426,33,1.918,34,0.015,35,1.524,36,0.819,37,1.095,45,2.197,47,2.638,49,0.328,50,0.36,56,0.067,59,0.815,61,2.586,66,2.417,67,3.203,69,0.007,70,0.005,76,3.437,83,2.667,138,0.536,139,2.042,180,0.855,194,1.568,209,2.667,211,3.951,220,2.571,233,1.499,236,2.24,246,2.045,258,1.976,268,1.138,276,1.776,305,0.745,311,2.712,314,2.168,315,0.855,317,0.869,328,2.251,329,0.937,330,2.285,331,2.045,333,2.251,334,1.671,345,4.187,346,1.776,347,1.426,348,1.776,349,2.703,350,1.787,351,1.776,352,1.671,353,1.36,355,1.776,356,2.045,357,2.51,361,2.667,365,1.672,368,1.002,370,2.849,373,1.053,377,1.898,383,1.226,386,0.947,388,1.065,390,0.947,396,3.395,420,0.974,437,3.071,438,3.071,441,1.226,449,1.336,456,2.045,460,3.715,464,2.285,467,1.336,468,1.336,469,1.336,470,1.483,471,1.483,472,1.336,473,1.483,474,2.228,475,2.474,477,3.346,478,3.346,479,3.815,480,2.033,481,2.228,499,3.203,502,2.33,518,2.474,536,1.336,679,2.867,681,2.474,695,2.867,822,2.474,873,2.474,891,2.228,904,2.474,906,2.474,915,2.474,920,4.569,924,2.474,938,2.228,939,1.776,967,1.483,968,3.663,969,2.847,970,3.663,971,2.847,972,1.707,973,1.707,974,1.707,975,2.847,976,2.847,977,2.847,978,1.707,979,1.707,980,1.707,981,1.707,982,2.847,983,1.707,984,2.847,985,2.228,986,2.847,987,2.847,988,2.847,989,2.847,990,5.133,991,2.847,992,4.275,993,2.847,994,2.847,995,2.847,996,2.045,997,2.847,998,2.847,999,3.663,1000,2.847,1001,1.707,1002,1.707,1003,1.707,1004,1.707,1005,1.707,1006,1.707,1007,2.847,1008,1.707,1009,1.707,1010,1.707,1011,1.707,1012,3.663,1013,1.707,1014,1.707,1015,2.847,1016,1.707,1017,1.707,1018,1.707,1019,1.707,1020,1.707,1021,1.707,1022,1.707,1023,1.707,1024,1.707,1025,2.847,1026,1.707,1027,1.707,1028,1.707,1029,3.663,1030,1.707]],["title/classes/ProductServiceInputException.html",[31,0.266,665,2.649]],["body/classes/ProductServiceInputException.html",[3,0.208,4,0.208,5,0.145,9,0.343,25,1.561,28,0.467,31,0.356,33,1.621,34,0.014,35,1.079,36,0.692,37,0.925,56,0.208,57,1.727,69,0.011,70,0.011,194,1.502,262,3.131,306,0.787,420,2.434,427,2.043,622,3.95,665,5.091,673,3.452,819,4.744,996,5.11,1031,5.132,1032,3.811,1033,5.569,1034,5.569,1035,5.132,1036,4.153,1037,4.153]],["title/classes/Purchase.html",[31,0.266,558,1.897]],["body/classes/Purchase.html",[3,0.133,4,0.133,5,0.093,9,0.22,22,0.504,28,0.634,31,0.228,34,0.014,36,0.94,37,1.298,49,0.205,56,0.133,69,0.008,70,0.008,101,2.995,138,0.917,194,1.606,224,3.426,227,3.709,230,3.038,236,2.125,274,4.017,306,0.504,308,1.487,309,1.969,310,2.325,311,2.941,314,1.551,315,1.703,317,2.2,350,2.597,353,2.325,502,2.451,506,3.497,509,3.497,512,3.246,513,3.497,514,3.497,515,3.497,525,3.246,538,4.102,541,2.442,558,3.441,559,3.793,560,4.944,563,3.497,568,4.231,569,4.231,574,4.453,575,4.453,576,2.954,577,2.954,578,2.954,579,2.954,580,2.954,581,2.954,582,2.954,763,4.142,879,4.231,882,3.811,899,2.442,1038,2.954,1039,3.4,1040,3.4,1041,3.4,1042,3.4,1043,3.4,1044,4.231,1045,3.4,1046,3.038,1047,4.453,1048,3.4,1049,3.4,1050,3.4,1051,3.4,1052,3.4,1053,3.4,1054,3.4,1055,3.4,1056,3.4,1057,3.4,1058,3.4,1059,3.4,1060,3.4,1061,2.954,1062,3.4,1063,3.4]],["title/controllers/PurchaseController.html",[134,1.897,1064,2.853]],["body/controllers/PurchaseController.html",[3,0.077,4,0.077,5,0.054,9,0.127,22,0.292,23,1.138,28,0.51,31,0.214,32,0.985,33,1.77,34,0.015,35,1.178,36,0.756,37,1.01,45,2.331,47,2.663,49,0.387,50,0.415,56,0.077,59,0.939,61,2.034,66,2.231,69,0.01,70,0.01,76,3.531,101,3.528,103,2.906,134,0.939,136,0.939,138,0.603,139,1.932,145,1.908,146,3.864,158,4.93,162,3.108,163,1.312,164,1.312,165,2.134,166,4.015,167,4.015,168,4.027,169,1.312,170,0.789,171,1.155,180,0.985,181,3.864,193,3.648,194,1.511,222,1.227,230,2.908,233,2.455,236,1.397,250,3.108,258,1.794,311,2.324,326,1.413,327,2.906,328,2.13,329,1.332,330,2.524,333,1.685,334,1.846,337,2.895,340,4.027,346,2.908,347,2.335,348,2.908,349,3.18,350,1.949,351,2.908,352,2.126,353,2.226,355,2.908,358,3.348,361,1.997,365,1.155,368,1.155,370,2.587,373,1.184,374,1.413,375,1.54,376,1.155,377,2.698,379,2.587,380,1.155,381,1.312,386,1.092,388,1.227,390,1.092,398,3.167,403,1.54,405,1.54,406,1.413,407,1.54,502,1.332,555,3.768,558,3.507,559,3.108,563,3.348,572,1.413,701,4.468,704,4.727,761,3.228,763,2.698,1064,2.299,1065,1.71,1066,4.046,1067,3.516,1068,1.967,1069,1.967,1070,1.967,1071,3.201,1072,1.967,1073,1.967,1074,1.967,1075,2.781,1076,4.662,1077,1.967,1078,1.967,1079,1.967,1080,1.967,1081,5.036,1082,1.967,1083,1.967,1084,2.781,1085,1.967,1086,1.967,1087,1.967,1088,4.027,1089,4.662,1090,1.967,1091,1.967,1092,3.201,1093,4.027,1094,1.967,1095,1.967,1096,3.167,1097,1.71,1098,1.71,1099,2.908,1100,1.71,1101,1.967,1102,1.967,1103,1.967,1104,1.967,1105,3.201,1106,1.967,1107,1.967,1108,1.967,1109,1.967,1110,1.967,1111,1.967,1112,1.967]],["title/modules/PurchaseModule.html",[105,1.661,115,2.649]],["body/modules/PurchaseModule.html",[3,0.205,4,0.205,5,0.143,31,0.351,34,0.014,49,0.446,50,1.104,56,0.205,69,0.011,70,0.011,105,2.717,107,2.62,108,3.104,113,3.882,115,5.295,117,3.607,118,2.904,119,2.498,121,4.055,131,3.816,136,3.104,206,3.488,1064,5.078,1099,4.836,1100,4.546,1113,4.546,1114,5.232,1115,4.546,1116,5.232,1117,5.232]],["title/classes/PurchaseNotFoundException.html",[31,0.266,815,2.853]],["body/classes/PurchaseNotFoundException.html",[3,0.195,4,0.195,5,0.136,9,0.322,25,2.033,28,0.438,31,0.334,34,0.014,49,0.3,50,1.051,56,0.195,57,1.659,69,0.011,70,0.011,138,1.369,261,2.796,306,0.738,417,3.469,418,4.032,420,2.485,421,3.469,423,4.032,424,3.825,427,2.425,431,3.319,432,5.217,433,4.608,434,3.575,435,4.312,558,3.655,766,4.325,815,4.524,816,4.93]],["title/injectables/PurchaseService.html",[0,1.308,1099,2.479]],["body/injectables/PurchaseService.html",[0,1.071,2,1.006,3,0.079,4,0.079,5,0.055,9,0.13,22,0.298,23,1.157,25,0.591,28,0.515,30,2.17,31,0.275,32,1.63,33,1.785,34,0.015,35,1.413,36,0.763,37,1.019,45,2.082,47,2.594,49,0.379,50,0.424,56,0.079,59,0.959,61,2.422,66,1.996,67,4.205,69,0.008,70,0.006,76,3.466,83,2.56,101,3.608,103,3.389,138,0.977,139,2.253,180,1.006,184,2.263,194,1.593,209,2.944,220,2.78,233,1.713,236,2.422,258,1.816,268,1.339,276,3.463,280,1.179,291,2.03,311,2.591,314,1.484,315,1.006,328,2.484,329,1.351,330,2.56,333,1.713,334,1.872,340,2.17,346,2.03,347,1.63,348,2.03,349,2.923,350,1.973,351,2.03,352,1.872,353,1.554,355,2.03,361,2.03,365,1.911,368,1.179,370,1.806,373,1.204,386,1.115,388,1.253,390,1.115,396,1.806,437,3.389,438,3.389,441,1.442,449,1.572,456,2.337,464,2.56,467,1.572,468,1.572,472,1.572,477,4.058,478,5.058,481,2.547,502,1.707,538,1.253,555,3.798,558,3.435,559,2.736,563,2.337,572,1.442,701,3.146,704,5.441,758,2.947,761,2.77,763,3.457,1067,3.565,1081,5.29,1084,2.828,1088,4.059,1093,4.059,1096,3.211,1097,1.745,1098,1.745,1099,2.03,1118,1.745,1119,2.008,1120,2.008,1121,2.008,1122,2.008,1123,2.008,1124,2.008,1125,2.008,1126,2.008,1127,2.008,1128,2.008,1129,2.008,1130,2.008,1131,2.008,1132,3.254,1133,2.008,1134,3.254,1135,2.008,1136,3.254,1137,1.745,1138,3.254,1139,3.254,1140,2.008]],["title/classes/PurchaseServiceInputException.html",[31,0.266,764,2.649]],["body/classes/PurchaseServiceInputException.html",[3,0.208,4,0.208,5,0.145,9,0.343,25,1.561,28,0.467,31,0.356,33,1.621,34,0.014,35,1.079,36,0.692,37,0.925,56,0.208,57,1.727,69,0.011,70,0.011,194,1.502,262,3.131,306,0.787,420,2.434,427,2.043,622,3.95,673,3.452,764,5.091,819,4.744,996,5.11,1032,3.811,1033,5.569,1034,5.569,1035,5.132,1036,4.153,1037,4.153,1141,5.132]],["title/classes/ReviewPurchaseDto.html",[31,0.266,1088,2.649]],["body/classes/ReviewPurchaseDto.html",[3,0.181,4,0.181,5,0.127,9,0.299,22,0.685,28,0.528,31,0.402,34,0.014,36,0.783,37,1.046,49,0.402,56,0.181,57,1.216,69,0.01,70,0.01,145,1.976,170,1.851,194,1.267,224,3.006,306,0.685,308,1.833,309,1.903,317,1.833,350,2.509,492,3.006,493,2.866,497,3.006,498,1.851,502,2.325,519,3.613,533,4.002,535,3.332,541,3.315,557,3.315,558,3.185,572,3.315,574,5.527,575,5.527,763,5.003,1044,5.216,1046,3.745,1047,5.22,1061,4.011,1088,4.002,1142,5.796,1143,4.616,1144,4.616,1145,4.616,1146,4.616,1147,4.616,1148,4.616,1149,4.616,1150,4.616,1151,4.616]],["title/guards/RolesGuard.html",[1152,3.11,1153,2.853]],["body/guards/RolesGuard.html",[0,1.769,3,0.154,4,0.154,5,0.107,9,0.253,15,5.171,18,5.171,19,4.405,20,6.018,21,5.741,22,0.58,23,1.91,24,6.018,25,1.151,26,3.399,27,6.486,28,0.473,30,3.582,31,0.411,32,2.691,33,1.641,34,0.015,35,1.092,36,0.701,37,0.937,38,3.399,39,5.171,44,4.205,45,1.338,46,4.205,47,2.068,48,4.803,49,0.417,50,0.826,51,2.809,53,2.809,56,0.154,59,1.868,61,2.678,64,3.399,65,3.399,66,2.068,67,2.44,69,0.009,70,0.009,73,3.155,98,3.061,103,3.859,138,1.348,158,2.608,193,3.061,280,2.297,310,1.868,315,1.959,337,3.767,379,2.982,381,2.608,796,5.741,1137,3.399,1153,3.859,1154,3.399,1155,6.607,1156,3.911,1157,3.911,1158,5.373,1159,3.061,1160,3.911,1161,3.911,1162,3.911]],["title/classes/UpdateCategoryDto.html",[31,0.266,369,2.649]],["body/classes/UpdateCategoryDto.html",[3,0.215,4,0.215,5,0.15,9,0.355,31,0.367,34,0.014,37,1.166,49,0.403,56,0.215,57,1.444,69,0.012,70,0.012,170,2.197,305,2.918,306,0.813,308,2.042,329,1.804,336,4.503,369,4.459,387,4.289,491,4.289,492,3.35,787,4.172,1046,4.172,1163,4.762,1164,4.803,1165,4.803,1166,4.803,1167,3.936,1168,5.48]],["title/classes/UpdateProductDto.html",[31,0.266,920,2.649]],["body/classes/UpdateProductDto.html",[3,0.215,4,0.215,5,0.15,9,0.355,31,0.367,34,0.014,37,1.166,49,0.403,56,0.215,57,1.444,69,0.012,70,0.012,170,2.197,306,0.813,308,2.042,329,1.804,492,3.35,499,4.503,501,4.289,502,2.202,787,4.172,920,4.459,938,4.289,1046,4.172,1164,4.803,1165,4.803,1166,4.803,1167,3.936,1169,4.762,1170,5.48]],["title/classes/UpdatePurchaseDto.html",[31,0.266,1093,2.649]],["body/classes/UpdatePurchaseDto.html",[3,0.215,4,0.215,5,0.15,9,0.355,31,0.367,34,0.014,37,1.166,49,0.403,56,0.215,57,1.444,69,0.012,70,0.012,170,2.197,306,0.813,308,2.042,329,1.804,492,3.35,555,4.503,557,3.936,558,3.194,787,4.172,1046,4.172,1093,4.459,1096,4.289,1164,4.803,1165,4.803,1166,4.803,1167,3.936,1171,4.762,1172,5.48]],["title/classes/UpdateUserDto.html",[31,0.266,1173,2.649]],["body/classes/UpdateUserDto.html",[3,0.191,4,0.191,5,0.134,9,0.315,22,0.723,28,0.429,31,0.416,34,0.014,36,0.636,37,1.257,49,0.413,56,0.191,57,1.283,69,0.011,70,0.011,138,1.358,145,1.604,155,3.877,170,1.954,185,2.598,194,1.312,306,0.723,308,1.898,309,1.97,317,1.488,329,1.604,492,3.113,496,4.143,497,3.113,498,1.954,535,3.449,583,4.269,585,3.499,603,3.499,613,5.356,787,3.877,1046,3.877,1164,4.463,1165,4.463,1166,4.463,1167,3.499,1173,4.143,1174,4.864,1175,4.872,1176,4.872,1177,3.813,1178,4.872]],["title/classes/UpdateUserRoleDto.html",[31,0.266,1179,2.649]],["body/classes/UpdateUserRoleDto.html",[3,0.19,4,0.19,5,0.133,9,0.314,22,0.719,28,0.545,31,0.415,34,0.014,36,0.808,49,0.373,56,0.19,69,0.011,70,0.011,138,1.489,145,2.039,184,3.244,194,1.307,258,2.384,280,4.676,306,0.719,308,1.891,309,1.964,315,2.428,317,1.891,334,2.825,337,2.552,373,2.291,493,2.958,498,1.943,599,5.931,602,3.481,1174,5.342,1179,4.129,1180,4.212,1181,4.847,1182,6.194,1183,4.847,1184,4.847]],["title/classes/User.html",[31,0.266,138,0.749]],["body/classes/User.html",[3,0.137,4,0.137,5,0.096,9,0.226,22,0.518,28,0.639,31,0.234,34,0.015,35,1.35,36,0.946,37,1.333,49,0.21,56,0.137,69,0.009,70,0.009,138,1.52,184,2.898,185,2.776,194,1.639,230,3.922,236,2.165,253,3.883,274,2.913,280,4.26,306,0.518,308,1.515,309,1.993,310,2.369,311,2.663,314,1.592,315,1.748,317,2.215,337,3.31,396,2.754,525,3.308,526,2.506,538,4.143,586,5.771,602,2.506,607,3.032,608,3.032,609,3.032,610,3.032,624,3.563,761,2.913,882,4.92,899,3.563,900,4.311,901,4.311,1185,3.032,1186,5.771,1187,3.49,1188,3.49,1189,3.49,1190,3.49,1191,3.49,1192,3.49,1193,3.49,1194,3.49,1195,3.49,1196,3.49,1197,3.49,1198,3.49,1199,3.49,1200,3.49,1201,3.49]],["title/controllers/UserController.html",[134,1.897,1202,2.853]],["body/controllers/UserController.html",[3,0.106,4,0.106,5,0.074,9,0.175,22,0.401,23,1.461,28,0.526,31,0.275,32,1.353,33,1.825,34,0.015,35,1.215,36,0.78,37,1.042,41,2.413,45,2.239,47,2.712,49,0.432,50,0.57,56,0.106,59,1.29,61,2.17,66,2.301,69,0.007,70,0.007,76,2.375,101,2.619,134,1.29,136,1.29,138,1.442,139,2.375,145,1.968,146,3.986,158,5.034,162,3.705,163,1.802,164,1.802,165,2.74,166,3.892,167,4.349,168,4.198,169,1.802,170,1.084,171,1.587,180,1.353,181,3.986,185,1.718,218,3.263,222,1.686,233,2.926,250,3.705,253,4.928,258,2.139,280,2.92,326,1.941,327,3.572,328,2.619,329,1.353,333,2.619,334,2.268,337,2.164,340,2.74,358,2.952,370,3.495,373,2.328,374,2.952,376,2.413,378,2.115,379,2.281,380,1.587,381,1.802,386,1.5,390,2.281,406,1.941,424,2.164,583,3.928,611,4.497,943,2.348,1173,4.497,1177,3.892,1179,4.198,1202,2.952,1203,2.348,1204,3.571,1205,4.322,1206,2.348,1207,2.702,1208,2.702,1209,2.702,1210,2.702,1211,2.702,1212,4.973,1213,3.316,1214,2.702,1215,2.702,1216,2.702,1217,4.11,1218,2.702,1219,2.702,1220,2.702,1221,2.348,1222,4.11,1223,2.702,1224,2.702,1225,2.348,1226,2.348,1227,1.802,1228,2.348,1229,2.348,1230,2.348,1231,2.702,1232,2.702,1233,2.702,1234,2.702,1235,4.973,1236,2.702,1237,2.702,1238,2.702,1239,2.702,1240,2.702]],["title/classes/UserInputExceptionHandler.html",[31,0.266,653,2.853]],["body/classes/UserInputExceptionHandler.html",[3,0.171,4,0.171,5,0.119,9,0.282,22,0.646,23,2.054,28,0.383,31,0.292,33,1.33,34,0.014,35,0.885,36,0.568,37,0.759,45,1.49,49,0.433,50,0.919,56,0.171,69,0.01,70,0.01,138,1.301,258,2.495,261,2.657,262,3.764,291,4.044,306,0.646,310,2.758,417,3.297,425,3.128,433,2.903,619,4.322,624,4.149,625,4.521,630,4.149,637,5.403,645,5.403,646,5.403,652,3.408,653,4.149,655,5.779,665,3.851,673,3.413,674,4.322,730,3.604,764,3.851,768,3.408,819,4.322,1031,3.408,1141,3.408,1241,5.02,1242,4.355,1243,3.408,1244,5.776,1245,4.355]],["title/modules/UserModule.html",[105,1.661,116,2.479]],["body/modules/UserModule.html",[3,0.199,4,0.199,5,0.139,31,0.34,34,0.014,49,0.441,50,1.071,56,0.199,69,0.011,70,0.011,105,2.665,107,2.541,108,3.045,113,3.852,116,4.97,117,3.539,118,2.816,119,2.423,121,3.978,131,3.744,136,3.045,206,3.383,218,4.762,851,5.54,1202,5.007,1230,4.409,1246,4.409,1247,4.409,1248,5.073,1249,4.409,1250,5.073,1251,5.073]],["title/classes/UserNotFoundException.html",[31,0.266,817,2.853]],["body/classes/UserNotFoundException.html",[3,0.191,4,0.191,5,0.134,9,0.315,25,2.013,28,0.429,31,0.327,34,0.014,49,0.294,50,1.028,56,0.191,57,1.637,69,0.011,70,0.011,138,1.502,184,3.145,261,2.774,306,0.723,311,2.89,417,3.442,418,4,420,2.465,421,3.442,423,4,424,3.795,427,2.392,431,3.248,432,5.176,433,4.562,434,3.499,435,4.269,817,4.463,818,4.864,1252,4.872]],["title/injectables/UserService.html",[0,1.308,218,2.333]],["body/injectables/UserService.html",[0,0.99,2,0.913,3,0.072,4,0.072,5,0.05,9,0.118,22,0.271,23,1.069,25,0.536,28,0.535,31,0.257,32,1.506,33,1.856,34,0.015,35,1.235,36,0.793,37,1.059,45,2.242,47,2.681,49,0.395,50,0.385,56,0.072,59,0.871,61,2.652,66,1.897,69,0.005,70,0.005,76,3.548,83,2.395,138,1.444,139,2.127,140,2.005,155,3.658,180,0.913,184,2.314,185,3.123,194,1.539,209,2.778,211,3.536,218,1.766,220,2.656,222,1.876,230,1.138,233,1.584,236,2.731,241,5.094,243,2.613,244,5.094,245,3.485,246,3.809,258,2.47,262,2.127,263,3.335,264,1.31,268,1.216,276,4.089,280,2.254,289,3.87,291,1.876,311,2.72,314,1.372,328,2.345,329,0.99,333,1.584,334,1.751,347,1.506,365,1.766,368,1.071,370,2.472,373,1.112,376,2.615,386,1.012,390,1.669,420,1.523,437,3.198,438,3.198,441,1.31,456,2.16,512,2.969,583,3.309,601,1.584,611,3.74,613,3.004,635,2.354,726,2.16,751,2.16,753,2.613,761,3.442,1173,4.586,1177,3.004,1179,3.536,1186,1.584,1204,2.613,1205,3.335,1206,2.613,1213,2.559,1221,1.584,1225,1.584,1226,1.584,1227,1.216,1228,1.584,1229,1.584,1253,1.584,1254,3.007,1255,3.838,1256,3.838,1257,1.823,1258,1.823,1259,3.007,1260,1.823,1261,4.453,1262,3.007,1263,3.007,1264,1.823,1265,3.007,1266,3.007,1267,3.007,1268,1.823,1269,1.823,1270,3.007,1271,3.007,1272,3.007,1273,4.453,1274,1.823,1275,1.823,1276,1.823,1277,1.823,1278,1.823,1279,3.007,1280,3.838,1281,1.427,1282,1.823,1283,1.823,1284,3.007,1285,1.823,1286,4.453,1287,1.823,1288,3.007,1289,4.453,1290,1.823,1291,1.823,1292,3.838,1293,1.823,1294,1.823,1295,3.007,1296,1.823,1297,1.823,1298,3.007,1299,1.823,1300,1.823,1301,4.453,1302,4.453,1303,3.007,1304,1.823]],["title/classes/UserServiceInputException.html",[31,0.266,730,2.479]],["body/classes/UserServiceInputException.html",[3,0.208,4,0.208,5,0.145,9,0.343,25,1.561,28,0.467,31,0.356,33,1.621,34,0.014,35,1.079,36,0.692,37,0.925,56,0.208,57,1.727,69,0.011,70,0.011,194,1.502,262,3.131,306,0.787,420,2.434,427,2.043,622,3.95,673,3.452,730,4.764,819,4.744,996,5.11,1032,3.811,1033,5.569,1034,5.569,1035,5.132,1036,4.153,1037,4.153,1243,5.132]],["title/classes/UserWithoutPassword.html",[31,0.266,1227,2.649]],["body/classes/UserWithoutPassword.html",[3,0.219,4,0.219,5,0.153,9,0.361,31,0.374,34,0.014,49,0.408,56,0.219,57,1.47,61,2.435,69,0.012,70,0.012,138,1.371,170,2.237,185,3.041,306,0.828,530,4.367,787,4.218,1213,3.72,1227,4.508,1305,4.849,1306,4.849,1307,6.761,1308,6.761,1309,6.761,1310,5.58,1311,5.58]],["title/coverage.html",[1312,4.719]],["body/coverage.html",[0,2.206,1,1.749,5,0.067,6,2.969,7,1.43,8,2.116,31,0.541,34,0.014,35,0.771,36,0.318,41,1.43,54,1.906,69,0.007,70,0.007,71,1.623,72,2.116,89,1.749,134,2.722,135,1.749,137,2.116,138,0.715,144,1.749,152,1.749,172,1.519,176,1.623,184,1.063,185,1.586,208,2.116,218,1.43,220,1.219,258,0.937,265,1.906,269,1.749,305,1.063,307,2.116,324,1.749,325,2.116,336,1.519,342,1.623,357,1.43,369,1.623,379,1.351,380,2.227,384,1.519,414,1.749,415,2.724,416,3.346,430,1.749,431,3.507,436,2.116,490,2.116,491,2.969,499,1.519,500,2.116,501,2.969,502,0.802,555,1.519,556,2.116,557,3.346,558,1.811,583,1.519,584,2.116,585,3.346,611,1.623,612,2.116,615,1.749,616,1.906,618,1.749,619,1.623,621,2.116,627,4.049,631,1.906,632,2.116,650,1.749,653,1.749,655,1.906,660,1.906,661,2.116,662,2.116,665,1.623,673,2.453,676,1.906,677,2.116,678,2.116,686,2.116,687,2.116,696,2.116,697,2.116,701,1.623,702,2.116,703,2.116,719,2.116,720,2.116,726,1.749,727,2.116,728,2.969,730,1.519,732,2.116,733,2.116,739,2.116,748,2.116,751,1.749,752,2.116,758,1.749,759,2.116,760,2.116,764,1.623,767,2.116,768,2.969,812,1.749,813,2.724,814,1.749,815,1.749,816,1.906,817,1.749,818,1.906,853,2.116,878,2.116,902,1.749,903,2.116,920,1.623,932,1.749,935,1.906,936,1.906,939,1.519,963,3.647,967,2.116,1031,1.906,1032,3.346,1038,2.116,1064,1.749,1065,2.116,1088,1.623,1093,1.623,1099,1.519,1118,2.116,1141,1.906,1142,2.116,1152,1.906,1153,1.749,1154,2.116,1159,1.906,1163,2.116,1169,2.116,1171,2.116,1173,1.623,1174,2.969,1179,1.623,1180,2.116,1185,2.116,1202,1.749,1203,2.116,1213,1.623,1227,1.623,1241,2.116,1243,1.906,1253,2.116,1281,1.906,1305,2.116,1306,2.116,1312,2.116,1313,2.116,1314,2.435,1315,2.435,1316,8.27,1317,6.699,1318,5.26,1319,5.26,1320,7.729,1321,3.296,1322,6.699,1323,7.409,1324,2.116,1325,2.969,1326,2.435,1327,2.116,1328,3.296,1329,4.049,1330,2.116,1331,2.116,1332,2.116,1333,2.116,1334,3.793,1335,4.659,1336,2.435,1337,3.793,1338,3.793,1339,2.435,1340,2.435,1341,2.435]],["title/dependencies.html",[108,2.283,1342,2.88]],["body/dependencies.html",[7,3.037,11,4.635,31,0.432,34,0.015,50,1.092,51,3.715,52,3.715,53,3.715,69,0.011,70,0.011,108,2.47,170,2.074,171,3.789,201,4.049,262,2.47,264,3.715,274,3.037,275,4.049,314,2.36,315,2.591,498,2.074,629,4.049,694,3.449,809,4.049,962,4.495,1343,7.034,1344,5.173,1345,5.173,1346,5.173,1347,5.173,1348,5.173,1349,5.173,1350,5.173,1351,5.173,1352,5.173,1353,5.173,1354,5.173,1355,5.173,1356,5.173,1357,5.173,1358,5.173,1359,5.173,1360,5.173,1361,5.173,1362,4.495,1363,4.495,1364,5.173,1365,5.173]],["title/miscellaneous/functions.html",[1366,2.067,1367,4.154]],["body/miscellaneous/functions.html",[5,0.15,22,0.811,34,0.013,45,2.466,47,2.103,69,0.012,70,0.012,145,1.799,226,4.748,317,2.039,329,1.799,333,2.877,334,2.492,337,2.877,379,4.001,380,3.208,396,3.033,480,3.033,502,1.799,630,4.794,669,4.451,735,3.643,761,3.208,935,5.642,936,4.277,985,4.277,1324,5.801,1325,5.225,1332,4.748,1333,6.264,1366,3.409,1367,4.748,1368,5.464,1369,5.464,1370,4.748,1371,5.464,1372,5.464,1373,4.748,1374,4.748]],["title/index.html",[22,0.492,1375,2.88,1376,2.88]],["body/index.html",[7,1.895,11,3.368,19,2.152,31,0.314,34,0.014,69,0.008,70,0.008,93,2.013,139,2.239,171,2.754,262,1.541,264,2.318,275,2.526,314,2.766,328,3.193,337,1.699,498,1.294,589,5.898,636,2.804,669,2.152,694,2.152,809,2.526,1362,4.075,1363,2.804,1377,3.227,1378,5.524,1379,3.227,1380,6.935,1381,6.441,1382,3.227,1383,7.854,1384,4.69,1385,4.69,1386,4.69,1387,3.227,1388,5.524,1389,4.69,1390,5.524,1391,4.69,1392,3.227,1393,3.227,1394,3.227,1395,4.69,1396,5.524,1397,4.69,1398,4.69,1399,4.69,1400,3.227,1401,3.227,1402,4.69,1403,3.227,1404,3.227,1405,7.105,1406,4.69,1407,3.227,1408,3.227,1409,6.064,1410,3.227,1411,3.227,1412,3.227,1413,3.227,1414,3.227,1415,3.227,1416,6.064,1417,3.227,1418,3.227,1419,3.227,1420,3.227,1421,3.227,1422,7.243,1423,4.69,1424,4.69,1425,4.69,1426,4.69,1427,4.69,1428,3.227,1429,3.227,1430,3.227,1431,3.227,1432,3.227,1433,6.064,1434,6.441,1435,4.69,1436,3.227,1437,3.227,1438,4.69,1439,3.227,1440,3.227,1441,3.227,1442,3.227,1443,3.227,1444,3.227,1445,3.227,1446,3.227,1447,3.227,1448,4.69,1449,5.524,1450,6.441,1451,3.227,1452,3.227,1453,6.441,1454,6.935,1455,3.227,1456,3.227,1457,3.227,1458,3.227,1459,3.227,1460,3.227,1461,3.227,1462,3.227,1463,3.227,1464,3.227,1465,3.227,1466,3.227,1467,4.69,1468,3.227,1469,3.227,1470,3.227,1471,3.227,1472,3.227,1473,3.227,1474,3.227,1475,3.227,1476,3.227,1477,3.227,1478,3.227,1479,3.227,1480,3.227,1481,3.227,1482,3.227,1483,3.227,1484,3.227,1485,3.227,1486,3.227,1487,3.227,1488,3.227,1489,3.227,1490,3.227,1491,3.227,1492,3.227,1493,3.227,1494,3.227,1495,3.227,1496,3.227,1497,3.227,1498,2.804]],["title/license.html",[1375,2.88,1376,2.88,1499,2.594]],["body/license.html",[34,0.011,69,0.011,70,0.011,119,2.327,171,2.861,428,4.463,671,4.234,899,3.499,1075,4.234,1213,4.562,1313,4.234,1498,4.234,1499,3.813,1500,6.843,1501,4.872,1502,4.872,1503,4.872,1504,6.214,1505,4.872,1506,4.872,1507,4.872,1508,4.872,1509,4.872,1510,4.872,1511,6.214,1512,7.909,1513,4.872,1514,4.872,1515,4.872,1516,4.872,1517,6.214,1518,4.872,1519,4.872,1520,4.872,1521,4.872,1522,4.872,1523,4.872,1524,4.872,1525,4.872,1526,6.214,1527,4.872,1528,4.872,1529,4.872,1530,4.872,1531,4.872,1532,4.872,1533,6.214,1534,6.214,1535,4.872,1536,4.872,1537,4.872,1538,4.872,1539,4.872,1540,4.872,1541,4.872,1542,4.872,1543,4.872,1544,4.872,1545,4.872,1546,4.872,1547,4.872,1548,4.872,1549,4.872,1550,4.872,1551,4.872,1552,4.872,1553,4.872,1554,4.872,1555,4.872,1556,4.872,1557,4.872,1558,4.872,1559,4.872,1560,4.872,1561,4.872,1562,4.872,1563,4.872]],["title/modules.html",[107,2.72]],["body/modules.html",[34,0.012,69,0.012,70,0.012,106,4.12,107,2.873,111,3.824,112,3.824,113,2.873,114,3.824,115,3.824,116,3.579,1564,8.01,1565,8.01,1566,8.01,1567,8.01]],["title/overview.html",[1568,4.719]],["body/overview.html",[2,2.116,34,0.014,69,0.01,70,0.01,71,4.257,106,5.738,107,2.116,108,2.703,109,3.671,110,3.671,111,5.229,112,4.985,113,3.928,114,4.985,115,4.985,116,4.801,117,3.142,118,2.345,119,2.018,136,2.018,172,3.983,196,3.671,198,3.671,218,4.39,220,3.745,306,0.627,350,2.367,384,3.983,409,3.671,411,3.671,618,3.034,847,3.671,848,3.671,849,3.671,939,3.983,956,3.671,957,3.671,1047,3.307,1099,3.983,1113,3.671,1115,3.671,1152,3.307,1246,3.671,1247,3.671,1249,3.671,1568,3.671,1569,4.225,1570,4.225,1571,4.225]],["title/properties.html",[309,1.516,1342,2.88]],["body/properties.html",[9,0.401,34,0.014,69,0.013,70,0.013,309,1.965,1499,4.851,1572,6.199,1573,6.199,1574,6.199,1575,6.199,1576,6.199]],["title/miscellaneous/typealiases.html",[1366,2.067,1577,4.781]],["body/miscellaneous/typealiases.html",[22,0.859,34,0.012,36,0.964,69,0.012,70,0.012,73,4.059,74,5.411,80,6.007,84,5.031,91,6.007,93,4.776,94,5.031,735,3.86,1366,3.612,1578,5.79,1579,6.913,1580,6.913,1581,6.913,1582,6.913,1583,5.79,1584,5.79,1585,6.913]],["title/miscellaneous/variables.html",[1366,2.067,1586,4.154]],["body/miscellaneous/variables.html",[5,0.171,12,2.676,17,3.511,22,0.507,34,0.014,36,0.894,41,3.351,54,3.826,61,2.718,62,2.971,66,2.197,67,3.05,69,0.009,70,0.009,73,2.007,74,3.826,75,2.971,89,3.511,98,2.676,138,0.644,139,1.632,140,2.279,158,3.259,194,1.032,227,1.8,234,2.455,265,3.826,317,1.044,329,1.126,347,3.679,352,1.559,373,1.264,379,2.713,380,2.007,420,2.254,629,3.826,669,3.805,690,2.676,761,2.007,791,2.971,927,2.971,928,2.971,929,2.971,930,2.971,931,2.971,932,3.511,963,2.676,985,2.676,1153,2.455,1159,3.826,1281,3.826,1321,2.971,1325,3.826,1327,2.971,1328,2.971,1329,5.412,1330,4.959,1331,4.248,1366,2.133,1370,2.971,1373,4.959,1374,2.971,1586,2.971,1587,4.889,1588,3.418,1589,4.889,1590,5.707,1591,4.889,1592,7.542,1593,4.889,1594,3.418,1595,4.889,1596,3.418,1597,5.707,1598,3.418,1599,3.418,1600,4.889,1601,3.418,1602,3.418,1603,3.418,1604,4.889,1605,4.889,1606,4.889,1607,3.418,1608,3.418,1609,3.418,1610,3.418,1611,3.418,1612,4.889,1613,4.889,1614,3.418,1615,4.889,1616,4.889,1617,3.418,1618,3.418,1619,3.418,1620,3.418,1621,3.418,1622,5.707,1623,4.889,1624,4.889,1625,3.418,1626,3.418,1627,3.418,1628,3.418,1629,4.889,1630,3.418,1631,4.889,1632,3.418,1633,4.889,1634,3.418,1635,3.418,1636,3.418,1637,3.418,1638,3.418,1639,3.418,1640,3.418,1641,3.418,1642,3.418,1643,3.418,1644,3.418,1645,3.418,1646,3.418]]],"invertedIndex":[["",{"_index":34,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":526,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["0.0.1",{"_index":1573,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1358,"title":{},"body":{"dependencies.html":{}}}],["0.1.2",{"_index":1355,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1351,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1350,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":1353,"title":{},"body":{"dependencies.html":{}}}],["03",{"_index":900,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["05",{"_index":1062,"title":{},"body":{"classes/Purchase.html":{}}}],["0878",{"_index":551,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["1",{"_index":350,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"overview.html":{}}}],["1/1",{"_index":1323,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":352,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"miscellaneous/variables.html":{}}}],["10/10",{"_index":1319,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1316,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["1024",{"_index":1612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11/11",{"_index":1326,"title":{},"body":{"coverage.html":{}}}],["12/12",{"_index":1336,"title":{},"body":{"coverage.html":{}}}],["138.75",{"_index":582,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["13t15:41:28.527z",{"_index":1063,"title":{},"body":{"classes/Purchase.html":{}}}],["151be8d85634",{"_index":1200,"title":{},"body":{"classes/User.html":{}}}],["15m",{"_index":1596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1811c405c0f7",{"_index":1055,"title":{},"body":{"classes/Purchase.html":{}}}],["1e9",{"_index":1627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":581,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["2.1.3",{"_index":1352,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1320,"title":{},"body":{"coverage.html":{}}}],["2022",{"_index":899,"title":{},"body":{"classes/Product.html":{},"classes/Purchase.html":{},"classes/User.html":{},"license.html":{}}}],["24",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["25d18b3976a0",{"_index":580,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["26c3fd79",{"_index":714,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["26t15:41:28.527z",{"_index":901,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["2b$10$1xpzuyu8fuvuabb3sc0xzur9dx7kakbmlt0vlnoz.unlntdmfc4lk",{"_index":1201,"title":{},"body":{"classes/User.html":{}}}],["2e651e21b871",{"_index":549,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["3",{"_index":1611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":1360,"title":{},"body":{"dependencies.html":{}}}],["3.14.0",{"_index":1348,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1317,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":1444,"title":{},"body":{"index.html":{}}}],["306e52f9e686",{"_index":713,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["32d0226134e2",{"_index":718,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["3mb",{"_index":931,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":1354,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":1364,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1318,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":1571,"title":{},"body":{"overview.html":{}}}],["400",{"_index":419,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["401",{"_index":721,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{}}}],["404",{"_index":432,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["42",{"_index":543,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["4302",{"_index":895,"title":{},"body":{"classes/Product.html":{}}}],["4368",{"_index":1053,"title":{},"body":{"classes/Purchase.html":{}}}],["438c",{"_index":319,"title":{},"body":{"classes/Category.html":{}}}],["441e",{"_index":1198,"title":{},"body":{"classes/User.html":{}}}],["463b",{"_index":711,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["4646",{"_index":716,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["4688",{"_index":552,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["4889",{"_index":1058,"title":{},"body":{"classes/Purchase.html":{}}}],["49f3",{"_index":547,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["4fce",{"_index":320,"title":{},"body":{"classes/Category.html":{}}}],["4fde",{"_index":578,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["5",{"_index":1047,"title":{},"body":{"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{},"overview.html":{}}}],["5.0.1",{"_index":1349,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":1347,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1337,"title":{},"body":{"coverage.html":{}}}],["541c",{"_index":710,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["5c68ae94",{"_index":576,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["6/6",{"_index":1339,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["6f4ca8a4",{"_index":893,"title":{},"body":{"classes/Product.html":{}}}],["7",{"_index":1569,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":1361,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1334,"title":{},"body":{"coverage.html":{}}}],["70.00",{"_index":542,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["7aed",{"_index":1197,"title":{},"body":{"classes/User.html":{}}}],["7b5547f01b0a",{"_index":897,"title":{},"body":{"classes/Product.html":{}}}],["8",{"_index":605,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8'})@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":595,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.0.0",{"_index":1344,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":1346,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":1365,"title":{},"body":{"dependencies.html":{}}}],["8.4.4",{"_index":1343,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1335,"title":{},"body":{"coverage.html":{}}}],["857cd575",{"_index":545,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["8aa0",{"_index":894,"title":{},"body":{"classes/Product.html":{}}}],["8d85",{"_index":321,"title":{},"body":{"classes/Category.html":{}}}],["8fd6",{"_index":712,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["9",{"_index":1570,"title":{},"body":{"overview.html":{}}}],["9/9",{"_index":1338,"title":{},"body":{"coverage.html":{}}}],["90d",{"_index":1599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["949e",{"_index":1054,"title":{},"body":{"classes/Purchase.html":{}}}],["956b",{"_index":546,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["95f273eb70e1",{"_index":1060,"title":{},"body":{"classes/Purchase.html":{}}}],["979e",{"_index":1059,"title":{},"body":{"classes/Purchase.html":{}}}],["9f7f",{"_index":1199,"title":{},"body":{"classes/User.html":{}}}],["a04bb2db",{"_index":1056,"title":{},"body":{"classes/Purchase.html":{}}}],["a287",{"_index":717,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["a75e",{"_index":548,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["abc123456",{"_index":603,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{}}}],["above",{"_index":1532,"title":{},"body":{"license.html":{}}}],["abrir",{"_index":1442,"title":{},"body":{"index.html":{}}}],["ac1b",{"_index":896,"title":{},"body":{"classes/Product.html":{}}}],["ac63",{"_index":553,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["accepts",{"_index":1641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access",{"_index":73,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"guards/RolesGuard.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["accessible",{"_index":1374,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["accessing",{"_index":1155,"title":{},"body":{"guards/RolesGuard.html":{}}}],["accessjwtauthguard",{"_index":1,"title":{"injectables/AccessJwtAuthGuard.html":{}},"body":{"injectables/AccessJwtAuthGuard.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["accessjwtconfig",{"_index":89,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["accessjwtconfig.secret",{"_index":100,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["accessjwtstrategy",{"_index":71,"title":{"injectables/AccessJwtStrategy.html":{}},"body":{"injectables/AccessJwtStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["accesstoken",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginResponse.html":{}}}],["accesstokencontent",{"_index":91,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["accesstokenpayload",{"_index":80,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["acessar",{"_index":1446,"title":{},"body":{"index.html":{}}}],["action",{"_index":1557,"title":{},"body":{"license.html":{}}}],["add",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/functions.html":{}}}],["adddaysfromnow",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["adddaysfromnow(days",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["address",{"_index":586,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["admin",{"_index":337,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["admin.decorator",{"_index":381,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{}}}],["admin.decorator.ts",{"_index":1325,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["admins",{"_index":340,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{}}}],["aliases",{"_index":1578,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed",{"_index":1158,"title":{},"body":{"guards/RolesGuard.html":{}}}],["already",{"_index":422,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["alterando",{"_index":1456,"title":{},"body":{"index.html":{}}}],["alvaromrveiga",{"_index":1576,"title":{},"body":{"properties.html":{}}}],["amazing",{"_index":1061,"title":{},"body":{"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["amount",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"miscellaneous/variables.html":{}}}],["and/or",{"_index":1075,"title":{},"body":{"controllers/PurchaseController.html":{},"license.html":{}}}],["another",{"_index":1034,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["apenas",{"_index":1467,"title":{},"body":{"index.html":{}}}],["api",{"_index":1379,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["apioperation",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":684,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["apiproperty({type",{"_index":680,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["apitags",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["apitags('authentication",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('category",{"_index":392,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apitags('product",{"_index":941,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags('purchase",{"_index":1101,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["apitags('user",{"_index":1231,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":635,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["app.close",{"_index":877,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app_guard",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["application",{"_index":735,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["appmodule",{"_index":106,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arising",{"_index":1561,"title":{},"body":{"license.html":{}}}],["armazenar",{"_index":1478,"title":{},"body":{"index.html":{}}}],["arquivo",{"_index":1425,"title":{},"body":{"index.html":{}}}],["array",{"_index":975,"title":{},"body":{"injectables/ProductService.html":{}}}],["asc",{"_index":473,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["associated",{"_index":1513,"title":{},"body":{"license.html":{}}}],["async",{"_index":76,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["autenticação",{"_index":1388,"title":{},"body":{"index.html":{}}}],["auth.controller",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["auth.guard.ts",{"_index":8,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:13",{"_index":29,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["auth.guard.ts:28",{"_index":40,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["auth.service",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/access",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.module",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":135,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":734,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["authenticates",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticating",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":17,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{},"classes/LoginResponse.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":13,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["authguard('access",{"_index":58,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["authmodule",{"_index":111,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1575,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":1550,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":172,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autorização",{"_index":1389,"title":{},"body":{"index.html":{}}}],["available",{"_index":438,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["avaliações",{"_index":1387,"title":{},"body":{"index.html":{}}}],["await",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["b01f",{"_index":579,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["b076f72e",{"_index":1051,"title":{},"body":{"classes/Purchase.html":{}}}],["b0e0c99e",{"_index":709,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["backend",{"_index":1378,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":425,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"classes/UserInputExceptionHandler.html":{}}}],["badrequestexception(error.message",{"_index":1244,"title":{},"body":{"classes/UserInputExceptionHandler.html":{}}}],["banco",{"_index":1449,"title":{},"body":{"index.html":{}}}],["bando",{"_index":1463,"title":{},"body":{"index.html":{}}}],["baseprice",{"_index":503,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["bcrypt",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["becomes",{"_index":1000,"title":{},"body":{"injectables/ProductService.html":{}}}],["before",{"_index":868,"title":{},"body":{"injectables/PrismaService.html":{}}}],["being",{"_index":1605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["between",{"_index":994,"title":{},"body":{"injectables/ProductService.html":{}}}],["bf3e",{"_index":577,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["binary",{"_index":682,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["black",{"_index":540,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["body",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["boilerplate",{"_index":647,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{}}}],["boolean",{"_index":46,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"classes/PrismaExceptionHandler.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":1333,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":753,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{},"injectables/UserService.html":{}}}],["brand",{"_index":539,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["brand1",{"_index":999,"title":{},"body":{"injectables/ProductService.html":{}}}],["break",{"_index":827,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["browse",{"_index":1567,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1564,"title":{},"body":{"modules.html":{}}}],["c",{"_index":1501,"title":{},"body":{"license.html":{}}}],["calculations",{"_index":513,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["call",{"_index":866,"title":{},"body":{"injectables/PrismaService.html":{}}}],["callback",{"_index":1623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(new",{"_index":1636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":1629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["called",{"_index":743,"title":{},"body":{"classes/LoginResponse.html":{}}}],["callhandler",{"_index":643,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["canactivate",{"_index":24,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":38,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["capitalize",{"_index":445,"title":{},"body":{"injectables/CategoryService.html":{}}}],["capitalizeonlyfirstletter",{"_index":439,"title":{},"body":{"injectables/CategoryService.html":{}}}],["capitalizeonlyfirstletter(name",{"_index":443,"title":{},"body":{"injectables/CategoryService.html":{}}}],["case",{"_index":822,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{}}}],["catcherror",{"_index":649,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["catcherror((error",{"_index":657,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["catches",{"_index":645,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["categorias",{"_index":1401,"title":{},"body":{"index.html":{}}}],["categories",{"_index":345,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"injectables/ProductService.html":{}}}],["categories'})@public()@get",{"_index":343,"title":{},"body":{"controllers/CategoryController.html":{}}}],["categories.dto",{"_index":389,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["categories.dto.ts",{"_index":687,"title":{},"body":{"classes/FindCategoriesDto.html":{},"coverage.html":{}}}],["categories.dto.ts:11",{"_index":689,"title":{},"body":{"classes/FindCategoriesDto.html":{}}}],["categories.dto.ts:20",{"_index":693,"title":{},"body":{"classes/FindCategoriesDto.html":{}}}],["categories.dto.ts:29",{"_index":692,"title":{},"body":{"classes/FindCategoriesDto.html":{}}}],["categories.map((category",{"_index":1030,"title":{},"body":{"injectables/ProductService.html":{}}}],["categoriesconnection",{"_index":1029,"title":{},"body":{"injectables/ProductService.html":{}}}],["categoriestoskip",{"_index":465,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category",{"_index":305,"title":{"classes/Category.html":{}},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category'})@isadmin()@delete(':id')@httpcode(httpstatus.no_content",{"_index":366,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category'})@isadmin()@patch(':id",{"_index":371,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category'})@isadmin()@post",{"_index":338,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category.controller",{"_index":413,"title":{},"body":{"modules/CategoryModule.html":{}}}],["category.dto",{"_index":387,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts",{"_index":491,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:12",{"_index":495,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.service",{"_index":385,"title":{},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{}}}],["categorycontroller",{"_index":324,"title":{"controllers/CategoryController.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"coverage.html":{}}}],["categorymodule",{"_index":112,"title":{"modules/CategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["categoryname",{"_index":463,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{}}}],["categorynameinuseexception",{"_index":414,"title":{"classes/CategoryNameInUseException.html":{}},"body":{"classes/CategoryNameInUseException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["categorynotfoundexception",{"_index":430,"title":{"classes/CategoryNotFoundException.html":{}},"body":{"classes/CategoryNotFoundException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["categoryservice",{"_index":384,"title":{"injectables/CategoryService.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["cd",{"_index":1418,"title":{},"body":{"index.html":{}}}],["chair",{"_index":695,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"injectables/ProductService.html":{}}}],["chair&quot",{"_index":1002,"title":{},"body":{"injectables/ProductService.html":{}}}],["charge",{"_index":1508,"title":{},"body":{"license.html":{}}}],["check",{"_index":14,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/ProductController.html":{}}}],["checks",{"_index":796,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"guards/RolesGuard.html":{}}}],["claim",{"_index":1553,"title":{},"body":{"license.html":{}}}],["class",{"_index":31,"title":{"classes/Category.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":306,"title":{},"body":{"classes/Category.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"overview.html":{}}}],["clientversion",{"_index":797,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["clona",{"_index":1408,"title":{},"body":{"index.html":{}}}],["clone",{"_index":1413,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categorymodule",{"_index":409,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_imports",{"_index":410,"title":{},"body":{"modules/CategoryModule.html":{}}}],["cluster_categorymodule_providers",{"_index":411,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":847,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":848,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":849,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_productmodule",{"_index":956,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_productmodule_imports",{"_index":958,"title":{},"body":{"modules/ProductModule.html":{}}}],["cluster_productmodule_providers",{"_index":957,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_purchasemodule",{"_index":1113,"title":{},"body":{"modules/PurchaseModule.html":{},"overview.html":{}}}],["cluster_purchasemodule_imports",{"_index":1114,"title":{},"body":{"modules/PurchaseModule.html":{}}}],["cluster_purchasemodule_providers",{"_index":1115,"title":{},"body":{"modules/PurchaseModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1246,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1247,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1248,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1249,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["colocou",{"_index":1459,"title":{},"body":{"index.html":{}}}],["com",{"_index":1380,"title":{},"body":{"index.html":{}}}],["comment",{"_index":1044,"title":{},"body":{"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["commerce",{"_index":1377,"title":{},"body":{"index.html":{}}}],["compare",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["compare(currentpassword",{"_index":1304,"title":{},"body":{"injectables/UserService.html":{}}}],["compare(password",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["compared",{"_index":1267,"title":{},"body":{"injectables/UserService.html":{}}}],["compares",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["compodoc",{"_index":1391,"title":{},"body":{"index.html":{}}}],["compras",{"_index":1386,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":1531,"title":{},"body":{"license.html":{}}}],["configuration",{"_index":75,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["configurations",{"_index":1597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connect",{"_index":873,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/ProductService.html":{}}}],["connectcategoriesbyid",{"_index":968,"title":{},"body":{"injectables/ProductService.html":{}}}],["connectcategoriesbyid(categories",{"_index":973,"title":{},"body":{"injectables/ProductService.html":{}}}],["connecting",{"_index":854,"title":{},"body":{"injectables/PrismaService.html":{}}}],["connection",{"_index":1562,"title":{},"body":{"license.html":{}}}],["considering",{"_index":510,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["const",{"_index":61,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":1613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constructor",{"_index":25,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{}}}],["constructor(filetypes",{"_index":666,"title":{},"body":{"classes/FileTypeError.html":{}}}],["constructor(message",{"_index":1035,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["constructor(prisma",{"_index":441,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":59,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(reflector",{"_index":26,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["constructor(userservice",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["construir",{"_index":1476,"title":{},"body":{"index.html":{}}}],["consult",{"_index":1606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contain",{"_index":597,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["containing",{"_index":690,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"miscellaneous/variables.html":{}}}],["contains",{"_index":469,"title":{},"body":{"injectables/CategoryService.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{}}}],["content",{"_index":94,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["content.ts",{"_index":1580,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["context",{"_index":44,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":65,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":64,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":1162,"title":{},"body":{"guards/RolesGuard.html":{}}}],["contract",{"_index":1558,"title":{},"body":{"license.html":{}}}],["controller",{"_index":134,"title":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('category",{"_index":393,"title":{},"body":{"controllers/CategoryController.html":{}}}],["controller('product",{"_index":942,"title":{},"body":{"controllers/ProductController.html":{}}}],["controller('purchase",{"_index":1102,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["controller('user",{"_index":1232,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["copies",{"_index":1526,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1511,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1500,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":1312,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":329,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":943,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["create(createcategorydto",{"_index":335,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["create(createproductdto",{"_index":906,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["create(createuserdto",{"_index":1206,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(request",{"_index":1068,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["create(userid",{"_index":1120,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["createcategorydto",{"_index":336,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["createdat",{"_index":538,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{}}}],["createproductdto",{"_index":499,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["createpurchasedto",{"_index":555,"title":{"classes/CreatePurchaseDto.html":{}},"body":{"classes/CreatePurchaseDto.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["createrefreshtoken",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["createrefreshtoken(userid",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["creates",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":583,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email.tolowercase",{"_index":1290,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.password",{"_index":1287,"title":{},"body":{"injectables/UserService.html":{}}}],["credentials.dto",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":733,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:11",{"_index":737,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["credentials.dto.ts:19",{"_index":738,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["criação",{"_index":1382,"title":{},"body":{"index.html":{}}}],["crie",{"_index":1423,"title":{},"body":{"index.html":{}}}],["crud",{"_index":328,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["currency.js",{"_index":515,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["current",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"classes/DeleteUserDto.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["currentpassword",{"_index":613,"title":{},"body":{"classes/DeleteUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["customdecorator",{"_index":1608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["código",{"_index":1497,"title":{},"body":{"index.html":{}}}],["códigos",{"_index":1488,"title":{},"body":{"index.html":{}}}],["d31fc56c",{"_index":1196,"title":{},"body":{"classes/User.html":{}}}],["dados",{"_index":1450,"title":{},"body":{"index.html":{}}}],["damages",{"_index":1554,"title":{},"body":{"license.html":{}}}],["data",{"_index":83,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["database",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["date",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["date.now",{"_index":1625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datestring",{"_index":882,"title":{},"body":{"classes/Product.html":{},"classes/Purchase.html":{},"classes/User.html":{}}}],["days",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["db3d22db270a",{"_index":322,"title":{},"body":{"classes/Category.html":{}}}],["de",{"_index":1383,"title":{},"body":{"index.html":{}}}],["deal",{"_index":1515,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1563,"title":{},"body":{"license.html":{}}}],["decimal",{"_index":506,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["decoration",{"_index":323,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{}}}],["decorator",{"_index":42,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["decorators",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["decorators/is",{"_index":1160,"title":{},"body":{"guards/RolesGuard.html":{}}}],["decrypted",{"_index":84,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["default",{"_index":347,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":525,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/User.html":{}}}],["defined",{"_index":28,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{}}}],["delete",{"_index":376,"title":{},"body":{"controllers/CategoryController.html":{},"classes/DeleteUserDto.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(':id",{"_index":405,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["deletes",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["deleteuserdto",{"_index":611,"title":{"classes/DeleteUserDto.html":{}},"body":{"classes/DeleteUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["deleteuserdto.currentpassword",{"_index":1299,"title":{},"body":{"injectables/UserService.html":{}}}],["dependencies",{"_index":108,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":32,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dependências",{"_index":1421,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1135,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["describes",{"_index":308,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{}}}],["description",{"_index":9,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"properties.html":{}}}],["descritas",{"_index":1430,"title":{},"body":{"index.html":{}}}],["desenvolvimento",{"_index":1440,"title":{},"body":{"index.html":{}}}],["destination",{"_index":1620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["discount",{"_index":523,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["discountpercentage",{"_index":504,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["discounts",{"_index":511,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["diskstorage",{"_index":1619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distribute",{"_index":1523,"title":{},"body":{"license.html":{}}}],["docs",{"_index":933,"title":{},"body":{"controllers/ProductController.html":{}}}],["documentation",{"_index":1313,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["documentação",{"_index":1390,"title":{},"body":{"index.html":{}}}],["doe",{"_index":608,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["doesn't",{"_index":1279,"title":{},"body":{"injectables/UserService.html":{}}}],["dos",{"_index":1484,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":386,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/delete",{"_index":1225,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/find",{"_index":388,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["dto/login",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/login.response",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/logout.dto",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/review",{"_index":1098,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["dto/update",{"_index":390,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e",{"_index":589,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"index.html":{}}}],["e3ecf4939a89",{"_index":554,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["e6cf9a58",{"_index":318,"title":{},"body":{"classes/Category.html":{}}}],["ecommerce",{"_index":1419,"title":{},"body":{"index.html":{}}}],["em",{"_index":1438,"title":{},"body":{"index.html":{}}}],["email",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/LoginCredentialsDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PurchaseService.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["email.tolowercase",{"_index":1293,"title":{},"body":{"injectables/UserService.html":{}}}],["emailinuseexception",{"_index":615,"title":{"classes/EmailInUseException.html":{}},"body":{"classes/EmailInUseException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["enableshutdownhooks",{"_index":857,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":859,"title":{},"body":{"injectables/PrismaService.html":{}}}],["endpoint",{"_index":1373,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["enter",{"_index":756,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["entities/category.entity",{"_index":391,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{}}}],["entities/product.entity",{"_index":536,"title":{},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["entities/purchase.entity",{"_index":572,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{}}}],["entities/user",{"_index":1228,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entities/user.entity",{"_index":601,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":1307,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["entra",{"_index":1415,"title":{},"body":{"index.html":{}}}],["entrada",{"_index":1483,"title":{},"body":{"index.html":{}}}],["enum",{"_index":809,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"dependencies.html":{},"index.html":{}}}],["env",{"_index":1426,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":1431,"title":{},"body":{"index.html":{}}}],["env.test",{"_index":1455,"title":{},"body":{"index.html":{}}}],["equals",{"_index":1134,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["error",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"dependencies.html":{},"index.html":{}}}],["error.clientversion",{"_index":837,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.code",{"_index":821,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message",{"_index":836,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.category",{"_index":841,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product",{"_index":840,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product.create",{"_index":845,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product.delete",{"_index":844,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product.update",{"_index":843,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.purchase",{"_index":846,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.user",{"_index":842,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["errormeta",{"_index":793,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["errors",{"_index":637,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["errors/invalid",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["erros",{"_index":636,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"index.html":{}}}],["eslint",{"_index":1493,"title":{},"body":{"index.html":{}}}],["event",{"_index":1549,"title":{},"body":{"license.html":{}}}],["example",{"_index":317,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["exception",{"_index":622,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/FileTypeError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["exception.handler",{"_index":652,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["exception.handler.ts",{"_index":768,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["exception.handler.ts:110",{"_index":786,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:120",{"_index":807,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:125",{"_index":801,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:133",{"_index":789,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:138",{"_index":782,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:14",{"_index":1242,"title":{},"body":{"classes/UserInputExceptionHandler.html":{}}}],["exception.handler.ts:143",{"_index":805,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:19",{"_index":779,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:89",{"_index":795,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:94",{"_index":792,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:99",{"_index":803,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exceptionhandler",{"_index":619,"title":{"interfaces/ExceptionHandler.html":{}},"body":{"interfaces/ExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["exceptioninterceptor",{"_index":631,"title":{"injectables/ExceptionInterceptor.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"coverage.html":{}}}],["exceptions/invalid",{"_index":1283,"title":{},"body":{"injectables/UserService.html":{}}}],["exceptions/missing",{"_index":1285,"title":{},"body":{"injectables/UserService.html":{}}}],["exceptions/not",{"_index":1129,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["exceções",{"_index":1490,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":39,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{}}}],["exemplo",{"_index":1460,"title":{},"body":{"index.html":{}}}],["exists",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiration",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresat",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":1595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiresindays",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":56,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}}}],["exports",{"_index":851,"title":{},"body":{"modules/PrismaModule.html":{},"modules/UserModule.html":{}}}],["exposes",{"_index":327,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["express",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"modules/ProductModule.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"dependencies.html":{},"index.html":{},"license.html":{}}}],["express.multer.file",{"_index":679,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["expression",{"_index":1645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extend",{"_index":1033,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["extends",{"_index":57,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"injectables/PrismaService.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}}}],["extname",{"_index":1633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":87,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":96,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjzdwiioii5nwfkmznhns0wyjk4ltq2odytyjfmms1hmtkwnzm0nwjmyzcilcjpyxqioje2ndg0nzu3mzesimv4cci6mty0odq3njyzmx0.h3z3jdvhoi6y5c_n0kt6tdp2nwk_dhbzxioqn7vanno",{"_index":746,"title":{},"body":{"classes/LoginResponse.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjzdwiioiixmjm0nty3odkwiiwibmftzsi6ikpvag4grg9liiwiawf0ijoxnte2mjm5mdiyfq.sflkxwrjsmekkf2qt4fwpmejf36pok6yjv_adqssw5c",{"_index":747,"title":{},"body":{"classes/LoginResponse.html":{},"classes/LogoutDto.html":{}}}],["f5bd",{"_index":715,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["f70b",{"_index":1052,"title":{},"body":{"classes/Purchase.html":{}}}],["fa244865",{"_index":550,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["false",{"_index":98,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["family",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["features",{"_index":1395,"title":{},"body":{"index.html":{}}}],["fecd",{"_index":1057,"title":{},"body":{"classes/Purchase.html":{}}}],["field",{"_index":787,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserWithoutPassword.html":{}}}],["fields",{"_index":492,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["file.filename",{"_index":1013,"title":{},"body":{"injectables/ProductService.html":{}}}],["file.originalname",{"_index":1628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filefilter",{"_index":1630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filename",{"_index":1622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":1514,"title":{},"body":{"license.html":{}}}],["filesize",{"_index":1639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filetypeerror",{"_index":660,"title":{"classes/FileTypeError.html":{}},"body":{"classes/FileTypeError.html":{},"coverage.html":{}}}],["filetypeerror(validimageuploadtypesregex",{"_index":1637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filetypes",{"_index":672,"title":{},"body":{"classes/FileTypeError.html":{}}}],["fileupload",{"_index":935,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["fileuploaddto",{"_index":676,"title":{"classes/FileUploadDto.html":{}},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["find",{"_index":361,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["findall",{"_index":330,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["findall(@query",{"_index":945,"title":{},"body":{"controllers/ProductController.html":{}}}],["findall(findallproductsdto",{"_index":909,"title":{},"body":{"controllers/ProductController.html":{}}}],["findall(findcategoriesdto",{"_index":341,"title":{},"body":{"controllers/CategoryController.html":{}}}],["findall(findpurchasesdto",{"_index":1072,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["findall(undefined",{"_index":449,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["findallmine",{"_index":1066,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["findallmine(request",{"_index":1077,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["findallproductsdto",{"_index":912,"title":{},"body":{"controllers/ProductController.html":{}}}],["findbyemail",{"_index":1254,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyemail(email",{"_index":1259,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid",{"_index":1204,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findbyid(@req",{"_index":1234,"title":{},"body":{"controllers/UserController.html":{}}}],["findbyid(id",{"_index":1263,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(request",{"_index":1209,"title":{},"body":{"controllers/UserController.html":{}}}],["findcategoriesdto",{"_index":342,"title":{"classes/FindCategoriesDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"coverage.html":{}}}],["findone",{"_index":1067,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["findone(purchaseid",{"_index":1123,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["findone(request",{"_index":1080,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["findonebyid",{"_index":331,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyid(@param('id",{"_index":947,"title":{},"body":{"controllers/ProductController.html":{}}}],["findonebyid(id",{"_index":356,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyname",{"_index":332,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["findonebyname(name",{"_index":362,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["findonebyurlname",{"_index":904,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyurlname(@param('urlname",{"_index":950,"title":{},"body":{"controllers/ProductController.html":{}}}],["findonebyurlname(urlname",{"_index":915,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findproductsdto",{"_index":357,"title":{"classes/FindProductsDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["findpurchasesdto",{"_index":701,"title":{"classes/FindPurchasesDto.html":{}},"body":{"classes/FindPurchasesDto.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"coverage.html":{}}}],["findpurchasesdto.userid",{"_index":1106,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["finds",{"_index":1261,"title":{},"body":{"injectables/UserService.html":{}}}],["fire",{"_index":870,"title":{},"body":{"injectables/PrismaService.html":{}}}],["first",{"_index":446,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/PrismaService.html":{}}}],["fitness",{"_index":1545,"title":{},"body":{"license.html":{}}}],["following",{"_index":671,"title":{},"body":{"classes/FileTypeError.html":{},"license.html":{}}}],["forgot",{"_index":1272,"title":{},"body":{"injectables/UserService.html":{}}}],["format",{"_index":681,"title":{},"body":{"classes/FileUploadDto.html":{},"injectables/ProductService.html":{}}}],["formatação",{"_index":1496,"title":{},"body":{"index.html":{}}}],["formats",{"_index":460,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["formaturlname",{"_index":969,"title":{},"body":{"injectables/ProductService.html":{}}}],["formaturlname(name",{"_index":982,"title":{},"body":{"injectables/ProductService.html":{}}}],["found",{"_index":435,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["found.exception",{"_index":811,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["found.exception.ts",{"_index":431,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["found.exception.ts:6",{"_index":434,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["free",{"_index":1507,"title":{},"body":{"license.html":{}}}],["function",{"_index":627,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"coverage.html":{}}}],["functions",{"_index":1367,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1529,"title":{},"body":{"license.html":{}}}],["generate",{"_index":984,"title":{},"body":{"injectables/ProductService.html":{}}}],["get('/admin",{"_index":1104,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["get('/id/:id",{"_index":397,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{}}}],["get(':id",{"_index":1107,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["get(':name",{"_index":400,"title":{},"body":{"controllers/CategoryController.html":{}}}],["get(':urlname",{"_index":949,"title":{},"body":{"controllers/ProductController.html":{}}}],["gets",{"_index":358,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["getting",{"_index":1375,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettokenexpirationdate",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["git",{"_index":1412,"title":{},"body":{"index.html":{}}}],["github",{"_index":1392,"title":{},"body":{"index.html":{}}}],["global",{"_index":1601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["granted",{"_index":1506,"title":{},"body":{"license.html":{}}}],["guard",{"_index":1152,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":20,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["handle",{"_index":624,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{}}}],["handle(error",{"_index":625,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["handled",{"_index":514,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["handlers",{"_index":623,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["handlers/prisma",{"_index":651,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["handlers/user",{"_index":654,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["happened",{"_index":784,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["hash",{"_index":1280,"title":{},"body":{"injectables/UserService.html":{}}}],["hashconfig",{"_index":1281,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hashconfig.saltrounds",{"_index":1288,"title":{},"body":{"injectables/UserService.html":{}}}],["hashed",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["hashedpassword",{"_index":1286,"title":{},"body":{"injectables/UserService.html":{}}}],["hashes",{"_index":1602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashifupdatingpassword",{"_index":1255,"title":{},"body":{"injectables/UserService.html":{}}}],["hashifupdatingpassword(id",{"_index":1268,"title":{},"body":{"injectables/UserService.html":{}}}],["hashs",{"_index":1485,"title":{},"body":{"index.html":{}}}],["here",{"_index":1166,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["hereby",{"_index":1505,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1551,"title":{},"body":{"license.html":{}}}],["hooks",{"_index":869,"title":{},"body":{"injectables/PrismaService.html":{}}}],["http",{"_index":417,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{}}}],["http://localhost:3000/api",{"_index":1447,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":406,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://docs.nestjs.com/guards",{"_index":21,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["https://docs.nestjs.com/interceptors",{"_index":639,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["https://docs.nestjs.com/recipes/prisma",{"_index":855,"title":{},"body":{"injectables/PrismaService.html":{}}}],["https://github.com/alvaromrveiga/ecommerce",{"_index":1414,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["hyphens",{"_index":997,"title":{},"body":{"injectables/ProductService.html":{}}}],["id",{"_index":311,"title":{},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{}}}],["id'})@apibearerauth()@get(':id",{"_index":1082,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["id'})@isadmin()@get('/id/:id",{"_index":913,"title":{},"body":{"controllers/ProductController.html":{}}}],["identificar",{"_index":1487,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":1314,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":518,"title":{},"body":{"classes/CreateProductDto.html":{},"injectables/ProductService.html":{}}}],["ignoreexpiration",{"_index":97,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["image",{"_index":1615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image.jpg",{"_index":898,"title":{},"body":{"classes/Product.html":{}}}],["imagens",{"_index":1400,"title":{},"body":{"index.html":{}}}],["implements",{"_index":310,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{}}}],["implied",{"_index":1541,"title":{},"body":{"license.html":{}}}],["import",{"_index":49,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{}}}],["imports",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}}}],["include",{"_index":477,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["included",{"_index":1535,"title":{},"body":{"license.html":{}}}],["including",{"_index":1517,"title":{},"body":{"license.html":{}}}],["index",{"_index":22,"title":{"index.html":{}},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":860,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}}}],["information",{"_index":373,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["informações",{"_index":1429,"title":{},"body":{"index.html":{}}}],["inicia",{"_index":1437,"title":{},"body":{"index.html":{}}}],["iniciar",{"_index":1432,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["input",{"_index":655,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["input.exception",{"_index":674,"title":{},"body":{"classes/FileTypeError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/UserInputExceptionHandler.html":{}}}],["input.exception.ts",{"_index":1032,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["input.exception.ts:5",{"_index":1036,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["inputs",{"_index":421,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["inputted",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["insensitive",{"_index":471,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["instala",{"_index":1420,"title":{},"body":{"index.html":{}}}],["instalado",{"_index":1407,"title":{},"body":{"index.html":{}}}],["instalação",{"_index":1396,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":819,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{}}}],["instantiate",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["instantiates",{"_index":30,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{}}}],["integração",{"_index":1470,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":640,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["intercept(context",{"_index":641,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interceptor",{"_index":633,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interceptors",{"_index":638,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interface",{"_index":618,"title":{"interfaces/ExceptionHandler.html":{}},"body":{"interfaces/ExceptionHandler.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":620,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["interferes",{"_index":862,"title":{},"body":{"injectables/PrismaService.html":{}}}],["invalid",{"_index":663,"title":{},"body":{"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{}}}],["invalidemailorpassworderror",{"_index":269,"title":{"classes/InvalidEmailOrPasswordError.html":{}},"body":{"injectables/AuthService.html":{},"classes/InvalidEmailOrPasswordError.html":{},"coverage.html":{}}}],["invalidpasswordupdateexception",{"_index":726,"title":{"classes/InvalidPasswordUpdateException.html":{}},"body":{"classes/InvalidPasswordUpdateException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["is_admin_key",{"_index":1159,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["is_public_key",{"_index":54,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isadmin",{"_index":379,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["isarray",{"_index":532,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["iscategoryerror",{"_index":770,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscategoryerror(error",{"_index":780,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscategorynameconstraintviolation",{"_index":771,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscategorynameconstraintviolation(error",{"_index":785,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscorrectpassword",{"_index":1303,"title":{},"body":{"injectables/UserService.html":{}}}],["iscreateproducterror",{"_index":772,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscreateproducterror(error",{"_index":788,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isemail",{"_index":599,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserRoleDto.html":{}}}],["isemail({message",{"_index":588,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemailconstraintviolation",{"_index":773,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isemailconstraintviolation(errormeta",{"_index":790,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isenum",{"_index":1184,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["isenum(role",{"_index":1182,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["isint",{"_index":533,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/ReviewPurchaseDto.html":{}}}],["isint()@isoptional",{"_index":528,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isint()@min(1)@max(5",{"_index":1144,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["isjwt",{"_index":749,"title":{},"body":{"classes/LogoutDto.html":{}}}],["isnotempty",{"_index":496,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty()@isstring",{"_index":736,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["isnumber",{"_index":534,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{}}}],["isnumber()@isnotempty",{"_index":507,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isnumber()@isoptional",{"_index":521,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isnumber()@ispositive",{"_index":566,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["isnumber()@ispositive()@isoptional",{"_index":561,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["isoptional",{"_index":535,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isarray",{"_index":516,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isoptional()@isstring",{"_index":688,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["isoptional()@type(undefined)@isint()@ispositive",{"_index":691,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["ispasswordvalid",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispositive",{"_index":570,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["isprismaunknownerror",{"_index":774,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isprismaunknownerror(error",{"_index":794,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproducterror",{"_index":775,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproducterror(error",{"_index":800,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproductnameconstraintviolation",{"_index":776,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproductnameconstraintviolation(error",{"_index":802,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["ispublic",{"_index":62,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["ispurchaseerror",{"_index":777,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["ispurchaseerror(error",{"_index":804,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isstring",{"_index":497,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":494,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/DeleteUserDto.html":{}}}],["isstring()@isnotempty()@isoptional",{"_index":1175,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isstring()@isoptional",{"_index":519,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/ReviewPurchaseDto.html":{}}}],["isstring()@minlength(8",{"_index":593,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isusererror",{"_index":778,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isusererror(error",{"_index":806,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isuuid",{"_index":571,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["isuuid(4",{"_index":564,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["jest",{"_index":1491,"title":{},"body":{"index.html":{}}}],["john",{"_index":607,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["join",{"_index":1027,"title":{},"body":{"injectables/ProductService.html":{}}}],["jpeg",{"_index":927,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["jpeg|jpg|png",{"_index":1643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jpg",{"_index":928,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["json",{"_index":1479,"title":{},"body":{"index.html":{}}}],["jsonwebtoken",{"_index":74,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["jwt",{"_index":7,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"classes/LoginResponse.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.strategy",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt.strategy.ts",{"_index":72,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"coverage.html":{}}}],["jwt.strategy.ts:13",{"_index":78,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["jwt.strategy.ts:24",{"_index":81,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["jwtauthguard",{"_index":1607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":95,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["jwtmodule",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwts",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtservice",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtsignoptions",{"_index":1591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kind",{"_index":1540,"title":{},"body":{"license.html":{}}}],["lazily",{"_index":874,"title":{},"body":{"injectables/PrismaService.html":{}}}],["leading",{"_index":987,"title":{},"body":{"injectables/ProductService.html":{}}}],["leave",{"_index":872,"title":{},"body":{"injectables/PrismaService.html":{}}}],["length",{"_index":594,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letter",{"_index":447,"title":{},"body":{"injectables/CategoryService.html":{},"classes/CreateUserDto.html":{}}}],["liability",{"_index":1555,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1552,"title":{},"body":{"license.html":{}}}],["library",{"_index":12,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["license",{"_index":1499,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["licença",{"_index":1398,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":1518,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1542,"title":{},"body":{"license.html":{}}}],["limits",{"_index":1638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linting",{"_index":1495,"title":{},"body":{"index.html":{}}}],["listens",{"_index":863,"title":{},"body":{"injectables/PrismaService.html":{}}}],["literal",{"_index":1585,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["logged",{"_index":1071,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["login",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["login(email",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(undefined",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["logincredentialsdto",{"_index":144,"title":{"classes/LoginCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["loginresponse",{"_index":176,"title":{"classes/LoginResponse.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"coverage.html":{}}}],["logout",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LogoutDto.html":{}}}],["logout(@body",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(refreshtoken",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout(undefined",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["logoutall",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logoutall(@req",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["logoutall(request",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["logoutall(userid",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["logoutdto",{"_index":152,"title":{"classes/LogoutDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LogoutDto.html":{},"coverage.html":{}}}],["logs",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["lower",{"_index":986,"title":{},"body":{"injectables/ProductService.html":{}}}],["lowercaseemail",{"_index":1289,"title":{},"body":{"injectables/UserService.html":{}}}],["lowercaseurlname",{"_index":1019,"title":{},"body":{"injectables/ProductService.html":{}}}],["lowercaseurlname.trim",{"_index":1022,"title":{},"body":{"injectables/ProductService.html":{}}}],["lvaro",{"_index":1502,"title":{},"body":{"license.html":{}}}],["mail",{"_index":590,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{}}}],["mainly",{"_index":1262,"title":{},"body":{"injectables/UserService.html":{}}}],["make",{"_index":996,"title":{},"body":{"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["makes",{"_index":985,"title":{},"body":{"injectables/ProductService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["making",{"_index":798,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["managing",{"_index":437,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["matches",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":606,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":70,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.round(math.random",{"_index":1626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["max",{"_index":1147,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["max(5",{"_index":1151,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["maximageuploadsize",{"_index":1330,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":930,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":1544,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1521,"title":{},"body":{"license.html":{}}}],["message",{"_index":427,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{}}}],["metadata",{"_index":1357,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":23,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{}}}],["migrate:dev",{"_index":1436,"title":{},"body":{"index.html":{}}}],["migrate:test",{"_index":1464,"title":{},"body":{"index.html":{}}}],["migrations",{"_index":1435,"title":{},"body":{"index.html":{}}}],["mimetype",{"_index":1631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["min",{"_index":1148,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["min(1",{"_index":1150,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["minimizar",{"_index":1475,"title":{},"body":{"index.html":{}}}],["minlength",{"_index":600,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":604,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1366,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missingpasswordupdateexception",{"_index":751,"title":{"classes/MissingPasswordUpdateException.html":{}},"body":{"classes/MissingPasswordUpdateException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["mit",{"_index":1498,"title":{},"body":{"index.html":{},"license.html":{}}}],["mode",{"_index":470,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["models/category/category.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["models/product/product.module",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["models/purchase/purchase.module",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["models/user/user.module",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["modify",{"_index":1520,"title":{},"body":{"license.html":{}}}],["modo",{"_index":1439,"title":{},"body":{"index.html":{}}}],["module",{"_index":105,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":107,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":18,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{}}}],["ms",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{},"index.html":{}}}],["ms(refreshjwtconfig.expiresin",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["multer",{"_index":1640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multermodule",{"_index":961,"title":{},"body":{"modules/ProductModule.html":{}}}],["multermodule.register(multeruploadconfig",{"_index":965,"title":{},"body":{"modules/ProductModule.html":{}}}],["multeroptions",{"_index":1617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multeruploadconfig",{"_index":932,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["multiple",{"_index":993,"title":{},"body":{"injectables/ProductService.html":{}}}],["multiplied",{"_index":569,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["máquina",{"_index":1411,"title":{},"body":{"index.html":{}}}],["mínimo",{"_index":1457,"title":{},"body":{"index.html":{}}}],["na",{"_index":1416,"title":{},"body":{"index.html":{}}}],["name",{"_index":35,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["name.substring(1).tolocalelowercase",{"_index":488,"title":{},"body":{"injectables/CategoryService.html":{}}}],["name.tolocalelowercase",{"_index":1020,"title":{},"body":{"injectables/ProductService.html":{}}}],["name[0].touppercase",{"_index":487,"title":{},"body":{"injectables/CategoryService.html":{}}}],["ndice",{"_index":1394,"title":{},"body":{"index.html":{}}}],["need",{"_index":43,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["needed",{"_index":493,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserRoleDto.html":{}}}],["needs",{"_index":16,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/ProductController.html":{}}}],["nestinterceptor",{"_index":648,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["nestjs",{"_index":19,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"index.html":{}}}],["nestjs/common",{"_index":50,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/InvalidEmailOrPasswordError.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":51,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"modules/AppModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1345,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":52,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":962,"title":{},"body":{"modules/ProductModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/FileUploadDto.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserWithoutPassword.html":{},"dependencies.html":{}}}],["new",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["next",{"_index":642,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["next.handle().pipe",{"_index":656,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["node.js",{"_index":1406,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":1548,"title":{},"body":{"license.html":{}}}],["normal",{"_index":1084,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["nos",{"_index":1482,"title":{},"body":{"index.html":{}}}],["note",{"_index":1046,"title":{},"body":{"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["notfoundexception",{"_index":433,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{}}}],["notfoundexception(error.message",{"_index":1245,"title":{},"body":{"classes/UserInputExceptionHandler.html":{}}}],["notice",{"_index":1533,"title":{},"body":{"license.html":{}}}],["notpurchaseownerexception",{"_index":758,"title":{"classes/NotPurchaseOwnerException.html":{}},"body":{"classes/NotPurchaseOwnerException.html":{},"injectables/PurchaseService.html":{},"coverage.html":{}}}],["number",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["o",{"_index":1405,"title":{},"body":{"index.html":{}}}],["object",{"_index":791,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"miscellaneous/variables.html":{}}}],["object.values(error.meta)[0][0",{"_index":839,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["object.values(errormeta)[0][0",{"_index":838,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["observable",{"_index":48,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{}}}],["obtaining",{"_index":1510,"title":{},"body":{"license.html":{}}}],["offices",{"_index":544,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["offset",{"_index":464,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["omitting",{"_index":1309,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["omittype",{"_index":530,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/UserWithoutPassword.html":{}}}],["omittype(product",{"_index":537,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["omittype(purchase",{"_index":573,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["omittype(user",{"_index":1311,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["once",{"_index":1372,"title":{},"body":{"miscellaneous/functions.html":{}}}],["one",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["onmoduleinit",{"_index":858,"title":{},"body":{"injectables/PrismaService.html":{}}}],["optional",{"_index":37,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{}}}],["orderby",{"_index":472,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["ordering",{"_index":355,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["orm",{"_index":769,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{}}}],["os",{"_index":1453,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":1560,"title":{},"body":{"license.html":{}}}],["out",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":1568,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":1092,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["owner.exception",{"_index":1130,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["owner.exception.ts",{"_index":760,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"coverage.html":{}}}],["owner.exception.ts:4",{"_index":765,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{}}}],["package",{"_index":1342,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":349,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["pages",{"_index":1393,"title":{},"body":{"index.html":{}}}],["pagination",{"_index":346,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["para",{"_index":1381,"title":{},"body":{"index.html":{}}}],["param",{"_index":375,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["param('id",{"_index":398,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["param('name",{"_index":401,"title":{},"body":{"controllers/CategoryController.html":{}}}],["parameters",{"_index":33,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{}}}],["partial",{"_index":1165,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype",{"_index":1167,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createcategorydto",{"_index":1168,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["partialtype(createproductdto",{"_index":1170,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createpurchasedto",{"_index":1172,"title":{},"body":{"classes/UpdatePurchaseDto.html":{}}}],["partialtype(createuserdto",{"_index":1178,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["particular",{"_index":1546,"title":{},"body":{"license.html":{}}}],["passport",{"_index":11,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["passportmodule",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":86,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["password",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["password.entity",{"_index":1229,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["password.entity.ts",{"_index":1306,"title":{},"body":{"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["password.error",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["password.error..ts",{"_index":720,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"coverage.html":{}}}],["password.error..ts:7",{"_index":724,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{}}}],["pasta",{"_index":1417,"title":{},"body":{"index.html":{}}}],["patch",{"_index":374,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["patch('/review/:id",{"_index":1109,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["patch(':id",{"_index":403,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["patch('picture/:id",{"_index":952,"title":{},"body":{"controllers/ProductController.html":{}}}],["patch('role",{"_index":1238,"title":{},"body":{"controllers/UserController.html":{}}}],["path.extname(file.originalname).tolowercase",{"_index":1635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payed",{"_index":568,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["payload",{"_index":85,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{}}}],["payload.role",{"_index":104,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["payload.sub",{"_index":102,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["payload.ts",{"_index":1581,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["per",{"_index":353,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreatePurchaseDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["percentage",{"_index":524,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["permission",{"_index":1504,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1527,"title":{},"body":{"license.html":{}}}],["person",{"_index":1509,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1528,"title":{},"body":{"license.html":{}}}],["picktype",{"_index":1146,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["picktype(purchase",{"_index":1149,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["picture",{"_index":480,"title":{},"body":{"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"miscellaneous/functions.html":{}}}],["picture'})@isadmin()@fileupload()@patch('picture/:id",{"_index":925,"title":{},"body":{"controllers/ProductController.html":{}}}],["picture.png",{"_index":685,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["please",{"_index":755,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["png",{"_index":929,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["pode",{"_index":1445,"title":{},"body":{"index.html":{}}}],["porta",{"_index":1443,"title":{},"body":{"index.html":{}}}],["portions",{"_index":1537,"title":{},"body":{"license.html":{}}}],["post",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["post('login",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logoutall",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgresql",{"_index":1477,"title":{},"body":{"index.html":{}}}],["postgresql://username:password@localhost:5432/ecommerce",{"_index":1461,"title":{},"body":{"index.html":{}}}],["precisar",{"_index":1403,"title":{},"body":{"index.html":{}}}],["preenchendo",{"_index":1428,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":326,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["prettier",{"_index":1494,"title":{},"body":{"index.html":{}}}],["price",{"_index":509,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["prisma",{"_index":314,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["prisma.categoryuncheckedcreateinput",{"_index":316,"title":{},"body":{"classes/Category.html":{}}}],["prisma.categoryuncheckedcreatenestedmanywithoutproductsinput",{"_index":977,"title":{},"body":{"injectables/ProductService.html":{}}}],["prisma.decimal",{"_index":879,"title":{},"body":{"classes/Product.html":{},"classes/Purchase.html":{}}}],["prisma.productuncheckedcreateinput",{"_index":892,"title":{},"body":{"classes/Product.html":{}}}],["prisma.purchaseuncheckedcreateinput",{"_index":1050,"title":{},"body":{"classes/Purchase.html":{}}}],["prisma.service",{"_index":852,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.useruncheckedcreateinput",{"_index":1195,"title":{},"body":{"classes/User.html":{}}}],["prisma/client",{"_index":315,"title":{},"body":{"classes/Category.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"dependencies.html":{}}}],["prisma/client/runtime",{"_index":531,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/PrismaExceptionHandler.html":{}}}],["prisma/prisma.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":856,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientknownrequesterror",{"_index":781,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror",{"_index":808,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror.foreignconstraintviolation",{"_index":828,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror.recordsnotfound",{"_index":830,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror.uniqueconstraintviolation",{"_index":823,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaexceptionhandler",{"_index":650,"title":{"classes/PrismaExceptionHandler.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["prismaexceptionhandler().handle(error",{"_index":659,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["prismamodule",{"_index":113,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":220,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["probably",{"_index":1271,"title":{},"body":{"injectables/UserService.html":{}}}],["process.env.access_jwt_secret",{"_index":1594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.refresh_jwt_secret",{"_index":1598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.exit",{"_index":867,"title":{},"body":{"injectables/PrismaService.html":{}}}],["product",{"_index":502,"title":{"classes/Product.html":{}},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["product'})@apibearerauth()@patch('/review/:id",{"_index":1090,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["product'})@isadmin()@delete(':id')@httpcode(httpstatus.no_content",{"_index":918,"title":{},"body":{"controllers/ProductController.html":{}}}],["product'})@isadmin()@patch(':id",{"_index":921,"title":{},"body":{"controllers/ProductController.html":{}}}],["product'})@isadmin()@post",{"_index":907,"title":{},"body":{"controllers/ProductController.html":{}}}],["product.controller",{"_index":960,"title":{},"body":{"modules/ProductModule.html":{}}}],["product.dto",{"_index":938,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts",{"_index":501,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:26",{"_index":527,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:36",{"_index":508,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:44",{"_index":522,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:51",{"_index":529,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:59",{"_index":520,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:67",{"_index":517,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.service",{"_index":940,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{}}}],["product/dto/find",{"_index":382,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["productcontroller",{"_index":902,"title":{"controllers/ProductController.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{}}}],["productid",{"_index":559,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["productmodule",{"_index":114,"title":{"modules/ProductModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules.html":{},"overview.html":{}}}],["productname",{"_index":474,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindProductsDto.html":{},"injectables/ProductService.html":{}}}],["productnameinuseexception",{"_index":812,"title":{"classes/ProductNameInUseException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"coverage.html":{}}}],["productnotfoundexception",{"_index":814,"title":{"classes/ProductNotFoundException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductNotFoundException.html":{},"coverage.html":{}}}],["products",{"_index":396,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"miscellaneous/functions.html":{}}}],["products'})@isadmin()@get('/id/:id",{"_index":359,"title":{},"body":{"controllers/CategoryController.html":{}}}],["products'})@public()@get",{"_index":910,"title":{},"body":{"controllers/ProductController.html":{}}}],["products'})@public()@get(':name",{"_index":363,"title":{},"body":{"controllers/CategoryController.html":{}}}],["products.dto",{"_index":383,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["products.dto.ts",{"_index":697,"title":{},"body":{"classes/FindProductsDto.html":{},"coverage.html":{}}}],["products.dto.ts:11",{"_index":700,"title":{},"body":{"classes/FindProductsDto.html":{}}}],["products.dto.ts:20",{"_index":699,"title":{},"body":{"classes/FindProductsDto.html":{}}}],["products.dto.ts:29",{"_index":698,"title":{},"body":{"classes/FindProductsDto.html":{}}}],["productservice",{"_index":939,"title":{"injectables/ProductService.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{},"overview.html":{}}}],["productserviceinputexception",{"_index":665,"title":{"classes/ProductServiceInputException.html":{}},"body":{"classes/FileTypeError.html":{},"classes/ProductServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["productstoskip",{"_index":475,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["produtos",{"_index":1385,"title":{},"body":{"index.html":{}}}],["profile",{"_index":1212,"title":{},"body":{"controllers/UserController.html":{}}}],["profile'})@apibearerauth()@get",{"_index":1210,"title":{},"body":{"controllers/UserController.html":{}}}],["projeto",{"_index":1409,"title":{},"body":{"index.html":{}}}],["promise",{"_index":47,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":309,"title":{"properties.html":{}},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"properties.html":{}}}],["provide",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":1538,"title":{},"body":{"license.html":{}}}],["providers",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":41,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public.decorator",{"_index":55,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{}}}],["publish",{"_index":1522,"title":{},"body":{"license.html":{}}}],["purchase",{"_index":558,"title":{"classes/Purchase.html":{}},"body":{"classes/CreatePurchaseDto.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["purchase'})@apibearerauth()@post",{"_index":1069,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchase'})@isadmin()@delete(':id')@httpcode(httpstatus.no_content",{"_index":1085,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchase'})@isadmin()@patch(':id",{"_index":1094,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchase.controller",{"_index":1117,"title":{},"body":{"modules/PurchaseModule.html":{}}}],["purchase.dto",{"_index":1096,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdatePurchaseDto.html":{}}}],["purchase.dto.ts",{"_index":557,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["purchase.dto.ts:16",{"_index":1145,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["purchase.dto.ts:18",{"_index":565,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["purchase.dto.ts:23",{"_index":1143,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["purchase.dto.ts:27",{"_index":562,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["purchase.dto.ts:36",{"_index":567,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["purchase.service",{"_index":1100,"title":{},"body":{"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{}}}],["purchase.userid",{"_index":1138,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["purchasecontroller",{"_index":1064,"title":{"controllers/PurchaseController.html":{}},"body":{"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"coverage.html":{}}}],["purchased",{"_index":563,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["purchaseid",{"_index":1081,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["purchasemodule",{"_index":115,"title":{"modules/PurchaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PurchaseModule.html":{},"modules.html":{},"overview.html":{}}}],["purchasenotfoundexception",{"_index":815,"title":{"classes/PurchaseNotFoundException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/PurchaseNotFoundException.html":{},"coverage.html":{}}}],["purchases",{"_index":704,"title":{},"body":{"classes/FindPurchasesDto.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["purchases'})@apibearerauth()@get",{"_index":1078,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchases'})@isadmin()@get('/admin",{"_index":1073,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchases.dto",{"_index":1097,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["purchases.dto.ts",{"_index":703,"title":{},"body":{"classes/FindPurchasesDto.html":{},"coverage.html":{}}}],["purchases.dto.ts:11",{"_index":708,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["purchases.dto.ts:18",{"_index":707,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["purchases.dto.ts:27",{"_index":706,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["purchases.dto.ts:36",{"_index":705,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["purchaseservice",{"_index":1099,"title":{"injectables/PurchaseService.html":{}},"body":{"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"injectables/PurchaseService.html":{},"coverage.html":{},"overview.html":{}}}],["purchaseserviceinputexception",{"_index":764,"title":{"classes/PurchaseServiceInputException.html":{}},"body":{"classes/NotPurchaseOwnerException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["purchasestoskip",{"_index":1132,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["purpose",{"_index":1547,"title":{},"body":{"license.html":{}}}],["que",{"_index":1458,"title":{},"body":{"index.html":{}}}],["query",{"_index":377,"title":{},"body":{"controllers/CategoryController.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{}}}],["quot",{"_index":998,"title":{},"body":{"injectables/ProductService.html":{}}}],["quot;brand1",{"_index":1001,"title":{},"body":{"injectables/ProductService.html":{}}}],["raiz",{"_index":1427,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["received",{"_index":741,"title":{},"body":{"classes/LoginResponse.html":{}}}],["recent",{"_index":1076,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["reflect",{"_index":1356,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":27,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"miscellaneous/variables.html":{}}}],["refreshjwtconfig",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refreshtoken",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{}}}],["regexp",{"_index":667,"title":{},"body":{"classes/FileTypeError.html":{}}}],["registered",{"_index":423,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["regular",{"_index":1644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rejectonnotfound",{"_index":481,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["related",{"_index":1217,"title":{},"body":{"controllers/UserController.html":{}}}],["remove",{"_index":333,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["remove(@param('id",{"_index":407,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["remove(id",{"_index":365,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["remove(request",{"_index":1214,"title":{},"body":{"controllers/UserController.html":{}}}],["removes",{"_index":456,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["replacing",{"_index":1270,"title":{},"body":{"injectables/UserService.html":{}}}],["req",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["request",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{}}}],["request.user['userid",{"_index":1235,"title":{},"body":{"controllers/UserController.html":{}}}],["requests",{"_index":1265,"title":{},"body":{"injectables/UserService.html":{}}}],["reset",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["respective",{"_index":646,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["response",{"_index":740,"title":{},"body":{"classes/LoginResponse.html":{}}}],["responsible",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["restriction",{"_index":1516,"title":{},"body":{"license.html":{}}}],["result",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["result.setdate(result.getdate",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":69,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":66,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1583,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["returns",{"_index":45,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["review",{"_index":763,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{}}}],["review(request",{"_index":1087,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["review(userid",{"_index":1126,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["reviewcomment",{"_index":575,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["reviewnote",{"_index":574,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["reviewpurchasedto",{"_index":1088,"title":{"classes/ReviewPurchaseDto.html":{}},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"coverage.html":{}}}],["reviews",{"_index":1089,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["rights",{"_index":1519,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1359,"title":{},"body":{"dependencies.html":{}}}],["roda",{"_index":1434,"title":{},"body":{"index.html":{}}}],["rodar",{"_index":1452,"title":{},"body":{"index.html":{}}}],["role",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role'})@isadmin()@patch('role",{"_index":1223,"title":{},"body":{"controllers/UserController.html":{}}}],["role.admin",{"_index":1137,"title":{},"body":{"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{}}}],["role.dto",{"_index":1226,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role.dto.ts",{"_index":1180,"title":{},"body":{"classes/UpdateUserRoleDto.html":{},"coverage.html":{}}}],["role.dto.ts:11",{"_index":1181,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["role.dto.ts:18",{"_index":1183,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["rolesguard",{"_index":1153,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["route",{"_index":15,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"classes/LoginResponse.html":{},"guards/RolesGuard.html":{}}}],["rxjs",{"_index":53,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["saltrounds",{"_index":1600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["same",{"_index":1308,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["saved",{"_index":512,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"injectables/UserService.html":{}}}],["saverefreshtoken",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["saverefreshtoken(userid",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["saves",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["search",{"_index":451,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["searching",{"_index":354,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{}}}],["secret",{"_index":1593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":99,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["select",{"_index":478,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["sell",{"_index":1525,"title":{},"body":{"license.html":{}}}],["senhas",{"_index":1486,"title":{},"body":{"index.html":{}}}],["sensitive",{"_index":1603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["service",{"_index":673,"title":{},"body":{"classes/FileTypeError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["servidor",{"_index":1433,"title":{},"body":{"index.html":{}}}],["session",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessions",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessions'})@apibearerauth()@post('logoutall')@httpcode(httpstatus.ok",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["set",{"_index":1222,"title":{},"body":{"controllers/UserController.html":{}}}],["setmetadata(is_public_key",{"_index":1609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sets",{"_index":1614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":1534,"title":{},"body":{"license.html":{}}}],["show",{"_index":453,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["showing",{"_index":351,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["shutdown",{"_index":864,"title":{},"body":{"injectables/PrismaService.html":{}}}],["signals",{"_index":865,"title":{},"body":{"injectables/PrismaService.html":{}}}],["single",{"_index":992,"title":{},"body":{"injectables/ProductService.html":{}}}],["singlespaceurlname",{"_index":1023,"title":{},"body":{"injectables/ProductService.html":{}}}],["singlespaceurlname.split",{"_index":1026,"title":{},"body":{"injectables/ProductService.html":{}}}],["size",{"_index":1616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skip",{"_index":467,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["software",{"_index":1512,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}}}],["spaces",{"_index":990,"title":{},"body":{"injectables/ProductService.html":{}}}],["spacetohyphenurlname",{"_index":1025,"title":{},"body":{"injectables/ProductService.html":{}}}],["specific",{"_index":628,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["src/.../access",{"_index":1579,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../file",{"_index":1369,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../hash.config.ts",{"_index":1588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../is",{"_index":1370,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../jwt.config.ts",{"_index":1587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1368,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../multer",{"_index":1590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":1589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/access",{"_index":6,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:28",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:39",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:48",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:107",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:117",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:15",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:32",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:51",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:56",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:65",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:80",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:94",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/login",{"_index":732,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.response.ts",{"_index":739,"title":{},"body":{"classes/LoginResponse.html":{},"coverage.html":{}}}],["src/auth/dto/login.response.ts:13",{"_index":745,"title":{},"body":{"classes/LoginResponse.html":{}}}],["src/auth/dto/login.response.ts:7",{"_index":744,"title":{},"body":{"classes/LoginResponse.html":{}}}],["src/auth/dto/logout.dto.ts",{"_index":748,"title":{},"body":{"classes/LogoutDto.html":{},"coverage.html":{}}}],["src/auth/dto/logout.dto.ts:10",{"_index":750,"title":{},"body":{"classes/LogoutDto.html":{}}}],["src/auth/errors/invalid",{"_index":719,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"coverage.html":{}}}],["src/auth/public.decorator",{"_index":378,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["src/auth/public.decorator.ts",{"_index":1321,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/types/access",{"_index":1582,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/common/decorators/file",{"_index":936,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/decorators/is",{"_index":380,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/common/exceptions/category/category",{"_index":415,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["src/common/exceptions/product/product",{"_index":813,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"coverage.html":{}}}],["src/common/exceptions/purchase/purchase",{"_index":816,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/PurchaseNotFoundException.html":{},"coverage.html":{}}}],["src/common/exceptions/user/email",{"_index":616,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["src/common/exceptions/user/user",{"_index":818,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts",{"_index":1154,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts:12",{"_index":1156,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/guards/roles.guard.ts:22",{"_index":1157,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/interceptors/exception.interceptor.ts",{"_index":632,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/exception.interceptor.ts:23",{"_index":644,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["src/common/interceptors/handlers/exception.handler.ts",{"_index":621,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"coverage.html":{}}}],["src/common/interceptors/handlers/exception.handler.ts:4",{"_index":626,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["src/common/interceptors/handlers/prisma",{"_index":767,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["src/common/interceptors/handlers/user",{"_index":1241,"title":{},"body":{"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["src/config/hash.config",{"_index":1282,"title":{},"body":{"injectables/UserService.html":{}}}],["src/config/hash.config.ts",{"_index":1327,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/jwt.config",{"_index":90,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{}}}],["src/config/jwt.config.ts",{"_index":1328,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/multer",{"_index":963,"title":{},"body":{"modules/ProductModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1332,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/models/category/category.controller.ts",{"_index":325,"title":{},"body":{"controllers/CategoryController.html":{},"coverage.html":{}}}],["src/models/category/category.controller.ts:37",{"_index":339,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:51",{"_index":344,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:61",{"_index":360,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:72",{"_index":364,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:83",{"_index":372,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:95",{"_index":367,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.module.ts",{"_index":412,"title":{},"body":{"modules/CategoryModule.html":{}}}],["src/models/category/category.service.ts",{"_index":436,"title":{},"body":{"injectables/CategoryService.html":{},"coverage.html":{}}}],["src/models/category/category.service.ts:102",{"_index":457,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:119",{"_index":455,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:124",{"_index":444,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:13",{"_index":442,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:132",{"_index":459,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:22",{"_index":448,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:36",{"_index":450,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:54",{"_index":452,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:77",{"_index":454,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/dto/create",{"_index":490,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/models/category/dto/find",{"_index":686,"title":{},"body":{"classes/FindCategoriesDto.html":{},"coverage.html":{}}}],["src/models/category/dto/update",{"_index":1163,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/models/category/entities/category.entity.ts",{"_index":307,"title":{},"body":{"classes/Category.html":{},"coverage.html":{}}}],["src/models/category/entities/category.entity.ts:15",{"_index":313,"title":{},"body":{"classes/Category.html":{}}}],["src/models/category/entities/category.entity.ts:9",{"_index":312,"title":{},"body":{"classes/Category.html":{}}}],["src/models/product/dto/create",{"_index":500,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/models/product/dto/file",{"_index":677,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["src/models/product/dto/find",{"_index":696,"title":{},"body":{"classes/FindProductsDto.html":{},"coverage.html":{}}}],["src/models/product/dto/update",{"_index":1169,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/models/product/entities/product.entity.ts",{"_index":878,"title":{},"body":{"classes/Product.html":{},"coverage.html":{}}}],["src/models/product/entities/product.entity.ts:15",{"_index":886,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:21",{"_index":889,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:27",{"_index":887,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:35",{"_index":880,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:41",{"_index":884,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:46",{"_index":888,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:52",{"_index":883,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:58",{"_index":881,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:9",{"_index":885,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/exceptions/file",{"_index":661,"title":{},"body":{"classes/FileTypeError.html":{},"coverage.html":{}}}],["src/models/product/exceptions/product",{"_index":1031,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["src/models/product/product.controller.ts",{"_index":903,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{}}}],["src/models/product/product.controller.ts:104",{"_index":919,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:38",{"_index":908,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:50",{"_index":911,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:58",{"_index":914,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:66",{"_index":917,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:81",{"_index":926,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:92",{"_index":922,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.module.ts",{"_index":959,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/models/product/product.service.ts",{"_index":967,"title":{},"body":{"injectables/ProductService.html":{},"coverage.html":{}}}],["src/models/product/product.service.ts:103",{"_index":1003,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:115",{"_index":983,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:128",{"_index":1006,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:13",{"_index":972,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:143",{"_index":974,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:22",{"_index":978,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:40",{"_index":1008,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:51",{"_index":979,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:70",{"_index":980,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:79",{"_index":981,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:88",{"_index":1004,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/purchase/dto/create",{"_index":556,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"coverage.html":{}}}],["src/models/purchase/dto/find",{"_index":702,"title":{},"body":{"classes/FindPurchasesDto.html":{},"coverage.html":{}}}],["src/models/purchase/dto/review",{"_index":1142,"title":{},"body":{"classes/ReviewPurchaseDto.html":{},"coverage.html":{}}}],["src/models/purchase/dto/update",{"_index":1171,"title":{},"body":{"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["src/models/purchase/entities/purchase.entity.ts",{"_index":1038,"title":{},"body":{"classes/Purchase.html":{},"coverage.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:13",{"_index":1049,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:18",{"_index":1042,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:24",{"_index":1039,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:31",{"_index":1048,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:36",{"_index":1045,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:41",{"_index":1043,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:46",{"_index":1040,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:8",{"_index":1041,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/exceptions/not",{"_index":759,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"coverage.html":{}}}],["src/models/purchase/exceptions/purchase",{"_index":1141,"title":{},"body":{"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["src/models/purchase/purchase.controller.ts",{"_index":1065,"title":{},"body":{"controllers/PurchaseController.html":{},"coverage.html":{}}}],["src/models/purchase/purchase.controller.ts:101",{"_index":1091,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:115",{"_index":1095,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:127",{"_index":1086,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:38",{"_index":1070,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:55",{"_index":1074,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:69",{"_index":1079,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:85",{"_index":1083,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.module.ts",{"_index":1116,"title":{},"body":{"modules/PurchaseModule.html":{}}}],["src/models/purchase/purchase.service.ts",{"_index":1118,"title":{},"body":{"injectables/PurchaseService.html":{},"coverage.html":{}}}],["src/models/purchase/purchase.service.ts:118",{"_index":1128,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:135",{"_index":1125,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:15",{"_index":1119,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:24",{"_index":1121,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:43",{"_index":1122,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:71",{"_index":1124,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:93",{"_index":1127,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/user/dto/create",{"_index":584,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/models/user/dto/delete",{"_index":612,"title":{},"body":{"classes/DeleteUserDto.html":{},"coverage.html":{}}}],["src/models/user/dto/update",{"_index":1174,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"coverage.html":{}}}],["src/models/user/entities/user",{"_index":1305,"title":{},"body":{"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["src/models/user/entities/user.entity",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/models/user/entities/user.entity.ts",{"_index":1185,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/models/user/entities/user.entity.ts:19",{"_index":1193,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:25",{"_index":1189,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:31",{"_index":1192,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:37",{"_index":1191,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:43",{"_index":1187,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:49",{"_index":1188,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:55",{"_index":1194,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:9",{"_index":1190,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/exceptions/invalid",{"_index":727,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{},"coverage.html":{}}}],["src/models/user/exceptions/missing",{"_index":752,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{},"coverage.html":{}}}],["src/models/user/exceptions/user",{"_index":1243,"title":{},"body":{"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["src/models/user/user.controller.ts",{"_index":1203,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/models/user/user.controller.ts:37",{"_index":1208,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:45",{"_index":1211,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:55",{"_index":1220,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:68",{"_index":1224,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:79",{"_index":1216,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.module",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/models/user/user.module.ts",{"_index":1250,"title":{},"body":{"modules/UserModule.html":{}}}],["src/models/user/user.service",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/models/user/user.service.ts",{"_index":1253,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/models/user/user.service.ts:111",{"_index":1269,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:139",{"_index":1278,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:18",{"_index":1257,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:27",{"_index":1258,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:48",{"_index":1264,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:60",{"_index":1260,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:67",{"_index":1275,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:84",{"_index":1276,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:98",{"_index":1274,"title":{},"body":{"injectables/UserService.html":{}}}],["src/prisma/prisma.module",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}}}],["src/prisma/prisma.module.ts",{"_index":850,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":853,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:15",{"_index":871,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:25",{"_index":861,"title":{},"body":{"injectables/PrismaService.html":{}}}],["start:dev",{"_index":1441,"title":{},"body":{"index.html":{}}}],["started",{"_index":1376,"title":{"index.html":{},"license.html":{}},"body":{}}],["starting",{"_index":348,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["starts",{"_index":1371,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statements",{"_index":1315,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":418,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["stock",{"_index":505,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["storage",{"_index":1618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategy",{"_index":88,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["street",{"_index":610,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["string",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"miscellaneous/variables.html":{}}}],["studio",{"_index":1451,"title":{},"body":{"index.html":{}}}],["studio:test",{"_index":1472,"title":{},"body":{"index.html":{}}}],["sua",{"_index":1410,"title":{},"body":{"index.html":{}}}],["sub",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":1530,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1524,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1536,"title":{},"body":{"license.html":{}}}],["successfully",{"_index":742,"title":{},"body":{"classes/LoginResponse.html":{}}}],["summary",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":60,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{}}}],["super('category",{"_index":429,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{}}}],["super('e",{"_index":617,"title":{},"body":{"classes/EmailInUseException.html":{}}}],["super('invalid",{"_index":725,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{}}}],["super('please",{"_index":757,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["super('product",{"_index":966,"title":{},"body":{"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{}}}],["super('purchase",{"_index":766,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"classes/PurchaseNotFoundException.html":{}}}],["super('user",{"_index":1252,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["super(`file",{"_index":675,"title":{},"body":{"classes/FileTypeError.html":{}}}],["super(message",{"_index":1037,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["super.canactivate(context",{"_index":68,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["supertest",{"_index":1492,"title":{},"body":{"index.html":{}}}],["support",{"_index":1565,"title":{},"body":{"modules.html":{}}}],["supports",{"_index":670,"title":{},"body":{"classes/FileTypeError.html":{}}}],["svg",{"_index":1566,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1362,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["switch",{"_index":820,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["system",{"_index":424,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"controllers/UserController.html":{},"classes/UserNotFoundException.html":{}}}],["table",{"_index":1341,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1340,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":468,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["tecnologias",{"_index":1397,"title":{},"body":{"index.html":{}}}],["ter",{"_index":1404,"title":{},"body":{"index.html":{}}}],["test",{"_index":1469,"title":{},"body":{"index.html":{}}}],["test:all",{"_index":1466,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1471,"title":{},"body":{"index.html":{}}}],["test?schema=public",{"_index":1462,"title":{},"body":{"index.html":{}}}],["testes",{"_index":1454,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":875,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":876,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.adddaysfromnow(expiresindays",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.login(email",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(refreshtoken",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logoutall(userid",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.capitalizeonlyfirstletter(createcategorydto.name",{"_index":461,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.capitalizeonlyfirstletter(name",{"_index":482,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.capitalizeonlyfirstletter(updatecategorydto.name",{"_index":489,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryservice.create(createcategorydto",{"_index":394,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findall(findcategoriesdto",{"_index":395,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findonebyid(id",{"_index":399,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findonebyname(name",{"_index":402,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.remove(id",{"_index":408,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.update(id",{"_index":404,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.connectcategoriesbyid(createproductdto.categories",{"_index":1010,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.createrefreshtoken(user.id",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.formaturlname(createproductdto.name",{"_index":1009,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.formaturlname(updateproductdto.name",{"_index":1028,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.gettokenexpirationdate",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashifupdatingpassword(id",{"_index":1294,"title":{},"body":{"injectables/UserService.html":{}}}],["this.iscategoryerror(error",{"_index":834,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.iscategorynameconstraintviolation(error",{"_index":826,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.iscreateproducterror(error",{"_index":833,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isemailconstraintviolation(error.meta",{"_index":824,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isprismaunknownerror(error",{"_index":835,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isproducterror(error",{"_index":832,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isproductnameconstraintviolation(error",{"_index":825,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.ispurchaseerror(error",{"_index":829,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isusererror(error",{"_index":831,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.jwtservice.signasync",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.category.create",{"_index":462,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.delete",{"_index":486,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.findmany",{"_index":466,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.findunique",{"_index":476,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.update",{"_index":485,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.product.create",{"_index":1011,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.delete",{"_index":1018,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.findmany",{"_index":1014,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.findunique",{"_index":1015,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.update",{"_index":1012,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.purchase.create",{"_index":1131,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.purchase.delete",{"_index":1140,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.purchase.findmany",{"_index":1133,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.purchase.findunique",{"_index":1136,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.purchase.update",{"_index":1139,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.user.create",{"_index":1291,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.delete",{"_index":1300,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":1292,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":1295,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prismaservice.usertokens.create",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.usertokens.deletemany",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.productservice.create(createproductdto",{"_index":944,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findall(findallproductsdto",{"_index":946,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findonebyid(id",{"_index":948,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findonebyurlname(urlname",{"_index":951,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.remove(id",{"_index":955,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.update(id",{"_index":954,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.uploadpicture(id",{"_index":953,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.purchaseservice.create(userid",{"_index":1103,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.findall(findpurchasesdto",{"_index":1105,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.findone(purchaseid",{"_index":1108,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.remove(id",{"_index":1112,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.review(userid",{"_index":1110,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.update(id",{"_index":1111,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.reflector.getallandoverride(is_admin_key",{"_index":1161,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":63,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["this.saverefreshtoken(userid",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatecategoryandname(id",{"_index":484,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.updateproductandurlname(id",{"_index":1017,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.userservice.create(createuserdto",{"_index":1233,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyemail(email",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyid(userid",{"_index":1236,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(userid",{"_index":1240,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(userid",{"_index":1237,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateuserrole(updateuserroledto",{"_index":1239,"title":{},"body":{"controllers/UserController.html":{}}}],["this.validatecurrentpassword(id",{"_index":1298,"title":{},"body":{"injectables/UserService.html":{}}}],["this.validateuser(email",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PurchaseService.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{}}}],["thrown",{"_index":1273,"title":{},"body":{"injectables/UserService.html":{}}}],["throws",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{}}}],["tmp",{"_index":1621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["today's",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["todos",{"_index":1465,"title":{},"body":{"index.html":{}}}],["token",{"_index":93,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["tokenfamily",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["tooling",{"_index":1474,"title":{},"body":{"index.html":{}}}],["tort",{"_index":1559,"title":{},"body":{"license.html":{}}}],["totalprice",{"_index":560,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["trailing",{"_index":988,"title":{},"body":{"injectables/ProductService.html":{}}}],["transform",{"_index":634,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["transformer",{"_index":694,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"dependencies.html":{},"index.html":{}}}],["tratar",{"_index":1489,"title":{},"body":{"index.html":{}}}],["trimmedurlname",{"_index":1021,"title":{},"body":{"injectables/ProductService.html":{}}}],["trimmedurlname.replace(/\\s\\s+/g",{"_index":1024,"title":{},"body":{"injectables/ProductService.html":{}}}],["true",{"_index":67,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":762,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{}}}],["trying",{"_index":729,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{}}}],["turn",{"_index":991,"title":{},"body":{"injectables/ProductService.html":{}}}],["turned",{"_index":890,"title":{},"body":{"classes/Product.html":{}}}],["type",{"_index":36,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.exception.ts",{"_index":662,"title":{},"body":{"classes/FileTypeError.html":{},"coverage.html":{}}}],["type.exception.ts:6",{"_index":668,"title":{},"body":{"classes/FileTypeError.html":{}}}],["typealiases",{"_index":1577,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":629,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["types/access",{"_index":92,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["typescript",{"_index":1473,"title":{},"body":{"index.html":{}}}],["ui",{"_index":1363,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["um",{"_index":1424,"title":{},"body":{"index.html":{}}}],["unauthenticated",{"_index":1610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":723,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{}}}],["undefined",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{}}}],["uniquesuffix",{"_index":1624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unitários",{"_index":1468,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":799,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["unlicensed",{"_index":1574,"title":{},"body":{"properties.html":{}}}],["up",{"_index":1642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updatable",{"_index":1164,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["update",{"_index":334,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["update(id",{"_index":368,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["update(request",{"_index":1218,"title":{},"body":{"controllers/UserController.html":{}}}],["update.exception",{"_index":1284,"title":{},"body":{"injectables/UserService.html":{}}}],["update.exception.ts",{"_index":728,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"coverage.html":{}}}],["update.exception.ts:6",{"_index":731,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{}}}],["update.exception.ts:7",{"_index":754,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["updatecategoryandname",{"_index":440,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatecategoryandname(id",{"_index":458,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatecategorydto",{"_index":369,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatecategorydto.name",{"_index":483,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatedat",{"_index":1186,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{}}}],["updateproductandurlname",{"_index":970,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateproductandurlname(id",{"_index":1005,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateproductdto",{"_index":920,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updateproductdto.name",{"_index":1016,"title":{},"body":{"injectables/ProductService.html":{}}}],["updatepurchasedto",{"_index":1093,"title":{"classes/UpdatePurchaseDto.html":{}},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["updates",{"_index":370,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserdto",{"_index":1173,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserdto.currentpassword",{"_index":1302,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto.password",{"_index":1301,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserrole",{"_index":1205,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserrole(updateuserroledto",{"_index":1221,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserroledto",{"_index":1179,"title":{"classes/UpdateUserRoleDto.html":{}},"body":{"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserroledto.email",{"_index":1296,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserroledto.role",{"_index":1297,"title":{},"body":{"injectables/UserService.html":{}}}],["upload",{"_index":669,"title":{},"body":{"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["upload.config",{"_index":964,"title":{},"body":{"modules/ProductModule.html":{}}}],["upload.config.ts",{"_index":1329,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["upload.decorator",{"_index":937,"title":{},"body":{"controllers/ProductController.html":{}}}],["upload.decorator.ts",{"_index":1324,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["upload.dto.ts",{"_index":678,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["upload.dto.ts:10",{"_index":683,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["uploadedfile",{"_index":934,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploading",{"_index":664,"title":{},"body":{"classes/FileTypeError.html":{}}}],["uploadphoto",{"_index":905,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploadphoto(id",{"_index":923,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploadpicture",{"_index":971,"title":{},"body":{"injectables/ProductService.html":{}}}],["uploadpicture(id",{"_index":1007,"title":{},"body":{"injectables/ProductService.html":{}}}],["uploads",{"_index":924,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["url",{"_index":891,"title":{},"body":{"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["urlname",{"_index":479,"title":{},"body":{"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["urlname'})@public()@get(':urlname",{"_index":916,"title":{},"body":{"controllers/ProductController.html":{}}}],["use",{"_index":428,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"license.html":{}}}],["use.exception",{"_index":810,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["use.exception.ts",{"_index":416,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"coverage.html":{}}}],["use.exception.ts:6",{"_index":426,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["useclass",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":420,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":138,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["user'})@apibearerauth()@delete()@httpcode(httpstatus.no_content",{"_index":1215,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@apibearerauth()@patch",{"_index":1219,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@apibearerauth()@post('logout')@httpcode(httpstatus.ok",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["user'})@public()@post",{"_index":1207,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@public()@post('login')@httpcode(httpstatus.ok",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.controller",{"_index":1251,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":1177,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":585,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":614,"title":{},"body":{"classes/DeleteUserDto.html":{}}}],["user.dto.ts:17",{"_index":591,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":1176,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:28",{"_index":598,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":592,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:44",{"_index":587,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":1310,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["user.id",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.role",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":1230,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user@example.com",{"_index":602,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{}}}],["usercontroller",{"_index":1202,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":101,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePurchaseDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{}}}],["userinputexceptionhandler",{"_index":653,"title":{"classes/UserInputExceptionHandler.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["userinputexceptionhandler().handle(error",{"_index":658,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["usermodule",{"_index":116,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["usernotfoundexception",{"_index":817,"title":{"classes/UserNotFoundException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["userrole",{"_index":103,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{}}}],["users",{"_index":761,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":218,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userserviceinputexception",{"_index":730,"title":{"classes/UserServiceInputException.html":{}},"body":{"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["userwithoutpassword",{"_index":1227,"title":{"classes/UserWithoutPassword.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["uses",{"_index":10,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{}}}],["usuário",{"_index":1399,"title":{},"body":{"index.html":{}}}],["usuários",{"_index":1384,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"classes/Category.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/User.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["v4",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["valid",{"_index":1646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":77,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["validate(payload",{"_index":79,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["validatecurrentpassword",{"_index":1256,"title":{},"body":{"injectables/UserService.html":{}}}],["validatecurrentpassword(id",{"_index":1277,"title":{},"body":{"injectables/UserService.html":{}}}],["validated",{"_index":1584,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["validates",{"_index":82,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{}}}],["validateuser",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":498,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"dependencies.html":{},"index.html":{}}}],["validações",{"_index":1481,"title":{},"body":{"index.html":{}}}],["validimageuploadtypesregex",{"_index":1331,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["validimageuploadtypesregex.test",{"_index":1634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validimageuploadtypesregex.test(file.mimetype",{"_index":1632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["value",{"_index":1592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":1322,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1586,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["veiga",{"_index":1503,"title":{},"body":{"license.html":{}}}],["verify",{"_index":1604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1572,"title":{},"body":{"properties.html":{}}}],["visualizar",{"_index":1448,"title":{},"body":{"index.html":{}}}],["voc",{"_index":1402,"title":{},"body":{"index.html":{}}}],["void",{"_index":630,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"miscellaneous/functions.html":{}}}],["warranties",{"_index":1543,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1539,"title":{},"body":{"license.html":{}}}],["way",{"_index":976,"title":{},"body":{"injectables/ProductService.html":{}}}],["web",{"_index":1480,"title":{},"body":{"index.html":{}}}],["wether",{"_index":783,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["wheelchair",{"_index":541,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["whether",{"_index":1556,"title":{},"body":{"license.html":{}}}],["white",{"_index":989,"title":{},"body":{"injectables/ProductService.html":{}}}],["without",{"_index":1213,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"license.html":{}}}],["won't",{"_index":1266,"title":{},"body":{"injectables/UserService.html":{}}}],["words",{"_index":995,"title":{},"body":{"injectables/ProductService.html":{}}}],["world",{"_index":609,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["wrong",{"_index":722,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{}}}],["yarn",{"_index":1422,"title":{},"body":{"index.html":{}}}],["z",{"_index":596,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessJwtAuthGuard.html":{"url":"injectables/AccessJwtAuthGuard.html","title":"injectable - AccessJwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessJwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/access-jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Uses the passport library AuthGuard to check\nif the route needs authentication\nFor more on NestJs Guards: https://docs.nestjs.com/guards\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/access-jwt-auth.guard.ts:13\n                            \n                        \n\n                \n                    \n                            Uses the passport library AuthGuard to check\nif the route needs authentication\nFor more on NestJs Guards: https://docs.nestjs.com/guards\nInstantiates the class and the Reflector dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/access-jwt-auth.guard.ts:28\n                \n            \n\n\n            \n                \n                    If the route uses the Public decorator it\ndoes not need authentication, else it does\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Observable } from 'rxjs';\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n/** Uses the passport library AuthGuard to check\n * if the route needs authentication\n *\n * For more on NestJs Guards: https://docs.nestjs.com/guards\n */\n@Injectable()\nexport class AccessJwtAuthGuard extends AuthGuard('access-jwt') {\n  /** Uses the passport library AuthGuard to check\n   * if the route needs authentication\n   *\n   * For more on NestJs Guards: https://docs.nestjs.com/guards\n   *\n   * Instantiates the class and the Reflector dependency\n   */\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  /** If the route uses the Public decorator it\n   * does not need authentication, else it does\n   */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessJwtStrategy.html":{"url":"injectables/AccessJwtStrategy.html","title":"injectable - AccessJwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessJwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/access-jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Passport library Access JsonWebToken configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/access-jwt.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            Passport library JsonWebToken configuration\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: AccessTokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/access-jwt.strategy.ts:24\n                \n            \n\n\n            \n                \n                    Validates and returns data after JsonWebToken is decrypted\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                AccessTokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { accessJwtConfig } from 'src/config/jwt.config';\nimport { AccessTokenContent } from './types/access-token-content';\nimport { AccessTokenPayload } from './types/access-token-payload';\n\n/** Passport library Access JsonWebToken configuration */\n@Injectable()\nexport class AccessJwtStrategy extends PassportStrategy(\n  Strategy,\n  'access-jwt',\n) {\n  /** Passport library JsonWebToken configuration */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: accessJwtConfig.secret,\n    });\n  }\n\n  /** Validates and returns data after JsonWebToken is decrypted */\n  async validate(payload: AccessTokenPayload): Promise {\n    return {\n      userId: payload.sub,\n      userRole: payload.role,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nPurchaseModule\n\nPurchaseModule\n\nAppModule -->\n\nPurchaseModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CategoryModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            ProductModule\n                        \n                        \n                            PurchaseModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthModule } from './auth/auth.module';\nimport { AccessJwtAuthGuard } from './auth/access-jwt-auth.guard';\nimport { UserModule } from './models/user/user.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { ProductModule } from './models/product/product.module';\nimport { CategoryModule } from './models/category/category.module';\nimport { PurchaseModule } from './models/purchase/purchase.module';\n\n@Module({\n  imports: [\n    UserModule,\n    AuthModule,\n    PrismaModule,\n    ProductModule,\n    CategoryModule,\n    PurchaseModule,\n  ],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: AccessJwtAuthGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                User authentication endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                logoutAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(undefined: LoginCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Logs in user'})@Public()@Post('login')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:28\n                \n            \n\n\n            \n                \n                    Authenticates the User\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(undefined: LogoutDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Logs out user'})@ApiBearerAuth()@Post('logout')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:39\n                \n            \n\n\n            \n                \n                    Logs out the User from the current session\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LogoutDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logoutAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    logoutAll(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Logs out user of all sessions'})@ApiBearerAuth()@Post('logoutAll')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:48\n                \n            \n\n\n            \n                \n                    Logs out the User from all sessions\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Req,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { AuthService } from './auth.service';\nimport { LoginCredentialsDto } from './dto/login-credentials.dto';\nimport { LoginResponse } from './dto/login.response';\nimport { LogoutDto } from './dto/logout.dto';\nimport { Public } from './public.decorator';\n\n/** User authentication endpoints */\n@ApiTags('authentication')\n@Controller()\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  /** Authenticates the User */\n  @ApiOperation({ summary: 'Logs in user' })\n  @Public()\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  async login(\n    @Body() { email, password }: LoginCredentialsDto,\n  ): Promise {\n    return this.authService.login(email, password);\n  }\n\n  /** Logs out the User from the current session */\n  @ApiOperation({ summary: 'Logs out user' })\n  @ApiBearerAuth()\n  @Post('logout')\n  @HttpCode(HttpStatus.OK)\n  async logout(@Body() { refreshToken }: LogoutDto): Promise {\n    return this.authService.logout(refreshToken);\n  }\n\n  /** Logs out the User from all sessions */\n  @ApiOperation({ summary: 'Logs out user of all sessions' })\n  @ApiBearerAuth()\n  @Post('logoutAll')\n  @HttpCode(HttpStatus.OK)\n  async logoutAll(@Req() request: Request): Promise {\n    const { userId } = request.user as { userId: string };\n\n    return this.authService.logoutAll(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAccessJwtStrategy\n\nAccessJwtStrategy\n\nAuthModule -->\n\nAccessJwtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessJwtStrategy\n                        \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { UserModule } from 'src/models/user/user.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AccessJwtStrategy } from './access-jwt.strategy';\nimport { PrismaModule } from 'src/prisma/prisma.module';\n\n@Module({\n  imports: [UserModule, PrismaModule, PassportModule, JwtModule.register({})],\n  providers: [AuthService, AccessJwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for authenticating the user\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                addDaysFromNow\n                            \n                            \n                                    Private\n                                    Async\n                                createRefreshToken\n                            \n                            \n                                    Private\n                                getTokenExpirationDate\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                logoutAll\n                            \n                            \n                                    Private\n                                    Async\n                                saveRefreshToken\n                            \n                            \n                                    Private\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            Responsible for authenticating the user\nInstantiate the class and the UserService and\nJwtService dependencies\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        addDaysFromNow\n                        \n                    \n                \n            \n            \n                \n                    \n                    addDaysFromNow(days: number)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:117\n                \n            \n\n\n            \n                \n                    Add amount of days from today's date\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    days\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Date\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        createRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createRefreshToken(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:80\n                \n            \n\n\n            \n                \n                    Creates the refresh token and saves it in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getTokenExpirationDate\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokenExpirationDate()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:107\n                \n            \n\n\n            \n                \n                    Returns the token expiration date\n\n\n                    \n                        Returns :         Date\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:32\n                \n            \n\n\n            \n                \n                    Validates if the inputted email exists and\ncompares if the hashed password matches the inputted one.\nIf so, returns the access and refresh JWTs\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:51\n                \n            \n\n\n            \n                \n                    Deletes the refreshToken from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logoutAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    logoutAll(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:56\n                \n            \n\n\n            \n                \n                    Deletes all user's refresh tokens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        saveRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveRefreshToken(userId: string, refreshToken: string, family: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:94\n                \n            \n\n\n            \n                \n                    Saves the new refresh token hashed in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    family\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:65\n                \n            \n\n\n            \n                \n                    Validates if the inputted email exists and\ncompares if the hashed password matches the inputted one.\nIf not, throws an error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { compare } from 'bcrypt';\nimport { accessJwtConfig, refreshJwtConfig } from 'src/config/jwt.config';\nimport { User } from 'src/models/user/entities/user.entity';\nimport { UserService } from 'src/models/user/user.service';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { LoginResponse } from './dto/login.response';\nimport { InvalidEmailOrPasswordError } from './errors/invalid-email-or-password.error.';\nimport { v4 as uuidV4 } from 'uuid';\nimport ms from 'ms';\n\n/** Responsible for authenticating the user */\n@Injectable()\nexport class AuthService {\n  /** Responsible for authenticating the user\n   *\n   * Instantiate the class and the UserService and\n   * JwtService dependencies\n   */\n  constructor(\n    private readonly userService: UserService,\n    private readonly jwtService: JwtService,\n    private readonly prismaService: PrismaService,\n  ) {}\n\n  /** Validates if the inputted email exists and\n   * compares if the hashed password matches the inputted one.\n   *\n   * If so, returns the access and refresh JWTs\n   */\n  async login(email: string, password: string): Promise {\n    const user = await this.validateUser(email, password);\n\n    const payload = { sub: user.id, role: user.role };\n\n    const accessToken = await this.jwtService.signAsync(\n      payload,\n      accessJwtConfig,\n    );\n\n    const refreshToken = await this.createRefreshToken(user.id);\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  /** Deletes the refreshToken from the database*/\n  async logout(refreshToken: string): Promise {\n    await this.prismaService.userTokens.deleteMany({ where: { refreshToken } });\n  }\n\n  /** Deletes all user's refresh tokens */\n  async logoutAll(userId: string): Promise {\n    await this.prismaService.userTokens.deleteMany({ where: { userId } });\n  }\n\n  /** Validates if the inputted email exists and\n   * compares if the hashed password matches the inputted one.\n   *\n   * If not, throws an error\n   */\n  private async validateUser(email: string, password: string): Promise {\n    const user = await this.userService.findByEmail(email);\n\n    if (user) {\n      const isPasswordValid = await compare(password, user.password);\n\n      if (isPasswordValid) {\n        return { ...user, password: undefined };\n      }\n    }\n\n    throw new InvalidEmailOrPasswordError();\n  }\n\n  /** Creates the refresh token and saves it in the database */\n  private async createRefreshToken(userId: string): Promise {\n    const tokenFamily = uuidV4();\n\n    const refreshToken = await this.jwtService.signAsync(\n      { sub: userId, family: tokenFamily },\n      refreshJwtConfig,\n    );\n\n    await this.saveRefreshToken(userId, refreshToken, tokenFamily);\n\n    return refreshToken;\n  }\n\n  /** Saves the new refresh token hashed in the database */\n  private async saveRefreshToken(\n    userId: string,\n    refreshToken: string,\n    family: string,\n  ): Promise {\n    const expiresAt = this.getTokenExpirationDate();\n\n    await this.prismaService.userTokens.create({\n      data: { userId, refreshToken, family, expiresAt },\n    });\n  }\n\n  /** Returns the token expiration date */\n  private getTokenExpirationDate(): Date {\n    const expiresInDays =\n      ms(refreshJwtConfig.expiresIn as string) / 1000 / 60 / 60 / 24;\n\n    const expiresAt = this.addDaysFromNow(expiresInDays);\n\n    return expiresAt;\n  }\n\n  /** Add amount of days from today's date */\n  private addDaysFromNow(days: number): Date {\n    const result = new Date();\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/entities/category.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of a Category in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/category/entities/category.entity.ts:9\n                        \n                    \n\n            \n                \n                    Category ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/category/entities/category.entity.ts:15\n                        \n                    \n\n            \n                \n                    Category name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\n/** Describes the properties of a Category in the database */\nexport class Category implements Prisma.CategoryUncheckedCreateInput {\n  /**\n   * Category ID as UUID\n   * @example \"e6cf9a58-438c-4fce-8d85-db3d22db270a\"\n   */\n  id?: string;\n\n  /**\n   * Category name\n   * @example \"Decoration\"\n   */\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoryController.html":{"url":"controllers/CategoryController.html","title":"controller - CategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                category\n            \n\n\n            \n                Description\n            \n            \n                Exposes category CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByName\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin creates a new category'})@IsAdmin()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:37\n                \n            \n\n\n            \n                \n                    Creates a new category, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(findCategoriesDto: FindCategoriesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns all categories'})@Public()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:51\n                \n            \n\n\n            \n                \n                    Returns all categories with pagination\nDefault is starting on page 1 showing 10 results per page,\nsearching and ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findCategoriesDto\n                                    \n                                                FindCategoriesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string, findProductsDto: FindProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin gets category by ID and its products'})@IsAdmin()@Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:61\n                \n            \n\n\n            \n                \n                    Find category by ID, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    findProductsDto\n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByName(name: string, findProductsDto: FindProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns category by name and its products'})@Public()@Get(':name')\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:72\n                \n            \n\n\n            \n                \n                    Find category by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    findProductsDto\n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin deletes category'})@IsAdmin()@Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:95\n                \n            \n\n\n            \n                \n                    Deletes category from database, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin updates category'})@IsAdmin()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:83\n                \n            \n\n\n            \n                \n                    Updates category information, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Public } from 'src/auth/public.decorator';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { FindProductsDto } from '../product/dto/find-products.dto';\nimport { CategoryService } from './category.service';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { FindCategoriesDto } from './dto/find-categories.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { Category } from './entities/category.entity';\n\n/** Exposes category CRUD endpoints */\n@ApiTags('category')\n@Controller('category')\nexport class CategoryController {\n  /** Exposes category CRUD endpoints\n   *\n   * Instantiate class and CategoryService dependency\n   */\n  constructor(private readonly categoryService: CategoryService) {}\n\n  /** Creates a new category, only for admins */\n  @ApiOperation({ summary: 'Admin creates a new category' })\n  @IsAdmin()\n  @Post()\n  async create(\n    @Body() createCategoryDto: CreateCategoryDto,\n  ): Promise {\n    return this.categoryService.create(createCategoryDto);\n  }\n\n  /** Returns all categories with pagination\n   *\n   * Default is starting on page 1 showing 10 results per page,\n   * searching and ordering by name\n   */\n  @ApiOperation({ summary: 'Returns all categories' })\n  @Public()\n  @Get()\n  async findAll(\n    @Query() findCategoriesDto: FindCategoriesDto,\n  ): Promise {\n    return this.categoryService.findAll(findCategoriesDto);\n  }\n\n  /** Find category by ID, only for admins */\n  @ApiOperation({ summary: 'Admin gets category by ID and its products' })\n  @IsAdmin()\n  @Get('/id/:id')\n  async findOneById(\n    @Param('id') id: string,\n    @Query() findProductsDto: FindProductsDto,\n  ): Promise {\n    return this.categoryService.findOneById(id, findProductsDto);\n  }\n\n  /** Find category by name */\n  @ApiOperation({ summary: 'Returns category by name and its products' })\n  @Public()\n  @Get(':name')\n  async findOneByName(\n    @Param('name') name: string,\n    @Query() findProductsDto: FindProductsDto,\n  ): Promise {\n    return this.categoryService.findOneByName(name, findProductsDto);\n  }\n\n  /** Updates category information, only for admins */\n  @ApiOperation({ summary: 'Admin updates category' })\n  @IsAdmin()\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updateCategoryDto: UpdateCategoryDto,\n  ): Promise {\n    return this.categoryService.update(id, updateCategoryDto);\n  }\n\n  /** Deletes category from database, only for admins */\n  @ApiOperation({ summary: 'Admin deletes category' })\n  @IsAdmin()\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async remove(@Param('id') id: string): Promise {\n    return this.categoryService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoryModule.html":{"url":"modules/CategoryModule.html","title":"module - CategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_imports\n\n\n\ncluster_CategoryModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nPrismaModule->CategoryModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/category/category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoryService } from './category.service';\nimport { CategoryController } from './category.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\n\n@Module({\n  controllers: [CategoryController],\n  imports: [PrismaModule],\n  providers: [CategoryService],\n})\nexport class CategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryNameInUseException.html":{"url":"classes/CategoryNameInUseException.html","title":"class - CategoryNameInUseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryNameInUseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/category/category-name-in-use.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\na category name that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/category/category-name-in-use.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'Category name already in use'. Used when the user inputs\na category name that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * a category name that is already registered in the system\n */\nexport class CategoryNameInUseException extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'Category name already in use'. Used when the user inputs\n   * a category name that is already registered in the system\n   */\n  constructor() {\n    super('Category name already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryNotFoundException.html":{"url":"classes/CategoryNotFoundException.html","title":"class - CategoryNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/category/category-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\na category that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/category/category-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'Category not found'. Used when the user inputs\na category that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * a category that is not registered in the system\n */\nexport class CategoryNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'Category not found'. Used when the user inputs\n   * a category that is not registered in the system\n   */\n  constructor() {\n    super('Category not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/category.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing categories in the database.\nCRUD endpoints are available for categories.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                capitalizeOnlyFirstLetter\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByName\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Private\n                                updateCategoryAndName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/category/category.service.ts:13\n                            \n                        \n\n                \n                    \n                            Responsible for managing categories in the database.\nCRUD endpoints are available for categories.\nInstantiates the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        capitalizeOnlyFirstLetter\n                        \n                    \n                \n            \n            \n                \n                    \n                    capitalizeOnlyFirstLetter(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:124\n                \n            \n\n\n            \n                \n                    Capitalize only the first letter of the category name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:22\n                \n            \n\n\n            \n                \n                    Creates a new category\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: FindCategoriesDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:36\n                \n            \n\n\n            \n                \n                    Returns all categories with pagination and can search by name\nDefault is starting on page 1 showing 10 results per page\nand ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindCategoriesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string, undefined: FindProductsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:54\n                \n            \n\n\n            \n                \n                    Find category by ID and show the products that have this category\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByName(name: string, undefined: FindProductsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:77\n                \n            \n\n\n            \n                \n                    Find category by name and show the products that have this category\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:119\n                \n            \n\n\n            \n                \n                    Removes category from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:102\n                \n            \n\n\n            \n                \n                    Updates category information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        updateCategoryAndName\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCategoryAndName(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:132\n                \n            \n\n\n            \n                \n                    Formats name and updates the category with the new one.\nUsed when the user updates the category name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { FindProductsDto } from '../product/dto/find-products.dto';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { FindCategoriesDto } from './dto/find-categories.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { Category } from './entities/category.entity';\n\n/** Responsible for managing categories in the database.\n * CRUD endpoints are available for categories.\n */\n@Injectable()\nexport class CategoryService {\n  /** Responsible for managing categories in the database.\n   * CRUD endpoints are available for categories.\n   *\n   * Instantiates the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new category */\n  async create(createCategoryDto: CreateCategoryDto): Promise {\n    const name = this.capitalizeOnlyFirstLetter(createCategoryDto.name);\n\n    const category = await this.prisma.category.create({\n      data: { ...createCategoryDto, name },\n    });\n\n    return category;\n  }\n\n  /** Returns all categories with pagination and can search by name\n   * Default is starting on page 1 showing 10 results per page\n   * and ordering by name\n   */\n  async findAll({\n    categoryName = '',\n    page = 1,\n    offset = 10,\n  }: FindCategoriesDto): Promise {\n    const categoriesToSkip = (page - 1) * offset;\n\n    return this.prisma.category.findMany({\n      skip: categoriesToSkip,\n      take: offset,\n      where: {\n        name: { contains: categoryName, mode: 'insensitive' },\n      },\n      orderBy: { name: 'asc' },\n    });\n  }\n\n  /** Find category by ID and show the products that have this category */\n  async findOneById(\n    id: string,\n    { productName = '', page = 1, offset = 10 }: FindProductsDto,\n  ): Promise {\n    const productsToSkip = (page - 1) * offset;\n\n    const category = await this.prisma.category.findUnique({\n      where: { id },\n      include: {\n        products: {\n          select: { id: true, name: true, urlName: true, picture: true },\n          where: { name: { contains: productName, mode: 'insensitive' } },\n          skip: productsToSkip,\n          take: offset,\n        },\n      },\n      rejectOnNotFound: true,\n    });\n\n    return category;\n  }\n\n  /** Find category by name and show the products that have this category */\n  async findOneByName(\n    name: string,\n    { productName = '', page = 1, offset = 10 }: FindProductsDto,\n  ): Promise {\n    const productsToSkip = (page - 1) * offset;\n\n    name = this.capitalizeOnlyFirstLetter(name);\n\n    const category = await this.prisma.category.findUnique({\n      where: { name },\n      include: {\n        products: {\n          select: { id: true, name: true, urlName: true, picture: true },\n          where: { name: { contains: productName, mode: 'insensitive' } },\n          skip: productsToSkip,\n          take: offset,\n        },\n      },\n      rejectOnNotFound: true,\n    });\n\n    return category;\n  }\n\n  /** Updates category information */\n  async update(\n    id: string,\n    updateCategoryDto: UpdateCategoryDto,\n  ): Promise {\n    if (updateCategoryDto.name) {\n      return this.updateCategoryAndName(id, updateCategoryDto);\n    }\n\n    const category = await this.prisma.category.update({\n      where: { id },\n      data: { ...updateCategoryDto },\n    });\n\n    return category;\n  }\n\n  /** Removes category from database */\n  async remove(id: string): Promise {\n    await this.prisma.category.delete({ where: { id } });\n  }\n\n  /** Capitalize only the first letter of the category name */\n  private capitalizeOnlyFirstLetter(name: string): string {\n    return name[0].toUpperCase() + name.substring(1).toLocaleLowerCase();\n  }\n\n  /** Formats name and updates the category with the new one.\n   *\n   * Used when the user updates the category name.\n   */\n  private updateCategoryAndName(\n    id: string,\n    updateCategoryDto: UpdateCategoryDto,\n  ): Promise {\n    const name = this.capitalizeOnlyFirstLetter(updateCategoryDto.name);\n\n    return this.prisma.category.update({\n      where: { id },\n      data: { ...updateCategoryDto, name },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/dto/create-category.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create a Category\n\n            \n\n\n            \n                Implements\n            \n            \n                            Category\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/create-category.dto.ts:12\n                        \n                    \n\n            \n                \n                    Category name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { Category } from '../entities/category.entity';\n\n/** Describes the fields needed to create a Category */\nexport class CreateCategoryDto implements Category {\n  /**\n   * Category name\n   * @example \"Decoration\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/create-product.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create a Product\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                basePrice\n                            \n                            \n                                    Optional\n                                categories\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                discountPercentage\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                stock\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        basePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Decimal\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:36\n                        \n                    \n\n            \n                \n                    Product price not considering discounts.\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:67\n                        \n                    \n\n            \n                \n                    Category IDs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:59\n                        \n                    \n\n            \n                \n                    Product description\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        discountPercentage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:44\n                        \n                    \n\n            \n                \n                    Product discount in percentage. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:26\n                        \n                    \n\n            \n                \n                    Product name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:51\n                        \n                    \n\n            \n                \n                    Product stock amount. Defaults to 0\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { Decimal } from '@prisma/client/runtime';\nimport {\n  IsArray,\n  IsInt,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { Product } from '../entities/product.entity';\n\n/** Describes the fields needed to create a Product */\nexport class CreateProductDto extends OmitType(Product, [\n  'id',\n  'createdAt',\n  'urlName',\n  'picture',\n] as const) {\n  /**\n   * Product name\n   * @example \"Brand black wheelchair\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Product price not considering discounts.\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 70.00\n   */\n  @IsNumber()\n  @IsNotEmpty()\n  basePrice: string | number | Decimal;\n\n  /**\n   * Product discount in percentage. Defaults to 0\n   * @example 10\n   */\n  @IsNumber()\n  @IsOptional()\n  discountPercentage?: number;\n\n  /** Product stock amount. Defaults to 0\n   * @example 42\n   */\n  @IsInt()\n  @IsOptional()\n  stock?: number;\n\n  /**\n   * Product description\n   * @example \"Black wheelchair for offices\"\n   */\n  @IsString()\n  @IsOptional()\n  description?: string;\n\n  /**\n   * Category IDs\n   * @example [\"857cd575-956b-49f3-a75e-2e651e21b871\", \"fa244865-0878-4688-ac63-e3ecf4939a89\"]\n   */\n  @IsOptional()\n  @IsArray()\n  categories?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePurchaseDto.html":{"url":"classes/CreatePurchaseDto.html","title":"class - CreatePurchaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePurchaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/dto/create-purchase.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create a Purchase\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                amount\n                            \n                            \n                                productId\n                            \n                            \n                                totalPrice\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsPositive()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/create-purchase.dto.ts:27\n                        \n                    \n\n            \n                \n                    Amount purchased of the product\nDefaults to 1\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/create-purchase.dto.ts:18\n                        \n                    \n\n            \n                \n                    Product ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Decimal\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/create-purchase.dto.ts:36\n                        \n                    \n\n            \n                \n                    Price payed per product multiplied by the amount\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { Decimal } from '@prisma/client/runtime';\nimport { IsNumber, IsOptional, IsPositive, IsUUID } from 'class-validator';\nimport { Purchase } from '../entities/purchase.entity';\n\n/** Describes the fields needed to create a Purchase */\nexport class CreatePurchaseDto extends OmitType(Purchase, [\n  'id',\n  'userId',\n  'createdAt',\n  'reviewNote',\n  'reviewComment',\n]) {\n  /** Product ID as UUID\n   * @example \"5c68ae94-bf3e-4fde-b01f-25d18b3976a0\"\n   */\n  @IsUUID(4)\n  productId: string;\n\n  /** Amount purchased of the product\n   * Defaults to 1\n   * @example 2\n   */\n  @IsNumber()\n  @IsPositive()\n  @IsOptional()\n  amount?: number;\n\n  /** Price payed per product multiplied by the amount\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 138.75\n   */\n  @IsNumber()\n  @IsPositive()\n  totalPrice: string | number | Decimal;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create an User\n\n            \n\n\n            \n                Implements\n            \n            \n                            User\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:44\n                        \n                    \n\n            \n                \n                    User address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({message: 'Must be an e-mail'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:17\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:36\n                        \n                    \n\n            \n                \n                    User name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8, {message: 'Password must have length of at least 8'})@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[a-z]).*$/, {message: 'Password must contain at least 1 number and 1 letter'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:28\n                        \n                    \n\n            \n                \n                    User password must contain at least 1 number and 1 letter\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\nimport { User } from '../entities/user.entity';\n\n/** Describes the fields needed to create an User */\nexport class CreateUserDto implements User {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsEmail({ message: 'Must be an e-mail' })\n  email: string;\n\n  /**\n   * User password must contain at least 1 number and 1 letter\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @MinLength(8, { message: 'Password must have length of at least 8' })\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[a-z]).*$/, {\n    message: 'Password must contain at least 1 number and 1 letter',\n  })\n  password: string;\n\n  /**\n   * User name\n   * @example \"John Doe\"\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  /**\n   * User address\n   * @example \"World Street 0\"\n   */\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserDto.html":{"url":"classes/DeleteUserDto.html","title":"class - DeleteUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/delete-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to delete an User\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/delete-user.dto.ts:11\n                        \n                    \n\n            \n                \n                    User current password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/** Describes the fields needed to delete an User */\nexport class DeleteUserDto {\n  /**\n   * User current password\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  currentPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailInUseException.html":{"url":"classes/EmailInUseException.html","title":"class - EmailInUseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailInUseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/user/email-in-use.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\nan email that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/user/email-in-use.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'E-mail already in use'. Used when the user inputs\nan email that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * an email that is already registered in the system\n */\nexport class EmailInUseException extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'E-mail already in use'. Used when the user inputs\n   * an email that is already registered in the system\n   */\n  constructor() {\n    super('E-mail already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExceptionHandler.html":{"url":"interfaces/ExceptionHandler.html","title":"interface - ExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for Exception Handlers\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        handle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/exception.handler.ts:4\n                \n            \n\n\n            \n                \n                    Function to handle specific error types\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface ExceptionHandler {\n  /** Function to handle specific error types */\n  handle(error: Error): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExceptionInterceptor.html":{"url":"injectables/ExceptionInterceptor.html","title":"injectable - ExceptionInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExceptionInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/exception.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor to transform app erros into HTTP errors\nFor more about NestJs interceptors: https://docs.nestjs.com/interceptors\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler<>)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/exception.interceptor.ts:23\n                \n            \n\n\n            \n                \n                    Catches app errors and throws the\nrespective HTTP error\nUses default NestJs boilerplate, for more\ninformation: https://docs.nestjs.com/interceptors\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler<>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { catchError, Observable } from 'rxjs';\nimport { PrismaExceptionHandler } from './handlers/prisma-exception.handler';\nimport { UserInputExceptionHandler } from './handlers/user-input-exception.handler';\n\n/** Interceptor to transform app erros into HTTP errors\n *\n * For more about NestJs interceptors: https://docs.nestjs.com/interceptors\n */\n@Injectable()\nexport class ExceptionInterceptor implements NestInterceptor {\n  /** Catches app errors and throws the\n   * respective HTTP error\n   *\n   * Uses default NestJs boilerplate, for more\n   * information: https://docs.nestjs.com/interceptors\n   */\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | Promise> {\n    return next.handle().pipe(\n      catchError((error) => {\n        new UserInputExceptionHandler().handle(error);\n\n        new PrismaExceptionHandler().handle(error);\n\n        throw error;\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileTypeError.html":{"url":"classes/FileTypeError.html","title":"class - FileTypeError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileTypeError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/exceptions/file-type.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs an invalid file type\nuploading a picture\n\n            \n\n            \n                Extends\n            \n            \n                        ProductServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fileTypes: RegExp)\n                    \n                \n                        \n                            \n                                Defined in src/models/product/exceptions/file-type.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'File upload only supports the following\nfiletypes - {fileTypes}'.\nUsed when the user inputs an invalid file type\nuploading a picture\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileTypes\n                                                  \n                                                        \n                                                                    RegExp\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ProductServiceInputException } from './product-service-input.exception';\n\n/** Used when the user inputs an invalid file type\n * uploading a picture\n */\nexport class FileTypeError extends ProductServiceInputException {\n  /** Throws exception with message 'File upload only supports the following\n   * filetypes - {fileTypes}'.\n   *\n   * Used when the user inputs an invalid file type\n   * uploading a picture\n   */\n  constructor(fileTypes: RegExp) {\n    super(`File upload only supports the following filetypes - ${fileTypes}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/file-upload.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to upload a file\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', format: 'binary'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/file-upload.dto.ts:10\n                        \n                    \n\n            \n                \n                    Product picture\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\n/** Describes the information needed to upload a file */\nexport class FileUploadDto {\n  /**\n   * Product picture\n   * @example \"picture.png\"\n   */\n  @ApiProperty({ type: 'string', format: 'binary' })\n  file: Express.Multer.File;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindCategoriesDto.html":{"url":"classes/FindCategoriesDto.html","title":"class - FindCategoriesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindCategoriesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/dto/find-categories.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information to search for categories\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                categoryName\n                            \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        categoryName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/find-categories.dto.ts:11\n                        \n                    \n\n            \n                \n                    String containing in category name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/find-categories.dto.ts:29\n                        \n                    \n\n            \n                \n                    Show this amount of categories per page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/find-categories.dto.ts:20\n                        \n                    \n\n            \n                \n                    Show categories in this page\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsInt, IsOptional, IsPositive, IsString } from 'class-validator';\n\n/** Describes the information to search for categories */\nexport class FindCategoriesDto {\n  /** String containing in category name\n   * @example \"chair\"\n   */\n  @IsOptional()\n  @IsString()\n  categoryName?: string;\n\n  /** Show categories in this page\n   * @example 1\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  page?: number;\n\n  /** Show this amount of categories per page\n   * @example 10\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  offset?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindProductsDto.html":{"url":"classes/FindProductsDto.html","title":"class - FindProductsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindProductsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/find-products.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information to search for products\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                page\n                            \n                            \n                                    Optional\n                                productName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-products.dto.ts:29\n                        \n                    \n\n            \n                \n                    Show this amount of products per page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-products.dto.ts:20\n                        \n                    \n\n            \n                \n                    Show products in this page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        productName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-products.dto.ts:11\n                        \n                    \n\n            \n                \n                    String containing in product name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsInt, IsOptional, IsPositive, IsString } from 'class-validator';\n\n/** Describes the information to search for products */\nexport class FindProductsDto {\n  /** String containing in product name\n   * @example \"chair\"\n   */\n  @IsOptional()\n  @IsString()\n  productName?: string;\n\n  /** Show products in this page\n   * @example 1\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  page?: number;\n\n  /** Show this amount of products per page\n   * @example 10\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  offset?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindPurchasesDto.html":{"url":"classes/FindPurchasesDto.html","title":"class - FindPurchasesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindPurchasesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/dto/find-purchases.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information to search for purchases\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                page\n                            \n                            \n                                    Optional\n                                productId\n                            \n                            \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/find-purchases.dto.ts:36\n                        \n                    \n\n            \n                \n                    Show this amount of purchases per page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/find-purchases.dto.ts:27\n                        \n                    \n\n            \n                \n                    Show purchases in this page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/find-purchases.dto.ts:18\n                        \n                    \n\n            \n                \n                    String matching product ID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/find-purchases.dto.ts:11\n                        \n                    \n\n            \n                \n                    String matching user ID\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsInt, IsOptional, IsPositive, IsString } from 'class-validator';\n\n/** Describes the information to search for purchases */\nexport class FindPurchasesDto {\n  /** String matching user ID\n   * @example \"b0e0c99e-541c-463b-8fd6-306e52f9e686\"\n   */\n  @IsOptional()\n  @IsString()\n  userId?: string;\n\n  /** String matching product ID\n   * @example \"26c3fd79-f5bd-4646-a287-32d0226134e2\"\n   */\n  @IsOptional()\n  @IsString()\n  productId?: string;\n\n  /** Show purchases in this page\n   * @example 1\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  page?: number;\n\n  /** Show this amount of purchases per page\n   * @example 10\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  offset?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidEmailOrPasswordError.html":{"url":"classes/InvalidEmailOrPasswordError.html","title":"class - InvalidEmailOrPasswordError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidEmailOrPasswordError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/errors/invalid-email-or-password.error..ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 401. Used when the user inputs\nan email that is not registered in the system\nor the wrong password for a registered email\n\n            \n\n            \n                Extends\n            \n            \n                    UnauthorizedException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/errors/invalid-email-or-password.error..ts:7\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 401 with message 'Invalid email or password'.\nUsed when the user inputs an email that is not registered\nin the system or the wrong password for a registered email\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UnauthorizedException } from '@nestjs/common';\n\n/** Throws HTTP status 401. Used when the user inputs\n * an email that is not registered in the system\n * or the wrong password for a registered email\n */\nexport class InvalidEmailOrPasswordError extends UnauthorizedException {\n  /** Throws HTTP status 401 with message 'Invalid email or password'.\n   * Used when the user inputs an email that is not registered\n   * in the system or the wrong password for a registered email\n   */\n  constructor() {\n    super('Invalid email or password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidPasswordUpdateException.html":{"url":"classes/InvalidPasswordUpdateException.html","title":"class - InvalidPasswordUpdateException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidPasswordUpdateException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/exceptions/invalid-password-update.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs the wrong\ncurrent password when trying to create a new password\n\n            \n\n            \n                Extends\n            \n            \n                        UserServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/models/user/exceptions/invalid-password-update.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Invalid current password'.\nUsed when the user inputs the wrong current password when\ntrying to create a new password\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserServiceInputException } from './user-service-input.exception';\n\n/** Used when the user inputs the wrong\n * current password when trying to create a new password\n */\nexport class InvalidPasswordUpdateException extends UserServiceInputException {\n  /** Throws exception with message 'Invalid current password'.\n   *\n   * Used when the user inputs the wrong current password when\n   * trying to create a new password\n   */\n  constructor() {\n    super('Invalid current password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginCredentialsDto.html":{"url":"classes/LoginCredentialsDto.html","title":"class - LoginCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-credentials.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to authenticate an User to the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-credentials.dto.ts:11\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-credentials.dto.ts:19\n                        \n                    \n\n            \n                \n                    User password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/** Describes the information needed to authenticate an User to the application */\nexport class LoginCredentialsDto {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  email: string;\n\n  /**\n   * User password\n   * @example \"abc123456\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginResponse.html":{"url":"classes/LoginResponse.html","title":"class - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.response.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the response received when the Login route is successfully called\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                            \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.response.ts:7\n                        \n                    \n\n            \n                \n                    Access JWT Authentication token\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.response.ts:13\n                        \n                    \n\n            \n                \n                    Refresh JWT Authentication token\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LoginResponse {\n  /**\n   * Access JWT Authentication token\n   * @example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5NWFkMzNhNS0wYjk4LTQ2ODYtYjFmMS1hMTkwNzM0NWJmYzciLCJpYXQiOjE2NDg0NzU3MzEsImV4cCI6MTY0ODQ3NjYzMX0.h3z3JDvHOi6y5C_N0Kt6tdP2nWK_dHBZxioQn7VANNo\"\n   */\n  accessToken: string;\n\n  /**\n   * Refresh JWT Authentication token\n   * @example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n   */\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogoutDto.html":{"url":"classes/LogoutDto.html","title":"class - LogoutDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogoutDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/logout.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to logout an User of the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsJWT()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/logout.dto.ts:10\n                        \n                    \n\n            \n                \n                    User refresh token\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJWT } from 'class-validator';\n\n/** Describes the information needed to logout an User of the application */\nexport class LogoutDto {\n  /**\n   * User refresh token\n   * @example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n   */\n  @IsJWT()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MissingPasswordUpdateException.html":{"url":"classes/MissingPasswordUpdateException.html","title":"class - MissingPasswordUpdateException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MissingPasswordUpdateException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/exceptions/missing-password-update.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs only the current password\nor the new password, but both are needed to update\nthe password\n\n            \n\n            \n                Extends\n            \n            \n                        UserServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/models/user/exceptions/missing-password-update.exception.ts:7\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Please enter both new\npassword and current password'.\nUsed when the user inputs only the current password\nor the new password, but both are needed to update\nthe password\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserServiceInputException } from './user-service-input.exception';\n\n/** Used when the user inputs only the current password\n * or the new password, but both are needed to update\n * the password\n */\nexport class MissingPasswordUpdateException extends UserServiceInputException {\n  /** Throws exception with message 'Please enter both new\n   * password and current password'.\n   *\n   * Used when the user inputs only the current password\n   * or the new password, but both are needed to update\n   * the password\n   */\n  constructor() {\n    super('Please enter both new password and current password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotPurchaseOwnerException.html":{"url":"classes/NotPurchaseOwnerException.html","title":"class - NotPurchaseOwnerException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotPurchaseOwnerException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/exceptions/not-purchase-owner.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used if the users try to review a purchase that they do not own\n\n            \n\n            \n                Extends\n            \n            \n                        PurchaseServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/models/purchase/exceptions/not-purchase-owner.exception.ts:4\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Purchase not found'.\nUsed if the users try to review a purchase that they do not own\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PurchaseServiceInputException } from './purchase-service-input.exception';\n\n/** Used if the users try to review a purchase that they do not own */\nexport class NotPurchaseOwnerException extends PurchaseServiceInputException {\n  /** Throws exception with message 'Purchase not found'.\n   *\n   * Used if the users try to review a purchase that they do not own\n   */\n  constructor() {\n    super('Purchase not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrismaExceptionHandler.html":{"url":"classes/PrismaExceptionHandler.html","title":"class - PrismaExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrismaExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/prisma-exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Catches Prisma ORM errors and throws the\nrespective HTTP error\n\n            \n\n\n            \n                Implements\n            \n            \n                            ExceptionHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                            \n                                    Private\n                                isCategoryError\n                            \n                            \n                                    Private\n                                isCategoryNameConstraintViolation\n                            \n                            \n                                    Private\n                                isCreateProductError\n                            \n                            \n                                    Private\n                                isEmailConstraintViolation\n                            \n                            \n                                    Private\n                                isPrismaUnknownError\n                            \n                            \n                                    Private\n                                isProductError\n                            \n                            \n                                    Private\n                                isProductNameConstraintViolation\n                            \n                            \n                                    Private\n                                isPurchaseError\n                            \n                            \n                                    Private\n                                isUserError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:19\n                \n            \n\n\n            \n                \n                    Catches Prisma ORM errors and throws the\nrespective HTTP error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isCategoryError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isCategoryError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:138\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an category prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isCategoryNameConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isCategoryNameConstraintViolation(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:110\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the category name field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isCreateProductError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isCreateProductError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:133\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an create product prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isEmailConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isEmailConstraintViolation(errorMeta: object)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:94\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the email field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorMeta\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isPrismaUnknownError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isPrismaUnknownError(error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:89\n                \n            \n\n\n            \n                \n                    Checks if the error contains clientVersion,\nmaking it an unknown prisma error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isProductError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isProductError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:125\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an update or delete product prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isProductNameConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isProductNameConstraintViolation(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:99\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the product name field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isPurchaseError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isPurchaseError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:143\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an purchase prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isUserError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isUserError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:120\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an user prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PrismaClientKnownRequestError } from '@prisma/client/runtime';\nimport { PrismaError } from 'prisma-error-enum';\nimport { CategoryNameInUseException } from 'src/common/exceptions/category/category-name-in-use.exception';\nimport { CategoryNotFoundException } from 'src/common/exceptions/category/category-not-found.exception';\nimport { ProductNameInUseException } from 'src/common/exceptions/product/product-name-in-use.exception';\nimport { ProductNotFoundException } from 'src/common/exceptions/product/product-not-found.exception';\nimport { PurchaseNotFoundException } from 'src/common/exceptions/purchase/purchase-not-found.exception';\nimport { EmailInUseException } from 'src/common/exceptions/user/email-in-use.exception';\nimport { UserNotFoundException } from 'src/common/exceptions/user/user-not-found.exception';\nimport { ExceptionHandler } from './exception.handler';\n\n/** Catches Prisma ORM errors and throws the\n * respective HTTP error\n */\nexport class PrismaExceptionHandler implements ExceptionHandler {\n  /** Catches Prisma ORM errors and throws the\n   * respective HTTP error\n   */\n  handle(error: Error): void {\n    if (error instanceof PrismaClientKnownRequestError) {\n      switch (error.code) {\n        case PrismaError.UniqueConstraintViolation:\n          if (this.isEmailConstraintViolation(error.meta)) {\n            throw new EmailInUseException();\n          }\n\n          if (this.isProductNameConstraintViolation(error)) {\n            throw new ProductNameInUseException();\n          }\n\n          if (this.isCategoryNameConstraintViolation(error)) {\n            throw new CategoryNameInUseException();\n          }\n          break;\n\n        case PrismaError.ForeignConstraintViolation:\n          if (this.isPurchaseError(error)) {\n            throw new ProductNotFoundException();\n          }\n          break;\n\n        case PrismaError.RecordsNotFound:\n          if (this.isUserError(error)) {\n            throw new UserNotFoundException();\n          }\n\n          if (this.isProductError(error)) {\n            throw new ProductNotFoundException();\n          }\n\n          if (this.isCreateProductError(error)) {\n            throw new CategoryNotFoundException();\n          }\n\n          if (this.isCategoryError(error)) {\n            throw new CategoryNotFoundException();\n          }\n\n          if (this.isPurchaseError(error)) {\n            throw new PurchaseNotFoundException();\n          }\n          break;\n\n        default:\n          throw error;\n      }\n    }\n\n    if (this.isPrismaUnknownError(error)) {\n      if (error.message === 'No Product found') {\n        throw new ProductNotFoundException();\n      }\n\n      if (error.message === 'No Category found') {\n        throw new CategoryNotFoundException();\n      }\n\n      if (error.message === 'No Purchase found') {\n        throw new PurchaseNotFoundException();\n      }\n    }\n\n    throw error;\n  }\n\n  /** Checks if the error contains clientVersion,\n   * making it an unknown prisma error\n   * */\n  private isPrismaUnknownError(error): boolean {\n    return !!error.clientVersion;\n  }\n\n  /** Returns wether the error happened in the email field or not */\n  private isEmailConstraintViolation(errorMeta: object): boolean {\n    return Object.values(errorMeta)[0][0] === 'email';\n  }\n\n  /** Returns wether the error happened in the product name field or not */\n  private isProductNameConstraintViolation(\n    error: PrismaClientKnownRequestError,\n  ): boolean {\n    return (\n      (Object.values(error.meta)[0][0] === 'name' ||\n        Object.values(error.meta)[0][0] === 'urlName') &&\n      error.message.includes('prisma.product')\n    );\n  }\n\n  /** Returns wether the error happened in the category name field or not */\n  private isCategoryNameConstraintViolation(\n    error: PrismaClientKnownRequestError,\n  ): boolean {\n    return (\n      Object.values(error.meta)[0][0] === 'name' &&\n      error.message.includes('prisma.category')\n    );\n  }\n\n  /** Returns wether the error happened on an user prisma query or not */\n  private isUserError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.user');\n  }\n\n  /** Returns wether the error happened on an update or delete product prisma query or not */\n  private isProductError(error: PrismaClientKnownRequestError): boolean {\n    return (\n      error.message.includes('prisma.product.update') ||\n      error.message.includes('prisma.product.delete')\n    );\n  }\n\n  /** Returns wether the error happened on an create product prisma query or not */\n  private isCreateProductError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.product.create');\n  }\n\n  /** Returns wether the error happened on an category prisma query or not */\n  private isCategoryError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.category');\n  }\n\n  /** Returns wether the error happened on an purchase prisma query or not */\n  private isPurchaseError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.purchase');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n            \n                Description\n            \n            \n                ORM responsible for connecting to the database\nBoilerplate from https://docs.nestjs.com/recipes/prisma\n\n            \n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:25\n                \n            \n\n\n            \n                \n                    Prisma interferes with NestJS enableShutdownHooks.\nPrisma listens for shutdown signals and will call process.exit()\nbefore your application shutdown hooks fire.\nhttps://docs.nestjs.com/recipes/prisma\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:15\n                \n            \n\n\n            \n                \n                    Optional — if you leave it out,\nPrisma will connect lazily on its first call to the database.\nhttps://docs.nestjs.com/recipes/prisma\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n/** ORM responsible for connecting to the database\n *\n * Boilerplate from https://docs.nestjs.com/recipes/prisma\n */\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  /** Optional — if you leave it out,\n   * Prisma will connect lazily on its first call to the database.\n   *\n   * https://docs.nestjs.com/recipes/prisma\n   */\n  async onModuleInit(): Promise {\n    await this.$connect();\n  }\n\n  /** Prisma interferes with NestJS enableShutdownHooks.\n   * Prisma listens for shutdown signals and will call process.exit()\n   * before your application shutdown hooks fire.\n   *\n   * https://docs.nestjs.com/recipes/prisma\n   */\n  async enableShutdownHooks(app: INestApplication): Promise {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Product.html":{"url":"classes/Product.html","title":"class - Product","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/entities/product.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of a Product in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                basePrice\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                discountPercentage\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                picture\n                            \n                            \n                                    Optional\n                                stock\n                            \n                            \n                                urlName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        basePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Prisma.Decimal\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:35\n                        \n                    \n\n            \n                \n                    Product price not considering discounts.\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:58\n                        \n                    \n\n            \n                \n                    Product createdAt dateString\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:52\n                        \n                    \n\n            \n                \n                    Product description\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        discountPercentage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:41\n                        \n                    \n\n            \n                \n                    Product discount in percentage. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:9\n                        \n                    \n\n            \n                \n                    Product ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:15\n                        \n                    \n\n            \n                \n                    Product name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:27\n                        \n                    \n\n            \n                \n                    Product picture\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:46\n                        \n                    \n\n            \n                \n                    Product stock amount. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        urlName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:21\n                        \n                    \n\n            \n                \n                    Product name turned to url\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\n/** Describes the properties of a Product in the database */\nexport class Product implements Prisma.ProductUncheckedCreateInput {\n  /**\n   * Product ID as UUID\n   * @example \"6f4ca8a4-8aa0-4302-ac1b-7b5547f01b0a\"\n   */\n  id?: string;\n\n  /**\n   * Product name\n   * @example \"Brand black wheelchair\"\n   */\n  name: string;\n\n  /**\n   * Product name turned to url\n   * @example \"brand-black-wheelchair\"\n   */\n  urlName: string;\n\n  /**\n   * Product picture\n   * @example \"image.jpg\"\n   */\n  picture?: string;\n\n  /**\n   * Product price not considering discounts.\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 70.00\n   */\n  basePrice: string | number | Prisma.Decimal;\n\n  /**\n   * Product discount in percentage. Defaults to 0\n   * @example 10\n   */\n  discountPercentage?: number;\n\n  /** Product stock amount. Defaults to 0\n   * @example 42\n   */\n  stock?: number;\n\n  /**\n   * Product description\n   * @example \"Black wheelchair for offices\"\n   */\n  description?: string;\n\n  /**\n   * Product createdAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  createdAt?: string | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductController.html":{"url":"controllers/ProductController.html","title":"controller - ProductController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                product\n            \n\n\n            \n                Description\n            \n            \n                Exposes product CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOneById\n                            \n                            \n                                findOneByUrlName\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                uploadPhoto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createProductDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin creates a new product'})@IsAdmin()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:38\n                \n            \n\n\n            \n                \n                    Creates a new product, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(findAllProductsDto: FindProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns all products'})@Public()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:50\n                \n            \n\n\n            \n                \n                    Returns all products with pagination\nDefault is starting on page 1 showing 10 results per page,\nsearching and ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findAllProductsDto\n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin gets product by ID'})@IsAdmin()@Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:58\n                \n            \n\n\n            \n                \n                    Find product by ID, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByUrlName\n                        \n                    \n                \n            \n            \n                \nfindOneByUrlName(urlName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Gets product by urlName'})@Public()@Get(':urlName')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:66\n                \n            \n\n\n            \n                \n                    Find product by Url Name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    urlName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin deletes product'})@IsAdmin()@Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:104\n                \n            \n\n\n            \n                \n                    Deletes product from database, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin updates product'})@IsAdmin()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:92\n                \n            \n\n\n            \n                \n                    Updates product information, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadPhoto\n                        \n                    \n                \n            \n            \n                \nuploadPhoto(id: string, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin uploads a new product picture'})@IsAdmin()@FileUpload()@Patch('picture/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:81\n                \n            \n\n\n            \n                \n                    Admin uploads a new picture for the product.\nNeeds to be type jpeg, jpg or png and maximum 3MB.\nCheck \nmulterUploadConfig file in the docs.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UploadedFile,\n} from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Public } from 'src/auth/public.decorator';\nimport { FileUpload } from 'src/common/decorators/file-upload.decorator';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { FindProductsDto } from './dto/find-products.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { Product } from './entities/product.entity';\nimport { ProductService } from './product.service';\n\n/** Exposes product CRUD endpoints */\n@ApiTags('product')\n@Controller('product')\nexport class ProductController {\n  /** Exposes product CRUD endpoints\n   *\n   * Instantiate class and ProductService dependency\n   */\n  constructor(private readonly productService: ProductService) {}\n\n  /** Creates a new product, only for admins */\n  @ApiOperation({ summary: 'Admin creates a new product' })\n  @IsAdmin()\n  @Post()\n  create(@Body() createProductDto: CreateProductDto): Promise {\n    return this.productService.create(createProductDto);\n  }\n\n  /** Returns all products with pagination\n   *\n   * Default is starting on page 1 showing 10 results per page,\n   * searching and ordering by name\n   */\n  @ApiOperation({ summary: 'Returns all products' })\n  @Public()\n  @Get()\n  findAll(@Query() findAllProductsDto: FindProductsDto): Promise {\n    return this.productService.findAll(findAllProductsDto);\n  }\n\n  /** Find product by ID, only for admins */\n  @ApiOperation({ summary: 'Admin gets product by ID' })\n  @IsAdmin()\n  @Get('/id/:id')\n  findOneById(@Param('id') id: string): Promise {\n    return this.productService.findOneById(id);\n  }\n\n  /** Find product by Url Name */\n  @ApiOperation({ summary: 'Gets product by urlName' })\n  @Public()\n  @Get(':urlName')\n  findOneByUrlName(@Param('urlName') urlName: string): Promise {\n    return this.productService.findOneByUrlName(urlName);\n  }\n\n  /**\n   * Admin uploads a new picture for the product.\n   * Needs to be type jpeg, jpg or png and maximum 3MB.\n   *\n   * Check \n   * multerUploadConfig file in the docs.\n   */\n  @ApiOperation({ summary: 'Admin uploads a new product picture' })\n  @IsAdmin()\n  @FileUpload()\n  @Patch('picture/:id')\n  uploadPhoto(\n    @Param('id') id: string,\n    @UploadedFile() file: Express.Multer.File,\n  ): Promise {\n    return this.productService.uploadPicture(id, file);\n  }\n\n  /** Updates product information, only for admins */\n  @ApiOperation({ summary: 'Admin updates product' })\n  @IsAdmin()\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateProductDto: UpdateProductDto,\n  ): Promise {\n    return this.productService.update(id, updateProductDto);\n  }\n\n  /** Deletes product from database, only for admins */\n  @ApiOperation({ summary: 'Admin deletes product' })\n  @IsAdmin()\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  remove(@Param('id') id: string): Promise {\n    return this.productService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductModule.html":{"url":"modules/ProductModule.html","title":"module - ProductModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_ProductModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nPrismaModule->ProductModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/product/product.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductService } from './product.service';\nimport { ProductController } from './product.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { multerUploadConfig } from 'src/config/multer-upload.config';\n\n@Module({\n  controllers: [ProductController],\n  imports: [PrismaModule, MulterModule.register(multerUploadConfig)],\n  providers: [ProductService],\n})\nexport class ProductModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductNameInUseException.html":{"url":"classes/ProductNameInUseException.html","title":"class - ProductNameInUseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductNameInUseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/product/product-name-in-use.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\na product name that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/product/product-name-in-use.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'Product name already in use'. Used when the user inputs\na product name that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * a product name that is already registered in the system\n */\nexport class ProductNameInUseException extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'Product name already in use'. Used when the user inputs\n   * a product name that is already registered in the system\n   */\n  constructor() {\n    super('Product name already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductNotFoundException.html":{"url":"classes/ProductNotFoundException.html","title":"class - ProductNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/product/product-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\na product that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/product/product-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'Product not found'. Used when the user inputs\na product that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * a product that is not registered in the system\n */\nexport class ProductNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'Product not found'. Used when the user inputs\n   * a product that is not registered in the system\n   */\n  constructor() {\n    super('Product not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductService.html":{"url":"injectables/ProductService.html","title":"injectable - ProductService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/product.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing products in the database.\nCRUD endpoints are available for products.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                connectCategoriesById\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUrlName\n                            \n                            \n                                    Private\n                                formatUrlName\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Private\n                                updateProductAndUrlName\n                            \n                            \n                                    Async\n                                uploadPicture\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/product/product.service.ts:13\n                            \n                        \n\n                \n                    \n                            Responsible for managing products in the database.\nCRUD endpoints are available for products.\nInstantiates the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        connectCategoriesById\n                        \n                    \n                \n            \n            \n                \n                    \n                    connectCategoriesById(categories: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:143\n                \n            \n\n\n            \n                \n                    Format the categories IDs array into the prisma query way\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categories\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Prisma.CategoryUncheckedCreateNestedManyWithoutProductsInput\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createProductDto: CreateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:22\n                \n            \n\n\n            \n                \n                    Creates a new product\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: FindProductsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:51\n                \n            \n\n\n            \n                \n                    Returns all products with pagination\nDefault is starting on page 1 showing 10 results per page\nand ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:70\n                \n            \n\n\n            \n                \n                    Find product by ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUrlName(urlName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:79\n                \n            \n\n\n            \n                \n                    Find product by Url Name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    urlName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        formatUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    formatUrlName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:115\n                \n            \n\n\n            \n                \n                    Formats the name to generate an urlName.\nMakes the name lower case, remove leading and trailing white spaces,\nturn to single the multiple spaces between words and make\nsingle spaces hyphens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            &quot; BraNd1    chAir   &quot; becomes &quot;brand1-chair&quot;\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:103\n                \n            \n\n\n            \n                \n                    Removes product from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:88\n                \n            \n\n\n            \n                \n                    Updates product information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        updateProductAndUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProductAndUrlName(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:128\n                \n            \n\n\n            \n                \n                    Formats UrlName and updates the product with the new one.\nUsed when the user updates the product name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPicture\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPicture(id: string, file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:40\n                \n            \n\n\n            \n                \n                    Uploads new product picture\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { FindProductsDto } from './dto/find-products.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { Product } from './entities/product.entity';\n\n/** Responsible for managing products in the database.\n * CRUD endpoints are available for products.\n */\n@Injectable()\nexport class ProductService {\n  /** Responsible for managing products in the database.\n   * CRUD endpoints are available for products.\n   *\n   * Instantiates the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new product */\n  async create(createProductDto: CreateProductDto): Promise {\n    const urlName = this.formatUrlName(createProductDto.name);\n\n    const categories = this.connectCategoriesById(createProductDto.categories);\n\n    const product = await this.prisma.product.create({\n      data: {\n        ...createProductDto,\n        urlName,\n        categories,\n      },\n      include: { categories: { select: { name: true } } },\n    });\n\n    return product;\n  }\n\n  /** Uploads new product picture */\n  async uploadPicture(id: string, file: Express.Multer.File): Promise {\n    return this.prisma.product.update({\n      where: { id },\n      data: { picture: file.filename },\n    });\n  }\n\n  /** Returns all products with pagination\n   * Default is starting on page 1 showing 10 results per page\n   * and ordering by name\n   */\n  async findAll({\n    productName = '',\n    page = 1,\n    offset = 10,\n  }: FindProductsDto): Promise {\n    const productsToSkip = (page - 1) * offset;\n\n    return this.prisma.product.findMany({\n      skip: productsToSkip,\n      take: offset,\n      where: {\n        name: { contains: productName, mode: 'insensitive' },\n      },\n      orderBy: { name: 'asc' },\n      include: { categories: { select: { name: true } } },\n    });\n  }\n\n  /** Find product by ID */\n  async findOneById(id: string): Promise {\n    return this.prisma.product.findUnique({\n      where: { id },\n      include: { categories: { select: { name: true } } },\n      rejectOnNotFound: true,\n    });\n  }\n\n  /** Find product by Url Name */\n  async findOneByUrlName(urlName: string): Promise {\n    return this.prisma.product.findUnique({\n      where: { urlName },\n      include: { categories: { select: { name: true } } },\n      rejectOnNotFound: true,\n    });\n  }\n\n  /** Updates product information */\n  async update(\n    id: string,\n    updateProductDto: UpdateProductDto,\n  ): Promise {\n    if (updateProductDto.name) {\n      return this.updateProductAndUrlName(id, updateProductDto);\n    }\n\n    return this.prisma.product.update({\n      where: { id },\n      data: { ...updateProductDto },\n    });\n  }\n\n  /** Removes product from database */\n  async remove(id: string): Promise {\n    await this.prisma.product.delete({ where: { id } });\n  }\n\n  /** Formats the name to generate an urlName.\n   *\n   * Makes the name lower case, remove leading and trailing white spaces,\n   * turn to single the multiple spaces between words and make\n   * single spaces hyphens\n   *\n   * @example \" BraNd1    chAir   \" becomes \"brand1-chair\"\n   */\n  private formatUrlName(name: string): string {\n    const lowerCaseUrlName = name.toLocaleLowerCase();\n    const trimmedUrlName = lowerCaseUrlName.trim();\n    const singleSpaceUrlName = trimmedUrlName.replace(/\\s\\s+/g, ' ');\n    const spaceToHyphenUrlName = singleSpaceUrlName.split(' ').join('-');\n\n    return spaceToHyphenUrlName;\n  }\n\n  /** Formats UrlName and updates the product with the new one.\n   *\n   * Used when the user updates the product name.\n   */\n  private updateProductAndUrlName(\n    id: string,\n    updateProductDto: UpdateProductDto,\n  ): Promise {\n    const urlName = this.formatUrlName(updateProductDto.name);\n\n    return this.prisma.product.update({\n      where: { id },\n      data: { ...updateProductDto, urlName },\n    });\n  }\n\n  /**\n   * Format the categories IDs array into the prisma query way\n   */\n  private connectCategoriesById(\n    categories: string[],\n  ): Prisma.CategoryUncheckedCreateNestedManyWithoutProductsInput {\n    let categoriesConnection = { connect: [] };\n\n    if (categories) {\n      categoriesConnection = {\n        connect: categories.map((category) => {\n          return { id: category };\n        }),\n      };\n    }\n\n    return categoriesConnection;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductServiceInputException.html":{"url":"classes/ProductServiceInputException.html","title":"class - ProductServiceInputException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductServiceInputException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/exceptions/product-service-input.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to extend another exception to make it\ninstanceof ProductServiceInputException\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/product/exceptions/product-service-input.exception.ts:5\n                            \n                        \n\n                \n                    \n                            Used to extend another exception to make it\ninstanceof ProductServiceInputException\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ProductServiceInputException extends Error {\n  /**\n   * Used to extend another exception to make it\n   * instanceof ProductServiceInputException\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Purchase.html":{"url":"classes/Purchase.html","title":"class - Purchase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Purchase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/entities/purchase.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of a Purchase in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                amount\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                productId\n                            \n                            \n                                    Optional\n                                reviewComment\n                            \n                            \n                                    Optional\n                                reviewNote\n                            \n                            \n                                totalPrice\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:24\n                        \n                    \n\n            \n                \n                    Amount purchased of the product\nDefaults to 1\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:46\n                        \n                    \n\n            \n                \n                    Purchase createdAt dateString\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:8\n                        \n                    \n\n            \n                \n                    Purchase ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:18\n                        \n                    \n\n            \n                \n                    Product ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        reviewComment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:41\n                        \n                    \n\n            \n                \n                    Product review comment\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        reviewNote\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:36\n                        \n                    \n\n            \n                \n                    Product review note, from 1 to 5\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Prisma.Decimal\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:31\n                        \n                    \n\n            \n                \n                    Price payed per product multiplied by the amount\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:13\n                        \n                    \n\n            \n                \n                    User ID as UUID\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\n/** Describes the properties of a Purchase in the database */\nexport class Purchase implements Prisma.PurchaseUncheckedCreateInput {\n  /** Purchase ID as UUID\n   * @example \"b076f72e-f70b-4368-949e-1811c405c0f7\"\n   */\n  id?: string;\n\n  /** User ID as UUID\n   * @example \"a04bb2db-fecd-4889-979e-95f273eb70e1\"\n   */\n  userId: string;\n\n  /** Product ID as UUID\n   * @example \"5c68ae94-bf3e-4fde-b01f-25d18b3976a0\"\n   */\n  productId: string;\n\n  /** Amount purchased of the product\n   * Defaults to 1\n   * @example 2\n   */\n  amount?: number;\n\n  /** Price payed per product multiplied by the amount\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 138.75\n   */\n  totalPrice: string | number | Prisma.Decimal;\n\n  /** Product review note, from 1 to 5\n   * @example 5\n   */\n  reviewNote?: number;\n\n  /** Product review comment\n   * @example \"Amazing wheelchair!\"\n   */\n  reviewComment?: string;\n\n  /** Purchase createdAt dateString\n   * @example \"2022-05-13T15:41:28.527Z\"\n   */\n  createdAt?: string | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PurchaseController.html":{"url":"controllers/PurchaseController.html","title":"controller - PurchaseController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PurchaseController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/purchase.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                purchase\n            \n\n\n            \n                Description\n            \n            \n                Exposes purchase CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllMine\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                review\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(request: Request, createPurchaseDto: CreatePurchaseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new purchase'})@ApiBearerAuth()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:38\n                \n            \n\n\n            \n                \n                    Creates a new purchase, only for logged users\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPurchaseDto\n                                    \n                                                CreatePurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(findPurchasesDto: FindPurchasesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin gets all purchases'})@IsAdmin()@Get('/admin')\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:55\n                \n            \n\n\n            \n                \n                    Returns all purchases with pagination, only for admins\nDefault is starting on page 1 showing 10 results per page,\nmatching by userId and/or productId and ordering by most recent date\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findPurchasesDto\n                                    \n                                                FindPurchasesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllMine\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllMine(request: Request, findPurchasesDto: FindPurchasesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'User gets all their purchases'})@ApiBearerAuth()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:69\n                \n            \n\n\n            \n                \n                    Returns all users' purchases with pagination,\nDefault is starting on page 1 showing 10 results per page,\nmatching by productId and ordering by most recent date\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    findPurchasesDto\n                                    \n                                                FindPurchasesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(request: Request, purchaseId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns purchase by ID'})@ApiBearerAuth()@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:85\n                \n            \n\n\n            \n                \n                    Find purchase by ID, normal users can only get their purchases,\nAdmins can get any.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    purchaseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin deletes purchase'})@IsAdmin()@Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:127\n                \n            \n\n\n            \n                \n                    Deletes purchase from database, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        review\n                        \n                    \n                \n            \n            \n                \n                    \n                    review(request: Request, purchaseId: string, reviewPurchaseDto: ReviewPurchaseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Reviews purchased product'})@ApiBearerAuth()@Patch('/review/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:101\n                \n            \n\n\n            \n                \n                    Reviews purchased product, must be purchase owner\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    purchaseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reviewPurchaseDto\n                                    \n                                                ReviewPurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updatePurchaseDto: UpdatePurchaseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin updates purchase'})@IsAdmin()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:115\n                \n            \n\n\n            \n                \n                    Updates purchase information, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePurchaseDto\n                                    \n                                                UpdatePurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  Query,\n  Req,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { CreatePurchaseDto } from './dto/create-purchase.dto';\nimport { FindPurchasesDto } from './dto/find-purchases.dto';\nimport { ReviewPurchaseDto } from './dto/review-purchase.dto';\nimport { UpdatePurchaseDto } from './dto/update-purchase.dto';\nimport { Purchase } from './entities/purchase.entity';\nimport { PurchaseService } from './purchase.service';\n\n/** Exposes purchase CRUD endpoints */\n@ApiTags('purchase')\n@Controller('purchase')\nexport class PurchaseController {\n  /** Exposes purchase CRUD endpoints\n   *\n   * Instantiate class and PurchaseService dependency\n   */\n  constructor(private readonly purchaseService: PurchaseService) {}\n\n  /** Creates a new purchase, only for logged users */\n  @ApiOperation({ summary: 'Creates a new purchase' })\n  @ApiBearerAuth()\n  @Post()\n  async create(\n    @Req() request: Request,\n    @Body() createPurchaseDto: CreatePurchaseDto,\n  ): Promise {\n    const { userId } = request.user as { userId: string };\n\n    return this.purchaseService.create(userId, createPurchaseDto);\n  }\n\n  /** Returns all purchases with pagination, only for admins\n   *\n   * Default is starting on page 1 showing 10 results per page,\n   * matching by userId and/or productId and ordering by most recent date\n   */\n  @ApiOperation({ summary: 'Admin gets all purchases' })\n  @IsAdmin()\n  @Get('/admin')\n  async findAll(\n    @Query() findPurchasesDto: FindPurchasesDto,\n  ): Promise {\n    return this.purchaseService.findAll(findPurchasesDto);\n  }\n\n  /** Returns all users' purchases with pagination,\n   *\n   * Default is starting on page 1 showing 10 results per page,\n   * matching by productId and ordering by most recent date\n   */\n  @ApiOperation({ summary: 'User gets all their purchases' })\n  @ApiBearerAuth()\n  @Get()\n  async findAllMine(\n    @Req() request: Request,\n    @Query() findPurchasesDto: FindPurchasesDto,\n  ): Promise {\n    const { userId } = request.user as { userId: string };\n    findPurchasesDto.userId = userId;\n\n    return this.purchaseService.findAll(findPurchasesDto);\n  }\n\n  /** Find purchase by ID, normal users can only get their purchases,\n   * Admins can get any.\n   */\n  @ApiOperation({ summary: 'Returns purchase by ID' })\n  @ApiBearerAuth()\n  @Get(':id')\n  async findOne(\n    @Req() request: Request,\n    @Param('id') purchaseId: string,\n  ): Promise {\n    const { userId, userRole } = request.user as {\n      userId: string;\n      userRole: string;\n    };\n\n    return this.purchaseService.findOne(purchaseId, userId, userRole);\n  }\n\n  /** Reviews purchased product, must be purchase owner */\n  @ApiOperation({ summary: 'Reviews purchased product' })\n  @ApiBearerAuth()\n  @Patch('/review/:id')\n  async review(\n    @Req() request: Request,\n    @Param('id') purchaseId: string,\n    @Body() reviewPurchaseDto: ReviewPurchaseDto,\n  ): Promise {\n    const { userId } = request.user as { userId: string };\n\n    return this.purchaseService.review(userId, purchaseId, reviewPurchaseDto);\n  }\n\n  /** Updates purchase information, only for admins */\n  @ApiOperation({ summary: 'Admin updates purchase' })\n  @IsAdmin()\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updatePurchaseDto: UpdatePurchaseDto,\n  ): Promise {\n    return this.purchaseService.update(id, updatePurchaseDto);\n  }\n\n  /** Deletes purchase from database, only for admins */\n  @ApiOperation({ summary: 'Admin deletes purchase' })\n  @IsAdmin()\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async remove(@Param('id') id: string): Promise {\n    return this.purchaseService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PurchaseModule.html":{"url":"modules/PurchaseModule.html","title":"module - PurchaseModule","body":"\n                   \n\n\n\n\n    Modules\n    PurchaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PurchaseModule\n\n\n\ncluster_PurchaseModule_imports\n\n\n\ncluster_PurchaseModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPurchaseModule\n\nPurchaseModule\n\nPurchaseModule -->\n\nPrismaModule->PurchaseModule\n\n\n\n\n\nPurchaseService\n\nPurchaseService\n\nPurchaseModule -->\n\nPurchaseService->PurchaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/purchase/purchase.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PurchaseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PurchaseController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PurchaseService } from './purchase.service';\nimport { PurchaseController } from './purchase.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\n\n@Module({\n  controllers: [PurchaseController],\n  imports: [PrismaModule],\n  providers: [PurchaseService],\n})\nexport class PurchaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PurchaseNotFoundException.html":{"url":"classes/PurchaseNotFoundException.html","title":"class - PurchaseNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PurchaseNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/purchase/purchase-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\na purchase that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/purchase/purchase-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'Purchase not found'. Used when the user inputs\na purchase that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * a purchase that is not registered in the system\n */\nexport class PurchaseNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'Purchase not found'. Used when the user inputs\n   * a purchase that is not registered in the system\n   */\n  constructor() {\n    super('Purchase not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PurchaseService.html":{"url":"injectables/PurchaseService.html","title":"injectable - PurchaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PurchaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/purchase.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing purchases in the database.\nCRUD endpoints are available for purchases.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                review\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/purchase/purchase.service.ts:15\n                            \n                        \n\n                \n                    \n                            Responsible for managing purchases in the database.\nCRUD endpoints are available for purchases.\nInstantiates the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userId: string, createPurchaseDto: CreatePurchaseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:24\n                \n            \n\n\n            \n                \n                    Creates a new purchase\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPurchaseDto\n                                    \n                                                CreatePurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: FindPurchasesDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:43\n                \n            \n\n\n            \n                \n                    Returns all purchases with pagination\nDefault is starting on page 1 showing 10 results per page\nand ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindPurchasesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(purchaseId: string, userId: string, userRole: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:71\n                \n            \n\n\n            \n                \n                    Find purchase by ID, normal users can only get their purchases,\nAdmins can get any.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    purchaseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userRole\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:135\n                \n            \n\n\n            \n                \n                    Removes purchase from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        review\n                        \n                    \n                \n            \n            \n                \n                    \n                    review(userId: string, purchaseId: string, reviewPurchaseDto: ReviewPurchaseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:93\n                \n            \n\n\n            \n                \n                    Users review products purchased by them\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    purchaseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reviewPurchaseDto\n                                    \n                                                ReviewPurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updatePurchaseDto: UpdatePurchaseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:118\n                \n            \n\n\n            \n                \n                    Updates purchase information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePurchaseDto\n                                    \n                                                UpdatePurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Role } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreatePurchaseDto } from './dto/create-purchase.dto';\nimport { FindPurchasesDto } from './dto/find-purchases.dto';\nimport { ReviewPurchaseDto } from './dto/review-purchase.dto';\nimport { UpdatePurchaseDto } from './dto/update-purchase.dto';\nimport { Purchase } from './entities/purchase.entity';\nimport { NotPurchaseOwnerException } from './exceptions/not-purchase-owner.exception';\n\n/** Responsible for managing purchases in the database.\n * CRUD endpoints are available for purchases.\n */\n@Injectable()\nexport class PurchaseService {\n  /** Responsible for managing purchases in the database.\n   * CRUD endpoints are available for purchases.\n   *\n   * Instantiates the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new purchase */\n  async create(\n    userId: string,\n    createPurchaseDto: CreatePurchaseDto,\n  ): Promise {\n    const purchase = await this.prisma.purchase.create({\n      data: { ...createPurchaseDto, userId },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n    });\n\n    return purchase;\n  }\n\n  /** Returns all purchases with pagination\n   * Default is starting on page 1 showing 10 results per page\n   * and ordering by name\n   */\n  async findAll({\n    userId,\n    productId,\n    page = 1,\n    offset = 10,\n  }: FindPurchasesDto): Promise {\n    const purchasesToSkip = (page - 1) * offset;\n\n    const purchases = await this.prisma.purchase.findMany({\n      skip: purchasesToSkip,\n      take: offset,\n      where: {\n        userId: { equals: userId },\n        productId: { equals: productId },\n      },\n      orderBy: { createdAt: 'desc' },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n    });\n\n    return purchases;\n  }\n\n  /** Find purchase by ID, normal users can only get their purchases,\n   * Admins can get any.\n   */\n  async findOne(\n    purchaseId: string,\n    userId: string,\n    userRole: string,\n  ): Promise {\n    const purchase = await this.prisma.purchase.findUnique({\n      where: { id: purchaseId },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n      rejectOnNotFound: true,\n    });\n\n    if (userRole !== Role.ADMIN && purchase.userId !== userId) {\n      throw new NotPurchaseOwnerException();\n    }\n\n    return purchase;\n  }\n\n  /** Users review products purchased by them */\n  async review(\n    userId: string,\n    purchaseId: string,\n    reviewPurchaseDto: ReviewPurchaseDto,\n  ): Promise {\n    const purchase = await this.prisma.purchase.findUnique({\n      where: { id: purchaseId },\n      rejectOnNotFound: true,\n    });\n\n    if (userId !== purchase.userId) {\n      throw new NotPurchaseOwnerException();\n    }\n\n    return this.prisma.purchase.update({\n      where: { id: purchaseId },\n      data: { ...reviewPurchaseDto },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n    });\n  }\n\n  /** Updates purchase information */\n  async update(\n    id: string,\n    updatePurchaseDto: UpdatePurchaseDto,\n  ): Promise {\n    const purchase = await this.prisma.purchase.update({\n      where: { id },\n      data: { ...updatePurchaseDto },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n    });\n\n    return purchase;\n  }\n\n  /** Removes purchase from database */\n  async remove(id: string): Promise {\n    await this.prisma.purchase.delete({ where: { id } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PurchaseServiceInputException.html":{"url":"classes/PurchaseServiceInputException.html","title":"class - PurchaseServiceInputException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PurchaseServiceInputException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/exceptions/purchase-service-input.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to extend another exception to make it\ninstanceof PurchaseServiceInputException\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/purchase/exceptions/purchase-service-input.exception.ts:5\n                            \n                        \n\n                \n                    \n                            Used to extend another exception to make it\ninstanceof PurchaseServiceInputException\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PurchaseServiceInputException extends Error {\n  /**\n   * Used to extend another exception to make it\n   * instanceof PurchaseServiceInputException\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReviewPurchaseDto.html":{"url":"classes/ReviewPurchaseDto.html","title":"class - ReviewPurchaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReviewPurchaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/dto/review-purchase.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to review a Purchase\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                reviewComment\n                            \n                            \n                                reviewNote\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        reviewComment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/review-purchase.dto.ts:23\n                        \n                    \n\n            \n                \n                    Product review comment\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reviewNote\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)@Max(5)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/review-purchase.dto.ts:16\n                        \n                    \n\n            \n                \n                    Product review note, from 1 to 5\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { IsInt, IsOptional, IsString, Max, Min } from 'class-validator';\nimport { Purchase } from '../entities/purchase.entity';\n\n/** Describes the fields needed to review a Purchase */\nexport class ReviewPurchaseDto extends PickType(Purchase, [\n  'reviewNote',\n  'reviewComment',\n]) {\n  /** Product review note, from 1 to 5\n   * @example 5\n   */\n  @IsInt()\n  @Min(1)\n  @Max(5)\n  reviewNote: number;\n\n  /** Product review comment\n   * @example \"Amazing wheelchair!\"\n   */\n  @IsString()\n  @IsOptional()\n  reviewComment?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/roles.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Checks if the user accessing the route is an admin\nFor more on NestJs Guards: https://docs.nestjs.com/guards\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/roles.guard.ts:12\n                            \n                        \n\n                \n                    \n                            Checks if the user accessing the route is an admin\nFor more on NestJs Guards: https://docs.nestjs.com/guards\nInstantiates the class and the Reflector dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guards/roles.guard.ts:22\n                \n            \n\n\n            \n                \n                    If the user is an Admin, access is allowed\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '@prisma/client';\nimport { Observable } from 'rxjs';\nimport { IS_ADMIN_KEY } from '../decorators/is-admin.decorator';\n\n/** Checks if the user accessing the route is an admin\n *\n * For more on NestJs Guards: https://docs.nestjs.com/guards\n */\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  /** Checks if the user accessing the route is an admin\n   *\n   * For more on NestJs Guards: https://docs.nestjs.com/guards\n   *\n   * Instantiates the class and the Reflector dependency\n   */\n  constructor(private reflector: Reflector) {}\n\n  /** If the user is an Admin, access is allowed */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const isAdmin = this.reflector.getAllAndOverride(IS_ADMIN_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    const request = context.switchToHttp().getRequest();\n    const { userRole } = request.user;\n\n    if (isAdmin && userRole === Role.ADMIN) {\n      return true;\n    }\n\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/dto/update-category.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the Category fields that are updatable\nNote that since this is a\nPartial of CreateCategoryDto,\nany field there is optional here\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCategoryDto } from './create-category.dto';\n\n/** Describes the Category fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateCategoryDto,\n * any field there is optional here\n */\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/update-product.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the Product fields that are updatable\nNote that since this is a\nPartial of CreateProductDto,\nany field there is optional here\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateProductDto } from './create-product.dto';\n\n/** Describes the Product fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateProductDto,\n * any field there is optional here\n */\nexport class UpdateProductDto extends PartialType(CreateProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePurchaseDto.html":{"url":"classes/UpdatePurchaseDto.html","title":"class - UpdatePurchaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePurchaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/dto/update-purchase.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the Purchase fields that are updatable\nNote that since this is a\nPartial of CreatePurchaseDto,\nany field there is optional here\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreatePurchaseDto } from './create-purchase.dto';\n\n/** Describes the Purchase fields that are updatable\n *\n * Note that since this is a\n * Partial of CreatePurchaseDto,\n * any field there is optional here\n */\nexport class UpdatePurchaseDto extends PartialType(CreatePurchaseDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the User fields that are updatable\nNote that since this is a\nPartial of CreateUserDto,\nany field there is optional here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                currentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user.dto.ts:19\n                        \n                    \n\n            \n                \n                    User current password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\n\n/** Describes the User fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateUserDto,\n * any field there is optional here\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n  /**\n   * User current password\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  currentPassword?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserRoleDto.html":{"url":"classes/UpdateUserRoleDto.html","title":"class - UpdateUserRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/update-user-role.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to update an User role\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user-role.dto.ts:11\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user-role.dto.ts:18\n                        \n                    \n\n            \n                \n                    User new role\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Role } from '@prisma/client';\nimport { IsEmail, IsEnum } from 'class-validator';\n\n/** Describes the information needed to update an User role */\nexport class UpdateUserRoleDto {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsEmail()\n  email: string;\n\n  /**\n   * User new role\n   * @example \"ADMIN\"\n   */\n  @IsEnum(Role)\n  role: Role;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of an User in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                role\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:43\n                        \n                    \n\n            \n                \n                    User address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:49\n                        \n                    \n\n            \n                \n                    User createdAt dateString\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:25\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:9\n                        \n                    \n\n            \n                \n                    User ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:37\n                        \n                    \n\n            \n                \n                    User name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:31\n                        \n                    \n\n            \n                \n                    User password\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:19\n                        \n                    \n\n            \n                \n                    User's Role.\nCan be \"USER\" or \"ADMIN\".\nAdmin users can handle products\nDefaults to \"USER\"\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:55\n                        \n                    \n\n            \n                \n                    User updatedAt dateString\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma, Role } from '@prisma/client';\n\n/** Describes the properties of an User in the database */\nexport class User implements Prisma.UserUncheckedCreateInput {\n  /**\n   * User ID as UUID\n   * @example \"d31fc56c-7aed-441e-9f7f-151be8d85634\"\n   */\n  id?: string;\n\n  /**\n   * User's Role.\n   * Can be \"USER\" or \"ADMIN\".\n   * Admin users can handle products\n   *\n   * Defaults to \"USER\"\n   * @example \"USER\"\n   */\n  role?: Role;\n\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  email: string;\n\n  /**\n   * User password\n   * @example \"$2b$10$1XpzUYu8FuvuaBb3SC0xzuR9DX7KakbMLt0vLNoZ.UnLntDMFc4LK\"\n   */\n  password: string;\n\n  /**\n   * User name\n   * @example \"John Doe\"\n   */\n  name?: string;\n\n  /**\n   * User address\n   * @example \"World Street 0\"\n   */\n  address?: string;\n\n  /**\n   * User createdAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  createdAt?: string | Date;\n\n  /**\n   * User updatedAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  updatedAt?: string | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                Exposes user CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                updateUserRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new user'})@Public()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:37\n                \n            \n\n\n            \n                \n                    Creates a new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Gets user's own profile'})@ApiBearerAuth()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:45\n                \n            \n\n\n            \n                \n                    Returns user's own profile information without password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(request: Request, deleteUserDto: DeleteUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes user'})@ApiBearerAuth()@Delete()@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:79\n                \n            \n\n\n            \n                \n                    Deletes user and all user related information from the system\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    deleteUserDto\n                                    \n                                                DeleteUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(request: Request, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates user'})@ApiBearerAuth()@Patch()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:55\n                \n            \n\n\n            \n                \n                    Updates user information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserRole\n                        \n                    \n                \n            \n            \n                \nupdateUserRole(updateUserRoleDto: UpdateUserRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin set user's role'})@IsAdmin()@Patch('role')\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:68\n                \n            \n\n\n            \n                \n                    Updates user role, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserRoleDto\n                                    \n                                                UpdateUserRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Patch,\n  Post,\n  Req,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { Public } from 'src/auth/public.decorator';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { DeleteUserDto } from './dto/delete-user.dto';\nimport { UpdateUserRoleDto } from './dto/update-user-role.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserWithoutPassword } from './entities/user-without-password.entity';\nimport { UserService } from './user.service';\n\n/** Exposes user CRUD endpoints */\n@ApiTags('user')\n@Controller('user')\nexport class UserController {\n  /** Exposes user CRUD endpoints\n   *\n   * Instantiate class and UserService dependency\n   */\n  constructor(private readonly userService: UserService) {}\n\n  /** Creates a new user */\n  @ApiOperation({ summary: 'Creates a new user' })\n  @Public()\n  @Post()\n  create(@Body() createUserDto: CreateUserDto): Promise {\n    return this.userService.create(createUserDto);\n  }\n\n  /** Returns user's own profile information without password */\n  @ApiOperation({ summary: \"Gets user's own profile\" })\n  @ApiBearerAuth()\n  @Get()\n  async findById(@Req() request: Request): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.findById(userId);\n  }\n\n  /** Updates user information */\n  @ApiOperation({ summary: 'Updates user' })\n  @ApiBearerAuth()\n  @Patch()\n  update(\n    @Req() request: Request,\n    @Body() updateUserDto: UpdateUserDto,\n  ): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.update(userId, updateUserDto);\n  }\n\n  /** Updates user role, only for admins */\n  @ApiOperation({ summary: \"Admin set user's role\" })\n  @IsAdmin()\n  @Patch('role')\n  updateUserRole(\n    @Body() updateUserRoleDto: UpdateUserRoleDto,\n  ): Promise {\n    return this.userService.updateUserRole(updateUserRoleDto);\n  }\n\n  /** Deletes user and all user related information from the system */\n  @ApiOperation({ summary: 'Deletes user' })\n  @ApiBearerAuth()\n  @Delete()\n  @HttpCode(HttpStatus.NO_CONTENT)\n  remove(\n    @Req() request: Request,\n    @Body() deleteUserDto: DeleteUserDto,\n  ): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.remove(userId, deleteUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserInputExceptionHandler.html":{"url":"classes/UserInputExceptionHandler.html","title":"class - UserInputExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserInputExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/user-input-exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Catches user input errors and throws the\nrespective HTTP error\n\n            \n\n\n            \n                Implements\n            \n            \n                            ExceptionHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/user-input-exception.handler.ts:14\n                \n            \n\n\n            \n                \n                    Catches user input errors and throws the\nrespective HTTP error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException, NotFoundException } from '@nestjs/common';\nimport { ProductServiceInputException } from 'src/models/product/exceptions/product-service-input.exception';\nimport { PurchaseServiceInputException } from 'src/models/purchase/exceptions/purchase-service-input.exception';\nimport { UserServiceInputException } from 'src/models/user/exceptions/user-service-input.exception';\nimport { ExceptionHandler } from './exception.handler';\n\n/** Catches user input errors and throws the\n * respective HTTP error\n */\nexport class UserInputExceptionHandler implements ExceptionHandler {\n  /** Catches user input errors and throws the\n   * respective HTTP error\n   */\n  handle(error: Error): void {\n    if (error instanceof UserServiceInputException) {\n      throw new BadRequestException(error.message);\n    }\n\n    if (error instanceof ProductServiceInputException) {\n      throw new BadRequestException(error.message);\n    }\n\n    if (error instanceof PurchaseServiceInputException) {\n      throw new NotFoundException(error.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  controllers: [UserController],\n  providers: [UserService],\n  imports: [PrismaModule],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotFoundException.html":{"url":"classes/UserNotFoundException.html","title":"class - UserNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/user/user-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\nan user email or id that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/user/user-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'User not found'. Used when the user inputs an user\nemail or id that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * an user email or id that is not registered in the system\n */\nexport class UserNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'User not found'. Used when the user inputs an user\n   * email or id that is not registered in the system\n   */\n  constructor() {\n    super('User not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing users in the database.\nCRUD endpoints are available for users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Private\n                                    Async\n                                hashIfUpdatingPassword\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateUserRole\n                            \n                            \n                                    Private\n                                    Async\n                                validateCurrentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/user/user.service.ts:18\n                            \n                        \n\n                \n                    \n                            Responsible for managing users in the database.\nCRUD endpoints are available for users.\nInstantiate the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:27\n                \n            \n\n\n            \n                \n                    Creates a new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:60\n                \n            \n\n\n            \n                \n                    Finds user by email and returns the user with password.\nUsed mainly in login to compare if the inputted password matches\nthe hashed one.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:48\n                \n            \n\n\n            \n                \n                    Finds user by id and returns the user without password.\nUsed for default in app requests where the hashed password\nwon't be compared\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        hashIfUpdatingPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashIfUpdatingPassword(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:111\n                \n            \n\n\n            \n                \n                    If the user inputted both new password and current password\nthe new password is hashed to be saved in the database replacing\nthe current one.\nIf only the new password or current password were inputted the user\nprobably forgot about the other one and an error is thrown\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string, deleteUserDto: DeleteUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:98\n                \n            \n\n\n            \n                \n                    Removes user from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    deleteUserDto\n                                    \n                                                DeleteUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:67\n                \n            \n\n\n            \n                \n                    Updates user information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserRole(updateUserRoleDto: UpdateUserRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:84\n                \n            \n\n\n            \n                \n                    Updates user role\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserRoleDto\n                                    \n                                                UpdateUserRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateCurrentPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateCurrentPassword(id: string, currentPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:139\n                \n            \n\n\n            \n                \n                    Compares if the inputted current password matches the\nuser hashed password saved in the database\nIf it doesn't, an error is thrown\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { compare, hash } from 'bcrypt';\nimport { hashConfig } from 'src/config/hash.config';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { DeleteUserDto } from './dto/delete-user.dto';\nimport { UpdateUserRoleDto } from './dto/update-user-role.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserWithoutPassword } from './entities/user-without-password.entity';\nimport { User } from './entities/user.entity';\nimport { InvalidPasswordUpdateException } from './exceptions/invalid-password-update.exception';\nimport { MissingPasswordUpdateException } from './exceptions/missing-password-update.exception';\n\n/** Responsible for managing users in the database.\n * CRUD endpoints are available for users.\n */\n@Injectable()\nexport class UserService {\n  /** Responsible for managing users in the database.\n   * CRUD endpoints are available for users.\n   *\n   * Instantiate the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new user */\n  async create(createUserDto: CreateUserDto): Promise {\n    const hashedPassword = await hash(\n      createUserDto.password,\n      hashConfig.saltRounds,\n    );\n\n    const lowerCaseEmail = createUserDto.email.toLowerCase();\n\n    await this.prisma.user.create({\n      data: {\n        ...createUserDto,\n        email: lowerCaseEmail,\n        password: hashedPassword,\n      },\n    });\n  }\n\n  /** Finds user by id and returns the user without password.\n   * Used for default in app requests where the hashed password\n   * won't be compared\n   */\n  async findById(id: string): Promise {\n    const user = await this.prisma.user.findUnique({ where: { id } });\n\n    delete user.password;\n\n    return { ...user };\n  }\n\n  /** Finds user by email and returns the user with password.\n   * Used mainly in login to compare if the inputted password matches\n   * the hashed one.\n   */\n  async findByEmail(email: string): Promise {\n    const lowerCaseEmail = email.toLowerCase();\n\n    return this.prisma.user.findUnique({ where: { email: lowerCaseEmail } });\n  }\n\n  /** Updates user information */\n  async update(\n    id: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    await this.hashIfUpdatingPassword(id, updateUserDto);\n\n    const user = await this.prisma.user.update({\n      where: { id },\n      data: { ...updateUserDto, updatedAt: new Date() },\n    });\n\n    delete user.password;\n\n    return { ...user };\n  }\n\n  /** Updates user role */\n  async updateUserRole(\n    updateUserRoleDto: UpdateUserRoleDto,\n  ): Promise {\n    const user = await this.prisma.user.update({\n      where: { email: updateUserRoleDto.email },\n      data: { role: updateUserRoleDto.role },\n    });\n\n    delete user.password;\n\n    return user;\n  }\n\n  /** Removes user from database */\n  async remove(id: string, deleteUserDto: DeleteUserDto): Promise {\n    await this.validateCurrentPassword(id, deleteUserDto.currentPassword);\n\n    await this.prisma.user.delete({ where: { id } });\n  }\n\n  /** If the user inputted both new password and current password\n   * the new password is hashed to be saved in the database replacing\n   * the current one.\n   *\n   * If only the new password or current password were inputted the user\n   * probably forgot about the other one and an error is thrown\n   */\n  private async hashIfUpdatingPassword(\n    id: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    if (updateUserDto.password && updateUserDto.currentPassword) {\n      await this.validateCurrentPassword(id, updateUserDto.currentPassword);\n\n      const hashedPassword = await hash(\n        updateUserDto.password,\n        hashConfig.saltRounds,\n      );\n\n      updateUserDto.password = hashedPassword;\n      delete updateUserDto.currentPassword;\n\n      return;\n    }\n\n    if (updateUserDto.password || updateUserDto.currentPassword) {\n      throw new MissingPasswordUpdateException();\n    }\n  }\n\n  /** Compares if the inputted current password matches the\n   * user hashed password saved in the database\n   *\n   * If it doesn't, an error is thrown\n   */\n  private async validateCurrentPassword(\n    id: string,\n    currentPassword: string,\n  ): Promise {\n    const user = await this.prisma.user.findUnique({ where: { id } });\n\n    const isCorrectPassword = await compare(currentPassword, user.password);\n\n    if (!isCorrectPassword) {\n      throw new InvalidPasswordUpdateException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserServiceInputException.html":{"url":"classes/UserServiceInputException.html","title":"class - UserServiceInputException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserServiceInputException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/exceptions/user-service-input.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to extend another exception to make it\ninstanceof UserServiceInputException\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/user/exceptions/user-service-input.exception.ts:5\n                            \n                        \n\n                \n                    \n                            Used to extend another exception to make it\ninstanceof UserServiceInputException\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserServiceInputException extends Error {\n  /**\n   * Used to extend another exception to make it\n   * instanceof UserServiceInputException\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserWithoutPassword.html":{"url":"classes/UserWithoutPassword.html","title":"class - UserWithoutPassword","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserWithoutPassword\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/entities/user-without-password.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This entity is the same as\nUser\nbut omitting the password field\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { User } from './user.entity';\n\n/** This entity is the same as\n * User\n * but omitting the password field\n */\nexport class UserWithoutPassword extends OmitType(User, [\n  'password',\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/access-jwt-auth.guard.ts\n            \n            injectable\n            AccessJwtAuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/access-jwt.strategy.ts\n            \n            injectable\n            AccessJwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/auth/dto/login-credentials.dto.ts\n            \n            class\n            LoginCredentialsDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login.response.ts\n            \n            class\n            LoginResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dto/logout.dto.ts\n            \n            class\n            LogoutDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/errors/invalid-email-or-password.error..ts\n            \n            class\n            InvalidEmailOrPasswordError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/file-upload.decorator.ts\n            \n            function\n            FileUpload\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/is-admin.decorator.ts\n            \n            function\n            IsAdmin\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/is-admin.decorator.ts\n            \n            variable\n            IS_ADMIN_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/exceptions/category/category-name-in-use.exception.ts\n            \n            class\n            CategoryNameInUseException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/category/category-not-found.exception.ts\n            \n            class\n            CategoryNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/product/product-name-in-use.exception.ts\n            \n            class\n            ProductNameInUseException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/product/product-not-found.exception.ts\n            \n            class\n            ProductNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/purchase/purchase-not-found.exception.ts\n            \n            class\n            PurchaseNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/user/email-in-use.exception.ts\n            \n            class\n            EmailInUseException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/user/user-not-found.exception.ts\n            \n            class\n            UserNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/exception.interceptor.ts\n            \n            injectable\n            ExceptionInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/exception.handler.ts\n            \n            interface\n            ExceptionHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/prisma-exception.handler.ts\n            \n            class\n            PrismaExceptionHandler\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/user-input-exception.handler.ts\n            \n            class\n            UserInputExceptionHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/config/hash.config.ts\n            \n            variable\n            hashConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            accessJwtConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            refreshJwtConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer-upload.config.ts\n            \n            variable\n            maxImageUploadSize\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer-upload.config.ts\n            \n            variable\n            multerUploadConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer-upload.config.ts\n            \n            variable\n            validImageUploadTypesRegex\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/category/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/models/category/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/models/category/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/category/dto/find-categories.dto.ts\n            \n            class\n            FindCategoriesDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/models/category/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/category/entities/category.entity.ts\n            \n            class\n            Category\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/models/product/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/models/product/dto/file-upload.dto.ts\n            \n            class\n            FileUploadDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/product/dto/find-products.dto.ts\n            \n            class\n            FindProductsDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/models/product/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/product/entities/product.entity.ts\n            \n            class\n            Product\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/models/product/exceptions/file-type.exception.ts\n            \n            class\n            FileTypeError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/product/exceptions/product-service-input.exception.ts\n            \n            class\n            ProductServiceInputException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/product/product.controller.ts\n            \n            controller\n            ProductController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/models/product/product.service.ts\n            \n            injectable\n            ProductService\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/models/purchase/dto/create-purchase.dto.ts\n            \n            class\n            CreatePurchaseDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/models/purchase/dto/find-purchases.dto.ts\n            \n            class\n            FindPurchasesDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/models/purchase/dto/review-purchase.dto.ts\n            \n            class\n            ReviewPurchaseDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/models/purchase/dto/update-purchase.dto.ts\n            \n            class\n            UpdatePurchaseDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/purchase/entities/purchase.entity.ts\n            \n            class\n            Purchase\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/models/purchase/exceptions/not-purchase-owner.exception.ts\n            \n            class\n            NotPurchaseOwnerException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/purchase/exceptions/purchase-service-input.exception.ts\n            \n            class\n            PurchaseServiceInputException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/purchase/purchase.controller.ts\n            \n            controller\n            PurchaseController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/models/purchase/purchase.service.ts\n            \n            injectable\n            PurchaseService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/models/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/models/user/dto/delete-user.dto.ts\n            \n            class\n            DeleteUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/dto/update-user-role.dto.ts\n            \n            class\n            UpdateUserRoleDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/models/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/entities/user-without-password.entity.ts\n            \n            class\n            UserWithoutPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/models/user/exceptions/invalid-password-update.exception.ts\n            \n            class\n            InvalidPasswordUpdateException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/exceptions/missing-password-update.exception.ts\n            \n            class\n            MissingPasswordUpdateException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/exceptions/user-service-input.exception.ts\n            \n            class\n            UserServiceInputException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/models/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                100 %\n                (3/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.4.4\n        \n            @nestjs/core : ^8.4.4\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.4.4\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @prisma/client : 3.14.0\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            ms : ^2.1.3\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            prisma-error-enum : ^0.1.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            FileUpload   (src/.../file-upload.decorator.ts)\n                        \n                        \n                            IsAdmin   (src/.../is-admin.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Starts the application\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    src/common/decorators/file-upload.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FileUpload\n                        \n                    \n                \n            \n            \n                \nFileUpload()\n                \n            \n\n\n\n\n            \n                \n                    Add all file upload decorators at once\nExample: Upload product picture\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    src/common/decorators/is-admin.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsAdmin\n                        \n                    \n                \n            \n            \n                \nIsAdmin()\n                \n            \n\n\n\n\n            \n                \n                    Makes an endpoint accessible only by admin users\nExample: Create, update and remove products\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nE-Commerce Backend\nAPI com endpoints para criação de usuários, produtos, compras e avaliações com autenticação e autorização\n🔗 Documentação com Compodoc e GitHub Pages\n\n\n  \n  \n  \n  \n\n\n📑 Índice\n\n\n📌 Features\n🔧 Instalação\n💻 Tecnologias\n📄 Licença\n\n📌 Features\n\n CRUD de usuários\n Autenticação de usuário\n Autorização de usuário (admin)\n CRUD de produtos\n Upload de imagens\n\n\n CRUD de categorias\n CRUD de compras\n\n🔧 Instalação\n\nVocê precisará ter o Node.js instalado\n\nInstalação\n\n\n  # Clona o projeto para sua máquina\n  git clone https://github.com/alvaromrveiga/ecommerce-backend\n\n  # Entra na pasta do projeto\n  cd ecommerce-backend\n\n  # Instala as dependências\n  yarn\nCrie um arquivo .env na raiz do projeto preenchendo as informações descritas no .env.example\n\nIniciar servidor\n\n\n  # Roda as migrations\n  yarn migrate:dev \n\n  # Inicia o servidor em modo de desenvolvimento\n  yarn start:dev\n\n  # O servidor abrirá na porta 3000. \n  # Você pode acessar a documentação com Swagger em http://localhost:3000/api/\n\n  # Para visualizar o banco de dados\n  yarn prisma studio\nRodar os testes\nCrie um arquivo .env.test na raiz do projeto alterando no mínimo o banco de dados que colocou no .env\nExemplo: postgresql://username:password@localhost:5432/ecommerce-test?schema=public\n\n\n\n\n\n  # Roda as migrations no bando de testes\n  yarn migrate:test \n\n  # Roda todos os testes\n  yarn test:all\n\n  # Roda apenas os testes unitários\n  yarn test\n\n  # Roda apenas os testes de integração\n  yarn test:e2e\n\n  # Para visualizar o banco de dados de testes\n  yarn studio:test💻 Tecnologias\n\nTypescript - tooling e minimizar erros\nNode.js e NestJS com Express - construir o servidor\nPrisma com PostgreSQL - armazenar dados\nPassport e passport-jwt - autenticação com Json Web Token\nClass-validator e class-transformer - validações nos dados de entrada dos endpoints\nBcrypt - hashs de senhas\nPrisma-error-enum - identificar os códigos para tratar as exceções do prisma\nJest, SuperTest e ms - testes\nSwagger UI Express e compodoc - documentação\nESLint e Prettier - linting e formatação de código\n\n📄 Licença\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Álvaro Veiga\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PurchaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_PurchaseModule\n\n\n\ncluster_PurchaseModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nCategoryModule -->\n\nPrismaModule->CategoryModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nPrismaModule->ProductModule\n\n\n\n\n\nPurchaseModule\n\nPurchaseModule\n\nPurchaseModule -->\n\nPrismaModule->PurchaseModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\nAppModule -->\n\nPurchaseModule->AppModule\n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAccessJwtStrategy\n\nAccessJwtStrategy\n\nAuthModule -->\n\nAccessJwtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nPurchaseService\n\nPurchaseService\n\nPurchaseModule -->\n\nPurchaseService->PurchaseModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    40 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : alvaromrveiga\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AccessTokenContent   (src/.../access-token-content.ts)\n                        \n                        \n                            AccessTokenPayload   (src/.../access-token-payload.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/types/access-token-content.ts\n    \n    \n        \n            \n                \n                    \n                    AccessTokenContent\n                \n            \n            \n                \n                    What is returned to the application after Access JsonWebToken is validated\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/auth/types/access-token-payload.ts\n    \n    \n        \n            \n                \n                    \n                    AccessTokenPayload\n                \n            \n            \n                \n                    Decrypted Access JsonWebToken content\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            accessJwtConfig   (src/.../jwt.config.ts)\n                        \n                        \n                            hashConfig   (src/.../hash.config.ts)\n                        \n                        \n                            IS_ADMIN_KEY   (src/.../is-admin.decorator.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            maxImageUploadSize   (src/.../multer-upload.config.ts)\n                        \n                        \n                            multerUploadConfig   (src/.../multer-upload.config.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            refreshJwtConfig   (src/.../jwt.config.ts)\n                        \n                        \n                            validImageUploadTypesRegex   (src/.../multer-upload.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/jwt.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        accessJwtConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JwtSignOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.ACCESS_JWT_SECRET,\n  expiresIn: '15m',\n}\n                    \n                \n\n            \n                \n                    Configurations for the access jsonwebtoken used for authentication\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshJwtConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JwtSignOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.REFRESH_JWT_SECRET,\n  expiresIn: '90d',\n}\n                    \n                \n\n            \n                \n                    Configurations for the refresh jsonwebtoken used for authentication\n\n                \n            \n\n        \n    \n\n    src/config/hash.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        hashConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  saltRounds: 10,\n}\n                    \n                \n\n            \n                \n                    Global configuration for amount of saltRounds on hashes of sensitive information\n\n                \n            \n\n        \n    \n\n    src/common/decorators/is-admin.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_ADMIN_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isAdmin'\n                    \n                \n\n            \n                \n                    Value to verify if @IsAdmin() is being used in the endpoint\nConsult RolesGuard\n\n                \n            \n\n        \n    \n\n    src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n            \n                \n                    Value to verify if @Public() is being used in the endpoint\nConsult JwtAuthGuard\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CustomDecorator => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n            \n                \n                    Makes an endpoint accessible by unauthenticated users\nExample: Create user and Login endpoints\n\n                \n            \n\n        \n    \n\n    src/config/multer-upload.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        maxImageUploadSize\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 3 * 1024 * 1024\n                    \n                \n\n            \n                \n                    Constant that sets the maximum image upload file size\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        multerUploadConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MulterOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  storage: diskStorage({\n    destination: './tmp',\n    filename: (request, file, callback) => {\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);\n      const fileName = `${uniqueSuffix}-${file.originalname}`;\n\n      return callback(null, fileName);\n    },\n  }),\n\n  fileFilter: (request, file, callback) => {\n    const mimetype = validImageUploadTypesRegex.test(file.mimetype);\n    const extname = validImageUploadTypesRegex.test(\n      path.extname(file.originalname).toLowerCase(),\n    );\n\n    if (mimetype && extname) {\n      return callback(null, true);\n    }\n\n    return callback(new FileTypeError(validImageUploadTypesRegex), false);\n  },\n\n  limits: {\n    fileSize: maxImageUploadSize,\n  },\n}\n                    \n                \n\n            \n                \n                    Configurations for the multer library used for file upload.\nAccepts types jpeg, jpg and png of size up to 3MB\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validImageUploadTypesRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /jpeg|jpg|png/\n                    \n                \n\n            \n                \n                    Constant containing a Regular Expression\nwith the valid image upload types\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
