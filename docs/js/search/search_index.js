var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.649,1,2.69]],["body/modules/AppModule.html",[0,2.449,1,5.453,2,2.184,3,2.713,4,3.725,5,3.725,6,4.661,7,0.017,8,4.661,9,3.829,10,4.661,11,4.342,12,3.223,13,2.457,14,2.184,15,0.189,16,0.189,17,0.126,18,4.315,19,3.692,20,0.477,21,0.837,22,5.66,23,3.047,24,4.315,25,3.692,26,4.315,27,4.315,28,4.315,29,4.315,30,4.315,31,4.315,32,2.622,33,4.315,34,4.315,35,0.189,36,0.277,37,0.012,38,0.012]],["title/controllers/AuthController.html",[39,1.928,40,2.69]],["body/controllers/AuthController.html",[7,0.017,15,0.188,16,0.188,17,0.125,20,0.461,21,0.835,35,0.188,36,0.277,37,0.012,38,0.012,39,2.86,40,3.989,41,2.178,42,3.715,43,0.301,44,1.232,45,3.989,46,2.86,47,0.66,48,2.025,49,2.87,50,4.115,51,4.304,52,4.729,53,1.615,54,3.039,55,5.65,56,4.304,57,0.453,58,4.304,59,5.65,60,1.35,61,0.835,62,0.597,63,0.874,64,1.35,65,2.025,66,3.989,67,3.039,68,3.039,69,3.039,70,3.989,71,3.039,72,1.958,73,3.833,74,3.715,75,4.304,76,4.304,77,3.039,78,4.304,79,3.217,80,3.715,81,4.304,82,2.178,83,2.306,84,3.039,85,4.304,86,4.304,87,1.862,88,2.221,89,1.543,90,4.304]],["title/modules/AuthModule.html",[0,1.649,6,2.485]],["body/modules/AuthModule.html",[0,2.531,2,2.298,3,2.804,6,4.962,7,0.017,11,4.402,12,3.331,13,2.585,14,2.298,15,0.199,16,0.199,17,0.132,19,3.816,20,0.482,21,0.881,32,3.555,35,0.199,36,0.292,37,0.012,38,0.012,40,4.57,41,2.961,73,4.402,74,3.919,91,3.919,92,4.539,93,3.919,94,4.124,95,4.539,96,4.539,97,3.51,98,5.85,99,2.759,100,2.759,101,3.205,102,4.539,103,4.539,104,4.539,105,4.539]],["title/injectables/AuthService.html",[73,2.315,106,1.144]],["body/injectables/AuthService.html",[3,2.133,7,0.017,15,0.133,16,0.133,17,0.089,20,0.414,21,0.592,35,0.133,36,0.338,37,0.009,38,0.009,43,0.214,44,1.225,47,0.468,48,1.595,49,2.917,50,3.428,57,0.553,60,1.648,61,1.02,62,0.729,63,1.067,64,1.812,65,2.07,73,2.705,83,2.385,87,2.936,88,2.832,89,1.595,97,2.359,106,1.337,107,1.544,108,2.634,109,3.768,110,5.775,111,4.006,112,4.451,113,1.28,114,3.051,115,3.863,116,6.92,117,3.051,118,2.903,119,3.051,120,1.669,121,3.051,122,4.078,123,5.858,124,5.775,125,4.986,126,4.986,127,4.466,128,4.078,129,2.534,130,4.536,131,4.451,132,3.051,133,1.749,134,2.133,135,2.634,136,2.154,137,3.051,138,3.051,139,3.142,140,3.051,141,3.051,142,2.769,143,3.428,144,3.051,145,1.854,146,2.154,147,3.051,148,1.544,149,3.051,150,3.051,151,3.051,152,4.451,153,3.051,154,2.634,155,2.634,156,1.99,157,1.199]],["title/classes/Category.html",[36,0.245,158,1.57]],["body/classes/Category.html",[7,0.017,15,0.209,16,0.209,17,0.139,20,0.308,35,0.209,36,0.307,37,0.013,38,0.013,43,0.334,47,0.733,57,0.636,61,1.395,62,0.839,63,1.226,120,1.614,158,3.108,159,0.846,160,4.122,161,2.166,162,2.284,163,3.058,164,2.896,165,2.961,166,4.775,167,4.672,168,4.775,169,2.289,170,2.559,171,4.775,172,1.815,173,4.775,174,4.775,175,4.775,176,4.775,177,4.775,178,4.122]],["title/controllers/CategoryController.html",[39,1.928,179,2.69]],["body/controllers/CategoryController.html",[7,0.017,15,0.097,16,0.097,17,0.065,20,0.417,21,0.43,35,0.097,36,0.225,37,0.01,38,0.007,39,1.122,41,1.122,43,0.155,46,2.187,47,0.34,48,1.252,49,3.252,53,2.126,54,4,57,0.597,60,1.778,61,1.337,62,0.786,63,1.15,64,2.105,65,2.405,66,3.051,67,1.566,68,1.566,69,2.466,70,4.186,71,1.566,72,1.009,79,2.792,82,1.122,83,1.188,84,4,89,2.031,118,1.447,120,1.554,157,1.927,158,3.018,163,1.768,165,2.667,179,2.466,180,1.914,181,1.715,182,3.342,183,2.461,184,1.549,185,3.051,186,3.051,187,3.731,188,1.989,189,2.072,190,1.914,191,3.443,192,3.292,193,2.98,194,2.218,195,2.218,196,4.751,197,2.218,198,3.696,199,2.218,200,2.218,201,2.819,202,2.466,203,1.872,204,2.466,205,2.98,206,1.872,207,2.466,208,1.768,209,2.123,210,3.016,211,2.466,212,1.566,213,3.966,214,2.701,215,2.218,216,2.218,217,3.462,218,1.914,219,2.218,220,2.218,221,1.447,222,3.792,223,2.218,224,2.218,225,1.447,226,4.008,227,2.98,228,2.218,229,2.218,230,1.512,231,1.715,232,1.914,233,1.348,234,3.462,235,1.715,236,2.792,237,1.348,238,1.566,239,1.914,240,1.566,241,2.98,242,1.914,243,1.348,244,2.701,245,1.566,246,1.914,247,1.348,248,1.715,249,2.218,250,2.218,251,1.188,252,2.218,253,2.218,254,1.989,255,1.914,256,3.016,257,2.218,258,2.218,259,2.218,260,2.218,261,1.914,262,2.218,263,1.914,264,1.715,265,1.914,266,2.218]],["title/modules/CategoryModule.html",[0,1.649,8,2.485]],["body/modules/CategoryModule.html",[0,2.673,2,2.504,3,2.961,7,0.017,8,4.954,9,3.969,12,3.517,13,2.816,14,2.504,15,0.216,16,0.216,17,0.144,19,4.03,20,0.455,21,0.96,32,3.754,35,0.216,36,0.318,37,0.013,38,0.013,41,3.126,179,4.756,241,4.5,242,4.27,267,4.27,268,4.946,269,4.27,270,4.946,271,4.946,272,3.825]],["title/classes/CategoryNameInUseException.html",[36,0.245,273,2.69]],["body/classes/CategoryNameInUseException.html",[7,0.017,15,0.196,16,0.196,17,0.131,20,0.29,21,0.871,35,0.196,36,0.289,37,0.012,38,0.012,43,0.314,44,1.206,57,0.473,61,1.461,113,1.852,133,2.676,158,2.977,159,0.795,273,4.101,274,4.101,275,3.17,276,3.264,277,3.876,278,5.265,279,2.136,280,3.264,281,5.684,282,3.876,283,3.649,284,1.6,285,4.546,286,3.472,287,2.394,288,4.546,289,3.877]],["title/classes/CategoryNotFoundException.html",[36,0.245,290,2.69]],["body/classes/CategoryNotFoundException.html",[7,0.017,15,0.205,16,0.205,17,0.137,20,0.303,21,0.911,35,0.205,36,0.302,37,0.013,38,0.013,43,0.328,44,1.226,57,0.494,113,1.891,133,2.72,158,3.012,159,0.831,274,4.22,276,3.318,277,3.941,279,2.172,280,3.318,282,3.941,283,3.71,284,1.646,287,2.463,289,4.052,290,4.22,291,3.314,292,5.353,293,5.085,294,3.63,295,4.642]],["title/injectables/CategoryService.html",[106,1.144,241,2.315]],["body/injectables/CategoryService.html",[7,0.017,15,0.076,16,0.076,17,0.05,20,0.345,21,0.335,35,0.076,36,0.235,37,0.009,38,0.006,43,0.121,44,0.506,46,2.145,47,0.265,48,1.023,49,3.095,57,0.611,60,1.82,61,1.445,62,0.805,63,1.177,64,1.875,65,2.323,82,0.874,83,0.926,89,2.005,106,0.858,107,0.874,109,2.765,111,3.298,113,0.497,120,1.604,128,2.016,142,2.78,143,3.062,155,2.465,157,1.666,158,3,163,2.558,165,2.71,169,1.369,183,2.413,184,1.023,185,2.576,186,2.576,187,3.15,188,1.626,189,1.749,190,2.465,191,3.072,193,1.735,198,2.765,201,3.898,202,2.016,203,1.53,204,2.016,205,3.631,206,2.998,207,2.016,208,2.375,209,1.735,211,2.016,212,1.22,213,3.046,217,2.992,218,1.491,221,1.862,225,1.127,226,4.344,227,3.072,230,1.235,239,1.491,240,1.22,241,1.735,243,1.05,244,2.208,245,1.22,246,1.491,247,1.05,248,1.336,251,1.53,254,2.878,279,0.896,296,1.491,297,3.277,298,3.277,299,2.855,300,3.649,301,1.336,302,2.709,303,1.727,304,2.016,305,2.855,306,1.727,307,2.855,308,2.465,309,2.465,310,1.727,311,1.491,312,1.727,313,2.208,314,1.727,315,3.277,316,1.727,317,1.727,318,2.208,319,1.727,320,1.727,321,1.727,322,2.465,323,1.336,324,1.727,325,1.727,326,2.217,327,2.465,328,4.095,329,2.855,330,1.727,331,3.15,332,3.15,333,2.822,334,3.15,335,3.15,336,1.491,337,1.491,338,3.277,339,3.659,340,2.855,341,2.465,342,2.465,343,3.898,344,1.735,345,1.53,346,2.465,347,1.727,348,1.727,349,1.727,350,2.855,351,1.727,352,1.727,353,1.727,354,1.727]],["title/classes/CreateCategoryDto.html",[36,0.245,191,2.315]],["body/classes/CreateCategoryDto.html",[7,0.017,15,0.215,16,0.215,17,0.143,20,0.397,35,0.215,36,0.396,37,0.013,38,0.013,43,0.344,47,0.755,53,1.845,57,0.518,61,1.407,62,0.682,120,1.426,158,3.092,159,0.871,161,2.206,162,2.018,164,2.95,172,1.477,178,4.245,184,2.206,191,3.74,248,3.802,355,5.313,356,3.802,357,3.504,358,3.298,359,3.802,360,4.917,361,4.015,362,3.298,363,2.237]],["title/classes/CreateProductDto.html",[36,0.245,364,2.315]],["body/classes/CreateProductDto.html",[7,0.017,15,0.135,16,0.135,17,0.09,20,0.375,35,0.135,36,0.288,37,0.01,38,0.01,43,0.45,47,0.473,53,2.415,57,0.678,61,1.197,62,0.893,63,1.382,72,1.404,120,1.577,142,1.479,158,1.849,159,0.546,161,1.608,162,1.471,165,1.271,172,1.933,184,1.608,201,3.449,208,1.561,284,0.85,344,1.875,345,1.653,357,2.555,358,2.404,359,2.386,361,3.449,362,2.834,363,1.404,364,2.726,365,5.735,366,2.386,367,2.865,368,4.565,369,4.565,370,5.325,371,4.199,372,5.325,373,3.085,374,3.085,375,3.873,376,3.873,377,3.873,378,3.47,379,3.873,380,3.873,381,3.873,382,3.085,383,3.085,384,3.873,385,2.663,386,3.085,387,3.085,388,3.085,389,3.873,390,3.873,391,4.49,392,4.099,393,3.085,394,3.085,395,3.085,396,3.168,397,2.663,398,2.663,399,4.487,400,3.47,401,5.288,402,4.024,403,2.386,404,3.085,405,2.386,406,2.663,407,3.873,408,3.873,409,2.663,410,2.663,411,2.663,412,3.085,413,3.085,414,3.085,415,3.085,416,3.085,417,3.085,418,3.085,419,3.085,420,3.085,421,3.085]],["title/classes/CreateUserDto.html",[36,0.245,422,2.315]],["body/classes/CreateUserDto.html",[7,0.017,15,0.155,16,0.155,17,0.104,20,0.32,35,0.155,36,0.319,37,0.011,38,0.011,43,0.249,44,1.323,47,0.546,53,2.323,57,0.652,61,1.264,62,0.859,63,1.257,87,2.818,88,2.82,120,1.637,127,2.749,159,0.63,161,1.779,162,1.627,164,2.38,172,1.86,184,1.779,206,3.785,287,2.684,309,5.345,357,2.827,358,2.66,362,3.318,363,1.618,371,4.039,385,4.286,392,2.51,402,3.731,422,3.017,423,5.623,424,2.51,425,5.623,426,3.555,427,3.555,428,3.839,429,4.286,430,3.555,431,3.555,432,3.555,433,4.964,434,3.555,435,4.964,436,6.191,437,3.555,438,4.286,439,3.555,440,3.069,441,2.51,442,2.51,443,3.555,444,3.069,445,3.555,446,3.069,447,3.069,448,3.069,449,3.069]],["title/classes/DeleteUserDto.html",[36,0.245,450,2.485]],["body/classes/DeleteUserDto.html",[7,0.017,15,0.22,16,0.22,17,0.146,20,0.324,35,0.22,36,0.401,37,0.013,38,0.013,43,0.351,44,1.256,47,0.771,53,1.884,57,0.529,62,0.697,88,2.451,120,1.445,159,0.889,161,2.235,162,2.044,172,1.508,233,3.789,357,3.55,358,3.341,359,3.883,361,4.068,362,3.341,363,2.285,424,3.545,442,3.545,450,4.068,451,5.383,452,5.244,453,5.021,454,4.068]],["title/classes/EmailInUseException.html",[36,0.245,455,2.69]],["body/classes/EmailInUseException.html",[7,0.017,15,0.2,16,0.2,17,0.133,20,0.295,21,0.886,35,0.2,36,0.294,37,0.013,38,0.013,43,0.319,44,1.213,57,0.481,87,2.964,113,1.867,133,2.692,159,0.808,275,3.223,276,3.284,277,3.901,278,5.297,279,2.149,280,3.284,281,5.706,282,3.901,283,3.671,284,1.617,285,4.582,286,3.53,287,2.419,288,4.582,428,4.54,429,5.602,455,4.145,456,4.54,457,4.564]],["title/interfaces/ExceptionHandler.html",[458,2.042,459,2.485]],["body/interfaces/ExceptionHandler.html",[7,0.016,15,0.229,16,0.229,17,0.152,35,0.229,37,0.014,38,0.014,43,0.366,47,0.802,48,2.291,57,0.551,60,1.64,61,1.014,62,0.726,63,1.061,64,1.64,134,3.598,458,3.425,459,4.17,460,3.691,461,4.513,462,3.177,463,5.227,464,5.078,465,4.943,466,5.227,467,5.518,468,6.391,469,4.943,470,4.513]],["title/injectables/ExceptionInterceptor.html",[106,1.144,471,2.946]],["body/injectables/ExceptionInterceptor.html",[7,0.017,15,0.174,16,0.174,17,0.116,20,0.419,21,0.771,35,0.174,36,0.255,37,0.011,38,0.011,43,0.278,47,0.61,48,1.92,57,0.418,60,1.247,61,0.771,62,0.551,63,0.807,64,1.247,65,1.92,89,1.424,106,1.609,107,2.011,133,2.106,134,2.906,156,2.592,157,2.106,164,1.905,203,2.871,230,2.318,276,3.11,471,4.143,472,3.43,473,5.358,474,5.358,475,5.017,476,4.625,477,5.017,478,5.017,479,4.233,480,5.358,481,6.488,482,6.062,483,3.973,484,5.017,485,6.062,486,6.488,487,3.973,488,4.143,489,4.143,490,4.625,491,4.625,492,4.143,493,4.688,494,5.358,495,3.973,496,2.805,497,2.805,498,3.973,499,4.143,500,2.805,501,3.973,502,3.072,503,3.973,504,3.973,505,3.973,506,3.973]],["title/classes/FileTypeError.html",[36,0.245,507,2.946]],["body/classes/FileTypeError.html",[7,0.017,15,0.194,16,0.194,17,0.213,20,0.286,35,0.194,36,0.285,37,0.012,38,0.012,43,0.31,44,1.199,57,0.467,60,1.39,61,0.86,62,0.974,63,0.899,113,1.274,133,2.263,159,0.785,279,2.125,280,3.247,284,1.586,287,2.373,345,3.63,367,1.741,462,3.499,507,4.453,508,4.971,509,3.825,510,5.238,511,6.773,512,4.173,513,5.758,514,6.397,515,4.43,516,4.173,517,6.397,518,5.523,519,7.327,520,2.523,521,3.128,522,4.43]],["title/classes/FileUploadDto.html",[36,0.245,523,2.946]],["body/classes/FileUploadDto.html",[7,0.017,15,0.218,16,0.218,17,0.216,20,0.321,35,0.218,36,0.32,37,0.013,38,0.013,43,0.348,47,0.764,53,1.867,57,0.524,62,0.861,72,2.264,120,1.436,159,0.881,161,2.222,162,2.033,172,1.495,230,2.683,345,3.323,358,3.323,367,2.437,516,4.045,523,4.795,524,5.353,525,4.296,526,4.795,527,4.976,528,5.353,529,6.2,530,4.976,531,6.2,532,4.976]],["title/classes/FindCategoriesDto.html",[36,0.245,198,2.485]],["body/classes/FindCategoriesDto.html",[7,0.017,15,0.178,16,0.178,17,0.119,20,0.351,35,0.178,36,0.395,37,0.012,38,0.012,43,0.285,47,0.625,53,2.302,57,0.646,61,1.057,62,0.976,63,1.427,120,1.518,158,2.244,159,0.721,161,1.952,162,1.785,172,1.843,198,3.553,201,4.585,205,4.361,206,2.182,208,2.06,209,3.309,230,2.357,313,4.211,315,5.067,327,5.298,328,4.333,362,2.918,363,1.852,371,4.585,396,3.845,400,4.745,402,4.274,533,5.657,534,3.514,535,3.514,536,4.071,537,4.211,538,4.701,539,4.071,540,4.071,541,2.874,542,5.298,543,3.148]],["title/classes/FindProductsDto.html",[36,0.245,213,2.169]],["body/classes/FindProductsDto.html",[7,0.017,15,0.178,16,0.178,17,0.119,20,0.351,35,0.178,36,0.395,37,0.012,38,0.012,43,0.285,47,0.625,53,2.302,57,0.646,61,1.057,62,0.976,63,1.427,120,1.518,159,0.721,161,1.952,162,1.785,172,1.843,205,4.361,206,2.182,208,2.06,209,3.309,213,3.101,230,2.357,254,4.002,313,4.211,315,5.067,328,4.333,338,4.745,362,2.918,363,1.852,367,2.14,371,4.585,396,3.845,400,4.745,402,4.274,535,3.514,537,4.211,538,4.701,541,2.874,542,5.298,543,3.148,544,5.657,545,3.514,546,4.071,547,4.071,548,4.071]],["title/classes/InvalidEmailOrPasswordError.html",[36,0.245,139,2.69]],["body/classes/InvalidEmailOrPasswordError.html",[7,0.017,15,0.193,16,0.193,17,0.129,20,0.285,21,0.858,35,0.193,36,0.284,37,0.012,38,0.012,43,0.309,44,1.198,57,0.465,87,3.337,88,2.878,113,1.838,133,2.659,139,4.059,159,0.782,276,3.244,277,3.853,279,2.123,280,3.244,282,4.227,283,3.626,284,1.583,287,2.369,510,4.445,549,4.963,550,3.814,551,6.766,552,5.842,553,6.389,554,4.418,555,3.814]],["title/classes/InvalidPasswordUpdateException.html",[36,0.245,556,2.69]],["body/classes/InvalidPasswordUpdateException.html",[7,0.017,15,0.199,16,0.199,17,0.132,20,0.293,35,0.199,36,0.292,37,0.012,38,0.012,43,0.318,44,1.253,57,0.478,88,3.042,113,1.862,133,2.299,157,2.687,159,0.804,184,2.45,279,2.145,280,3.277,284,1.611,287,2.411,454,4.807,462,3.555,510,4.524,520,2.585,521,3.205,552,5.902,555,3.919,556,4.13,557,5.05,558,3.51,559,6.836,560,3.933,561,4.539]],["title/injectables/JwtAuthGuard.html",[25,2.485,106,1.144]],["body/injectables/JwtAuthGuard.html",[7,0.017,15,0.157,16,0.157,17,0.104,20,0.422,21,0.696,23,2.532,25,3.258,35,0.157,36,0.369,37,0.011,38,0.011,43,0.251,45,4.777,47,0.55,48,1.79,57,0.526,60,1.567,61,0.969,62,0.693,63,1.014,64,1.125,65,1.79,79,2.844,80,3.096,82,1.815,89,1.79,99,2.179,106,1.5,107,1.815,113,1.031,142,1.719,251,2.676,284,0.988,304,3.526,343,2.339,478,4.805,479,4.054,484,4.805,490,5.84,492,3.862,493,4.444,496,2.532,562,4.961,563,3.096,564,3.776,565,4.054,566,6.533,567,5.365,568,5.231,569,5.365,570,5.365,571,5.365,572,4.961,573,3.096,574,6.111,575,3.586,576,3.096,577,3.586,578,4.994,579,4.994,580,3.862,581,2.773,582,3.586,583,2.532,584,4.312,585,3.586,586,3.096,587,3.096,588,3.586]],["title/injectables/JwtStrategy.html",[94,2.169,106,1.144]],["body/injectables/JwtStrategy.html",[7,0.017,15,0.16,16,0.16,17,0.107,20,0.405,21,0.711,35,0.16,36,0.236,37,0.011,38,0.011,43,0.257,44,1.206,47,0.563,48,1.818,49,2.645,57,0.534,60,1.15,61,0.711,62,0.509,63,0.744,64,1.824,65,1.818,89,1.314,94,2.887,99,2.227,100,2.227,101,2.588,106,1.523,107,1.855,113,1.672,120,1.453,122,3.58,129,2.087,145,4.002,146,2.588,148,2.942,165,2.09,172,1.884,279,1.15,284,1.01,326,3.081,458,2.717,564,4.002,565,4.092,583,2.588,589,2.588,590,5.025,591,4.851,592,5.071,593,3.665,594,3.921,595,3.665,596,4.496,597,2.834,598,2.834,599,2.834,600,2.834,601,2.391,602,2.588,603,3.921,604,3.921,605,3.921,606,3.921,607,3.921,608,2.834,609,2.227,610,2.834,611,2.391,612,3.58,613,3.58,614,2.834,615,2.834,616,2.834,617,2.834,618,2.391,619,2.834,620,2.834,621,2.834,622,2.834]],["title/classes/LoginCredentialsDto.html",[36,0.245,52,2.69]],["body/classes/LoginCredentialsDto.html",[7,0.017,15,0.204,16,0.204,17,0.136,20,0.301,35,0.204,36,0.383,37,0.013,38,0.013,43,0.327,44,1.292,47,0.716,52,4.204,53,2.234,57,0.627,62,0.827,87,3.088,88,2.804,120,1.6,159,0.827,161,2.135,162,1.952,172,1.789,230,2.577,358,3.191,361,4.278,362,3.514,363,2.124,441,3.296,442,3.296,609,3.619,623,5.661,624,4.029,625,5.955,626,5.955,627,4.667,628,4.667]],["title/classes/LoginResponse.html",[36,0.245,77,2.69]],["body/classes/LoginResponse.html",[7,0.017,15,0.233,16,0.233,17,0.155,35,0.233,36,0.343,37,0.014,38,0.014,43,0.373,45,4.566,47,0.818,50,3.476,57,0.561,62,0.74,77,4.566,120,1.498,129,3.682,130,6.011,159,0.944,161,1.91,162,2.12,172,1.6,568,4.12,601,4.218,629,4.6,630,5.328,631,5.328,632,5.328,633,5.328,634,5.328,635,5.328]],["title/classes/MissingPasswordUpdateException.html",[36,0.245,636,2.69]],["body/classes/MissingPasswordUpdateException.html",[7,0.017,15,0.189,16,0.189,17,0.126,20,0.278,35,0.189,36,0.277,37,0.012,38,0.012,43,0.302,44,1.233,57,0.454,88,3.092,113,1.817,133,2.224,157,2.862,159,0.764,189,3.214,279,2.104,280,3.214,284,1.559,287,2.333,358,3.593,454,4.75,462,3.439,520,2.457,521,3.047,558,3.337,560,3.838,636,3.996,637,4.886,638,6.286,639,4.315,640,5.66,641,6.316,642,4.315]],["title/interfaces/Payload.html",[145,2.315,458,2.042]],["body/interfaces/Payload.html",[7,0.017,15,0.164,16,0.164,17,0.109,20,0.409,21,0.729,35,0.164,36,0.242,37,0.011,38,0.011,43,0.263,44,1.268,47,0.577,49,1.709,62,0.716,64,1.179,65,1.347,89,1.347,94,2.139,99,2.283,100,2.283,101,2.653,106,1.549,113,1.081,120,1.659,122,2.653,129,2.139,145,3.579,146,4.476,148,3.558,162,1.691,165,2.427,172,1.904,279,1.618,284,1.035,326,2.283,458,2.764,460,2.653,564,3.579,565,3.365,583,2.653,589,2.653,590,4.846,591,3.988,594,2.905,596,4.554,597,2.905,598,2.905,599,2.905,600,3.988,601,3.365,602,3.641,603,3.988,604,3.988,605,3.988,606,3.988,607,3.988,608,2.905,609,2.283,610,2.905,611,2.451,612,3.641,613,3.641,614,2.905,615,2.905,616,2.905,617,2.905,618,2.451,619,2.905,620,2.905,621,2.905,622,2.905]],["title/classes/PrismaExceptionHandler.html",[36,0.245,497,2.69]],["body/classes/PrismaExceptionHandler.html",[7,0.017,15,0.084,16,0.084,17,0.056,20,0.389,35,0.084,36,0.124,37,0.007,38,0.007,43,0.135,44,0.553,47,0.296,48,1.119,57,0.635,60,1.893,61,1.338,62,0.81,63,1.224,64,2.259,87,1.703,89,2.092,111,4.721,133,1.778,134,3.637,156,4.135,157,2.371,158,2.049,159,0.341,164,1.496,169,3.236,184,1.119,189,1.496,203,1.032,233,1.897,234,4.122,273,2.204,274,2.204,276,2.169,290,3.195,295,2.204,333,2.414,344,1.17,367,2.203,398,1.663,455,2.204,456,1.489,459,2.567,464,2.204,465,2.414,470,2.204,477,3.499,488,3.499,489,3.499,497,2.204,499,1.489,580,5.28,643,5.35,644,1.489,645,3.906,646,3.121,647,3.935,648,3.121,649,3.121,650,3.121,651,3.121,652,3.935,653,3.121,654,1.926,655,3.121,656,7.068,657,1.926,658,6.666,659,6.666,660,1.926,661,1.926,662,3.472,663,3.121,664,1.926,665,3.121,666,3.397,667,1.926,668,1.926,669,3.121,670,1.926,671,2.695,672,3.121,673,3.121,674,3.121,675,3.121,676,1.926,677,1.926,678,1.926,679,3.121,680,1.926,681,1.926,682,1.489,683,3.935,684,3.935,685,2.204,686,2.204,687,2.778,688,2.204,689,1.489,690,1.36,691,1.926,692,1.926,693,2.695,694,1.926,695,1.926,696,1.926,697,1.926,698,3.121,699,1.926,700,1.926,701,1.926,702,1.926,703,1.926,704,1.926,705,3.121,706,1.926,707,1.926,708,3.935,709,1.926,710,3.121,711,1.926,712,1.926,713,1.926,714,1.926]],["title/modules/PrismaModule.html",[0,1.649,9,2.042]],["body/modules/PrismaModule.html",[0,2.745,2,2.613,3,3.04,7,0.017,9,4.063,12,3.611,13,2.939,14,2.613,15,0.226,16,0.226,17,0.15,20,0.409,21,1.002,32,3.854,35,0.226,36,0.332,37,0.014,38,0.014,302,4.199,715,4.457,716,4.457,717,4.457,718,5.162,719,5.476,720,5.162]],["title/injectables/PrismaService.html",[106,1.144,302,2.042]],["body/injectables/PrismaService.html",[7,0.017,14,2.648,15,0.168,16,0.168,17,0.112,20,0.337,21,0.744,35,0.168,36,0.247,37,0.011,38,0.011,43,0.268,47,0.589,48,1.875,49,3.216,57,0.551,60,1.203,61,0.744,62,0.532,63,1.208,64,1.641,65,2.292,106,1.571,107,1.941,109,3.412,143,3.412,163,3.236,164,1.838,169,3.311,170,2.055,284,1.441,302,2.803,308,4.516,475,2.966,479,3.412,491,4.516,609,3.179,645,4.516,721,3.311,722,5.231,723,6.906,724,5.953,725,6.394,726,6.906,727,5.231,728,6.394,729,3.835,730,5.231,731,5.231,732,6.394,733,5.231,734,6.394,735,5.231,736,5.231,737,5.231,738,5.231,739,3.835,740,5.231,741,4.516,742,5.231,743,3.835,744,3.835,745,3.835]],["title/classes/Product.html",[36,0.245,367,1.497]],["body/classes/Product.html",[7,0.017,15,0.133,16,0.133,17,0.089,20,0.197,35,0.133,36,0.196,37,0.009,38,0.009,43,0.449,47,0.468,57,0.729,61,1.285,62,0.96,63,1.463,120,1.699,159,0.54,161,1.595,162,1.893,163,2.253,164,2.133,165,2.531,167,3.442,169,1.463,170,1.635,172,2.078,208,1.544,344,3.193,345,3.291,367,3.001,368,4.536,369,4.536,370,5.302,371,4.183,372,3.842,375,3.842,376,3.842,377,3.842,378,3.442,379,3.842,380,3.842,381,3.842,389,3.842,390,3.842,391,4.466,392,4.078,396,3.142,405,4.749,406,3.842,407,4.536,408,4.536,409,2.634,410,2.634,411,2.634,746,2.634,747,4.451,748,3.051,749,3.442,750,3.051,751,3.842,752,3.051,753,3.051,754,3.051,755,3.051,756,3.051,757,3.051,758,3.051,759,4.451,760,3.442,761,3.051,762,3.051,763,3.051,764,3.051,765,3.051,766,3.051,767,3.051,768,2.359,769,2.634,770,2.634]],["title/controllers/ProductController.html",[39,1.928,771,2.69]],["body/controllers/ProductController.html",[7,0.017,15,0.091,16,0.091,17,0.169,20,0.41,21,0.404,35,0.091,36,0.214,37,0.01,38,0.007,39,1.053,41,1.053,43,0.146,46,2.098,47,0.319,48,1.191,53,2.17,54,4.084,57,0.609,60,1.815,61,1.258,62,0.859,63,1.174,64,2.034,65,2.434,66,2.345,67,1.469,68,1.469,69,2.345,70,4.241,71,1.469,72,0.947,79,2.36,82,1.053,83,1.115,84,4.084,89,2.073,118,1.358,120,1.592,157,2.361,163,1.681,165,2.672,181,1.609,182,3.205,183,2.36,184,1.191,185,2.345,186,2.345,188,1.891,189,1.987,192,3.537,193,2.875,196,4.645,202,2.345,203,1.78,204,2.345,205,2.875,206,1.78,207,2.345,208,1.681,209,2.018,210,2.867,211,2.345,212,1.469,213,2.694,214,3.659,217,3.341,221,1.358,222,3.659,225,1.358,227,2.875,230,1.437,231,1.609,232,1.797,233,1.265,234,1.469,235,1.609,236,3.138,237,1.265,238,1.469,240,1.469,243,1.265,245,1.469,247,1.265,251,1.115,254,2.36,255,1.797,256,2.867,261,1.797,263,1.797,264,1.609,265,1.797,344,2.519,345,2.221,364,3.349,367,2.902,403,1.609,526,3.205,567,2.867,569,2.867,760,2.568,771,2.345,772,1.797,773,2.867,774,4.145,775,1.797,776,2.081,777,2.081,778,2.081,779,2.081,780,2.081,781,3.321,782,2.081,783,2.081,784,1.797,785,2.081,786,2.081,787,2.081,788,2.081,789,3.919,790,2.081,791,2.081,792,2.081,793,4.085,794,2.081,795,2.081,796,2.867,797,2.867,798,2.867,799,2.867,800,2.867,801,2.345,802,3.321,803,3.321,804,2.568,805,1.609,806,2.081,807,2.568,808,2.875,809,1.797,810,2.081,811,2.081,812,1.797,813,2.081,814,2.081,815,2.081,816,2.081,817,2.081,818,2.081,819,2.081,820,2.081,821,2.081,822,2.081,823,2.081,824,2.081]],["title/modules/ProductModule.html",[0,1.649,10,2.485]],["body/modules/ProductModule.html",[0,2.61,2,2.41,3,2.891,7,0.017,9,3.93,10,4.918,12,3.434,13,2.711,14,2.41,15,0.208,16,0.208,17,0.139,19,3.934,20,0.473,21,0.924,32,3.665,35,0.208,36,0.306,37,0.013,38,0.013,41,3.052,272,3.682,771,4.673,801,3.362,808,4.457,809,4.111,825,4.111,826,4.761,827,4.111,828,4.761,829,4.761,830,4.761,831,4.111,832,3.106,833,3.682,834,4.761,835,4.761]],["title/classes/ProductNameInUseException.html",[36,0.245,685,2.69]],["body/classes/ProductNameInUseException.html",[7,0.017,15,0.196,16,0.196,17,0.131,20,0.29,21,0.871,35,0.196,36,0.289,37,0.012,38,0.012,43,0.314,44,1.206,57,0.473,61,1.461,113,1.852,133,2.676,159,0.795,275,3.17,276,3.264,277,3.876,278,5.265,279,2.136,280,3.264,281,5.684,282,3.876,283,3.649,284,1.6,285,4.546,286,3.472,287,2.394,288,4.546,367,2.839,685,4.101,686,4.101,836,3.877]],["title/classes/ProductNotFoundException.html",[36,0.245,687,2.69]],["body/classes/ProductNotFoundException.html",[7,0.017,15,0.205,16,0.205,17,0.137,20,0.303,21,0.911,35,0.205,36,0.302,37,0.013,38,0.013,43,0.328,44,1.226,57,0.494,113,1.891,133,2.72,159,0.831,276,3.318,277,3.941,279,2.172,280,3.318,282,3.941,283,3.71,284,1.646,287,2.463,291,3.314,292,5.353,293,5.085,294,3.63,295,4.642,367,2.872,686,4.22,687,4.22,836,4.052]],["title/injectables/ProductService.html",[106,1.144,808,2.315]],["body/injectables/ProductService.html",[7,0.017,15,0.068,16,0.068,17,0.116,20,0.329,21,0.302,35,0.068,36,0.218,37,0.008,38,0.006,43,0.109,44,0.464,46,2.011,47,0.239,48,0.939,49,3.109,57,0.624,60,1.858,61,1.384,62,0.822,63,1.202,64,1.902,65,2.326,82,0.789,83,0.835,89,2.122,106,0.787,107,0.789,109,2.592,111,3.636,113,0.448,120,1.636,128,1.85,142,2.672,143,1.709,157,1.887,158,0.642,163,2.43,165,2.637,169,2.124,170,0.835,172,0.787,183,2.263,184,0.939,185,2.393,186,1.85,188,2.263,189,1.625,193,1.592,201,3.863,202,1.85,203,1.404,204,1.85,205,2.917,206,2.13,207,1.85,208,1.716,209,1.592,211,1.85,212,1.85,213,2.263,217,2.806,221,1.709,225,1.017,227,2.917,230,1.134,234,1.85,240,1.1,243,0.947,245,1.1,247,0.947,251,1.404,254,3.279,279,0.822,297,3.073,298,3.073,301,1.205,302,2.573,304,1.85,311,1.345,318,2.026,322,3.431,323,1.205,326,2.415,328,2.393,331,1.345,332,1.345,333,1.205,334,1.345,335,1.345,336,1.345,337,1.345,338,2.026,339,2.262,341,3.431,342,3.431,343,3.132,344,3.5,345,1.817,346,2.262,364,2.917,367,2.638,384,2.262,403,1.205,526,2.621,528,2.262,543,2.621,693,2.262,741,2.262,760,2.026,773,2.262,775,2.262,784,2.262,789,4.233,793,2.262,807,2.026,808,1.592,837,1.345,838,3.39,839,2.62,840,3.39,841,2.62,842,1.558,843,1.558,844,1.558,845,2.62,846,2.62,847,2.62,848,1.558,849,1.558,850,1.558,851,1.558,852,2.62,853,1.558,854,2.62,855,2.026,856,2.62,857,2.62,858,2.62,859,2.62,860,4.801,861,2.62,862,3.974,863,2.62,864,2.62,865,2.62,866,2.026,867,2.62,868,2.62,869,3.39,870,2.62,871,1.558,872,1.558,873,1.558,874,1.558,875,1.558,876,1.558,877,2.62,878,1.558,879,1.558,880,1.558,881,1.558,882,3.39,883,1.558,884,1.558,885,2.62,886,1.558,887,1.558,888,1.558,889,1.558,890,1.558,891,1.558,892,1.558,893,1.558,894,1.558,895,2.62,896,1.558,897,1.558,898,1.558,899,3.39,900,1.558]],["title/classes/ProductServiceInputException.html",[36,0.245,512,2.485]],["body/classes/ProductServiceInputException.html",[7,0.017,15,0.22,16,0.22,17,0.146,35,0.22,36,0.323,37,0.013,38,0.013,43,0.351,57,0.529,60,1.575,61,0.975,62,0.697,63,1.019,113,1.444,120,1.571,134,2.989,159,0.889,279,2.128,284,1.718,287,2.069,462,4.121,512,4.758,520,3.55,690,4.788,866,5.244,901,4.822,902,3.883,903,5.855,904,5.855,905,5.383,906,4.335,907,4.335]],["title/guards/RolesGuard.html",[908,2.946,909,2.69]],["body/guards/RolesGuard.html",[7,0.017,15,0.16,16,0.16,17,0.106,20,0.424,21,0.708,23,2.577,35,0.16,36,0.373,37,0.011,38,0.011,43,0.255,44,1.205,47,0.56,48,1.812,57,0.532,60,1.586,61,0.981,62,0.702,63,1.026,64,1.145,65,1.812,82,1.847,89,1.812,106,1.518,113,1.05,142,2.78,148,1.847,164,1.749,170,1.956,192,3.645,236,2.878,238,2.577,251,2.709,304,3.569,343,2.381,478,4.842,479,4.085,484,4.842,492,3.909,493,4.485,496,2.577,568,4.842,570,5.676,571,5.405,572,5.676,573,3.15,574,6.138,576,3.15,580,3.909,586,3.15,587,3.15,613,3.569,618,2.381,671,5.405,909,3.569,910,3.15,911,6.261,912,3.649,913,3.649,914,5.055,915,5.055,916,2.822,917,3.649,918,3.649,919,2.822,920,3.649,921,3.649,922,3.649]],["title/classes/UpdateCategoryDto.html",[36,0.245,226,2.485]],["body/classes/UpdateCategoryDto.html",[7,0.017,15,0.227,16,0.227,17,0.151,20,0.411,35,0.227,36,0.334,37,0.014,38,0.014,43,0.364,63,1.292,72,2.364,158,2.624,159,0.92,161,2.282,184,1.862,191,4.184,226,4.154,244,4.017,284,1.431,356,4.017,357,3.625,662,4.154,923,4.484,924,4.924,925,4.924,926,4.924,927,4.924,928,4.017,929,5.194]],["title/classes/UpdateProductDto.html",[36,0.245,789,2.485]],["body/classes/UpdateProductDto.html",[7,0.017,15,0.227,16,0.227,17,0.151,20,0.411,35,0.227,36,0.334,37,0.014,38,0.014,43,0.364,63,1.292,72,2.364,159,0.92,161,2.282,184,1.862,284,1.431,357,3.625,364,4.184,366,4.017,367,2.502,662,4.154,789,4.154,807,4.017,924,4.924,925,4.924,926,4.924,927,4.924,928,4.017,930,4.484,931,5.194]],["title/classes/UpdateUserDto.html",[36,0.245,932,2.485]],["body/classes/UpdateUserDto.html",[7,0.017,15,0.201,16,0.201,17,0.134,20,0.42,35,0.201,36,0.379,37,0.013,38,0.013,43,0.321,44,1.216,47,0.704,53,1.722,57,0.483,62,0.637,63,1.393,72,2.089,88,2.315,120,1.365,159,0.813,161,2.112,162,1.931,172,1.379,184,1.645,284,1.264,357,3.354,361,3.843,362,3.157,363,2.089,402,3.843,422,3.954,424,3.241,442,3.241,452,5.031,454,3.843,662,3.843,924,4.556,925,4.556,926,4.556,927,4.556,928,3.549,932,3.843,933,4.556,934,4.59,935,4.59,936,3.549,937,4.59]],["title/classes/UpdateUserRoleDto.html",[36,0.245,938,2.485]],["body/classes/UpdateUserRoleDto.html",[7,0.017,15,0.2,16,0.2,17,0.133,20,0.379,35,0.2,36,0.377,37,0.013,38,0.013,43,0.319,44,1.337,47,0.7,53,2.202,57,0.618,62,0.815,87,3.067,120,1.36,148,3.853,157,2.307,159,0.808,161,2.104,162,1.925,170,2.446,172,1.763,189,2.814,192,2.446,230,2.54,358,3.146,363,2.077,438,5.602,441,3.223,933,5.018,938,3.83,939,3.941,940,4.564,941,5.87,942,4.564,943,4.564]],["title/classes/User.html",[36,0.245,44,0.675]],["body/classes/User.html",[7,0.017,15,0.142,16,0.142,17,0.094,20,0.209,35,0.142,36,0.208,37,0.01,38,0.01,43,0.227,44,1.365,47,0.498,57,0.726,61,1.221,62,0.957,63,1.48,87,2.722,88,2.472,120,1.717,148,3.492,159,0.574,161,1.667,162,1.948,163,2.354,164,2.229,165,2.592,167,3.596,169,1.554,170,1.737,172,2.072,192,3.184,254,2.648,391,3.596,392,2.289,405,4.864,425,5.43,441,2.289,446,2.799,447,2.799,448,2.799,449,2.799,464,3.284,749,4.594,751,5.129,768,3.596,769,4.015,770,4.015,944,2.799,945,5.43,946,3.242,947,3.242,948,3.242,949,3.242,950,3.242,951,3.242,952,3.242,953,4.015,954,3.284,955,3.242,956,3.242,957,3.242,958,3.242,959,3.242,960,3.242,961,3.242,962,3.242]],["title/controllers/UserController.html",[39,1.928,963,2.69]],["body/controllers/UserController.html",[7,0.017,15,0.109,16,0.109,17,0.073,20,0.439,21,0.483,35,0.109,36,0.246,37,0.008,38,0.008,39,1.261,41,1.261,43,0.174,44,1.291,46,2.355,47,0.382,48,1.371,49,2.118,53,2.113,54,3.976,57,0.593,60,1.767,61,1.093,62,0.782,63,1.143,64,1.942,65,2.396,66,3.686,67,1.759,68,1.759,69,2.7,70,4.197,71,1.759,72,1.134,79,2.177,82,1.261,83,1.335,84,3.976,88,1.503,89,2.019,115,2.972,118,1.625,142,2.231,148,2.355,157,2.052,181,1.926,182,3.599,183,2.65,184,1.371,188,2.65,189,2.231,192,2.049,193,3.172,196,2.957,214,2.957,222,4.037,227,3.612,230,2.572,231,2.957,233,2.324,235,1.926,236,2.177,237,1.514,238,1.759,243,1.514,247,2.324,251,1.335,264,1.926,283,2.049,422,3.612,450,4.166,612,3.286,812,2.151,832,1.625,919,5.559,932,4.166,936,3.599,938,3.877,953,5.131,963,2.7,964,2.151,965,3.301,966,4.018,967,2.151,968,2.491,969,2.491,970,2.491,971,2.491,972,2.491,973,4.654,974,3.036,975,2.491,976,2.491,977,2.491,978,3.824,979,2.491,980,2.491,981,2.491,982,2.151,983,3.824,984,2.491,985,2.491,986,4.654,987,5.22,988,2.151,989,2.151,990,1.625,991,2.151,992,2.151,993,2.151,994,2.491,995,2.491,996,2.491,997,2.491,998,4.654,999,2.491,1000,2.491,1001,2.491,1002,2.491,1003,2.491]],["title/classes/UserInputExceptionHandler.html",[36,0.245,500,2.69]],["body/classes/UserInputExceptionHandler.html",[7,0.017,15,0.186,16,0.186,17,0.124,20,0.43,21,0.825,35,0.186,36,0.273,37,0.012,38,0.012,43,0.297,44,1.18,47,0.652,48,2.008,57,0.447,60,1.333,61,0.825,62,0.59,63,0.862,64,1.333,133,2.619,134,3.605,156,3.655,157,2.202,159,0.752,164,2.686,276,3.195,285,3,459,4.089,464,3.956,465,4.332,470,3.956,477,5.153,488,5.153,489,5.153,499,3.285,500,3.956,502,5.501,512,3.655,520,3.19,521,3.956,560,3.404,644,3.285,690,3.956,901,3.285,1004,4.837,1005,4.248,1006,3.285,1007,5.602]],["title/modules/UserModule.html",[0,1.649,11,2.315]],["body/modules/UserModule.html",[0,2.619,2,2.424,3,2.902,7,0.017,9,3.936,11,4.628,12,3.446,13,2.727,14,2.424,15,0.209,16,0.209,17,0.14,19,3.949,20,0.45,21,0.929,32,3.678,35,0.209,36,0.308,37,0.013,38,0.013,41,3.064,115,4.418,272,3.703,719,5.225,963,4.686,993,4.134,1008,4.134,1009,4.789,1010,4.134,1011,4.134,1012,4.789,1013,4.789]],["title/classes/UserNotFoundException.html",[36,0.245,688,2.69]],["body/classes/UserNotFoundException.html",[7,0.017,15,0.201,16,0.201,17,0.134,20,0.296,21,0.891,35,0.201,36,0.295,37,0.013,38,0.013,43,0.321,44,1.349,57,0.483,87,2.97,113,1.871,133,2.698,159,0.813,165,2.829,276,3.291,277,3.909,279,2.154,280,3.291,282,3.909,283,3.679,284,1.623,287,2.428,291,3.241,292,5.308,293,5.031,294,3.549,295,4.594,688,4.16,689,4.556,1014,4.59]],["title/injectables/UserService.html",[106,1.144,115,2.169]],["body/injectables/UserService.html",[7,0.017,15,0.074,16,0.074,17,0.049,20,0.392,21,0.326,35,0.074,36,0.23,37,0.006,38,0.006,43,0.118,44,1.294,46,2.11,47,0.258,48,1.001,49,3.22,50,1.822,57,0.605,60,1.801,61,1.114,62,0.797,63,1.165,64,1.948,65,2.371,82,0.851,83,0.901,87,2.159,88,2.797,89,1.658,106,0.839,107,0.851,109,2.72,111,3.254,113,0.484,115,1.59,118,1.822,120,1.607,123,4.777,125,2.411,126,4.777,127,3.224,128,3.522,134,1.998,135,3.091,136,1.187,142,2.752,143,4.051,148,1.812,154,3.599,156,1.822,157,2.387,163,2.996,165,2.652,169,1.339,183,2.374,184,1.001,188,1.59,189,1.716,193,1.697,203,1.496,208,1.413,221,1.822,225,1.097,227,2.533,230,1.208,233,2.533,243,1.022,247,1.697,251,1.496,279,1.308,297,3.224,298,3.224,301,1.3,302,2.673,318,2.159,323,1.3,326,2.176,378,3.224,422,3.032,440,1.452,450,3.448,452,2.769,454,3.609,475,2.159,556,1.971,636,1.971,638,2.411,749,1.3,932,4.26,936,2.769,938,3.254,945,1.452,954,3.906,965,2.411,966,3.091,967,2.411,974,2.336,982,1.452,988,1.452,989,1.452,990,1.097,991,1.452,992,1.452,1015,1.452,1016,2.792,1017,3.58,1018,3.58,1019,1.682,1020,1.682,1021,2.792,1022,1.682,1023,4.169,1024,2.792,1025,2.792,1026,1.682,1027,2.792,1028,2.792,1029,2.792,1030,1.682,1031,1.682,1032,2.792,1033,2.792,1034,2.792,1035,4.169,1036,1.682,1037,1.682,1038,1.682,1039,1.682,1040,1.682,1041,2.792,1042,1.682,1043,1.682,1044,2.792,1045,1.682,1046,4.169,1047,1.682,1048,4.169,1049,1.682,1050,1.682,1051,3.58,1052,1.682,1053,1.682,1054,2.792,1055,1.682,1056,1.682,1057,2.792,1058,1.682,1059,1.682,1060,3.58,1061,4.169,1062,1.682,1063,2.792,1064,1.682]],["title/classes/UserServiceInputException.html",[36,0.245,560,2.315]],["body/classes/UserServiceInputException.html",[7,0.017,15,0.22,16,0.22,17,0.146,35,0.22,36,0.323,37,0.013,38,0.013,43,0.351,57,0.529,60,1.575,61,0.975,62,0.697,63,1.019,113,1.444,120,1.571,134,2.989,159,0.889,279,2.128,284,1.718,287,2.069,462,4.121,520,3.55,560,4.432,690,4.788,866,5.244,902,3.883,903,5.855,904,5.855,905,5.383,906,4.335,907,4.335,1006,4.822]],["title/classes/UserWithoutPassword.html",[36,0.245,990,2.485]],["body/classes/UserWithoutPassword.html",[7,0.017,15,0.232,16,0.232,17,0.154,20,0.416,35,0.232,36,0.34,37,0.014,38,0.014,43,0.37,44,1.229,72,2.409,88,2.729,142,2.538,159,0.938,284,1.458,397,4.571,662,4.202,974,3.454,990,4.202,1065,4.571,1066,4.571,1067,6.441,1068,6.441,1069,6.441,1070,5.294,1071,5.294]],["title/interfaces/ValidateReturn.html",[458,2.042,611,2.485]],["body/interfaces/ValidateReturn.html",[7,0.017,15,0.165,16,0.165,17,0.11,20,0.41,21,0.732,35,0.165,36,0.243,37,0.011,38,0.011,43,0.264,44,1.269,47,0.579,49,1.717,62,0.718,64,1.184,65,1.353,89,1.353,94,2.149,99,2.293,100,2.293,101,2.665,106,1.554,113,1.086,120,1.66,122,2.665,129,2.149,145,3.144,146,2.665,148,3.215,162,1.696,165,2.433,172,1.908,279,1.184,284,1.04,326,2.293,458,2.773,460,2.665,564,3.587,565,3.375,583,2.665,589,2.665,590,4.853,591,4.001,594,2.918,596,4.001,597,2.918,598,2.918,599,2.918,600,2.918,601,2.462,602,2.665,603,4.001,604,4.001,605,4.001,606,4.001,607,4.001,608,4.001,609,3.144,610,4.001,611,3.375,612,4.698,613,4.698,614,2.918,615,2.918,616,2.918,617,2.918,618,2.462,619,2.918,620,2.918,621,2.918,622,2.918]],["title/coverage.html",[1072,4.495]],["body/coverage.html",[7,0.017,17,0.073,25,1.63,36,0.492,37,0.008,38,0.008,39,2.646,40,1.764,42,2.157,44,0.679,52,1.764,61,0.744,62,0.347,73,1.518,77,1.764,79,1.423,87,1.081,88,1.506,94,1.423,100,1.518,106,1.92,108,2.157,115,1.423,139,1.764,145,1.518,157,0.982,158,1.03,160,2.157,179,1.764,180,2.157,191,1.518,198,1.63,213,1.423,226,1.63,236,1.423,237,2.329,241,1.518,273,1.764,274,2.706,275,3.292,290,1.764,291,3.292,296,2.157,302,1.339,355,2.157,356,2.964,364,1.518,365,2.157,366,2.964,367,0.982,422,1.518,423,2.157,424,3.292,450,1.63,451,2.157,455,1.764,456,1.932,458,2.499,459,1.63,461,2.157,467,4.025,471,1.932,472,2.157,497,1.764,500,1.764,502,1.932,507,1.932,508,2.157,509,2.157,512,1.63,520,2.182,523,1.932,524,2.157,525,2.157,533,2.157,534,2.157,544,2.157,545,2.157,549,2.157,550,2.157,556,1.764,557,2.157,558,2.964,560,1.518,562,2.157,563,2.157,581,1.932,589,3.292,611,1.63,623,2.157,624,2.157,629,2.157,636,1.764,637,2.157,643,2.157,644,2.964,685,1.764,686,2.706,687,1.764,688,1.764,689,1.932,721,2.157,746,2.157,771,1.764,772,2.157,789,1.63,801,1.764,804,1.932,805,1.932,808,1.518,833,3.605,837,2.157,901,1.932,902,2.964,908,1.932,909,1.764,910,2.157,916,1.932,923,2.157,930,2.157,932,1.63,933,2.964,938,1.63,939,2.157,944,2.157,963,1.764,964,2.157,974,1.63,990,1.63,1004,2.157,1006,1.932,1015,2.157,1065,2.157,1066,2.157,1072,2.157,1073,2.157,1074,2.499,1075,2.499,1076,7.905,1077,7.414,1078,4.662,1079,6.554,1080,3.309,1081,6.195,1082,6.991,1083,2.157,1084,2.964,1085,5.228,1086,2.157,1087,4.025,1088,2.157,1089,2.157,1090,2.157,1091,2.157,1092,3.833,1093,2.499,1094,2.499,1095,2.499,1096,2.499,1097,2.499,1098,2.499,1099,2.499]],["title/dependencies.html",[3,2.197,1100,2.743]],["body/dependencies.html",[3,2.385,7,0.017,21,0.966,23,3.513,36,0.399,37,0.013,38,0.013,72,2.264,97,3.848,99,3.024,129,2.833,134,2.385,136,3.513,169,2.385,170,2.667,363,2.264,469,3.848,496,3.513,541,3.513,564,3.768,682,3.848,831,4.296,832,4.045,1101,6.754,1102,4.976,1103,4.976,1104,4.976,1105,4.976,1106,4.976,1107,4.976,1108,4.976,1109,4.976,1110,4.976,1111,4.976,1112,4.976,1113,4.976,1114,4.976,1115,4.976,1116,4.976,1117,4.976,1118,4.976,1119,4.296,1120,4.296,1121,4.976]],["title/miscellaneous/functions.html",[1122,2.244,1123,3.957]],["body/miscellaneous/functions.html",[7,0.016,17,0.151,37,0.014,38,0.014,47,0.795,53,1.943,64,2.157,65,1.856,172,1.909,184,1.856,188,2.948,189,2.482,192,2.775,236,3.915,237,3.147,254,2.948,345,2.775,367,2.035,470,4.487,516,4.146,609,3.147,804,5.317,805,4.004,855,4.004,954,3.656,1083,5.486,1084,4.914,1090,4.47,1091,5.936,1122,3.656,1123,4.47,1124,5.178,1125,5.178,1126,4.47,1127,5.178,1128,5.178,1129,5.178,1130,4.47,1131,4.47]],["title/index.html",[47,0.488,1132,2.743,1133,2.743]],["body/index.html",[7,0.016,36,0.282,37,0.009,38,0.009,46,2.22,129,1.703,134,1.433,136,2.111,169,2.742,183,3.257,192,1.603,363,1.361,428,5.55,476,2.582,479,1.951,516,1.951,541,2.111,564,2.665,601,1.951,682,2.312,832,2.861,1119,3.786,1120,2.582,1134,2.99,1135,5.194,1136,2.99,1137,6.578,1138,6.091,1139,2.99,1140,7.494,1141,4.386,1142,4.386,1143,4.386,1144,2.99,1145,5.194,1146,4.386,1147,5.194,1148,4.386,1149,2.99,1150,2.99,1151,2.99,1152,4.386,1153,5.194,1154,4.386,1155,4.386,1156,4.386,1157,2.99,1158,2.99,1159,4.386,1160,2.99,1161,2.99,1162,6.747,1163,4.386,1164,2.99,1165,2.99,1166,5.72,1167,2.99,1168,2.99,1169,2.99,1170,2.99,1171,2.99,1172,2.99,1173,5.72,1174,2.99,1175,2.99,1176,2.99,1177,2.99,1178,2.99,1179,6.884,1180,4.386,1181,4.386,1182,4.386,1183,4.386,1184,4.386,1185,2.99,1186,2.99,1187,2.99,1188,2.99,1189,2.99,1190,5.72,1191,6.091,1192,4.386,1193,2.99,1194,2.99,1195,4.386,1196,2.99,1197,2.99,1198,2.99,1199,2.99,1200,2.99,1201,2.99,1202,2.99,1203,2.99,1204,2.99,1205,4.386,1206,5.194,1207,6.091,1208,2.99,1209,2.99,1210,6.091,1211,6.578,1212,2.99,1213,2.99,1214,2.99,1215,2.99,1216,2.99,1217,2.99,1218,2.99,1219,2.99,1220,2.99,1221,2.99,1222,2.99,1223,2.99,1224,4.386,1225,2.99,1226,2.99,1227,2.99,1228,2.99,1229,2.99,1230,2.99,1231,2.99,1232,2.99,1233,2.99,1234,2.99,1235,2.99,1236,2.99,1237,2.99,1238,2.99,1239,2.99,1240,2.99,1241,2.99,1242,2.99,1243,2.99,1244,2.99,1245,2.99,1246,2.99,1247,2.99,1248,2.99,1249,2.99,1250,2.99,1251,2.99,1252,2.99,1253,2.99,1254,2.99,1255,2.99,1256,2.582]],["title/license.html",[1132,2.743,1133,2.743,1257,2.457]],["body/license.html",[7,0.013,14,2.323,37,0.013,38,0.013,288,4.16,518,3.962,602,3.241,768,3.549,832,2.994,974,4.245,1073,3.962,1256,3.962,1257,3.549,1258,6.506,1259,4.59,1260,4.59,1261,4.59,1262,5.891,1263,4.59,1264,4.59,1265,4.59,1266,4.59,1267,4.59,1268,4.59,1269,5.891,1270,7.558,1271,4.59,1272,4.59,1273,4.59,1274,4.59,1275,5.891,1276,4.59,1277,4.59,1278,4.59,1279,4.59,1280,4.59,1281,4.59,1282,4.59,1283,4.59,1284,4.59,1285,5.891,1286,4.59,1287,4.59,1288,4.59,1289,4.59,1290,4.59,1291,5.891,1292,5.891,1293,4.59,1294,4.59,1295,4.59,1296,4.59,1297,4.59,1298,4.59,1299,4.59,1300,4.59,1301,4.59,1302,4.59,1303,4.59,1304,4.59,1305,4.59,1306,4.59,1307,4.59,1308,4.59,1309,4.59,1310,4.59,1311,4.59,1312,4.59,1313,4.59,1314,4.59,1315,4.59,1316,4.59,1317,4.59,1318,4.59,1319,4.59,1320,4.59,1321,4.59]],["title/modules.html",[2,2.635]],["body/modules.html",[1,3.913,2,2.805,6,3.616,7,0.014,8,3.616,9,2.97,10,3.616,11,3.368,37,0.014,38,0.014,1322,7.609,1323,7.609,1324,7.609,1325,7.609]],["title/overview.html",[1326,4.495]],["body/overview.html",[1,5.372,2,2.112,3,2.654,4,3.603,5,3.603,6,4.842,7,0.017,8,4.711,9,3.978,10,4.711,11,4.511,12,3.153,13,2.376,14,2.112,37,0.012,38,0.012,41,2.112,73,3.776,91,3.603,93,3.603,94,3.538,107,2.112,115,4.112,159,0.739,206,2.237,241,3.776,267,3.603,269,3.603,302,3.87,444,3.603,460,2.947,715,3.603,716,3.603,717,3.603,808,3.776,825,3.603,827,3.603,908,3.227,1008,3.603,1010,3.603,1011,3.603,1326,3.603,1327,4.173,1328,4.173,1329,4.173,1330,3.603]],["title/properties.html",[162,1.503,1100,2.743]],["body/properties.html",[7,0.016,37,0.015,38,0.015,43,0.414,162,1.94,1257,4.577,1331,5.918,1332,5.918,1333,5.918,1334,5.918,1335,5.918]],["title/miscellaneous/variables.html",[1122,2.244,1336,3.957]],["body/miscellaneous/variables.html",[7,0.017,17,0.177,25,2.233,37,0.01,38,0.01,44,0.606,45,2.417,46,1.733,47,0.525,50,2.233,62,0.845,79,3.191,89,2.009,100,2.937,120,1.12,142,2.919,172,1.028,184,1.227,203,3.671,236,2.752,237,2.08,279,1.91,343,3.153,469,3.738,516,3.656,537,2.647,565,3.153,581,3.738,584,2.955,590,2.417,618,2.233,666,2.955,796,2.955,797,2.955,798,2.955,799,2.955,800,2.955,801,3.413,833,2.647,855,2.647,909,2.417,916,3.738,919,3.738,954,2.417,1080,2.955,1084,3.738,1086,2.955,1087,5.256,1088,4.838,1089,4.173,1122,2.417,1126,2.955,1130,4.838,1131,2.955,1330,2.955,1336,2.955,1337,4.834,1338,3.423,1339,5.604,1340,7.114,1341,4.834,1342,4.834,1343,4.834,1344,3.423,1345,3.423,1346,3.423,1347,3.423,1348,3.423,1349,3.423,1350,3.423,1351,3.423,1352,4.834,1353,4.834,1354,4.834,1355,3.423,1356,4.834,1357,4.834,1358,3.423,1359,3.423,1360,3.423,1361,3.423,1362,3.423,1363,5.604,1364,4.834,1365,4.834,1366,3.423,1367,3.423,1368,3.423,1369,3.423,1370,4.834,1371,3.423,1372,4.834,1373,3.423,1374,4.834,1375,3.423,1376,3.423,1377,3.423,1378,3.423,1379,3.423,1380,3.423,1381,3.423,1382,3.423,1383,3.423,1384,3.423,1385,3.423,1386,3.423,1387,3.423]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":392,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["0.0.1",{"_index":1332,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1115,"title":{},"body":{"dependencies.html":{}}}],["0.1.2",{"_index":1112,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1109,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1108,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":1110,"title":{},"body":{"dependencies.html":{}}}],["03",{"_index":769,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["0878",{"_index":418,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["1",{"_index":206,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"overview.html":{}}}],["1/1",{"_index":1082,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":208,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["10/10",{"_index":1085,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1076,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":1353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12/12",{"_index":1094,"title":{},"body":{"coverage.html":{}}}],["12df",{"_index":604,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["151be8d85634",{"_index":961,"title":{},"body":{"classes/User.html":{}}}],["15m",{"_index":1351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1e9",{"_index":1368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2/2",{"_index":1077,"title":{},"body":{"coverage.html":{}}}],["2022",{"_index":768,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{},"license.html":{}}}],["26t15:41:28.527z",{"_index":770,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["2b$10$1xpzuyu8fuvuabb3sc0xzur9dx7kakbmlt0vlnoz.unlntdmfc4lk",{"_index":962,"title":{},"body":{"classes/User.html":{}}}],["2e651e21b871",{"_index":416,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["3",{"_index":1330,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":1117,"title":{},"body":{"dependencies.html":{}}}],["3.12.0",{"_index":1106,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1079,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":1201,"title":{},"body":{"index.html":{}}}],["31",{"_index":1329,"title":{},"body":{"overview.html":{}}}],["3mb",{"_index":800,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["4",{"_index":1328,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1111,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":1121,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1078,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":278,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["401",{"_index":551,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{}}}],["404",{"_index":292,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["42",{"_index":410,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["4302",{"_index":764,"title":{},"body":{"classes/Product.html":{}}}],["438c",{"_index":174,"title":{},"body":{"classes/Category.html":{}}}],["441e",{"_index":959,"title":{},"body":{"classes/User.html":{}}}],["44dd5c499084",{"_index":607,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["4688",{"_index":419,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["49f3",{"_index":414,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["4f33",{"_index":605,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["4fce",{"_index":175,"title":{},"body":{"classes/Category.html":{}}}],["5.0.1",{"_index":1107,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":1105,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1095,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1327,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":1097,"title":{},"body":{"coverage.html":{}}}],["6f4ca8a4",{"_index":762,"title":{},"body":{"classes/Product.html":{}}}],["7.2.0",{"_index":1118,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1092,"title":{},"body":{"coverage.html":{}}}],["70.00",{"_index":409,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["7aed",{"_index":958,"title":{},"body":{"classes/User.html":{}}}],["7b5547f01b0a",{"_index":766,"title":{},"body":{"classes/Product.html":{}}}],["8",{"_index":444,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["8'})@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":434,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.0.0",{"_index":1102,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":1104,"title":{},"body":{"dependencies.html":{}}}],["8.4.4",{"_index":1101,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1093,"title":{},"body":{"coverage.html":{}}}],["857cd575",{"_index":412,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["8aa0",{"_index":763,"title":{},"body":{"classes/Product.html":{}}}],["8d85",{"_index":176,"title":{},"body":{"classes/Category.html":{}}}],["9/9",{"_index":1096,"title":{},"body":{"coverage.html":{}}}],["956b",{"_index":413,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["9f7f",{"_index":960,"title":{},"body":{"classes/User.html":{}}}],["9fd6",{"_index":606,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["a75e",{"_index":415,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["abc123456",{"_index":442,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{}}}],["above",{"_index":1290,"title":{},"body":{"license.html":{}}}],["abrir",{"_index":1199,"title":{},"body":{"index.html":{}}}],["ac1b",{"_index":765,"title":{},"body":{"classes/Product.html":{}}}],["ac63",{"_index":420,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["accepts",{"_index":1382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access",{"_index":914,"title":{},"body":{"guards/RolesGuard.html":{}}}],["accessible",{"_index":1131,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["accessing",{"_index":911,"title":{},"body":{"guards/RolesGuard.html":{}}}],["accesstoken",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginResponse.html":{}}}],["acessar",{"_index":1203,"title":{},"body":{"index.html":{}}}],["action",{"_index":1315,"title":{},"body":{"license.html":{}}}],["add",{"_index":1128,"title":{},"body":{"miscellaneous/functions.html":{}}}],["address",{"_index":425,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["admin",{"_index":192,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["admin.decorator",{"_index":238,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{}}}],["admin.decorator.ts",{"_index":1084,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["admins",{"_index":196,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["allowed",{"_index":915,"title":{},"body":{"guards/RolesGuard.html":{}}}],["already",{"_index":281,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["alterando",{"_index":1213,"title":{},"body":{"index.html":{}}}],["alvaromrveiga",{"_index":1335,"title":{},"body":{"properties.html":{}}}],["amount",{"_index":396,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/Product.html":{}}}],["and/or",{"_index":1283,"title":{},"body":{"license.html":{}}}],["another",{"_index":904,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["apenas",{"_index":1224,"title":{},"body":{"index.html":{}}}],["api",{"_index":1136,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":987,"title":{},"body":{"controllers/UserController.html":{}}}],["apioperation",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":531,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["apiproperty({type",{"_index":527,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["apitags",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apitags('authentication",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('category",{"_index":249,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apitags('product",{"_index":810,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags('user",{"_index":994,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":475,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["app.close",{"_index":745,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app_guard",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["application",{"_index":609,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"interfaces/Payload.html":{},"injectables/PrismaService.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/functions.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arising",{"_index":1319,"title":{},"body":{"license.html":{}}}],["armazenar",{"_index":1235,"title":{},"body":{"index.html":{}}}],["arquivo",{"_index":1182,"title":{},"body":{"index.html":{}}}],["array",{"_index":845,"title":{},"body":{"injectables/ProductService.html":{}}}],["asc",{"_index":337,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["associated",{"_index":1271,"title":{},"body":{"license.html":{}}}],["async",{"_index":49,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{}}}],["autenticação",{"_index":1145,"title":{},"body":{"index.html":{}}}],["auth.controller",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["auth.guard.ts",{"_index":563,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:13",{"_index":575,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:28",{"_index":577,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":40,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":625,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["authenticates",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticating",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":45,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginResponse.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":566,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":582,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1334,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":1308,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":73,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autorização",{"_index":1146,"title":{},"body":{"index.html":{}}}],["available",{"_index":298,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["avaliações",{"_index":1144,"title":{},"body":{"index.html":{}}}],["await",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["backend",{"_index":1135,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":285,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"classes/UserInputExceptionHandler.html":{}}}],["badrequestexception(error.message",{"_index":1007,"title":{},"body":{"classes/UserInputExceptionHandler.html":{}}}],["banco",{"_index":1206,"title":{},"body":{"index.html":{}}}],["bando",{"_index":1220,"title":{},"body":{"index.html":{}}}],["baseprice",{"_index":368,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["bcrypt",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["becomes",{"_index":870,"title":{},"body":{"injectables/ProductService.html":{}}}],["before",{"_index":736,"title":{},"body":{"injectables/PrismaService.html":{}}}],["being",{"_index":1342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["between",{"_index":864,"title":{},"body":{"injectables/ProductService.html":{}}}],["binary",{"_index":529,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["black",{"_index":407,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["body",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["boilerplate",{"_index":491,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{}}}],["boolean",{"_index":580,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"classes/PrismaExceptionHandler.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":1091,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":638,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{},"injectables/UserService.html":{}}}],["brand",{"_index":406,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["brand1",{"_index":869,"title":{},"body":{"injectables/ProductService.html":{}}}],["break",{"_index":698,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["browse",{"_index":1325,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1322,"title":{},"body":{"modules.html":{}}}],["c",{"_index":1259,"title":{},"body":{"license.html":{}}}],["calculations",{"_index":379,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["call",{"_index":734,"title":{},"body":{"injectables/PrismaService.html":{}}}],["callback",{"_index":1364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(new",{"_index":1377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":1370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["called",{"_index":633,"title":{},"body":{"classes/LoginResponse.html":{}}}],["callhandler",{"_index":486,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["canactivate",{"_index":572,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":576,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["capitalize",{"_index":307,"title":{},"body":{"injectables/CategoryService.html":{}}}],["capitalizeonlyfirstletter",{"_index":299,"title":{},"body":{"injectables/CategoryService.html":{}}}],["capitalizeonlyfirstletter(name",{"_index":305,"title":{},"body":{"injectables/CategoryService.html":{}}}],["case",{"_index":693,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{}}}],["catcherror",{"_index":495,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["catcherror((error",{"_index":504,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["catches",{"_index":488,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["categorias",{"_index":1158,"title":{},"body":{"index.html":{}}}],["categories",{"_index":201,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"injectables/ProductService.html":{}}}],["categories'})@public()@get",{"_index":199,"title":{},"body":{"controllers/CategoryController.html":{}}}],["categories.dto",{"_index":246,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["categories.dto.ts",{"_index":534,"title":{},"body":{"classes/FindCategoriesDto.html":{},"coverage.html":{}}}],["categories.dto.ts:11",{"_index":536,"title":{},"body":{"classes/FindCategoriesDto.html":{}}}],["categories.dto.ts:20",{"_index":540,"title":{},"body":{"classes/FindCategoriesDto.html":{}}}],["categories.dto.ts:29",{"_index":539,"title":{},"body":{"classes/FindCategoriesDto.html":{}}}],["categories.map((category",{"_index":900,"title":{},"body":{"injectables/ProductService.html":{}}}],["categoriesconnection",{"_index":899,"title":{},"body":{"injectables/ProductService.html":{}}}],["categoriestoskip",{"_index":329,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category",{"_index":158,"title":{"classes/Category.html":{}},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category'})@isadmin()@delete(':id')@httpcode(httpstatus.no_content",{"_index":223,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category'})@isadmin()@patch(':id",{"_index":228,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category'})@isadmin()@post",{"_index":194,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category.controller",{"_index":271,"title":{},"body":{"modules/CategoryModule.html":{}}}],["category.dto",{"_index":244,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts",{"_index":356,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:12",{"_index":360,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.service",{"_index":242,"title":{},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{}}}],["categorycontroller",{"_index":179,"title":{"controllers/CategoryController.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"coverage.html":{}}}],["categorymodule",{"_index":8,"title":{"modules/CategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["categoryname",{"_index":327,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{}}}],["categorynameinuseexception",{"_index":273,"title":{"classes/CategoryNameInUseException.html":{}},"body":{"classes/CategoryNameInUseException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["categorynotfoundexception",{"_index":290,"title":{"classes/CategoryNotFoundException.html":{}},"body":{"classes/CategoryNotFoundException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["categoryservice",{"_index":241,"title":{"injectables/CategoryService.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["cd",{"_index":1175,"title":{},"body":{"index.html":{}}}],["chair",{"_index":543,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"injectables/ProductService.html":{}}}],["chair&quot",{"_index":872,"title":{},"body":{"injectables/ProductService.html":{}}}],["charge",{"_index":1266,"title":{},"body":{"license.html":{}}}],["check",{"_index":567,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/ProductController.html":{}}}],["checks",{"_index":671,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"guards/RolesGuard.html":{}}}],["claim",{"_index":1311,"title":{},"body":{"license.html":{}}}],["class",{"_index":36,"title":{"classes/Category.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":159,"title":{},"body":{"classes/Category.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"overview.html":{}}}],["clientversion",{"_index":672,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["clona",{"_index":1165,"title":{},"body":{"index.html":{}}}],["clone",{"_index":1170,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categorymodule",{"_index":267,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_imports",{"_index":268,"title":{},"body":{"modules/CategoryModule.html":{}}}],["cluster_categorymodule_providers",{"_index":269,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":715,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":716,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":717,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_productmodule",{"_index":825,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_productmodule_imports",{"_index":826,"title":{},"body":{"modules/ProductModule.html":{}}}],["cluster_productmodule_providers",{"_index":827,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1008,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1011,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1009,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1010,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["colocou",{"_index":1216,"title":{},"body":{"index.html":{}}}],["com",{"_index":1137,"title":{},"body":{"index.html":{}}}],["commerce",{"_index":1134,"title":{},"body":{"index.html":{}}}],["compare",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["compare(currentpassword",{"_index":1064,"title":{},"body":{"injectables/UserService.html":{}}}],["compare(password",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["compared",{"_index":1029,"title":{},"body":{"injectables/UserService.html":{}}}],["compares",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["compodoc",{"_index":1148,"title":{},"body":{"index.html":{}}}],["compras",{"_index":1143,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":1289,"title":{},"body":{"license.html":{}}}],["configuration",{"_index":591,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["configurations",{"_index":1352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connect",{"_index":741,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/ProductService.html":{}}}],["connectcategoriesbyid",{"_index":838,"title":{},"body":{"injectables/ProductService.html":{}}}],["connectcategoriesbyid(categories",{"_index":843,"title":{},"body":{"injectables/ProductService.html":{}}}],["connecting",{"_index":722,"title":{},"body":{"injectables/PrismaService.html":{}}}],["connection",{"_index":1320,"title":{},"body":{"license.html":{}}}],["considering",{"_index":376,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["const",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":1354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constructor",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"interfaces/ValidateReturn.html":{}}}],["constructor(filetypes",{"_index":513,"title":{},"body":{"classes/FileTypeError.html":{}}}],["constructor(message",{"_index":905,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["constructor(prisma",{"_index":301,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/JwtAuthGuard.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(reflector",{"_index":573,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["constructor(userservice",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{}}}],["construir",{"_index":1233,"title":{},"body":{"index.html":{}}}],["consult",{"_index":1343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contain",{"_index":436,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["containing",{"_index":537,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"miscellaneous/variables.html":{}}}],["contains",{"_index":333,"title":{},"body":{"injectables/CategoryService.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{}}}],["content",{"_index":600,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["context",{"_index":492,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":587,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":586,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":920,"title":{},"body":{"guards/RolesGuard.html":{}}}],["contract",{"_index":1316,"title":{},"body":{"license.html":{}}}],["controller",{"_index":39,"title":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('category",{"_index":250,"title":{},"body":{"controllers/CategoryController.html":{}}}],["controller('product",{"_index":811,"title":{},"body":{"controllers/ProductController.html":{}}}],["controller('user",{"_index":995,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":41,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["copies",{"_index":1285,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1269,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1258,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":1072,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":184,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":812,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["create(createcategorydto",{"_index":190,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["create(createproductdto",{"_index":775,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["create(createuserdto",{"_index":967,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createcategorydto",{"_index":191,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["createdat",{"_index":405,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["createproductdto",{"_index":364,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["creates",{"_index":193,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":422,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email.tolowercase",{"_index":1049,"title":{},"body":{"injectables/UserService.html":{}}}],["credentials.dto",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":624,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:11",{"_index":627,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["credentials.dto.ts:19",{"_index":628,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["criação",{"_index":1139,"title":{},"body":{"index.html":{}}}],["crie",{"_index":1180,"title":{},"body":{"index.html":{}}}],["crud",{"_index":183,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["currency.js",{"_index":381,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["current",{"_index":454,"title":{},"body":{"classes/DeleteUserDto.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["currentpassword",{"_index":452,"title":{},"body":{"classes/DeleteUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["customdecorator",{"_index":1344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["código",{"_index":1255,"title":{},"body":{"index.html":{}}}],["códigos",{"_index":1245,"title":{},"body":{"index.html":{}}}],["d31fc56c",{"_index":957,"title":{},"body":{"classes/User.html":{}}}],["d6c24523",{"_index":603,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["dados",{"_index":1207,"title":{},"body":{"index.html":{}}}],["damages",{"_index":1312,"title":{},"body":{"license.html":{}}}],["data",{"_index":326,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{}}}],["database",{"_index":163,"title":{},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["date",{"_index":749,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["date.now",{"_index":1366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datestring",{"_index":751,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["db3d22db270a",{"_index":177,"title":{},"body":{"classes/Category.html":{}}}],["de",{"_index":1140,"title":{},"body":{"index.html":{}}}],["deal",{"_index":1273,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1321,"title":{},"body":{"license.html":{}}}],["decimal",{"_index":372,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["decoration",{"_index":178,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{}}}],["decorator",{"_index":578,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["decorators",{"_index":53,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/LoginCredentialsDto.html":{},"controllers/ProductController.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["decorators/is",{"_index":917,"title":{},"body":{"guards/RolesGuard.html":{}}}],["decrypted",{"_index":596,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["default",{"_index":203,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":391,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["defined",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{}}}],["delete",{"_index":233,"title":{},"body":{"controllers/CategoryController.html":{},"classes/DeleteUserDto.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(':id",{"_index":263,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{}}}],["deletes",{"_index":222,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["deleteuserdto",{"_index":450,"title":{"classes/DeleteUserDto.html":{}},"body":{"classes/DeleteUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["deleteuserdto.currentpassword",{"_index":1058,"title":{},"body":{"injectables/UserService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":251,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/JwtAuthGuard.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dependências",{"_index":1178,"title":{},"body":{"index.html":{}}}],["describes",{"_index":161,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/Product.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{}}}],["description",{"_index":43,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"properties.html":{}}}],["descritas",{"_index":1187,"title":{},"body":{"index.html":{}}}],["desenvolvimento",{"_index":1197,"title":{},"body":{"index.html":{}}}],["destination",{"_index":1361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["discount",{"_index":389,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["discountpercentage",{"_index":369,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["discounts",{"_index":377,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["diskstorage",{"_index":1360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distribute",{"_index":1281,"title":{},"body":{"license.html":{}}}],["docs",{"_index":802,"title":{},"body":{"controllers/ProductController.html":{}}}],["documentation",{"_index":1073,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["documentação",{"_index":1147,"title":{},"body":{"index.html":{}}}],["doe",{"_index":447,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["doesn't",{"_index":1041,"title":{},"body":{"injectables/UserService.html":{}}}],["dos",{"_index":1241,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":243,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/delete",{"_index":988,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/find",{"_index":245,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["dto/login",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/login.response",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/update",{"_index":247,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e",{"_index":428,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"index.html":{}}}],["e3ecf4939a89",{"_index":421,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["e6cf9a58",{"_index":173,"title":{},"body":{"classes/Category.html":{}}}],["ecommerce",{"_index":1176,"title":{},"body":{"index.html":{}}}],["em",{"_index":1195,"title":{},"body":{"index.html":{}}}],["email",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/LoginCredentialsDto.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["email.tolowercase",{"_index":1052,"title":{},"body":{"injectables/UserService.html":{}}}],["emailinuseexception",{"_index":455,"title":{"classes/EmailInUseException.html":{}},"body":{"classes/EmailInUseException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["enableshutdownhooks",{"_index":725,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":727,"title":{},"body":{"injectables/PrismaService.html":{}}}],["endpoint",{"_index":1130,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":46,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["enter",{"_index":641,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["entities/category.entity",{"_index":248,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{}}}],["entities/product.entity",{"_index":403,"title":{},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["entities/user",{"_index":991,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entities/user.entity",{"_index":440,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":1067,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["entra",{"_index":1172,"title":{},"body":{"index.html":{}}}],["entrada",{"_index":1240,"title":{},"body":{"index.html":{}}}],["enum",{"_index":682,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"dependencies.html":{},"index.html":{}}}],["env",{"_index":1183,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":1188,"title":{},"body":{"index.html":{}}}],["env.test",{"_index":1212,"title":{},"body":{"index.html":{}}}],["error",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"dependencies.html":{},"index.html":{}}}],["error.clientversion",{"_index":706,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.code",{"_index":692,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message",{"_index":705,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.category",{"_index":710,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product",{"_index":709,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product.create",{"_index":714,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product.delete",{"_index":713,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product.update",{"_index":712,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.user",{"_index":711,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["errormeta",{"_index":668,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["errors",{"_index":477,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["errors/invalid",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["erros",{"_index":476,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"index.html":{}}}],["eslint",{"_index":1251,"title":{},"body":{"index.html":{}}}],["event",{"_index":1307,"title":{},"body":{"license.html":{}}}],["example",{"_index":172,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["exception",{"_index":462,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/FileTypeError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/ProductServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["exception.handler",{"_index":499,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["exception.handler.ts",{"_index":644,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["exception.handler.ts:105",{"_index":680,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:110",{"_index":676,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:118",{"_index":664,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:123",{"_index":657,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:13",{"_index":1005,"title":{},"body":{"classes/UserInputExceptionHandler.html":{}}}],["exception.handler.ts:18",{"_index":654,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:74",{"_index":670,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:79",{"_index":667,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:84",{"_index":678,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:95",{"_index":661,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exceptionhandler",{"_index":459,"title":{"interfaces/ExceptionHandler.html":{}},"body":{"interfaces/ExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["exceptioninterceptor",{"_index":471,"title":{"injectables/ExceptionInterceptor.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"coverage.html":{}}}],["exceptions/invalid",{"_index":1043,"title":{},"body":{"injectables/UserService.html":{}}}],["exceptions/missing",{"_index":1045,"title":{},"body":{"injectables/UserService.html":{}}}],["exceções",{"_index":1247,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":484,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["exemplo",{"_index":1217,"title":{},"body":{"index.html":{}}}],["exists",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":1350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{}}}],["exports",{"_index":719,"title":{},"body":{"modules/PrismaModule.html":{},"modules/UserModule.html":{}}}],["exposes",{"_index":182,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["express",{"_index":832,"title":{},"body":{"modules/ProductModule.html":{},"controllers/UserController.html":{},"dependencies.html":{},"index.html":{},"license.html":{}}}],["express.multer.file",{"_index":526,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["expression",{"_index":1386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extend",{"_index":903,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["extends",{"_index":284,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateProductDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"injectables/PrismaService.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{}}}],["extname",{"_index":1374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":598,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":616,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjzdwiioii5nwfkmznhns0wyjk4ltq2odytyjfmms1hmtkwnzm0nwjmyzcilcjpyxqioje2ndg0nzu3mzesimv4cci6mty0odq3njyzmx0.h3z3jdvhoi6y5c_n0kt6tdp2nwk_dhbzxioqn7vanno",{"_index":635,"title":{},"body":{"classes/LoginResponse.html":{}}}],["fa244865",{"_index":417,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["false",{"_index":618,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/variables.html":{}}}],["features",{"_index":1152,"title":{},"body":{"index.html":{}}}],["field",{"_index":662,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserWithoutPassword.html":{}}}],["fields",{"_index":357,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["file",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["file.filename",{"_index":883,"title":{},"body":{"injectables/ProductService.html":{}}}],["file.originalname",{"_index":1369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filefilter",{"_index":1371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filename",{"_index":1363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":1272,"title":{},"body":{"license.html":{}}}],["filesize",{"_index":1380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filetypeerror",{"_index":507,"title":{"classes/FileTypeError.html":{}},"body":{"classes/FileTypeError.html":{},"coverage.html":{}}}],["filetypeerror(validimageuploadtypesregex",{"_index":1378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filetypes",{"_index":519,"title":{},"body":{"classes/FileTypeError.html":{}}}],["fileupload",{"_index":804,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["fileuploaddto",{"_index":523,"title":{"classes/FileUploadDto.html":{}},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["find",{"_index":217,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findall",{"_index":185,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findall(@query",{"_index":814,"title":{},"body":{"controllers/ProductController.html":{}}}],["findall(findallproductsdto",{"_index":778,"title":{},"body":{"controllers/ProductController.html":{}}}],["findall(findcategoriesdto",{"_index":197,"title":{},"body":{"controllers/CategoryController.html":{}}}],["findall(undefined",{"_index":311,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["findallproductsdto",{"_index":781,"title":{},"body":{"controllers/ProductController.html":{}}}],["findbyemail",{"_index":1016,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyemail(email",{"_index":1021,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid",{"_index":965,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findbyid(@req",{"_index":997,"title":{},"body":{"controllers/UserController.html":{}}}],["findbyid(id",{"_index":1025,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(request",{"_index":970,"title":{},"body":{"controllers/UserController.html":{}}}],["findcategoriesdto",{"_index":198,"title":{"classes/FindCategoriesDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"coverage.html":{}}}],["findonebyid",{"_index":186,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyid(@param('id",{"_index":816,"title":{},"body":{"controllers/ProductController.html":{}}}],["findonebyid(id",{"_index":212,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyname",{"_index":187,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["findonebyname(name",{"_index":218,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["findonebyurlname",{"_index":773,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyurlname(@param('urlname",{"_index":819,"title":{},"body":{"controllers/ProductController.html":{}}}],["findonebyurlname(urlname",{"_index":784,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findproductsdto",{"_index":213,"title":{"classes/FindProductsDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["finds",{"_index":1023,"title":{},"body":{"injectables/UserService.html":{}}}],["fire",{"_index":738,"title":{},"body":{"injectables/PrismaService.html":{}}}],["first",{"_index":308,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/PrismaService.html":{}}}],["fitness",{"_index":1303,"title":{},"body":{"license.html":{}}}],["following",{"_index":518,"title":{},"body":{"classes/FileTypeError.html":{},"license.html":{}}}],["forgot",{"_index":1034,"title":{},"body":{"injectables/UserService.html":{}}}],["format",{"_index":528,"title":{},"body":{"classes/FileUploadDto.html":{},"injectables/ProductService.html":{}}}],["formatação",{"_index":1254,"title":{},"body":{"index.html":{}}}],["formats",{"_index":322,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["formaturlname",{"_index":839,"title":{},"body":{"injectables/ProductService.html":{}}}],["formaturlname(name",{"_index":852,"title":{},"body":{"injectables/ProductService.html":{}}}],["found",{"_index":295,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["found.exception",{"_index":684,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["found.exception.ts",{"_index":291,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["found.exception.ts:6",{"_index":294,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["free",{"_index":1265,"title":{},"body":{"license.html":{}}}],["function",{"_index":467,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"coverage.html":{}}}],["functions",{"_index":1123,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1288,"title":{},"body":{"license.html":{}}}],["generate",{"_index":854,"title":{},"body":{"injectables/ProductService.html":{}}}],["get('/id/:id",{"_index":255,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{}}}],["get(':name",{"_index":258,"title":{},"body":{"controllers/CategoryController.html":{}}}],["get(':urlname",{"_index":818,"title":{},"body":{"controllers/ProductController.html":{}}}],["gets",{"_index":214,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["getting",{"_index":1132,"title":{"index.html":{},"license.html":{}},"body":{}}],["git",{"_index":1169,"title":{},"body":{"index.html":{}}}],["github",{"_index":1149,"title":{},"body":{"index.html":{}}}],["granted",{"_index":1264,"title":{},"body":{"license.html":{}}}],["guard",{"_index":908,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":570,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["handle",{"_index":464,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{}}}],["handle(error",{"_index":465,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["handled",{"_index":380,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["handlers",{"_index":463,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["handlers/prisma",{"_index":498,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["handlers/user",{"_index":501,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["happened",{"_index":659,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["hash",{"_index":1042,"title":{},"body":{"injectables/UserService.html":{}}}],["hash(createuserdto.password",{"_index":1047,"title":{},"body":{"injectables/UserService.html":{}}}],["hash(updateuserdto.password",{"_index":1062,"title":{},"body":{"injectables/UserService.html":{}}}],["hashed",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["hashedpassword",{"_index":1046,"title":{},"body":{"injectables/UserService.html":{}}}],["hashifupdatingpassword",{"_index":1017,"title":{},"body":{"injectables/UserService.html":{}}}],["hashifupdatingpassword(id",{"_index":1030,"title":{},"body":{"injectables/UserService.html":{}}}],["hashs",{"_index":1242,"title":{},"body":{"index.html":{}}}],["here",{"_index":927,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["hereby",{"_index":1263,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1309,"title":{},"body":{"license.html":{}}}],["hooks",{"_index":737,"title":{},"body":{"injectables/PrismaService.html":{}}}],["http",{"_index":276,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{}}}],["http://localhost:3000/api",{"_index":1204,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":264,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://docs.nestjs.com/guards",{"_index":571,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["https://docs.nestjs.com/interceptors",{"_index":481,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["https://docs.nestjs.com/recipes/prisma",{"_index":723,"title":{},"body":{"injectables/PrismaService.html":{}}}],["https://github.com/alvaromrveiga/ecommerce",{"_index":1171,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["hyphens",{"_index":867,"title":{},"body":{"injectables/ProductService.html":{}}}],["id",{"_index":165,"title":{},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{}}}],["id'})@isadmin()@get('/id/:id",{"_index":782,"title":{},"body":{"controllers/ProductController.html":{}}}],["identificar",{"_index":1244,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":1074,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":384,"title":{},"body":{"classes/CreateProductDto.html":{},"injectables/ProductService.html":{}}}],["ignoreexpiration",{"_index":617,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["image",{"_index":1356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image.jpg",{"_index":767,"title":{},"body":{"classes/Product.html":{}}}],["imagens",{"_index":1157,"title":{},"body":{"index.html":{}}}],["implements",{"_index":164,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{}}}],["implied",{"_index":1299,"title":{},"body":{"license.html":{}}}],["import",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{}}}],["imports",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["include",{"_index":341,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["included",{"_index":1293,"title":{},"body":{"license.html":{}}}],["including",{"_index":1275,"title":{},"body":{"license.html":{}}}],["index",{"_index":47,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":728,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{}}}],["information",{"_index":230,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/LoginCredentialsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["informações",{"_index":1186,"title":{},"body":{"index.html":{}}}],["inicia",{"_index":1194,"title":{},"body":{"index.html":{}}}],["iniciar",{"_index":1189,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":106,"title":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{}}}],["injectables",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["input",{"_index":502,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["input.exception",{"_index":521,"title":{},"body":{"classes/FileTypeError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UserInputExceptionHandler.html":{}}}],["input.exception.ts",{"_index":902,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["input.exception.ts:5",{"_index":906,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["inputs",{"_index":280,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["inputted",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["insensitive",{"_index":335,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["instala",{"_index":1177,"title":{},"body":{"index.html":{}}}],["instalado",{"_index":1164,"title":{},"body":{"index.html":{}}}],["instalação",{"_index":1153,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":690,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{}}}],["instantiate",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["instantiates",{"_index":304,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{}}}],["integração",{"_index":1227,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":482,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["intercept(context",{"_index":483,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interceptor",{"_index":473,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interceptors",{"_index":480,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interface",{"_index":458,"title":{"interfaces/ExceptionHandler.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}},"body":{"interfaces/ExceptionHandler.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{}}}],["interfaces",{"_index":460,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"overview.html":{}}}],["interferes",{"_index":730,"title":{},"body":{"injectables/PrismaService.html":{}}}],["invalid",{"_index":510,"title":{},"body":{"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{}}}],["invalidemailorpassworderror",{"_index":139,"title":{"classes/InvalidEmailOrPasswordError.html":{}},"body":{"injectables/AuthService.html":{},"classes/InvalidEmailOrPasswordError.html":{},"coverage.html":{}}}],["invalidpasswordupdateexception",{"_index":556,"title":{"classes/InvalidPasswordUpdateException.html":{}},"body":{"classes/InvalidPasswordUpdateException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["is_admin_key",{"_index":916,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["is_public_key",{"_index":581,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isadmin",{"_index":236,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["isarray",{"_index":399,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["iscategoryerror",{"_index":646,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscategoryerror(error",{"_index":655,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscategorynameconstraintviolation",{"_index":647,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscategorynameconstraintviolation(error",{"_index":660,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscorrectpassword",{"_index":1063,"title":{},"body":{"injectables/UserService.html":{}}}],["iscreateproducterror",{"_index":648,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscreateproducterror(error",{"_index":663,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isemail",{"_index":438,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserRoleDto.html":{}}}],["isemail({message",{"_index":427,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemailconstraintviolation",{"_index":649,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isemailconstraintviolation(errormeta",{"_index":665,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isenum",{"_index":943,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["isenum(role",{"_index":941,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["isint",{"_index":400,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{}}}],["isint()@isoptional",{"_index":394,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isnotempty",{"_index":361,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty()@isstring",{"_index":626,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["isnumber",{"_index":401,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isnumber()@isnotempty",{"_index":373,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isnumber()@isoptional",{"_index":387,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isoptional",{"_index":402,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isarray",{"_index":382,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isoptional()@isstring",{"_index":535,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{}}}],["isoptional()@type(undefined)@isint()@ispositive",{"_index":538,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{}}}],["ispasswordvalid",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispositive",{"_index":542,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{}}}],["isprismaunknownerror",{"_index":650,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isprismaunknownerror(error",{"_index":669,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproducterror",{"_index":651,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproducterror(error",{"_index":675,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproductnameconstraintviolation",{"_index":652,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproductnameconstraintviolation(error",{"_index":677,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["ispublic",{"_index":584,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":362,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":359,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/DeleteUserDto.html":{}}}],["isstring()@isnotempty()@isoptional",{"_index":934,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isstring()@isoptional",{"_index":385,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@minlength(8",{"_index":432,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isusererror",{"_index":653,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isusererror(error",{"_index":679,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["jest",{"_index":1248,"title":{},"body":{"index.html":{}}}],["john",{"_index":446,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["join",{"_index":897,"title":{},"body":{"injectables/ProductService.html":{}}}],["jpeg",{"_index":796,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["jpeg|jpg|png",{"_index":1384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jpg",{"_index":797,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["json",{"_index":1236,"title":{},"body":{"index.html":{}}}],["jsonwebtoken",{"_index":590,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/variables.html":{}}}],["jwt",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.strategy",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":25,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconfig",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconfig.secret",{"_index":620,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["jwtfromrequest",{"_index":615,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["jwtmodule",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register(jwtconfig",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":94,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"overview.html":{}}}],["kind",{"_index":1298,"title":{},"body":{"license.html":{}}}],["lazily",{"_index":742,"title":{},"body":{"injectables/PrismaService.html":{}}}],["leading",{"_index":857,"title":{},"body":{"injectables/ProductService.html":{}}}],["leave",{"_index":740,"title":{},"body":{"injectables/PrismaService.html":{}}}],["length",{"_index":433,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letter",{"_index":309,"title":{},"body":{"injectables/CategoryService.html":{},"classes/CreateUserDto.html":{}}}],["liability",{"_index":1313,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1310,"title":{},"body":{"license.html":{}}}],["library",{"_index":565,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/variables.html":{}}}],["license",{"_index":1257,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["licença",{"_index":1155,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":1276,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1300,"title":{},"body":{"license.html":{}}}],["limits",{"_index":1379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linting",{"_index":1253,"title":{},"body":{"index.html":{}}}],["listens",{"_index":731,"title":{},"body":{"injectables/PrismaService.html":{}}}],["login",{"_index":50,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["login(email",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(undefined",{"_index":51,"title":{},"body":{"controllers/AuthController.html":{}}}],["logincredentialsdto",{"_index":52,"title":{"classes/LoginCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["loginresponse",{"_index":77,"title":{"classes/LoginResponse.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginResponse.html":{},"coverage.html":{}}}],["logs",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{}}}],["lower",{"_index":856,"title":{},"body":{"injectables/ProductService.html":{}}}],["lowercaseemail",{"_index":1048,"title":{},"body":{"injectables/UserService.html":{}}}],["lowercaseurlname",{"_index":889,"title":{},"body":{"injectables/ProductService.html":{}}}],["lowercaseurlname.trim",{"_index":892,"title":{},"body":{"injectables/ProductService.html":{}}}],["lvaro",{"_index":1260,"title":{},"body":{"license.html":{}}}],["mail",{"_index":429,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{}}}],["mainly",{"_index":1024,"title":{},"body":{"injectables/UserService.html":{}}}],["make",{"_index":866,"title":{},"body":{"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["makes",{"_index":855,"title":{},"body":{"injectables/ProductService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["making",{"_index":673,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["managing",{"_index":297,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["matches",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":445,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.round(math.random",{"_index":1367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maximageuploadsize",{"_index":1088,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":799,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":1302,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1279,"title":{},"body":{"license.html":{}}}],["message",{"_index":287,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{}}}],["metadata",{"_index":1114,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":48,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{}}}],["migrate:dev",{"_index":1193,"title":{},"body":{"index.html":{}}}],["migrate:test",{"_index":1221,"title":{},"body":{"index.html":{}}}],["migrations",{"_index":1192,"title":{},"body":{"index.html":{}}}],["mimetype",{"_index":1372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["minimizar",{"_index":1231,"title":{},"body":{"index.html":{}}}],["minlength",{"_index":439,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":443,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1122,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missingpasswordupdateexception",{"_index":636,"title":{"classes/MissingPasswordUpdateException.html":{}},"body":{"classes/MissingPasswordUpdateException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["mit",{"_index":1256,"title":{},"body":{"index.html":{},"license.html":{}}}],["mode",{"_index":334,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["models/category/category.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["models/product/product.module",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["models/user/user.module",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["modify",{"_index":1278,"title":{},"body":{"license.html":{}}}],["modo",{"_index":1196,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":478,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["ms",{"_index":1250,"title":{},"body":{"index.html":{}}}],["multer",{"_index":1381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multermodule",{"_index":830,"title":{},"body":{"modules/ProductModule.html":{}}}],["multermodule.register(multeruploadconfig",{"_index":835,"title":{},"body":{"modules/ProductModule.html":{}}}],["multeroptions",{"_index":1358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multeruploadconfig",{"_index":801,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["multiple",{"_index":863,"title":{},"body":{"injectables/ProductService.html":{}}}],["máquina",{"_index":1168,"title":{},"body":{"index.html":{}}}],["mínimo",{"_index":1214,"title":{},"body":{"index.html":{}}}],["na",{"_index":1173,"title":{},"body":{"index.html":{}}}],["name",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["name.substring(1).tolocalelowercase",{"_index":353,"title":{},"body":{"injectables/CategoryService.html":{}}}],["name.tolocalelowercase",{"_index":890,"title":{},"body":{"injectables/ProductService.html":{}}}],["name[0].touppercase",{"_index":352,"title":{},"body":{"injectables/CategoryService.html":{}}}],["ndice",{"_index":1151,"title":{},"body":{"index.html":{}}}],["need",{"_index":579,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["needed",{"_index":358,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UpdateUserRoleDto.html":{}}}],["needs",{"_index":569,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/ProductController.html":{}}}],["nestinterceptor",{"_index":494,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["nestjs",{"_index":479,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"index.html":{}}}],["nestjs/common",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/InvalidEmailOrPasswordError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1103,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":831,"title":{},"body":{"modules/ProductModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"classes/CreateProductDto.html":{},"classes/FileUploadDto.html":{},"controllers/ProductController.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserWithoutPassword.html":{},"dependencies.html":{}}}],["new",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["next",{"_index":485,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["next.handle().pipe",{"_index":503,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["node.js",{"_index":1163,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":1306,"title":{},"body":{"license.html":{}}}],["nos",{"_index":1239,"title":{},"body":{"index.html":{}}}],["note",{"_index":925,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["notfoundexception",{"_index":293,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["notice",{"_index":1291,"title":{},"body":{"license.html":{}}}],["number",{"_index":371,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/Product.html":{}}}],["o",{"_index":1162,"title":{},"body":{"index.html":{}}}],["object",{"_index":666,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"miscellaneous/variables.html":{}}}],["object.values(error.meta)[0][0",{"_index":708,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["object.values(errormeta)[0][0",{"_index":707,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["observable",{"_index":493,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["obtaining",{"_index":1268,"title":{},"body":{"license.html":{}}}],["offices",{"_index":411,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["offset",{"_index":328,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"injectables/ProductService.html":{}}}],["omitting",{"_index":1069,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["omittype",{"_index":397,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UserWithoutPassword.html":{}}}],["omittype(product",{"_index":404,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["omittype(user",{"_index":1071,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["once",{"_index":1129,"title":{},"body":{"miscellaneous/functions.html":{}}}],["one",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["onmoduleinit",{"_index":726,"title":{},"body":{"injectables/PrismaService.html":{}}}],["optional",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{}}}],["orderby",{"_index":336,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["ordering",{"_index":211,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["orm",{"_index":645,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{}}}],["os",{"_index":1210,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":1318,"title":{},"body":{"license.html":{}}}],["out",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":1326,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1100,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":205,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["pages",{"_index":1150,"title":{},"body":{"index.html":{}}}],["pagination",{"_index":202,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["para",{"_index":1138,"title":{},"body":{"index.html":{}}}],["param",{"_index":232,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{}}}],["param('id",{"_index":256,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{}}}],["param('name",{"_index":259,"title":{},"body":{"controllers/CategoryController.html":{}}}],["parameters",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{}}}],["partial",{"_index":926,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype",{"_index":928,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createcategorydto",{"_index":929,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["partialtype(createproductdto",{"_index":931,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createuserdto",{"_index":937,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["particular",{"_index":1304,"title":{},"body":{"license.html":{}}}],["passport",{"_index":564,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"dependencies.html":{},"index.html":{}}}],["passportmodule",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":597,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["passportstrategy(strategy",{"_index":614,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["password",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["password.entity",{"_index":992,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["password.entity.ts",{"_index":1066,"title":{},"body":{"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["password.error",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["password.error..ts",{"_index":550,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"coverage.html":{}}}],["password.error..ts:7",{"_index":554,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{}}}],["pasta",{"_index":1174,"title":{},"body":{"index.html":{}}}],["patch",{"_index":231,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":261,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{}}}],["patch('picture/:id",{"_index":821,"title":{},"body":{"controllers/ProductController.html":{}}}],["patch('role",{"_index":1001,"title":{},"body":{"controllers/UserController.html":{}}}],["path.extname(file.originalname).tolowercase",{"_index":1376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":145,"title":{"interfaces/Payload.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{}}}],["payload.role",{"_index":622,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["payload.sub",{"_index":621,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["per",{"_index":209,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["percentage",{"_index":390,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["permission",{"_index":1262,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1286,"title":{},"body":{"license.html":{}}}],["person",{"_index":1267,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1287,"title":{},"body":{"license.html":{}}}],["picture",{"_index":345,"title":{},"body":{"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"miscellaneous/functions.html":{}}}],["picture'})@isadmin()@fileupload()@patch('picture/:id",{"_index":794,"title":{},"body":{"controllers/ProductController.html":{}}}],["picture.png",{"_index":532,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["please",{"_index":640,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["png",{"_index":798,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["pode",{"_index":1202,"title":{},"body":{"index.html":{}}}],["porta",{"_index":1200,"title":{},"body":{"index.html":{}}}],["portions",{"_index":1295,"title":{},"body":{"license.html":{}}}],["post",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["post('login",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgresql",{"_index":1234,"title":{},"body":{"index.html":{}}}],["postgresql://username:password@localhost:5432/ecommerce",{"_index":1218,"title":{},"body":{"index.html":{}}}],["precisar",{"_index":1160,"title":{},"body":{"index.html":{}}}],["preenchendo",{"_index":1185,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":181,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["prettier",{"_index":1252,"title":{},"body":{"index.html":{}}}],["price",{"_index":375,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["prisma",{"_index":169,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["prisma.categoryuncheckedcreateinput",{"_index":171,"title":{},"body":{"classes/Category.html":{}}}],["prisma.categoryuncheckedcreatenestedmanywithoutproductsinput",{"_index":847,"title":{},"body":{"injectables/ProductService.html":{}}}],["prisma.decimal",{"_index":747,"title":{},"body":{"classes/Product.html":{}}}],["prisma.productuncheckedcreateinput",{"_index":761,"title":{},"body":{"classes/Product.html":{}}}],["prisma.service",{"_index":720,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.useruncheckedcreateinput",{"_index":956,"title":{},"body":{"classes/User.html":{}}}],["prisma/client",{"_index":170,"title":{},"body":{"classes/Category.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"dependencies.html":{}}}],["prisma/client/runtime",{"_index":398,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/PrismaExceptionHandler.html":{}}}],["prisma/prisma.module",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":724,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientknownrequesterror",{"_index":656,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror",{"_index":681,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror.recordsnotfound",{"_index":699,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror.uniqueconstraintviolation",{"_index":694,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaexceptionhandler",{"_index":497,"title":{"classes/PrismaExceptionHandler.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["prismaexceptionhandler().handle(error",{"_index":506,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["prismamodule",{"_index":9,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":302,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/CategoryService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["probably",{"_index":1033,"title":{},"body":{"injectables/UserService.html":{}}}],["process.env.jwt_secret",{"_index":1348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.exit",{"_index":735,"title":{},"body":{"injectables/PrismaService.html":{}}}],["product",{"_index":367,"title":{"classes/Product.html":{}},"body":{"classes/CreateProductDto.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindProductsDto.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["product'})@isadmin()@delete(':id')@httpcode(httpstatus.no_content",{"_index":787,"title":{},"body":{"controllers/ProductController.html":{}}}],["product'})@isadmin()@patch(':id",{"_index":790,"title":{},"body":{"controllers/ProductController.html":{}}}],["product'})@isadmin()@post",{"_index":776,"title":{},"body":{"controllers/ProductController.html":{}}}],["product.controller",{"_index":829,"title":{},"body":{"modules/ProductModule.html":{}}}],["product.dto",{"_index":807,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts",{"_index":366,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:26",{"_index":393,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:36",{"_index":374,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:44",{"_index":388,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:51",{"_index":395,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:59",{"_index":386,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:67",{"_index":383,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.service",{"_index":809,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{}}}],["product/dto/find",{"_index":239,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["productcontroller",{"_index":771,"title":{"controllers/ProductController.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{}}}],["productmodule",{"_index":10,"title":{"modules/ProductModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules.html":{},"overview.html":{}}}],["productname",{"_index":338,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindProductsDto.html":{},"injectables/ProductService.html":{}}}],["productnameinuseexception",{"_index":685,"title":{"classes/ProductNameInUseException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"coverage.html":{}}}],["productnotfoundexception",{"_index":687,"title":{"classes/ProductNotFoundException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductNotFoundException.html":{},"coverage.html":{}}}],["products",{"_index":254,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/User.html":{},"miscellaneous/functions.html":{}}}],["products'})@public()@get",{"_index":779,"title":{},"body":{"controllers/ProductController.html":{}}}],["products'})@public()@get('/id/:id",{"_index":215,"title":{},"body":{"controllers/CategoryController.html":{}}}],["products'})@public()@get(':name",{"_index":219,"title":{},"body":{"controllers/CategoryController.html":{}}}],["products.dto",{"_index":240,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["products.dto.ts",{"_index":545,"title":{},"body":{"classes/FindProductsDto.html":{},"coverage.html":{}}}],["products.dto.ts:11",{"_index":548,"title":{},"body":{"classes/FindProductsDto.html":{}}}],["products.dto.ts:20",{"_index":547,"title":{},"body":{"classes/FindProductsDto.html":{}}}],["products.dto.ts:29",{"_index":546,"title":{},"body":{"classes/FindProductsDto.html":{}}}],["productservice",{"_index":808,"title":{"injectables/ProductService.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{},"overview.html":{}}}],["productserviceinputexception",{"_index":512,"title":{"classes/ProductServiceInputException.html":{}},"body":{"classes/FileTypeError.html":{},"classes/ProductServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["productstoskip",{"_index":339,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["produtos",{"_index":1142,"title":{},"body":{"index.html":{}}}],["profile",{"_index":973,"title":{},"body":{"controllers/UserController.html":{}}}],["profile'})@apibearerauth()@get",{"_index":971,"title":{},"body":{"controllers/UserController.html":{}}}],["projeto",{"_index":1166,"title":{},"body":{"index.html":{}}}],["promise",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":162,"title":{"properties.html":{}},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"classes/Product.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"interfaces/ValidateReturn.html":{},"properties.html":{}}}],["provide",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":1296,"title":{},"body":{"license.html":{}}}],["providers",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public.decorator",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["publish",{"_index":1280,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1305,"title":{},"body":{"license.html":{}}}],["que",{"_index":1215,"title":{},"body":{"index.html":{}}}],["query",{"_index":234,"title":{},"body":{"controllers/CategoryController.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["quot",{"_index":868,"title":{},"body":{"injectables/ProductService.html":{}}}],["quot;brand1",{"_index":871,"title":{},"body":{"injectables/ProductService.html":{}}}],["raiz",{"_index":1184,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["received",{"_index":631,"title":{},"body":{"classes/LoginResponse.html":{}}}],["reflect",{"_index":1113,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":574,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["regexp",{"_index":514,"title":{},"body":{"classes/FileTypeError.html":{}}}],["registered",{"_index":282,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["regular",{"_index":1385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rejectonnotfound",{"_index":346,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["related",{"_index":978,"title":{},"body":{"controllers/UserController.html":{}}}],["remove",{"_index":188,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["remove(@param('id",{"_index":265,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{}}}],["remove(id",{"_index":221,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["remove(request",{"_index":975,"title":{},"body":{"controllers/UserController.html":{}}}],["removes",{"_index":318,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["replacing",{"_index":1032,"title":{},"body":{"injectables/UserService.html":{}}}],["req",{"_index":986,"title":{},"body":{"controllers/UserController.html":{}}}],["request",{"_index":919,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":921,"title":{},"body":{"guards/RolesGuard.html":{}}}],["request.user['userid",{"_index":998,"title":{},"body":{"controllers/UserController.html":{}}}],["requests",{"_index":1027,"title":{},"body":{"injectables/UserService.html":{}}}],["reset",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["respective",{"_index":489,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["response",{"_index":630,"title":{},"body":{"classes/LoginResponse.html":{}}}],["responsible",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["restriction",{"_index":1274,"title":{},"body":{"license.html":{}}}],["results",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":608,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["returns",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/functions.html":{}}}],["rights",{"_index":1277,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1116,"title":{},"body":{"dependencies.html":{}}}],["roda",{"_index":1191,"title":{},"body":{"index.html":{}}}],["rodar",{"_index":1209,"title":{},"body":{"index.html":{}}}],["role",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidateReturn.html":{}}}],["role'})@isadmin()@patch('role",{"_index":984,"title":{},"body":{"controllers/UserController.html":{}}}],["role.admin",{"_index":922,"title":{},"body":{"guards/RolesGuard.html":{}}}],["role.dto",{"_index":989,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role.dto.ts",{"_index":939,"title":{},"body":{"classes/UpdateUserRoleDto.html":{},"coverage.html":{}}}],["role.dto.ts:11",{"_index":940,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["role.dto.ts:18",{"_index":942,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["rolesguard",{"_index":909,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["route",{"_index":568,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"classes/LoginResponse.html":{},"guards/RolesGuard.html":{}}}],["rxjs",{"_index":496,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["same",{"_index":1068,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["saved",{"_index":378,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"injectables/UserService.html":{}}}],["search",{"_index":313,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{}}}],["searching",{"_index":210,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{}}}],["secret",{"_index":1347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":619,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["select",{"_index":342,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["sell",{"_index":1284,"title":{},"body":{"license.html":{}}}],["senhas",{"_index":1243,"title":{},"body":{"index.html":{}}}],["service",{"_index":520,"title":{},"body":{"classes/FileTypeError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/ProductServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["servidor",{"_index":1190,"title":{},"body":{"index.html":{}}}],["set",{"_index":983,"title":{},"body":{"controllers/UserController.html":{}}}],["setmetadata(is_public_key",{"_index":1345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sets",{"_index":1355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":1292,"title":{},"body":{"license.html":{}}}],["show",{"_index":315,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{}}}],["showing",{"_index":207,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["shutdown",{"_index":732,"title":{},"body":{"injectables/PrismaService.html":{}}}],["signals",{"_index":733,"title":{},"body":{"injectables/PrismaService.html":{}}}],["signoptions",{"_index":1349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["single",{"_index":862,"title":{},"body":{"injectables/ProductService.html":{}}}],["singlespaceurlname",{"_index":893,"title":{},"body":{"injectables/ProductService.html":{}}}],["singlespaceurlname.split",{"_index":896,"title":{},"body":{"injectables/ProductService.html":{}}}],["size",{"_index":1357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skip",{"_index":331,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["software",{"_index":1270,"title":{},"body":{"license.html":{}}}],["source",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{}}}],["spaces",{"_index":860,"title":{},"body":{"injectables/ProductService.html":{}}}],["spacetohyphenurlname",{"_index":895,"title":{},"body":{"injectables/ProductService.html":{}}}],["specific",{"_index":468,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["src/.../file",{"_index":1125,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../is",{"_index":1126,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../jwt.config.ts",{"_index":1338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1124,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../multer",{"_index":1339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":1337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":18,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":42,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:19",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:10",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:26",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:44",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/login",{"_index":623,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.response.ts",{"_index":629,"title":{},"body":{"classes/LoginResponse.html":{},"coverage.html":{}}}],["src/auth/dto/login.response.ts:7",{"_index":634,"title":{},"body":{"classes/LoginResponse.html":{}}}],["src/auth/errors/invalid",{"_index":549,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"coverage.html":{}}}],["src/auth/jwt",{"_index":562,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":589,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:34",{"_index":593,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:45",{"_index":595,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/public.decorator",{"_index":235,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["src/auth/public.decorator.ts",{"_index":1080,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/file",{"_index":805,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/decorators/is",{"_index":237,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/common/exceptions/category/category",{"_index":274,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["src/common/exceptions/product/product",{"_index":686,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"coverage.html":{}}}],["src/common/exceptions/user/email",{"_index":456,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["src/common/exceptions/user/user",{"_index":689,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts",{"_index":910,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts:12",{"_index":912,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/guards/roles.guard.ts:22",{"_index":913,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/interceptors/exception.interceptor.ts",{"_index":472,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/exception.interceptor.ts:23",{"_index":487,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["src/common/interceptors/handlers/exception.handler.ts",{"_index":461,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"coverage.html":{}}}],["src/common/interceptors/handlers/exception.handler.ts:4",{"_index":466,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["src/common/interceptors/handlers/prisma",{"_index":643,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["src/common/interceptors/handlers/user",{"_index":1004,"title":{},"body":{"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["src/config/jwt.config",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["src/config/jwt.config.ts",{"_index":1086,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/multer",{"_index":833,"title":{},"body":{"modules/ProductModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1090,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/models/category/category.controller.ts",{"_index":180,"title":{},"body":{"controllers/CategoryController.html":{},"coverage.html":{}}}],["src/models/category/category.controller.ts:37",{"_index":195,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:51",{"_index":200,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:61",{"_index":216,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:72",{"_index":220,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:83",{"_index":229,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:95",{"_index":224,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.module.ts",{"_index":270,"title":{},"body":{"modules/CategoryModule.html":{}}}],["src/models/category/category.service.ts",{"_index":296,"title":{},"body":{"injectables/CategoryService.html":{},"coverage.html":{}}}],["src/models/category/category.service.ts:102",{"_index":319,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:119",{"_index":317,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:124",{"_index":306,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:13",{"_index":303,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:132",{"_index":321,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:22",{"_index":310,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:36",{"_index":312,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:54",{"_index":314,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:77",{"_index":316,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/dto/create",{"_index":355,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/models/category/dto/find",{"_index":533,"title":{},"body":{"classes/FindCategoriesDto.html":{},"coverage.html":{}}}],["src/models/category/dto/update",{"_index":923,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/models/category/entities/category.entity.ts",{"_index":160,"title":{},"body":{"classes/Category.html":{},"coverage.html":{}}}],["src/models/category/entities/category.entity.ts:15",{"_index":168,"title":{},"body":{"classes/Category.html":{}}}],["src/models/category/entities/category.entity.ts:9",{"_index":166,"title":{},"body":{"classes/Category.html":{}}}],["src/models/product/dto/create",{"_index":365,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/models/product/dto/file",{"_index":524,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["src/models/product/dto/find",{"_index":544,"title":{},"body":{"classes/FindProductsDto.html":{},"coverage.html":{}}}],["src/models/product/dto/update",{"_index":930,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/models/product/entities/product.entity.ts",{"_index":746,"title":{},"body":{"classes/Product.html":{},"coverage.html":{}}}],["src/models/product/entities/product.entity.ts:15",{"_index":755,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:21",{"_index":758,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:27",{"_index":756,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:35",{"_index":748,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:41",{"_index":753,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:46",{"_index":757,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:52",{"_index":752,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:58",{"_index":750,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:9",{"_index":754,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/exceptions/file",{"_index":508,"title":{},"body":{"classes/FileTypeError.html":{},"coverage.html":{}}}],["src/models/product/exceptions/product",{"_index":901,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["src/models/product/product.controller.ts",{"_index":772,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{}}}],["src/models/product/product.controller.ts:104",{"_index":788,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:38",{"_index":777,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:50",{"_index":780,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:58",{"_index":783,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:66",{"_index":786,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:81",{"_index":795,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:92",{"_index":791,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.module.ts",{"_index":828,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/models/product/product.service.ts",{"_index":837,"title":{},"body":{"injectables/ProductService.html":{},"coverage.html":{}}}],["src/models/product/product.service.ts:103",{"_index":873,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:115",{"_index":853,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:128",{"_index":876,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:13",{"_index":842,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:143",{"_index":844,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:22",{"_index":848,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:40",{"_index":878,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:51",{"_index":849,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:70",{"_index":850,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:79",{"_index":851,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:88",{"_index":874,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/user/dto/create",{"_index":423,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/models/user/dto/delete",{"_index":451,"title":{},"body":{"classes/DeleteUserDto.html":{},"coverage.html":{}}}],["src/models/user/dto/update",{"_index":933,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"coverage.html":{}}}],["src/models/user/entities/user",{"_index":1065,"title":{},"body":{"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["src/models/user/entities/user.entity",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/models/user/entities/user.entity.ts",{"_index":944,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/models/user/entities/user.entity.ts:19",{"_index":952,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:25",{"_index":948,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:31",{"_index":951,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:37",{"_index":950,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:43",{"_index":946,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:49",{"_index":947,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:55",{"_index":955,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:9",{"_index":949,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/exceptions/invalid",{"_index":557,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{},"coverage.html":{}}}],["src/models/user/exceptions/missing",{"_index":637,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{},"coverage.html":{}}}],["src/models/user/exceptions/user",{"_index":1006,"title":{},"body":{"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["src/models/user/user.controller.ts",{"_index":964,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/models/user/user.controller.ts:37",{"_index":969,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:45",{"_index":972,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:55",{"_index":981,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:68",{"_index":985,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:79",{"_index":977,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.module",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/models/user/user.module.ts",{"_index":1012,"title":{},"body":{"modules/UserModule.html":{}}}],["src/models/user/user.service",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/models/user/user.service.ts",{"_index":1015,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/models/user/user.service.ts:107",{"_index":1031,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:132",{"_index":1040,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:17",{"_index":1019,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:26",{"_index":1020,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:44",{"_index":1026,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:56",{"_index":1022,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:63",{"_index":1037,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:80",{"_index":1038,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:94",{"_index":1036,"title":{},"body":{"injectables/UserService.html":{}}}],["src/prisma/prisma.module",{"_index":272,"title":{},"body":{"modules/CategoryModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["src/prisma/prisma.module.ts",{"_index":718,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":323,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":721,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:15",{"_index":739,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:25",{"_index":729,"title":{},"body":{"injectables/PrismaService.html":{}}}],["start:dev",{"_index":1198,"title":{},"body":{"index.html":{}}}],["started",{"_index":1133,"title":{"index.html":{},"license.html":{}},"body":{}}],["starting",{"_index":204,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["starts",{"_index":1127,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statements",{"_index":1075,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":277,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["stock",{"_index":370,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["storage",{"_index":1359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategy",{"_index":599,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["street",{"_index":449,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["string",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/variables.html":{}}}],["studio",{"_index":1208,"title":{},"body":{"index.html":{}}}],["studio:test",{"_index":1229,"title":{},"body":{"index.html":{}}}],["sua",{"_index":1167,"title":{},"body":{"index.html":{}}}],["sub",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["subject",{"_index":602,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"license.html":{}}}],["sublicense",{"_index":1282,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1294,"title":{},"body":{"license.html":{}}}],["successfully",{"_index":632,"title":{},"body":{"classes/LoginResponse.html":{}}}],["summary",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":583,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["super('category",{"_index":289,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{}}}],["super('e",{"_index":457,"title":{},"body":{"classes/EmailInUseException.html":{}}}],["super('invalid",{"_index":555,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{}}}],["super('please",{"_index":642,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["super('product",{"_index":836,"title":{},"body":{"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{}}}],["super('user",{"_index":1014,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["super(`file",{"_index":522,"title":{},"body":{"classes/FileTypeError.html":{}}}],["super(message",{"_index":907,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["super.canactivate(context",{"_index":588,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["supertest",{"_index":1249,"title":{},"body":{"index.html":{}}}],["support",{"_index":1323,"title":{},"body":{"modules.html":{}}}],["supports",{"_index":517,"title":{},"body":{"classes/FileTypeError.html":{}}}],["svg",{"_index":1324,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1119,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["switch",{"_index":691,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["system",{"_index":283,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"controllers/UserController.html":{},"classes/UserNotFoundException.html":{}}}],["table",{"_index":1099,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1098,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":332,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["tecnologias",{"_index":1154,"title":{},"body":{"index.html":{}}}],["ter",{"_index":1161,"title":{},"body":{"index.html":{}}}],["test",{"_index":1226,"title":{},"body":{"index.html":{}}}],["test:all",{"_index":1223,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1228,"title":{},"body":{"index.html":{}}}],["test?schema=public",{"_index":1219,"title":{},"body":{"index.html":{}}}],["testes",{"_index":1211,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":743,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":744,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.authservice.login(email",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.capitalizeonlyfirstletter(createcategorydto.name",{"_index":324,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.capitalizeonlyfirstletter(name",{"_index":347,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.capitalizeonlyfirstletter(updatecategorydto.name",{"_index":354,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryservice.create(createcategorydto",{"_index":252,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findall(findcategoriesdto",{"_index":253,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findonebyid(id",{"_index":257,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findonebyname(name",{"_index":260,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.remove(id",{"_index":266,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.update(id",{"_index":262,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.connectcategoriesbyid(createproductdto.categories",{"_index":880,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.formaturlname(createproductdto.name",{"_index":879,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.formaturlname(updateproductdto.name",{"_index":898,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.hashifupdatingpassword(id",{"_index":1053,"title":{},"body":{"injectables/UserService.html":{}}}],["this.iscategoryerror(error",{"_index":703,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.iscategorynameconstraintviolation(error",{"_index":697,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.iscreateproducterror(error",{"_index":702,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isemailconstraintviolation(error.meta",{"_index":695,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isprismaunknownerror(error",{"_index":704,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isproducterror(error",{"_index":701,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isproductnameconstraintviolation(error",{"_index":696,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isusererror(error",{"_index":700,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.jwtservice.sign(payload",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.category.create",{"_index":325,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.delete",{"_index":351,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.findmany",{"_index":330,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.findunique",{"_index":340,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.update",{"_index":350,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.product.create",{"_index":881,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.delete",{"_index":888,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.findmany",{"_index":884,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.findunique",{"_index":885,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.update",{"_index":882,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.user.create",{"_index":1050,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.delete",{"_index":1059,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":1051,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":1054,"title":{},"body":{"injectables/UserService.html":{}}}],["this.productservice.create(createproductdto",{"_index":813,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findall(findallproductsdto",{"_index":815,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findonebyid(id",{"_index":817,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findonebyurlname(urlname",{"_index":820,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.remove(id",{"_index":824,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.update(id",{"_index":823,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.uploadpicture(id",{"_index":822,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.reflector.getallandoverride(is_admin_key",{"_index":918,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":585,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.updatecategoryandname(id",{"_index":349,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.updateproductandurlname(id",{"_index":887,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.userservice.create(createuserdto",{"_index":996,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyemail(email",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyid(userid",{"_index":999,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(userid",{"_index":1003,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(userid",{"_index":1000,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateuserrole(updateuserroledto",{"_index":1002,"title":{},"body":{"controllers/UserController.html":{}}}],["this.validatecurrentpassword(id",{"_index":1057,"title":{},"body":{"injectables/UserService.html":{}}}],["this.validateuser(email",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{}}}],["thrown",{"_index":1035,"title":{},"body":{"injectables/UserService.html":{}}}],["throws",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{}}}],["tmp",{"_index":1362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["todos",{"_index":1222,"title":{},"body":{"index.html":{}}}],["token",{"_index":601,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"index.html":{}}}],["tooling",{"_index":1232,"title":{},"body":{"index.html":{}}}],["tort",{"_index":1317,"title":{},"body":{"license.html":{}}}],["trailing",{"_index":858,"title":{},"body":{"injectables/ProductService.html":{}}}],["transform",{"_index":474,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["transformer",{"_index":541,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"dependencies.html":{},"index.html":{}}}],["tratar",{"_index":1246,"title":{},"body":{"index.html":{}}}],["trimmedurlname",{"_index":891,"title":{},"body":{"injectables/ProductService.html":{}}}],["trimmedurlname.replace(/\\s\\s+/g",{"_index":894,"title":{},"body":{"injectables/ProductService.html":{}}}],["true",{"_index":343,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["trying",{"_index":559,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{}}}],["turn",{"_index":861,"title":{},"body":{"injectables/ProductService.html":{}}}],["turned",{"_index":759,"title":{},"body":{"classes/Product.html":{}}}],["type",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.exception.ts",{"_index":509,"title":{},"body":{"classes/FileTypeError.html":{},"coverage.html":{}}}],["type.exception.ts:6",{"_index":515,"title":{},"body":{"classes/FileTypeError.html":{}}}],["types",{"_index":469,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":1230,"title":{},"body":{"index.html":{}}}],["ui",{"_index":1120,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["um",{"_index":1181,"title":{},"body":{"index.html":{}}}],["unauthenticated",{"_index":1346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":553,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{}}}],["undefined",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{}}}],["uniquesuffix",{"_index":1365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unitários",{"_index":1225,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":674,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["unlicensed",{"_index":1333,"title":{},"body":{"properties.html":{}}}],["up",{"_index":1383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updatable",{"_index":924,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["update",{"_index":189,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["update(id",{"_index":225,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["update(request",{"_index":979,"title":{},"body":{"controllers/UserController.html":{}}}],["update.exception",{"_index":1044,"title":{},"body":{"injectables/UserService.html":{}}}],["update.exception.ts",{"_index":558,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"coverage.html":{}}}],["update.exception.ts:6",{"_index":561,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{}}}],["update.exception.ts:7",{"_index":639,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["updatecategoryandname",{"_index":300,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatecategoryandname(id",{"_index":320,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatecategorydto",{"_index":226,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatecategorydto.name",{"_index":348,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatedat",{"_index":945,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{}}}],["updateproductandurlname",{"_index":840,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateproductandurlname(id",{"_index":875,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateproductdto",{"_index":789,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updateproductdto.name",{"_index":886,"title":{},"body":{"injectables/ProductService.html":{}}}],["updates",{"_index":227,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserdto",{"_index":932,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserdto.currentpassword",{"_index":1061,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto.password",{"_index":1060,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserrole",{"_index":966,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserrole(updateuserroledto",{"_index":982,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserroledto",{"_index":938,"title":{"classes/UpdateUserRoleDto.html":{}},"body":{"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserroledto.email",{"_index":1055,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserroledto.role",{"_index":1056,"title":{},"body":{"injectables/UserService.html":{}}}],["upload",{"_index":516,"title":{},"body":{"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["upload.config",{"_index":834,"title":{},"body":{"modules/ProductModule.html":{}}}],["upload.config.ts",{"_index":1087,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["upload.decorator",{"_index":806,"title":{},"body":{"controllers/ProductController.html":{}}}],["upload.decorator.ts",{"_index":1083,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["upload.dto.ts",{"_index":525,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["upload.dto.ts:10",{"_index":530,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["uploadedfile",{"_index":803,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploading",{"_index":511,"title":{},"body":{"classes/FileTypeError.html":{}}}],["uploadphoto",{"_index":774,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploadphoto(id",{"_index":792,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploadpicture",{"_index":841,"title":{},"body":{"injectables/ProductService.html":{}}}],["uploadpicture(id",{"_index":877,"title":{},"body":{"injectables/ProductService.html":{}}}],["uploads",{"_index":793,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["url",{"_index":760,"title":{},"body":{"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["urlname",{"_index":344,"title":{},"body":{"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["urlname'})@public()@get(':urlname",{"_index":785,"title":{},"body":{"controllers/ProductController.html":{}}}],["use",{"_index":288,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"license.html":{}}}],["use.exception",{"_index":683,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["use.exception.ts",{"_index":275,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"coverage.html":{}}}],["use.exception.ts:6",{"_index":286,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["useclass",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":279,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtStrategy.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"interfaces/ValidateReturn.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":44,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateException.html":{},"interfaces/Payload.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":953,"title":{},"body":{"classes/User.html":{},"controllers/UserController.html":{}}}],["user'})@apibearerauth()@delete()@httpcode(httpstatus.no_content",{"_index":976,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@apibearerauth()@patch",{"_index":980,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@public()@post",{"_index":968,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@public()@post('login')@httpcode(httpstatus.ok",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.controller",{"_index":1013,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":936,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":424,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":453,"title":{},"body":{"classes/DeleteUserDto.html":{}}}],["user.dto.ts:17",{"_index":430,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":935,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:28",{"_index":437,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":431,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:44",{"_index":426,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":1070,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["user.id",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.role",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":993,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user@example.com",{"_index":441,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{}}}],["usercontroller",{"_index":963,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":612,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"controllers/UserController.html":{},"interfaces/ValidateReturn.html":{}}}],["userinputexceptionhandler",{"_index":500,"title":{"classes/UserInputExceptionHandler.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["userinputexceptionhandler().handle(error",{"_index":505,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["usermodule",{"_index":11,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["usernotfoundexception",{"_index":688,"title":{"classes/UserNotFoundException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["userrole",{"_index":613,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"interfaces/ValidateReturn.html":{}}}],["users",{"_index":954,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":115,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userserviceinputexception",{"_index":560,"title":{"classes/UserServiceInputException.html":{}},"body":{"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["userwithoutpassword",{"_index":990,"title":{"classes/UserWithoutPassword.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["uses",{"_index":490,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/JwtAuthGuard.html":{}}}],["usuário",{"_index":1156,"title":{},"body":{"index.html":{}}}],["usuários",{"_index":1141,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":167,"title":{},"body":{"classes/Category.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["valid",{"_index":1387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":592,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":594,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["validatecurrentpassword",{"_index":1018,"title":{},"body":{"injectables/UserService.html":{}}}],["validatecurrentpassword(id",{"_index":1039,"title":{},"body":{"injectables/UserService.html":{}}}],["validated",{"_index":610,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["validatereturn",{"_index":611,"title":{"interfaces/ValidateReturn.html":{}},"body":{"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{},"coverage.html":{}}}],["validates",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/ValidateReturn.html":{}}}],["validateuser",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":363,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"dependencies.html":{},"index.html":{}}}],["validações",{"_index":1238,"title":{},"body":{"index.html":{}}}],["validimageuploadtypesregex",{"_index":1089,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["validimageuploadtypesregex.test",{"_index":1375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validimageuploadtypesregex.test(file.mimetype",{"_index":1373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["value",{"_index":1340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":1081,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1336,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["veiga",{"_index":1261,"title":{},"body":{"license.html":{}}}],["verify",{"_index":1341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1331,"title":{},"body":{"properties.html":{}}}],["visualizar",{"_index":1205,"title":{},"body":{"index.html":{}}}],["voc",{"_index":1159,"title":{},"body":{"index.html":{}}}],["void",{"_index":470,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"miscellaneous/functions.html":{}}}],["warranties",{"_index":1301,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1297,"title":{},"body":{"license.html":{}}}],["way",{"_index":846,"title":{},"body":{"injectables/ProductService.html":{}}}],["web",{"_index":1237,"title":{},"body":{"index.html":{}}}],["wether",{"_index":658,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["wheelchair",{"_index":408,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["whether",{"_index":1314,"title":{},"body":{"license.html":{}}}],["white",{"_index":859,"title":{},"body":{"injectables/ProductService.html":{}}}],["without",{"_index":974,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"license.html":{}}}],["won't",{"_index":1028,"title":{},"body":{"injectables/UserService.html":{}}}],["words",{"_index":865,"title":{},"body":{"injectables/ProductService.html":{}}}],["world",{"_index":448,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["wrong",{"_index":552,"title":{},"body":{"classes/InvalidEmailOrPasswordError.html":{},"classes/InvalidPasswordUpdateException.html":{}}}],["yarn",{"_index":1179,"title":{},"body":{"index.html":{}}}],["z",{"_index":435,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CategoryModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            ProductModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthModule } from './auth/auth.module';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\nimport { UserModule } from './models/user/user.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { ProductModule } from './models/product/product.module';\nimport { CategoryModule } from './models/category/category.module';\n\n@Module({\n  imports: [\n    UserModule,\n    AuthModule,\n    PrismaModule,\n    ProductModule,\n    CategoryModule,\n  ],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                User authentication endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(undefined: LoginCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Logs in user'})@Public()@Post('login')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:19\n                \n            \n\n\n            \n                \n                    Authenticates the User\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { LoginCredentialsDto } from './dto/login-credentials.dto';\nimport { LoginResponse } from './dto/login.response';\nimport { Public } from './public.decorator';\n\n/** User authentication endpoints */\n@ApiTags('authentication')\n@Controller()\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  /** Authenticates the User */\n  @ApiOperation({ summary: 'Logs in user' })\n  @Public()\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  async login(\n    @Body() { email, password }: LoginCredentialsDto,\n  ): Promise {\n    return this.authService.login(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { jwtConfig } from 'src/config/jwt.config';\nimport { UserModule } from 'src/models/user/user.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [UserModule, PassportModule, JwtModule.register(jwtConfig)],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for authenticating the user\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Private\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            Responsible for authenticating the user\nInstantiate the class and the UserService and\nJwtService dependencies\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:26\n                \n            \n\n\n            \n                \n                    Validates if the inputted email exists and\ncompares if the hashed password matches the inputted one.\nIf so, returns the JWT accessToken\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:44\n                \n            \n\n\n            \n                \n                    Validates if the inputted email exists and\ncompares if the hashed password matches the inputted one.\nIf not, throws an error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { compare } from 'bcrypt';\nimport { User } from 'src/models/user/entities/user.entity';\nimport { UserService } from 'src/models/user/user.service';\nimport { InvalidEmailOrPasswordError } from './errors/invalid-email-or-password.error.';\n\n/** Responsible for authenticating the user */\n@Injectable()\nexport class AuthService {\n  /** Responsible for authenticating the user\n   *\n   * Instantiate the class and the UserService and\n   * JwtService dependencies\n   */\n  constructor(\n    private readonly userService: UserService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  /** Validates if the inputted email exists and\n   * compares if the hashed password matches the inputted one.\n   *\n   * If so, returns the JWT accessToken\n   */\n  async login(\n    email: string,\n    password: string,\n  ): Promise {\n    const user = await this.validateUser(email, password);\n\n    const payload = { sub: user.id, role: user.role };\n\n    return {\n      accessToken: this.jwtService.sign(payload),\n    };\n  }\n\n  /** Validates if the inputted email exists and\n   * compares if the hashed password matches the inputted one.\n   *\n   * If not, throws an error\n   */\n  private async validateUser(email: string, password: string): Promise {\n    const user = await this.userService.findByEmail(email);\n\n    if (user) {\n      const isPasswordValid = await compare(password, user.password);\n\n      if (isPasswordValid) {\n        return { ...user, password: undefined };\n      }\n    }\n\n    throw new InvalidEmailOrPasswordError();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/entities/category.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of a Category in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/category/entities/category.entity.ts:9\n                        \n                    \n\n            \n                \n                    Category ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/category/entities/category.entity.ts:15\n                        \n                    \n\n            \n                \n                    Category name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\n/** Describes the properties of a Category in the database */\nexport class Category implements Prisma.CategoryUncheckedCreateInput {\n  /**\n   * Category ID as UUID\n   * @example \"e6cf9a58-438c-4fce-8d85-db3d22db270a\"\n   */\n  id?: string;\n\n  /**\n   * Category name\n   * @example \"Decoration\"\n   */\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoryController.html":{"url":"controllers/CategoryController.html","title":"controller - CategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                category\n            \n\n\n            \n                Description\n            \n            \n                Exposes category CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByName\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin creates a new category'})@IsAdmin()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:37\n                \n            \n\n\n            \n                \n                    Creates a new category, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(findCategoriesDto: FindCategoriesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns all categories'})@Public()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:51\n                \n            \n\n\n            \n                \n                    Returns all categories with pagination\nDefault is starting on page 1 showing 10 results per page,\nsearching and ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findCategoriesDto\n                                    \n                                                FindCategoriesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string, findProductsDto: FindProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin gets category by ID and its products'})@Public()@Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:61\n                \n            \n\n\n            \n                \n                    Find category by ID, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    findProductsDto\n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByName(name: string, findProductsDto: FindProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns category by name and its products'})@Public()@Get(':name')\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:72\n                \n            \n\n\n            \n                \n                    Find category by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    findProductsDto\n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin deletes category'})@IsAdmin()@Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:95\n                \n            \n\n\n            \n                \n                    Deletes category from database, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin updates category'})@IsAdmin()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:83\n                \n            \n\n\n            \n                \n                    Updates category information, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Public } from 'src/auth/public.decorator';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { FindProductsDto } from '../product/dto/find-products.dto';\nimport { CategoryService } from './category.service';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { FindCategoriesDto } from './dto/find-categories.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { Category } from './entities/category.entity';\n\n/** Exposes category CRUD endpoints */\n@ApiTags('category')\n@Controller('category')\nexport class CategoryController {\n  /** Exposes category CRUD endpoints\n   *\n   * Instantiate class and CategoryService dependency\n   */\n  constructor(private readonly categoryService: CategoryService) {}\n\n  /** Creates a new category, only for admins */\n  @ApiOperation({ summary: 'Admin creates a new category' })\n  @IsAdmin()\n  @Post()\n  async create(\n    @Body() createCategoryDto: CreateCategoryDto,\n  ): Promise {\n    return this.categoryService.create(createCategoryDto);\n  }\n\n  /** Returns all categories with pagination\n   *\n   * Default is starting on page 1 showing 10 results per page,\n   * searching and ordering by name\n   */\n  @ApiOperation({ summary: 'Returns all categories' })\n  @Public()\n  @Get()\n  async findAll(\n    @Query() findCategoriesDto: FindCategoriesDto,\n  ): Promise {\n    return this.categoryService.findAll(findCategoriesDto);\n  }\n\n  /** Find category by ID, only for admins */\n  @ApiOperation({ summary: 'Admin gets category by ID and its products' })\n  @Public()\n  @Get('/id/:id')\n  async findOneById(\n    @Param('id') id: string,\n    @Query() findProductsDto: FindProductsDto,\n  ): Promise {\n    return this.categoryService.findOneById(id, findProductsDto);\n  }\n\n  /** Find category by name */\n  @ApiOperation({ summary: 'Returns category by name and its products' })\n  @Public()\n  @Get(':name')\n  async findOneByName(\n    @Param('name') name: string,\n    @Query() findProductsDto: FindProductsDto,\n  ): Promise {\n    return this.categoryService.findOneByName(name, findProductsDto);\n  }\n\n  /** Updates category information, only for admins */\n  @ApiOperation({ summary: 'Admin updates category' })\n  @IsAdmin()\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updateCategoryDto: UpdateCategoryDto,\n  ): Promise {\n    return this.categoryService.update(id, updateCategoryDto);\n  }\n\n  /** Deletes category from database, only for admins */\n  @ApiOperation({ summary: 'Admin deletes category' })\n  @IsAdmin()\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async remove(@Param('id') id: string): Promise {\n    return this.categoryService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoryModule.html":{"url":"modules/CategoryModule.html","title":"module - CategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_imports\n\n\n\ncluster_CategoryModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nPrismaModule->CategoryModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/category/category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoryService } from './category.service';\nimport { CategoryController } from './category.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\n\n@Module({\n  controllers: [CategoryController],\n  imports: [PrismaModule],\n  providers: [CategoryService],\n})\nexport class CategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryNameInUseException.html":{"url":"classes/CategoryNameInUseException.html","title":"class - CategoryNameInUseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryNameInUseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/category/category-name-in-use.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\na category name that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/category/category-name-in-use.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'Category name already in use'. Used when the user inputs\na category name that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * a category name that is already registered in the system\n */\nexport class CategoryNameInUseException extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'Category name already in use'. Used when the user inputs\n   * a category name that is already registered in the system\n   */\n  constructor() {\n    super('Category name already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryNotFoundException.html":{"url":"classes/CategoryNotFoundException.html","title":"class - CategoryNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/category/category-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\na category that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/category/category-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'Category not found'. Used when the user inputs\na category that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * a category that is not registered in the system\n */\nexport class CategoryNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'Category not found'. Used when the user inputs\n   * a category that is not registered in the system\n   */\n  constructor() {\n    super('Category not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/category.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing categories in the database.\nCRUD endpoints are available for categories.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                capitalizeOnlyFirstLetter\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByName\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Private\n                                updateCategoryAndName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/category/category.service.ts:13\n                            \n                        \n\n                \n                    \n                            Responsible for managing categories in the database.\nCRUD endpoints are available for categories.\nInstantiates the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        capitalizeOnlyFirstLetter\n                        \n                    \n                \n            \n            \n                \n                    \n                    capitalizeOnlyFirstLetter(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:124\n                \n            \n\n\n            \n                \n                    Capitalize only the first letter of the category name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:22\n                \n            \n\n\n            \n                \n                    Creates a new category\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: FindCategoriesDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:36\n                \n            \n\n\n            \n                \n                    Returns all categories with pagination and can search by name\nDefault is starting on page 1 showing 10 results per page\nand ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindCategoriesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string, undefined: FindProductsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:54\n                \n            \n\n\n            \n                \n                    Find category by ID and show the products that have this category\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByName(name: string, undefined: FindProductsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:77\n                \n            \n\n\n            \n                \n                    Find category by name and show the products that have this category\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:119\n                \n            \n\n\n            \n                \n                    Removes category from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:102\n                \n            \n\n\n            \n                \n                    Updates category information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        updateCategoryAndName\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCategoryAndName(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:132\n                \n            \n\n\n            \n                \n                    Formats name and updates the category with the new one.\nUsed when the user updates the category name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { FindProductsDto } from '../product/dto/find-products.dto';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { FindCategoriesDto } from './dto/find-categories.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { Category } from './entities/category.entity';\n\n/** Responsible for managing categories in the database.\n * CRUD endpoints are available for categories.\n */\n@Injectable()\nexport class CategoryService {\n  /** Responsible for managing categories in the database.\n   * CRUD endpoints are available for categories.\n   *\n   * Instantiates the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new category */\n  async create(createCategoryDto: CreateCategoryDto): Promise {\n    const name = this.capitalizeOnlyFirstLetter(createCategoryDto.name);\n\n    const category = await this.prisma.category.create({\n      data: { ...createCategoryDto, name },\n    });\n\n    return category;\n  }\n\n  /** Returns all categories with pagination and can search by name\n   * Default is starting on page 1 showing 10 results per page\n   * and ordering by name\n   */\n  async findAll({\n    categoryName = '',\n    page = 1,\n    offset = 10,\n  }: FindCategoriesDto): Promise {\n    const categoriesToSkip = (page - 1) * offset;\n\n    return this.prisma.category.findMany({\n      skip: categoriesToSkip,\n      take: offset,\n      where: {\n        name: { contains: categoryName, mode: 'insensitive' },\n      },\n      orderBy: { name: 'asc' },\n    });\n  }\n\n  /** Find category by ID and show the products that have this category */\n  async findOneById(\n    id: string,\n    { productName = '', page = 1, offset = 10 }: FindProductsDto,\n  ): Promise {\n    const productsToSkip = (page - 1) * offset;\n\n    const category = await this.prisma.category.findUnique({\n      where: { id },\n      include: {\n        products: {\n          select: { id: true, name: true, urlName: true, picture: true },\n          where: { name: { contains: productName, mode: 'insensitive' } },\n          skip: productsToSkip,\n          take: offset,\n        },\n      },\n      rejectOnNotFound: true,\n    });\n\n    return category;\n  }\n\n  /** Find category by name and show the products that have this category */\n  async findOneByName(\n    name: string,\n    { productName = '', page = 1, offset = 10 }: FindProductsDto,\n  ): Promise {\n    const productsToSkip = (page - 1) * offset;\n\n    name = this.capitalizeOnlyFirstLetter(name);\n\n    const category = await this.prisma.category.findUnique({\n      where: { name },\n      include: {\n        products: {\n          select: { id: true, name: true, urlName: true, picture: true },\n          where: { name: { contains: productName, mode: 'insensitive' } },\n          skip: productsToSkip,\n          take: offset,\n        },\n      },\n      rejectOnNotFound: true,\n    });\n\n    return category;\n  }\n\n  /** Updates category information */\n  async update(\n    id: string,\n    updateCategoryDto: UpdateCategoryDto,\n  ): Promise {\n    if (updateCategoryDto.name) {\n      return this.updateCategoryAndName(id, updateCategoryDto);\n    }\n\n    const category = await this.prisma.category.update({\n      where: { id },\n      data: { ...updateCategoryDto },\n    });\n\n    return category;\n  }\n\n  /** Removes category from database */\n  async remove(id: string): Promise {\n    await this.prisma.category.delete({ where: { id } });\n  }\n\n  /** Capitalize only the first letter of the category name */\n  private capitalizeOnlyFirstLetter(name: string): string {\n    return name[0].toUpperCase() + name.substring(1).toLocaleLowerCase();\n  }\n\n  /** Formats name and updates the category with the new one.\n   *\n   * Used when the user updates the category name.\n   */\n  private updateCategoryAndName(\n    id: string,\n    updateCategoryDto: UpdateCategoryDto,\n  ): Promise {\n    const name = this.capitalizeOnlyFirstLetter(updateCategoryDto.name);\n\n    return this.prisma.category.update({\n      where: { id },\n      data: { ...updateCategoryDto, name },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/dto/create-category.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create a Category\n\n            \n\n\n            \n                Implements\n            \n            \n                            Category\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/create-category.dto.ts:12\n                        \n                    \n\n            \n                \n                    Category name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { Category } from '../entities/category.entity';\n\n/** Describes the fields needed to create a Category */\nexport class CreateCategoryDto implements Category {\n  /**\n   * Category name\n   * @example \"Decoration\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/create-product.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create a Product\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                basePrice\n                            \n                            \n                                    Optional\n                                categories\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                discountPercentage\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                stock\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        basePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Decimal\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:36\n                        \n                    \n\n            \n                \n                    Product price not considering discounts.\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:67\n                        \n                    \n\n            \n                \n                    Category IDs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:59\n                        \n                    \n\n            \n                \n                    Product description\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        discountPercentage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:44\n                        \n                    \n\n            \n                \n                    Product discount in percentage. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:26\n                        \n                    \n\n            \n                \n                    Product name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:51\n                        \n                    \n\n            \n                \n                    Product stock amount. Defaults to 0\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { Decimal } from '@prisma/client/runtime';\nimport {\n  IsArray,\n  IsInt,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { Product } from '../entities/product.entity';\n\n/** Describes the fields needed to create a Product */\nexport class CreateProductDto extends OmitType(Product, [\n  'id',\n  'createdAt',\n  'urlName',\n  'picture',\n] as const) {\n  /**\n   * Product name\n   * @example \"Brand black wheelchair\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Product price not considering discounts.\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 70.00\n   */\n  @IsNumber()\n  @IsNotEmpty()\n  basePrice: string | number | Decimal;\n\n  /**\n   * Product discount in percentage. Defaults to 0\n   * @example 10\n   */\n  @IsNumber()\n  @IsOptional()\n  discountPercentage?: number;\n\n  /** Product stock amount. Defaults to 0\n   * @example 42\n   */\n  @IsInt()\n  @IsOptional()\n  stock?: number;\n\n  /**\n   * Product description\n   * @example \"Black wheelchair for offices\"\n   */\n  @IsString()\n  @IsOptional()\n  description?: string;\n\n  /**\n   * Category IDs\n   * @example [\"857cd575-956b-49f3-a75e-2e651e21b871\", \"fa244865-0878-4688-ac63-e3ecf4939a89\"]\n   */\n  @IsOptional()\n  @IsArray()\n  categories?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create an User\n\n            \n\n\n            \n                Implements\n            \n            \n                            User\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:44\n                        \n                    \n\n            \n                \n                    User address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({message: 'Must be an e-mail'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:17\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:36\n                        \n                    \n\n            \n                \n                    User name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8, {message: 'Password must have length of at least 8'})@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[a-z]).*$/, {message: 'Password must contain at least 1 number and 1 letter'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:28\n                        \n                    \n\n            \n                \n                    User password must contain at least 1 number and 1 letter\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\nimport { User } from '../entities/user.entity';\n\n/** Describes the fields needed to create an User */\nexport class CreateUserDto implements User {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsEmail({ message: 'Must be an e-mail' })\n  email: string;\n\n  /**\n   * User password must contain at least 1 number and 1 letter\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @MinLength(8, { message: 'Password must have length of at least 8' })\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[a-z]).*$/, {\n    message: 'Password must contain at least 1 number and 1 letter',\n  })\n  password: string;\n\n  /**\n   * User name\n   * @example \"John Doe\"\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  /**\n   * User address\n   * @example \"World Street 0\"\n   */\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserDto.html":{"url":"classes/DeleteUserDto.html","title":"class - DeleteUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/delete-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to delete an User\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/delete-user.dto.ts:11\n                        \n                    \n\n            \n                \n                    User current password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/** Describes the fields needed to delete an User */\nexport class DeleteUserDto {\n  /**\n   * User current password\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  currentPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailInUseException.html":{"url":"classes/EmailInUseException.html","title":"class - EmailInUseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailInUseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/user/email-in-use.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\nan email that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/user/email-in-use.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'E-mail already in use'. Used when the user inputs\nan email that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * an email that is already registered in the system\n */\nexport class EmailInUseException extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'E-mail already in use'. Used when the user inputs\n   * an email that is already registered in the system\n   */\n  constructor() {\n    super('E-mail already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExceptionHandler.html":{"url":"interfaces/ExceptionHandler.html","title":"interface - ExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for Exception Handlers\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        handle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/exception.handler.ts:4\n                \n            \n\n\n            \n                \n                    Function to handle specific error types\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface ExceptionHandler {\n  /** Function to handle specific error types */\n  handle(error: Error): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExceptionInterceptor.html":{"url":"injectables/ExceptionInterceptor.html","title":"injectable - ExceptionInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExceptionInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/exception.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor to transform app erros into HTTP errors\nFor more about NestJs interceptors: https://docs.nestjs.com/interceptors\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler<>)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/exception.interceptor.ts:23\n                \n            \n\n\n            \n                \n                    Catches app errors and throws the\nrespective HTTP error\nUses default NestJs boilerplate, for more\ninformation: https://docs.nestjs.com/interceptors\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler<>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { catchError, Observable } from 'rxjs';\nimport { PrismaExceptionHandler } from './handlers/prisma-exception.handler';\nimport { UserInputExceptionHandler } from './handlers/user-input-exception.handler';\n\n/** Interceptor to transform app erros into HTTP errors\n *\n * For more about NestJs interceptors: https://docs.nestjs.com/interceptors\n */\n@Injectable()\nexport class ExceptionInterceptor implements NestInterceptor {\n  /** Catches app errors and throws the\n   * respective HTTP error\n   *\n   * Uses default NestJs boilerplate, for more\n   * information: https://docs.nestjs.com/interceptors\n   */\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | Promise> {\n    return next.handle().pipe(\n      catchError((error) => {\n        new UserInputExceptionHandler().handle(error);\n\n        new PrismaExceptionHandler().handle(error);\n\n        throw error;\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileTypeError.html":{"url":"classes/FileTypeError.html","title":"class - FileTypeError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileTypeError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/exceptions/file-type.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs an invalid file type\nuploading a picture\n\n            \n\n            \n                Extends\n            \n            \n                        ProductServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fileTypes: RegExp)\n                    \n                \n                        \n                            \n                                Defined in src/models/product/exceptions/file-type.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'File upload only supports the following\nfiletypes - {fileTypes}'.\nUsed when the user inputs an invalid file type\nuploading a picture\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileTypes\n                                                  \n                                                        \n                                                                    RegExp\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ProductServiceInputException } from './product-service-input.exception';\n\n/** Used when the user inputs an invalid file type\n * uploading a picture\n */\nexport class FileTypeError extends ProductServiceInputException {\n  /** Throws exception with message 'File upload only supports the following\n   * filetypes - {fileTypes}'.\n   *\n   * Used when the user inputs an invalid file type\n   * uploading a picture\n   */\n  constructor(fileTypes: RegExp) {\n    super(`File upload only supports the following filetypes - ${fileTypes}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/file-upload.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to upload a file\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', format: 'binary'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/file-upload.dto.ts:10\n                        \n                    \n\n            \n                \n                    Product picture\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\n/** Describes the information needed to upload a file */\nexport class FileUploadDto {\n  /**\n   * Product picture\n   * @example \"picture.png\"\n   */\n  @ApiProperty({ type: 'string', format: 'binary' })\n  file: Express.Multer.File;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindCategoriesDto.html":{"url":"classes/FindCategoriesDto.html","title":"class - FindCategoriesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindCategoriesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/dto/find-categories.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information to search for categories\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                categoryName\n                            \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        categoryName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/find-categories.dto.ts:11\n                        \n                    \n\n            \n                \n                    String containing in category name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/find-categories.dto.ts:29\n                        \n                    \n\n            \n                \n                    Show this amount of categories per page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/find-categories.dto.ts:20\n                        \n                    \n\n            \n                \n                    Show categories in this page\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsInt, IsOptional, IsPositive, IsString } from 'class-validator';\n\n/** Describes the information to search for categories */\nexport class FindCategoriesDto {\n  /** String containing in category name\n   * @example \"chair\"\n   */\n  @IsOptional()\n  @IsString()\n  categoryName?: string;\n\n  /** Show categories in this page\n   * @example 1\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  page?: number;\n\n  /** Show this amount of categories per page\n   * @example 10\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  offset?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindProductsDto.html":{"url":"classes/FindProductsDto.html","title":"class - FindProductsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindProductsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/find-products.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information to search for products\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                page\n                            \n                            \n                                    Optional\n                                productName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-products.dto.ts:29\n                        \n                    \n\n            \n                \n                    Show this amount of products per page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-products.dto.ts:20\n                        \n                    \n\n            \n                \n                    Show products in this page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        productName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-products.dto.ts:11\n                        \n                    \n\n            \n                \n                    String containing in product name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsInt, IsOptional, IsPositive, IsString } from 'class-validator';\n\n/** Describes the information to search for products */\nexport class FindProductsDto {\n  /** String containing in product name\n   * @example \"chair\"\n   */\n  @IsOptional()\n  @IsString()\n  productName?: string;\n\n  /** Show products in this page\n   * @example 1\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  page?: number;\n\n  /** Show this amount of products per page\n   * @example 10\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  offset?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidEmailOrPasswordError.html":{"url":"classes/InvalidEmailOrPasswordError.html","title":"class - InvalidEmailOrPasswordError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidEmailOrPasswordError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/errors/invalid-email-or-password.error..ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 401. Used when the user inputs\nan email that is not registered in the system\nor the wrong password for a registered email\n\n            \n\n            \n                Extends\n            \n            \n                    UnauthorizedException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/errors/invalid-email-or-password.error..ts:7\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 401 with message 'Invalid email or password'.\nUsed when the user inputs an email that is not registered\nin the system or the wrong password for a registered email\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UnauthorizedException } from '@nestjs/common';\n\n/** Throws HTTP status 401. Used when the user inputs\n * an email that is not registered in the system\n * or the wrong password for a registered email\n */\nexport class InvalidEmailOrPasswordError extends UnauthorizedException {\n  /** Throws HTTP status 401 with message 'Invalid email or password'.\n   * Used when the user inputs an email that is not registered\n   * in the system or the wrong password for a registered email\n   */\n  constructor() {\n    super('Invalid email or password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidPasswordUpdateException.html":{"url":"classes/InvalidPasswordUpdateException.html","title":"class - InvalidPasswordUpdateException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidPasswordUpdateException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/exceptions/invalid-password-update.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs the wrong\ncurrent password when trying to create a new password\n\n            \n\n            \n                Extends\n            \n            \n                        UserServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/models/user/exceptions/invalid-password-update.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Invalid current password'.\nUsed when the user inputs the wrong current password when\ntrying to create a new password\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserServiceInputException } from './user-service-input.exception';\n\n/** Used when the user inputs the wrong\n * current password when trying to create a new password\n */\nexport class InvalidPasswordUpdateException extends UserServiceInputException {\n  /** Throws exception with message 'Invalid current password'.\n   *\n   * Used when the user inputs the wrong current password when\n   * trying to create a new password\n   */\n  constructor() {\n    super('Invalid current password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Uses the passport library AuthGuard to check\nif the route needs authentication\nFor more on NestJs Guards: https://docs.nestjs.com/guards\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-auth.guard.ts:13\n                            \n                        \n\n                \n                    \n                            Uses the passport library AuthGuard to check\nif the route needs authentication\nFor more on NestJs Guards: https://docs.nestjs.com/guards\nInstantiates the class and the Reflector dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:28\n                \n            \n\n\n            \n                \n                    If the route uses the Public decorator it\ndoes not need authentication, else it does\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Observable } from 'rxjs';\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n/** Uses the passport library AuthGuard to check\n * if the route needs authentication\n *\n * For more on NestJs Guards: https://docs.nestjs.com/guards\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  /** Uses the passport library AuthGuard to check\n   * if the route needs authentication\n   *\n   * For more on NestJs Guards: https://docs.nestjs.com/guards\n   *\n   * Instantiates the class and the Reflector dependency\n   */\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  /** If the route uses the Public decorator it\n   * does not need authentication, else it does\n   */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Passport library JsonWebToken configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:34\n                            \n                        \n\n                \n                    \n                            Passport library JsonWebToken configuration\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: Payload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:45\n                \n            \n\n\n            \n                \n                    Validates and returns data after JsonWebToken is decrypted\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                Payload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { jwtConfig } from 'src/config/jwt.config';\n\n/** Decrypted JsonWebToken content */\ninterface Payload {\n  /** Token subject, user ID used\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  sub: string;\n\n  /** User role\n   * @example \"user\"\n   */\n  role: string;\n}\n\n/** What is returned to the application after JsonWebToken is validated */\ninterface ValidateReturn {\n  /** User ID\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  userId: string;\n\n  /** User role\n   * @example \"user\"\n   */\n  userRole: string;\n}\n\n/** Passport library JsonWebToken configuration */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /** Passport library JsonWebToken configuration */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConfig.secret,\n    });\n  }\n\n  /** Validates and returns data after JsonWebToken is decrypted */\n  async validate(payload: Payload): Promise {\n    return {\n      userId: payload.sub,\n      userRole: payload.role,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginCredentialsDto.html":{"url":"classes/LoginCredentialsDto.html","title":"class - LoginCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-credentials.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to authenticate an User to the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-credentials.dto.ts:11\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-credentials.dto.ts:19\n                        \n                    \n\n            \n                \n                    User password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/** Describes the information needed to authenticate an User to the application */\nexport class LoginCredentialsDto {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  email: string;\n\n  /**\n   * User password\n   * @example \"abc123456\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginResponse.html":{"url":"classes/LoginResponse.html","title":"class - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.response.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the response received when the Login route is successfully called\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.response.ts:7\n                        \n                    \n\n            \n                \n                    JWT Authentication token\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LoginResponse {\n  /**\n   * JWT Authentication token\n   * @example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5NWFkMzNhNS0wYjk4LTQ2ODYtYjFmMS1hMTkwNzM0NWJmYzciLCJpYXQiOjE2NDg0NzU3MzEsImV4cCI6MTY0ODQ3NjYzMX0.h3z3JDvHOi6y5C_N0Kt6tdP2nWK_dHBZxioQn7VANNo\"\n   */\n  accessToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MissingPasswordUpdateException.html":{"url":"classes/MissingPasswordUpdateException.html","title":"class - MissingPasswordUpdateException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MissingPasswordUpdateException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/exceptions/missing-password-update.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs only the current password\nor the new password, but both are needed to update\nthe password\n\n            \n\n            \n                Extends\n            \n            \n                        UserServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/models/user/exceptions/missing-password-update.exception.ts:7\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Please enter both new\npassword and current password'.\nUsed when the user inputs only the current password\nor the new password, but both are needed to update\nthe password\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserServiceInputException } from './user-service-input.exception';\n\n/** Used when the user inputs only the current password\n * or the new password, but both are needed to update\n * the password\n */\nexport class MissingPasswordUpdateException extends UserServiceInputException {\n  /** Throws exception with message 'Please enter both new\n   * password and current password'.\n   *\n   * Used when the user inputs only the current password\n   * or the new password, but both are needed to update\n   * the password\n   */\n  constructor() {\n    super('Please enter both new password and current password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Payload.html":{"url":"interfaces/Payload.html","title":"interface - Payload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Payload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Decrypted JsonWebToken content\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User role\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Token subject, user ID used\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { jwtConfig } from 'src/config/jwt.config';\n\n/** Decrypted JsonWebToken content */\ninterface Payload {\n  /** Token subject, user ID used\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  sub: string;\n\n  /** User role\n   * @example \"user\"\n   */\n  role: string;\n}\n\n/** What is returned to the application after JsonWebToken is validated */\ninterface ValidateReturn {\n  /** User ID\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  userId: string;\n\n  /** User role\n   * @example \"user\"\n   */\n  userRole: string;\n}\n\n/** Passport library JsonWebToken configuration */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /** Passport library JsonWebToken configuration */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConfig.secret,\n    });\n  }\n\n  /** Validates and returns data after JsonWebToken is decrypted */\n  async validate(payload: Payload): Promise {\n    return {\n      userId: payload.sub,\n      userRole: payload.role,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrismaExceptionHandler.html":{"url":"classes/PrismaExceptionHandler.html","title":"class - PrismaExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrismaExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/prisma-exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Catches Prisma ORM errors and throws the\nrespective HTTP error\n\n            \n\n\n            \n                Implements\n            \n            \n                            ExceptionHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                            \n                                    Private\n                                isCategoryError\n                            \n                            \n                                    Private\n                                isCategoryNameConstraintViolation\n                            \n                            \n                                    Private\n                                isCreateProductError\n                            \n                            \n                                    Private\n                                isEmailConstraintViolation\n                            \n                            \n                                    Private\n                                isPrismaUnknownError\n                            \n                            \n                                    Private\n                                isProductError\n                            \n                            \n                                    Private\n                                isProductNameConstraintViolation\n                            \n                            \n                                    Private\n                                isUserError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:18\n                \n            \n\n\n            \n                \n                    Catches Prisma ORM errors and throws the\nrespective HTTP error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isCategoryError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isCategoryError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:123\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an category prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isCategoryNameConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isCategoryNameConstraintViolation(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:95\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the category name field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isCreateProductError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isCreateProductError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:118\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an create product prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isEmailConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isEmailConstraintViolation(errorMeta: object)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:79\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the email field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorMeta\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isPrismaUnknownError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isPrismaUnknownError(error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:74\n                \n            \n\n\n            \n                \n                    Checks if the error contains clientVersion,\nmaking it an unknown prisma error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isProductError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isProductError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:110\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an update or delete product prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isProductNameConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isProductNameConstraintViolation(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:84\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the product name field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isUserError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isUserError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:105\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an user prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PrismaClientKnownRequestError } from '@prisma/client/runtime';\nimport { PrismaError } from 'prisma-error-enum';\nimport { CategoryNameInUseException } from 'src/common/exceptions/category/category-name-in-use.exception';\nimport { CategoryNotFoundException } from 'src/common/exceptions/category/category-not-found.exception';\nimport { ProductNameInUseException } from 'src/common/exceptions/product/product-name-in-use.exception';\nimport { ProductNotFoundException } from 'src/common/exceptions/product/product-not-found.exception';\nimport { EmailInUseException } from 'src/common/exceptions/user/email-in-use.exception';\nimport { UserNotFoundException } from 'src/common/exceptions/user/user-not-found.exception';\nimport { ExceptionHandler } from './exception.handler';\n\n/** Catches Prisma ORM errors and throws the\n * respective HTTP error\n */\nexport class PrismaExceptionHandler implements ExceptionHandler {\n  /** Catches Prisma ORM errors and throws the\n   * respective HTTP error\n   */\n  handle(error: Error): void {\n    if (error instanceof PrismaClientKnownRequestError) {\n      switch (error.code) {\n        case PrismaError.UniqueConstraintViolation:\n          if (this.isEmailConstraintViolation(error.meta)) {\n            throw new EmailInUseException();\n          }\n\n          if (this.isProductNameConstraintViolation(error)) {\n            throw new ProductNameInUseException();\n          }\n\n          if (this.isCategoryNameConstraintViolation(error)) {\n            throw new CategoryNameInUseException();\n          }\n          break;\n\n        case PrismaError.RecordsNotFound:\n          if (this.isUserError(error)) {\n            throw new UserNotFoundException();\n          }\n\n          if (this.isProductError(error)) {\n            throw new ProductNotFoundException();\n          }\n\n          if (this.isCreateProductError(error)) {\n            throw new CategoryNotFoundException();\n          }\n\n          if (this.isCategoryError(error)) {\n            throw new CategoryNotFoundException();\n          }\n          break;\n\n        default:\n          throw error;\n      }\n    }\n\n    if (this.isPrismaUnknownError(error)) {\n      if (error.message === 'No Product found') {\n        throw new ProductNotFoundException();\n      }\n\n      if (error.message === 'No Category found') {\n        throw new CategoryNotFoundException();\n      }\n    }\n\n    throw error;\n  }\n\n  /** Checks if the error contains clientVersion,\n   * making it an unknown prisma error\n   * */\n  private isPrismaUnknownError(error): boolean {\n    return !!error.clientVersion;\n  }\n\n  /** Returns wether the error happened in the email field or not */\n  private isEmailConstraintViolation(errorMeta: object): boolean {\n    return Object.values(errorMeta)[0][0] === 'email';\n  }\n\n  /** Returns wether the error happened in the product name field or not */\n  private isProductNameConstraintViolation(\n    error: PrismaClientKnownRequestError,\n  ): boolean {\n    return (\n      (Object.values(error.meta)[0][0] === 'name' ||\n        Object.values(error.meta)[0][0] === 'urlName') &&\n      error.message.includes('prisma.product')\n    );\n  }\n\n  /** Returns wether the error happened in the category name field or not */\n  private isCategoryNameConstraintViolation(\n    error: PrismaClientKnownRequestError,\n  ): boolean {\n    return (\n      Object.values(error.meta)[0][0] === 'name' &&\n      error.message.includes('prisma.category')\n    );\n  }\n\n  /** Returns wether the error happened on an user prisma query or not */\n  private isUserError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.user');\n  }\n\n  /** Returns wether the error happened on an update or delete product prisma query or not */\n  private isProductError(error: PrismaClientKnownRequestError): boolean {\n    return (\n      error.message.includes('prisma.product.update') ||\n      error.message.includes('prisma.product.delete')\n    );\n  }\n\n  /** Returns wether the error happened on an create product prisma query or not */\n  private isCreateProductError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.product.create');\n  }\n\n  /** Returns wether the error happened on an category prisma query or not */\n  private isCategoryError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.category');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n            \n                Description\n            \n            \n                ORM responsible for connecting to the database\nBoilerplate from https://docs.nestjs.com/recipes/prisma\n\n            \n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:25\n                \n            \n\n\n            \n                \n                    Prisma interferes with NestJS enableShutdownHooks.\nPrisma listens for shutdown signals and will call process.exit()\nbefore your application shutdown hooks fire.\nhttps://docs.nestjs.com/recipes/prisma\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:15\n                \n            \n\n\n            \n                \n                    Optional — if you leave it out,\nPrisma will connect lazily on its first call to the database.\nhttps://docs.nestjs.com/recipes/prisma\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n/** ORM responsible for connecting to the database\n *\n * Boilerplate from https://docs.nestjs.com/recipes/prisma\n */\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  /** Optional — if you leave it out,\n   * Prisma will connect lazily on its first call to the database.\n   *\n   * https://docs.nestjs.com/recipes/prisma\n   */\n  async onModuleInit(): Promise {\n    await this.$connect();\n  }\n\n  /** Prisma interferes with NestJS enableShutdownHooks.\n   * Prisma listens for shutdown signals and will call process.exit()\n   * before your application shutdown hooks fire.\n   *\n   * https://docs.nestjs.com/recipes/prisma\n   */\n  async enableShutdownHooks(app: INestApplication): Promise {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Product.html":{"url":"classes/Product.html","title":"class - Product","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/entities/product.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of a Product in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                basePrice\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                discountPercentage\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                picture\n                            \n                            \n                                    Optional\n                                stock\n                            \n                            \n                                urlName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        basePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Prisma.Decimal\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:35\n                        \n                    \n\n            \n                \n                    Product price not considering discounts.\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:58\n                        \n                    \n\n            \n                \n                    Product createdAt dateString\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:52\n                        \n                    \n\n            \n                \n                    Product description\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        discountPercentage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:41\n                        \n                    \n\n            \n                \n                    Product discount in percentage. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:9\n                        \n                    \n\n            \n                \n                    Product ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:15\n                        \n                    \n\n            \n                \n                    Product name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:27\n                        \n                    \n\n            \n                \n                    Product picture\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:46\n                        \n                    \n\n            \n                \n                    Product stock amount. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        urlName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:21\n                        \n                    \n\n            \n                \n                    Product name turned to url\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\n/** Describes the properties of a Product in the database */\nexport class Product implements Prisma.ProductUncheckedCreateInput {\n  /**\n   * Product ID as UUID\n   * @example \"6f4ca8a4-8aa0-4302-ac1b-7b5547f01b0a\"\n   */\n  id?: string;\n\n  /**\n   * Product name\n   * @example \"Brand black wheelchair\"\n   */\n  name: string;\n\n  /**\n   * Product name turned to url\n   * @example \"brand-black-wheelchair\"\n   */\n  urlName: string;\n\n  /**\n   * Product picture\n   * @example \"image.jpg\"\n   */\n  picture?: string;\n\n  /**\n   * Product price not considering discounts.\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 70.00\n   */\n  basePrice: string | number | Prisma.Decimal;\n\n  /**\n   * Product discount in percentage. Defaults to 0\n   * @example 10\n   */\n  discountPercentage?: number;\n\n  /** Product stock amount. Defaults to 0\n   * @example 42\n   */\n  stock?: number;\n\n  /**\n   * Product description\n   * @example \"Black wheelchair for offices\"\n   */\n  description?: string;\n\n  /**\n   * Product createdAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  createdAt?: string | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductController.html":{"url":"controllers/ProductController.html","title":"controller - ProductController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                product\n            \n\n\n            \n                Description\n            \n            \n                Exposes product CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOneById\n                            \n                            \n                                findOneByUrlName\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                uploadPhoto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createProductDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin creates a new product'})@IsAdmin()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:38\n                \n            \n\n\n            \n                \n                    Creates a new product, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(findAllProductsDto: FindProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns all products'})@Public()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:50\n                \n            \n\n\n            \n                \n                    Returns all products with pagination\nDefault is starting on page 1 showing 10 results per page,\nsearching and ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findAllProductsDto\n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin gets product by ID'})@IsAdmin()@Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:58\n                \n            \n\n\n            \n                \n                    Find product by ID, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByUrlName\n                        \n                    \n                \n            \n            \n                \nfindOneByUrlName(urlName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Gets product by urlName'})@Public()@Get(':urlName')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:66\n                \n            \n\n\n            \n                \n                    Find product by Url Name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    urlName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin deletes product'})@IsAdmin()@Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:104\n                \n            \n\n\n            \n                \n                    Deletes product from database, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin updates product'})@IsAdmin()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:92\n                \n            \n\n\n            \n                \n                    Updates product information, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadPhoto\n                        \n                    \n                \n            \n            \n                \nuploadPhoto(id: string, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin uploads a new product picture'})@IsAdmin()@FileUpload()@Patch('picture/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:81\n                \n            \n\n\n            \n                \n                    Admin uploads a new picture for the product.\nNeeds to be type jpeg, jpg or png and maximum 3MB.\nCheck \nmulterUploadConfig file in the docs.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UploadedFile,\n} from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Public } from 'src/auth/public.decorator';\nimport { FileUpload } from 'src/common/decorators/file-upload.decorator';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { FindProductsDto } from './dto/find-products.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { Product } from './entities/product.entity';\nimport { ProductService } from './product.service';\n\n/** Exposes product CRUD endpoints */\n@ApiTags('product')\n@Controller('product')\nexport class ProductController {\n  /** Exposes product CRUD endpoints\n   *\n   * Instantiate class and ProductService dependency\n   */\n  constructor(private readonly productService: ProductService) {}\n\n  /** Creates a new product, only for admins */\n  @ApiOperation({ summary: 'Admin creates a new product' })\n  @IsAdmin()\n  @Post()\n  create(@Body() createProductDto: CreateProductDto): Promise {\n    return this.productService.create(createProductDto);\n  }\n\n  /** Returns all products with pagination\n   *\n   * Default is starting on page 1 showing 10 results per page,\n   * searching and ordering by name\n   */\n  @ApiOperation({ summary: 'Returns all products' })\n  @Public()\n  @Get()\n  findAll(@Query() findAllProductsDto: FindProductsDto): Promise {\n    return this.productService.findAll(findAllProductsDto);\n  }\n\n  /** Find product by ID, only for admins */\n  @ApiOperation({ summary: 'Admin gets product by ID' })\n  @IsAdmin()\n  @Get('/id/:id')\n  findOneById(@Param('id') id: string): Promise {\n    return this.productService.findOneById(id);\n  }\n\n  /** Find product by Url Name */\n  @ApiOperation({ summary: 'Gets product by urlName' })\n  @Public()\n  @Get(':urlName')\n  findOneByUrlName(@Param('urlName') urlName: string): Promise {\n    return this.productService.findOneByUrlName(urlName);\n  }\n\n  /**\n   * Admin uploads a new picture for the product.\n   * Needs to be type jpeg, jpg or png and maximum 3MB.\n   *\n   * Check \n   * multerUploadConfig file in the docs.\n   */\n  @ApiOperation({ summary: 'Admin uploads a new product picture' })\n  @IsAdmin()\n  @FileUpload()\n  @Patch('picture/:id')\n  uploadPhoto(\n    @Param('id') id: string,\n    @UploadedFile() file: Express.Multer.File,\n  ): Promise {\n    return this.productService.uploadPicture(id, file);\n  }\n\n  /** Updates product information, only for admins */\n  @ApiOperation({ summary: 'Admin updates product' })\n  @IsAdmin()\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateProductDto: UpdateProductDto,\n  ): Promise {\n    return this.productService.update(id, updateProductDto);\n  }\n\n  /** Deletes product from database, only for admins */\n  @ApiOperation({ summary: 'Admin deletes product' })\n  @IsAdmin()\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  remove(@Param('id') id: string): Promise {\n    return this.productService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductModule.html":{"url":"modules/ProductModule.html","title":"module - ProductModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_imports\n\n\n\ncluster_ProductModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nPrismaModule->ProductModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/product/product.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductService } from './product.service';\nimport { ProductController } from './product.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { multerUploadConfig } from 'src/config/multer-upload.config';\n\n@Module({\n  controllers: [ProductController],\n  imports: [PrismaModule, MulterModule.register(multerUploadConfig)],\n  providers: [ProductService],\n})\nexport class ProductModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductNameInUseException.html":{"url":"classes/ProductNameInUseException.html","title":"class - ProductNameInUseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductNameInUseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/product/product-name-in-use.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\na product name that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/product/product-name-in-use.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'Product name already in use'. Used when the user inputs\na product name that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * a product name that is already registered in the system\n */\nexport class ProductNameInUseException extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'Product name already in use'. Used when the user inputs\n   * a product name that is already registered in the system\n   */\n  constructor() {\n    super('Product name already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductNotFoundException.html":{"url":"classes/ProductNotFoundException.html","title":"class - ProductNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/product/product-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\na product that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/product/product-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'Product not found'. Used when the user inputs\na product that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * a product that is not registered in the system\n */\nexport class ProductNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'Product not found'. Used when the user inputs\n   * a product that is not registered in the system\n   */\n  constructor() {\n    super('Product not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductService.html":{"url":"injectables/ProductService.html","title":"injectable - ProductService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/product.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing products in the database.\nCRUD endpoints are available for products.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                connectCategoriesById\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUrlName\n                            \n                            \n                                    Private\n                                formatUrlName\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Private\n                                updateProductAndUrlName\n                            \n                            \n                                    Async\n                                uploadPicture\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/product/product.service.ts:13\n                            \n                        \n\n                \n                    \n                            Responsible for managing products in the database.\nCRUD endpoints are available for products.\nInstantiates the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        connectCategoriesById\n                        \n                    \n                \n            \n            \n                \n                    \n                    connectCategoriesById(categories: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:143\n                \n            \n\n\n            \n                \n                    Format the categories IDs array into the prisma query way\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categories\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Prisma.CategoryUncheckedCreateNestedManyWithoutProductsInput\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createProductDto: CreateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:22\n                \n            \n\n\n            \n                \n                    Creates a new product\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: FindProductsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:51\n                \n            \n\n\n            \n                \n                    Returns all products with pagination\nDefault is starting on page 1 showing 10 results per page\nand ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:70\n                \n            \n\n\n            \n                \n                    Find product by ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUrlName(urlName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:79\n                \n            \n\n\n            \n                \n                    Find product by Url Name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    urlName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        formatUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    formatUrlName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:115\n                \n            \n\n\n            \n                \n                    Formats the name to generate an urlName.\nMakes the name lower case, remove leading and trailing white spaces,\nturn to single the multiple spaces between words and make\nsingle spaces hyphens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            &quot; BraNd1    chAir   &quot; becomes &quot;brand1-chair&quot;\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:103\n                \n            \n\n\n            \n                \n                    Removes product from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:88\n                \n            \n\n\n            \n                \n                    Updates product information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        updateProductAndUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProductAndUrlName(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:128\n                \n            \n\n\n            \n                \n                    Formats UrlName and updates the product with the new one.\nUsed when the user updates the product name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPicture\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPicture(id: string, file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:40\n                \n            \n\n\n            \n                \n                    Uploads new product picture\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { FindProductsDto } from './dto/find-products.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { Product } from './entities/product.entity';\n\n/** Responsible for managing products in the database.\n * CRUD endpoints are available for products.\n */\n@Injectable()\nexport class ProductService {\n  /** Responsible for managing products in the database.\n   * CRUD endpoints are available for products.\n   *\n   * Instantiates the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new product */\n  async create(createProductDto: CreateProductDto): Promise {\n    const urlName = this.formatUrlName(createProductDto.name);\n\n    const categories = this.connectCategoriesById(createProductDto.categories);\n\n    const product = await this.prisma.product.create({\n      data: {\n        ...createProductDto,\n        urlName,\n        categories,\n      },\n      include: { categories: { select: { name: true } } },\n    });\n\n    return product;\n  }\n\n  /** Uploads new product picture */\n  async uploadPicture(id: string, file: Express.Multer.File): Promise {\n    return this.prisma.product.update({\n      where: { id },\n      data: { picture: file.filename },\n    });\n  }\n\n  /** Returns all products with pagination\n   * Default is starting on page 1 showing 10 results per page\n   * and ordering by name\n   */\n  async findAll({\n    productName = '',\n    page = 1,\n    offset = 10,\n  }: FindProductsDto): Promise {\n    const productsToSkip = (page - 1) * offset;\n\n    return this.prisma.product.findMany({\n      skip: productsToSkip,\n      take: offset,\n      where: {\n        name: { contains: productName, mode: 'insensitive' },\n      },\n      orderBy: { name: 'asc' },\n      include: { categories: { select: { name: true } } },\n    });\n  }\n\n  /** Find product by ID */\n  async findOneById(id: string): Promise {\n    return this.prisma.product.findUnique({\n      where: { id },\n      include: { categories: { select: { name: true } } },\n      rejectOnNotFound: true,\n    });\n  }\n\n  /** Find product by Url Name */\n  async findOneByUrlName(urlName: string): Promise {\n    return this.prisma.product.findUnique({\n      where: { urlName },\n      include: { categories: { select: { name: true } } },\n      rejectOnNotFound: true,\n    });\n  }\n\n  /** Updates product information */\n  async update(\n    id: string,\n    updateProductDto: UpdateProductDto,\n  ): Promise {\n    if (updateProductDto.name) {\n      return this.updateProductAndUrlName(id, updateProductDto);\n    }\n\n    return this.prisma.product.update({\n      where: { id },\n      data: { ...updateProductDto },\n    });\n  }\n\n  /** Removes product from database */\n  async remove(id: string): Promise {\n    await this.prisma.product.delete({ where: { id } });\n  }\n\n  /** Formats the name to generate an urlName.\n   *\n   * Makes the name lower case, remove leading and trailing white spaces,\n   * turn to single the multiple spaces between words and make\n   * single spaces hyphens\n   *\n   * @example \" BraNd1    chAir   \" becomes \"brand1-chair\"\n   */\n  private formatUrlName(name: string): string {\n    const lowerCaseUrlName = name.toLocaleLowerCase();\n    const trimmedUrlName = lowerCaseUrlName.trim();\n    const singleSpaceUrlName = trimmedUrlName.replace(/\\s\\s+/g, ' ');\n    const spaceToHyphenUrlName = singleSpaceUrlName.split(' ').join('-');\n\n    return spaceToHyphenUrlName;\n  }\n\n  /** Formats UrlName and updates the product with the new one.\n   *\n   * Used when the user updates the product name.\n   */\n  private updateProductAndUrlName(\n    id: string,\n    updateProductDto: UpdateProductDto,\n  ): Promise {\n    const urlName = this.formatUrlName(updateProductDto.name);\n\n    return this.prisma.product.update({\n      where: { id },\n      data: { ...updateProductDto, urlName },\n    });\n  }\n\n  /**\n   * Format the categories IDs array into the prisma query way\n   */\n  private connectCategoriesById(\n    categories: string[],\n  ): Prisma.CategoryUncheckedCreateNestedManyWithoutProductsInput {\n    let categoriesConnection = { connect: [] };\n\n    if (categories) {\n      categoriesConnection = {\n        connect: categories.map((category) => {\n          return { id: category };\n        }),\n      };\n    }\n\n    return categoriesConnection;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductServiceInputException.html":{"url":"classes/ProductServiceInputException.html","title":"class - ProductServiceInputException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductServiceInputException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/exceptions/product-service-input.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to extend another exception to make it\ninstanceof ProductServiceInputException\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/product/exceptions/product-service-input.exception.ts:5\n                            \n                        \n\n                \n                    \n                            Used to extend another exception to make it\ninstanceof ProductServiceInputException\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ProductServiceInputException extends Error {\n  /**\n   * Used to extend another exception to make it\n   * instanceof ProductServiceInputException\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/roles.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Checks if the user accessing the route is an admin\nFor more on NestJs Guards: https://docs.nestjs.com/guards\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/roles.guard.ts:12\n                            \n                        \n\n                \n                    \n                            Checks if the user accessing the route is an admin\nFor more on NestJs Guards: https://docs.nestjs.com/guards\nInstantiates the class and the Reflector dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guards/roles.guard.ts:22\n                \n            \n\n\n            \n                \n                    If the user is an Admin, access is allowed\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '@prisma/client';\nimport { Observable } from 'rxjs';\nimport { IS_ADMIN_KEY } from '../decorators/is-admin.decorator';\n\n/** Checks if the user accessing the route is an admin\n *\n * For more on NestJs Guards: https://docs.nestjs.com/guards\n */\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  /** Checks if the user accessing the route is an admin\n   *\n   * For more on NestJs Guards: https://docs.nestjs.com/guards\n   *\n   * Instantiates the class and the Reflector dependency\n   */\n  constructor(private reflector: Reflector) {}\n\n  /** If the user is an Admin, access is allowed */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const isAdmin = this.reflector.getAllAndOverride(IS_ADMIN_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    const request = context.switchToHttp().getRequest();\n    const { userRole } = request.user;\n\n    if (isAdmin && userRole === Role.ADMIN) {\n      return true;\n    }\n\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/dto/update-category.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the Category fields that are updatable\nNote that since this is a\nPartial of CreateCategoryDto,\nany field there is optional here\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCategoryDto } from './create-category.dto';\n\n/** Describes the Category fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateCategoryDto,\n * any field there is optional here\n */\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/update-product.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the Product fields that are updatable\nNote that since this is a\nPartial of CreateProductDto,\nany field there is optional here\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateProductDto } from './create-product.dto';\n\n/** Describes the Product fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateProductDto,\n * any field there is optional here\n */\nexport class UpdateProductDto extends PartialType(CreateProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the User fields that are updatable\nNote that since this is a\nPartial of CreateUserDto,\nany field there is optional here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                currentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user.dto.ts:19\n                        \n                    \n\n            \n                \n                    User current password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\n\n/** Describes the User fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateUserDto,\n * any field there is optional here\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n  /**\n   * User current password\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  currentPassword?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserRoleDto.html":{"url":"classes/UpdateUserRoleDto.html","title":"class - UpdateUserRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/update-user-role.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to update an User role\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user-role.dto.ts:11\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user-role.dto.ts:18\n                        \n                    \n\n            \n                \n                    User new role\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Role } from '@prisma/client';\nimport { IsEmail, IsEnum } from 'class-validator';\n\n/** Describes the information needed to update an User role */\nexport class UpdateUserRoleDto {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsEmail()\n  email: string;\n\n  /**\n   * User new role\n   * @example \"ADMIN\"\n   */\n  @IsEnum(Role)\n  role: Role;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of an User in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                role\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:43\n                        \n                    \n\n            \n                \n                    User address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:49\n                        \n                    \n\n            \n                \n                    User createdAt dateString\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:25\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:9\n                        \n                    \n\n            \n                \n                    User ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:37\n                        \n                    \n\n            \n                \n                    User name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:31\n                        \n                    \n\n            \n                \n                    User password\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:19\n                        \n                    \n\n            \n                \n                    User's Role.\nCan be \"USER\" or \"ADMIN\".\nAdmin users can handle products\nDefaults to \"USER\"\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:55\n                        \n                    \n\n            \n                \n                    User updatedAt dateString\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma, Role } from '@prisma/client';\n\n/** Describes the properties of an User in the database */\nexport class User implements Prisma.UserUncheckedCreateInput {\n  /**\n   * User ID as UUID\n   * @example \"d31fc56c-7aed-441e-9f7f-151be8d85634\"\n   */\n  id?: string;\n\n  /**\n   * User's Role.\n   * Can be \"USER\" or \"ADMIN\".\n   * Admin users can handle products\n   *\n   * Defaults to \"USER\"\n   * @example \"USER\"\n   */\n  role?: Role;\n\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  email: string;\n\n  /**\n   * User password\n   * @example \"$2b$10$1XpzUYu8FuvuaBb3SC0xzuR9DX7KakbMLt0vLNoZ.UnLntDMFc4LK\"\n   */\n  password: string;\n\n  /**\n   * User name\n   * @example \"John Doe\"\n   */\n  name?: string;\n\n  /**\n   * User address\n   * @example \"World Street 0\"\n   */\n  address?: string;\n\n  /**\n   * User createdAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  createdAt?: string | Date;\n\n  /**\n   * User updatedAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  updatedAt?: string | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                Exposes user CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                updateUserRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new user'})@Public()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:37\n                \n            \n\n\n            \n                \n                    Creates a new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Gets user's own profile'})@ApiBearerAuth()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:45\n                \n            \n\n\n            \n                \n                    Returns user's own profile information without password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(request: Request, deleteUserDto: DeleteUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes user'})@ApiBearerAuth()@Delete()@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:79\n                \n            \n\n\n            \n                \n                    Deletes user and all user related information from the system\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    deleteUserDto\n                                    \n                                                DeleteUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(request: Request, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates user'})@ApiBearerAuth()@Patch()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:55\n                \n            \n\n\n            \n                \n                    Updates user information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserRole\n                        \n                    \n                \n            \n            \n                \nupdateUserRole(updateUserRoleDto: UpdateUserRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin set user's role'})@IsAdmin()@Patch('role')\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:68\n                \n            \n\n\n            \n                \n                    Updates user role, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserRoleDto\n                                    \n                                                UpdateUserRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Patch,\n  Post,\n  Req,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { Public } from 'src/auth/public.decorator';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { DeleteUserDto } from './dto/delete-user.dto';\nimport { UpdateUserRoleDto } from './dto/update-user-role.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserWithoutPassword } from './entities/user-without-password.entity';\nimport { UserService } from './user.service';\n\n/** Exposes user CRUD endpoints */\n@ApiTags('user')\n@Controller('user')\nexport class UserController {\n  /** Exposes user CRUD endpoints\n   *\n   * Instantiate class and UserService dependency\n   */\n  constructor(private readonly userService: UserService) {}\n\n  /** Creates a new user */\n  @ApiOperation({ summary: 'Creates a new user' })\n  @Public()\n  @Post()\n  create(@Body() createUserDto: CreateUserDto): Promise {\n    return this.userService.create(createUserDto);\n  }\n\n  /** Returns user's own profile information without password */\n  @ApiOperation({ summary: \"Gets user's own profile\" })\n  @ApiBearerAuth()\n  @Get()\n  async findById(@Req() request: Request): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.findById(userId);\n  }\n\n  /** Updates user information */\n  @ApiOperation({ summary: 'Updates user' })\n  @ApiBearerAuth()\n  @Patch()\n  update(\n    @Req() request: Request,\n    @Body() updateUserDto: UpdateUserDto,\n  ): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.update(userId, updateUserDto);\n  }\n\n  /** Updates user role, only for admins */\n  @ApiOperation({ summary: \"Admin set user's role\" })\n  @IsAdmin()\n  @Patch('role')\n  updateUserRole(\n    @Body() updateUserRoleDto: UpdateUserRoleDto,\n  ): Promise {\n    return this.userService.updateUserRole(updateUserRoleDto);\n  }\n\n  /** Deletes user and all user related information from the system */\n  @ApiOperation({ summary: 'Deletes user' })\n  @ApiBearerAuth()\n  @Delete()\n  @HttpCode(HttpStatus.NO_CONTENT)\n  remove(\n    @Req() request: Request,\n    @Body() deleteUserDto: DeleteUserDto,\n  ): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.remove(userId, deleteUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserInputExceptionHandler.html":{"url":"classes/UserInputExceptionHandler.html","title":"class - UserInputExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserInputExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/user-input-exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Catches user input errors and throws the\nrespective HTTP error\n\n            \n\n\n            \n                Implements\n            \n            \n                            ExceptionHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/user-input-exception.handler.ts:13\n                \n            \n\n\n            \n                \n                    Catches user input errors and throws the\nrespective HTTP error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\nimport { ProductServiceInputException } from 'src/models/product/exceptions/product-service-input.exception';\nimport { UserServiceInputException } from 'src/models/user/exceptions/user-service-input.exception';\nimport { ExceptionHandler } from './exception.handler';\n\n/** Catches user input errors and throws the\n * respective HTTP error\n */\nexport class UserInputExceptionHandler implements ExceptionHandler {\n  /** Catches user input errors and throws the\n   * respective HTTP error\n   */\n  handle(error: Error): void {\n    if (error instanceof UserServiceInputException) {\n      throw new BadRequestException(error.message);\n    }\n\n    if (error instanceof ProductServiceInputException) {\n      throw new BadRequestException(error.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  controllers: [UserController],\n  providers: [UserService],\n  imports: [PrismaModule],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotFoundException.html":{"url":"classes/UserNotFoundException.html","title":"class - UserNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/user/user-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\nan user email or id that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/user/user-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'User not found'. Used when the user inputs an user\nemail or id that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * an user email or id that is not registered in the system\n */\nexport class UserNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'User not found'. Used when the user inputs an user\n   * email or id that is not registered in the system\n   */\n  constructor() {\n    super('User not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing users in the database.\nCRUD endpoints are available for users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Private\n                                    Async\n                                hashIfUpdatingPassword\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateUserRole\n                            \n                            \n                                    Private\n                                    Async\n                                validateCurrentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/user/user.service.ts:17\n                            \n                        \n\n                \n                    \n                            Responsible for managing users in the database.\nCRUD endpoints are available for users.\nInstantiate the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:26\n                \n            \n\n\n            \n                \n                    Creates a new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:56\n                \n            \n\n\n            \n                \n                    Finds user by email and returns the user with password.\nUsed mainly in login to compare if the inputted password matches\nthe hashed one.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:44\n                \n            \n\n\n            \n                \n                    Finds user by id and returns the user without password.\nUsed for default in app requests where the hashed password\nwon't be compared\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        hashIfUpdatingPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashIfUpdatingPassword(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:107\n                \n            \n\n\n            \n                \n                    If the user inputted both new password and current password\nthe new password is hashed to be saved in the database replacing\nthe current one.\nIf only the new password or current password were inputted the user\nprobably forgot about the other one and an error is thrown\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string, deleteUserDto: DeleteUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:94\n                \n            \n\n\n            \n                \n                    Removes user from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    deleteUserDto\n                                    \n                                                DeleteUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:63\n                \n            \n\n\n            \n                \n                    Updates user information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserRole(updateUserRoleDto: UpdateUserRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:80\n                \n            \n\n\n            \n                \n                    Updates user role\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserRoleDto\n                                    \n                                                UpdateUserRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateCurrentPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateCurrentPassword(id: string, currentPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:132\n                \n            \n\n\n            \n                \n                    Compares if the inputted current password matches the\nuser hashed password saved in the database\nIf it doesn't, an error is thrown\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { compare, hash } from 'bcrypt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { DeleteUserDto } from './dto/delete-user.dto';\nimport { UpdateUserRoleDto } from './dto/update-user-role.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserWithoutPassword } from './entities/user-without-password.entity';\nimport { User } from './entities/user.entity';\nimport { InvalidPasswordUpdateException } from './exceptions/invalid-password-update.exception';\nimport { MissingPasswordUpdateException } from './exceptions/missing-password-update.exception';\n\n/** Responsible for managing users in the database.\n * CRUD endpoints are available for users.\n */\n@Injectable()\nexport class UserService {\n  /** Responsible for managing users in the database.\n   * CRUD endpoints are available for users.\n   *\n   * Instantiate the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new user */\n  async create(createUserDto: CreateUserDto): Promise {\n    const hashedPassword = await hash(createUserDto.password, 10);\n\n    const lowerCaseEmail = createUserDto.email.toLowerCase();\n\n    await this.prisma.user.create({\n      data: {\n        ...createUserDto,\n        email: lowerCaseEmail,\n        password: hashedPassword,\n      },\n    });\n  }\n\n  /** Finds user by id and returns the user without password.\n   * Used for default in app requests where the hashed password\n   * won't be compared\n   */\n  async findById(id: string): Promise {\n    const user = await this.prisma.user.findUnique({ where: { id } });\n\n    delete user.password;\n\n    return { ...user };\n  }\n\n  /** Finds user by email and returns the user with password.\n   * Used mainly in login to compare if the inputted password matches\n   * the hashed one.\n   */\n  async findByEmail(email: string): Promise {\n    const lowerCaseEmail = email.toLowerCase();\n\n    return this.prisma.user.findUnique({ where: { email: lowerCaseEmail } });\n  }\n\n  /** Updates user information */\n  async update(\n    id: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    await this.hashIfUpdatingPassword(id, updateUserDto);\n\n    const user = await this.prisma.user.update({\n      where: { id },\n      data: { ...updateUserDto, updatedAt: new Date() },\n    });\n\n    delete user.password;\n\n    return { ...user };\n  }\n\n  /** Updates user role */\n  async updateUserRole(\n    updateUserRoleDto: UpdateUserRoleDto,\n  ): Promise {\n    const user = await this.prisma.user.update({\n      where: { email: updateUserRoleDto.email },\n      data: { role: updateUserRoleDto.role },\n    });\n\n    delete user.password;\n\n    return user;\n  }\n\n  /** Removes user from database */\n  async remove(id: string, deleteUserDto: DeleteUserDto): Promise {\n    await this.validateCurrentPassword(id, deleteUserDto.currentPassword);\n\n    await this.prisma.user.delete({ where: { id } });\n  }\n\n  /** If the user inputted both new password and current password\n   * the new password is hashed to be saved in the database replacing\n   * the current one.\n   *\n   * If only the new password or current password were inputted the user\n   * probably forgot about the other one and an error is thrown\n   */\n  private async hashIfUpdatingPassword(\n    id: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    if (updateUserDto.password && updateUserDto.currentPassword) {\n      await this.validateCurrentPassword(id, updateUserDto.currentPassword);\n\n      const hashedPassword = await hash(updateUserDto.password, 10);\n\n      updateUserDto.password = hashedPassword;\n      delete updateUserDto.currentPassword;\n\n      return;\n    }\n\n    if (updateUserDto.password || updateUserDto.currentPassword) {\n      throw new MissingPasswordUpdateException();\n    }\n  }\n\n  /** Compares if the inputted current password matches the\n   * user hashed password saved in the database\n   *\n   * If it doesn't, an error is thrown\n   */\n  private async validateCurrentPassword(\n    id: string,\n    currentPassword: string,\n  ): Promise {\n    const user = await this.prisma.user.findUnique({ where: { id } });\n\n    const isCorrectPassword = await compare(currentPassword, user.password);\n\n    if (!isCorrectPassword) {\n      throw new InvalidPasswordUpdateException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserServiceInputException.html":{"url":"classes/UserServiceInputException.html","title":"class - UserServiceInputException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserServiceInputException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/exceptions/user-service-input.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to extend another exception to make it\ninstanceof UserServiceInputException\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/user/exceptions/user-service-input.exception.ts:5\n                            \n                        \n\n                \n                    \n                            Used to extend another exception to make it\ninstanceof UserServiceInputException\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserServiceInputException extends Error {\n  /**\n   * Used to extend another exception to make it\n   * instanceof UserServiceInputException\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserWithoutPassword.html":{"url":"classes/UserWithoutPassword.html","title":"class - UserWithoutPassword","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserWithoutPassword\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/entities/user-without-password.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This entity is the same as\nUser\nbut omitting the password field\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { User } from './user.entity';\n\n/** This entity is the same as\n * User\n * but omitting the password field\n */\nexport class UserWithoutPassword extends OmitType(User, [\n  'password',\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidateReturn.html":{"url":"interfaces/ValidateReturn.html","title":"interface - ValidateReturn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidateReturn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                What is returned to the application after JsonWebToken is validated\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                                \n                                        \n                                            userRole\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User ID\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userRole\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userRole:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User role\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { jwtConfig } from 'src/config/jwt.config';\n\n/** Decrypted JsonWebToken content */\ninterface Payload {\n  /** Token subject, user ID used\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  sub: string;\n\n  /** User role\n   * @example \"user\"\n   */\n  role: string;\n}\n\n/** What is returned to the application after JsonWebToken is validated */\ninterface ValidateReturn {\n  /** User ID\n   * @example \"d6c24523-12df-4f33-9fd6-44dd5c499084\"\n   */\n  userId: string;\n\n  /** User role\n   * @example \"user\"\n   */\n  userRole: string;\n}\n\n/** Passport library JsonWebToken configuration */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /** Passport library JsonWebToken configuration */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConfig.secret,\n    });\n  }\n\n  /** Validates and returns data after JsonWebToken is decrypted */\n  async validate(payload: Payload): Promise {\n    return {\n      userId: payload.sub,\n      userRole: payload.role,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/dto/login-credentials.dto.ts\n            \n            class\n            LoginCredentialsDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login.response.ts\n            \n            class\n            LoginResponse\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/errors/invalid-email-or-password.error..ts\n            \n            class\n            InvalidEmailOrPasswordError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            Payload\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            ValidateReturn\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/file-upload.decorator.ts\n            \n            function\n            FileUpload\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/is-admin.decorator.ts\n            \n            function\n            IsAdmin\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/is-admin.decorator.ts\n            \n            variable\n            IS_ADMIN_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/exceptions/category/category-name-in-use.exception.ts\n            \n            class\n            CategoryNameInUseException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/category/category-not-found.exception.ts\n            \n            class\n            CategoryNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/product/product-name-in-use.exception.ts\n            \n            class\n            ProductNameInUseException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/product/product-not-found.exception.ts\n            \n            class\n            ProductNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/user/email-in-use.exception.ts\n            \n            class\n            EmailInUseException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/user/user-not-found.exception.ts\n            \n            class\n            UserNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/exception.interceptor.ts\n            \n            injectable\n            ExceptionInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/exception.handler.ts\n            \n            interface\n            ExceptionHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/prisma-exception.handler.ts\n            \n            class\n            PrismaExceptionHandler\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/user-input-exception.handler.ts\n            \n            class\n            UserInputExceptionHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            jwtConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer-upload.config.ts\n            \n            variable\n            maxImageUploadSize\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer-upload.config.ts\n            \n            variable\n            multerUploadConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer-upload.config.ts\n            \n            variable\n            validImageUploadTypesRegex\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/category/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/models/category/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/models/category/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/category/dto/find-categories.dto.ts\n            \n            class\n            FindCategoriesDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/models/category/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/category/entities/category.entity.ts\n            \n            class\n            Category\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/models/product/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/models/product/dto/file-upload.dto.ts\n            \n            class\n            FileUploadDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/product/dto/find-products.dto.ts\n            \n            class\n            FindProductsDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/models/product/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/product/entities/product.entity.ts\n            \n            class\n            Product\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/models/product/exceptions/file-type.exception.ts\n            \n            class\n            FileTypeError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/product/exceptions/product-service-input.exception.ts\n            \n            class\n            ProductServiceInputException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/product/product.controller.ts\n            \n            controller\n            ProductController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/models/product/product.service.ts\n            \n            injectable\n            ProductService\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/models/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/models/user/dto/delete-user.dto.ts\n            \n            class\n            DeleteUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/dto/update-user-role.dto.ts\n            \n            class\n            UpdateUserRoleDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/models/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/entities/user-without-password.entity.ts\n            \n            class\n            UserWithoutPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/models/user/exceptions/invalid-password-update.exception.ts\n            \n            class\n            InvalidPasswordUpdateException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/exceptions/missing-password-update.exception.ts\n            \n            class\n            MissingPasswordUpdateException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/exceptions/user-service-input.exception.ts\n            \n            class\n            UserServiceInputException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/models/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                100 %\n                (3/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.4.4\n        \n            @nestjs/core : ^8.4.4\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.4.4\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @prisma/client : 3.12.0\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            prisma-error-enum : ^0.1.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            FileUpload   (src/.../file-upload.decorator.ts)\n                        \n                        \n                            IsAdmin   (src/.../is-admin.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Starts the application\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    src/common/decorators/file-upload.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FileUpload\n                        \n                    \n                \n            \n            \n                \nFileUpload()\n                \n            \n\n\n\n\n            \n                \n                    Add all file upload decorators at once\nExample: Upload product picture\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    src/common/decorators/is-admin.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsAdmin\n                        \n                    \n                \n            \n            \n                \nIsAdmin()\n                \n            \n\n\n\n\n            \n                \n                    Makes an endpoint accessible only by admin users\nExample: Create, update and remove products\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nE-Commerce Backend\nAPI com endpoints para criação de usuários, produtos, compras e avaliações com autenticação e autorização\n🔗 Documentação com Compodoc e GitHub Pages\n\n\n  \n  \n  \n  \n\n\n📑 Índice\n\n\n📌 Features\n🔧 Instalação\n💻 Tecnologias\n📄 Licença\n\n📌 Features\n\n CRUD de usuários\n Autenticação de usuário\n Autorização de usuário (admin)\n CRUD de produtos\n Upload de imagens\n\n\n CRUD de categorias\n CRUD de compras\n\n🔧 Instalação\n\nVocê precisará ter o Node.js instalado\n\nInstalação\n\n\n  # Clona o projeto para sua máquina\n  git clone https://github.com/alvaromrveiga/ecommerce-backend\n\n  # Entra na pasta do projeto\n  cd ecommerce-backend\n\n  # Instala as dependências\n  yarn\nCrie um arquivo .env na raiz do projeto preenchendo as informações descritas no .env.example\n\nIniciar servidor\n\n\n  # Roda as migrations\n  yarn migrate:dev \n\n  # Inicia o servidor em modo de desenvolvimento\n  yarn start:dev\n\n  # O servidor abrirá na porta 3000. \n  # Você pode acessar a documentação com Swagger em http://localhost:3000/api/\n\n  # Para visualizar o banco de dados\n  yarn prisma studio\nRodar os testes\nCrie um arquivo .env.test na raiz do projeto alterando no mínimo o banco de dados que colocou no .env\nExemplo: postgresql://username:password@localhost:5432/ecommerce-test?schema=public\n\n\n\n\n\n  # Roda as migrations no bando de testes\n  yarn migrate:test \n\n  # Roda todos os testes\n  yarn test:all\n\n  # Roda apenas os testes unitários\n  yarn test\n\n  # Roda apenas os testes de integração\n  yarn test:e2e\n\n  # Para visualizar o banco de dados de testes\n  yarn studio:test💻 Tecnologias\n\nTypescript - minimizar erros e tooling\nNode.js e NestJS com Express - construir o servidor\nPrisma com PostgreSQL - armazenar dados\nPassport e passport-jwt - autenticação com Json Web Token\nClass-validator e class-transformer - validações nos dados de entrada dos endpoints\nBcrypt - hashs de senhas\nPrisma-error-enum - identificar os códigos para tratar as exceções do prisma\nJest, SuperTest e ms - testes\nSwagger UI Express e compodoc - documentação\nESLint e Prettier - linting e formatação de código\n\n📄 Licença\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Álvaro Veiga\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nCategoryModule -->\n\nPrismaModule->CategoryModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nPrismaModule->ProductModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    31 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : alvaromrveiga\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IS_ADMIN_KEY   (src/.../is-admin.decorator.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            jwtConfig   (src/.../jwt.config.ts)\n                        \n                        \n                            maxImageUploadSize   (src/.../multer-upload.config.ts)\n                        \n                        \n                            multerUploadConfig   (src/.../multer-upload.config.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            validImageUploadTypesRegex   (src/.../multer-upload.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/is-admin.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_ADMIN_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isAdmin'\n                    \n                \n\n            \n                \n                    Value to verify if @IsAdmin() is being used in the endpoint\nConsult RolesGuard\n\n                \n            \n\n        \n    \n\n    src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n            \n                \n                    Value to verify if @Public() is being used in the endpoint\nConsult JwtAuthGuard\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CustomDecorator => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n            \n                \n                    Makes an endpoint accessible by unauthenticated users\nExample: Create user and Login endpoints\n\n                \n            \n\n        \n    \n\n    src/config/jwt.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.JWT_SECRET,\n  signOptions: { expiresIn: '15m' },\n}\n                    \n                \n\n            \n                \n                    Configurations for the jsonwebtoken library used for authentication\n\n                \n            \n\n        \n    \n\n    src/config/multer-upload.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        maxImageUploadSize\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 3 * 1024 * 1024\n                    \n                \n\n            \n                \n                    Constant that sets the maximum image upload file size\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        multerUploadConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MulterOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  storage: diskStorage({\n    destination: './tmp',\n    filename: (request, file, callback) => {\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);\n      const fileName = `${uniqueSuffix}-${file.originalname}`;\n\n      return callback(null, fileName);\n    },\n  }),\n\n  fileFilter: (request, file, callback) => {\n    const mimetype = validImageUploadTypesRegex.test(file.mimetype);\n    const extname = validImageUploadTypesRegex.test(\n      path.extname(file.originalname).toLowerCase(),\n    );\n\n    if (mimetype && extname) {\n      return callback(null, true);\n    }\n\n    return callback(new FileTypeError(validImageUploadTypesRegex), false);\n  },\n\n  limits: {\n    fileSize: maxImageUploadSize,\n  },\n}\n                    \n                \n\n            \n                \n                    Configurations for the multer library used for file upload.\nAccepts types jpeg, jpg and png of size up to 3MB\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validImageUploadTypesRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /jpeg|jpg|png/\n                    \n                \n\n            \n                \n                    Constant containing a Regular Expression\nwith the valid image upload types\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
