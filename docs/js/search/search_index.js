var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessJwtAuthGuard.html",[0,1.36,1,2.904]],["body/injectables/AccessJwtAuthGuard.html",[0,1.825,1,3.895,2,1.985,3,0.143,4,0.143,5,0.086,6,4.852,7,3.735,8,3.406,9,0.235,10,6.288,11,4.807,12,5.231,13,6.985,14,5.798,15,5.673,16,5.798,17,5.214,18,5.231,19,4.469,20,5.798,21,5.798,22,0.578,23,1.893,24,5.378,25,1.107,26,3.406,27,6.566,28,0.44,29,3.912,30,3.621,31,0.425,32,2.738,33,1.527,34,0.014,35,1.037,36,0.649,37,0.929,38,3.406,39,5.231,40,3.912,41,3.198,42,5.396,43,5.396,44,4.239,45,1.323,46,3.895,47,2.121,48,4.852,49,0.42,50,0.867,51,2.824,52,2.824,53,2.824,54,3.073,55,3.406,56,0.143,57,0.997,58,3.912,59,1.895,60,3.406,61,1.737,62,4.698,63,3.912,64,3.406,65,3.406,66,2.041,67,2.319,68,3.912,69,0.009,70,0.009]],["title/injectables/AccessJwtStrategy.html",[0,1.36,71,2.7]],["body/injectables/AccessJwtStrategy.html",[0,1.983,2,2.246,3,0.162,4,0.162,5,0.097,6,5.167,7,3.29,9,0.266,11,5.261,12,5.502,22,0.654,23,2.058,25,1.861,28,0.479,31,0.305,33,1.252,34,0.014,35,0.85,36,0.532,37,0.762,45,2.225,47,2.306,49,0.45,50,0.98,52,3.195,56,0.162,57,1.128,60,3.853,66,1.674,69,0.01,70,0.01,71,3.936,72,3.853,73,3.899,74,5.407,75,6.099,76,3.187,77,5.865,78,4.425,79,5.865,80,6.099,81,4.425,82,5.106,83,3.476,84,5.106,85,5.106,86,5.865,87,4.425,88,5.865,89,3.195,90,3.853,91,3.853,92,5.865,93,2.841,94,3.853,95,4.425,96,4.425,97,4.425,98,3.476,99,4.425,100,4.425,101,2.482,102,3.853,103,2.97,104,4.425]],["title/modules/AppModule.html",[105,1.713,106,2.904]],["body/modules/AppModule.html",[1,4.306,3,0.166,4,0.166,5,0.1,7,2.547,31,0.313,34,0.014,49,0.475,50,1.006,51,3.278,56,0.166,69,0.01,70,0.01,105,2.54,106,5.936,107,2.304,108,2.89,109,3.953,110,3.953,111,5.063,112,5.063,113,3.828,114,5.063,115,5.063,116,4.744,117,3.346,118,2.547,119,2.2,120,4.54,121,3.751,122,5.965,123,4.54,124,4.54,125,4.54,126,4.54,127,4.54,128,4.54,129,4.54,130,4.54,131,2.691,132,4.54,133,4.54]],["title/controllers/AuthController.html",[134,1.949,135,2.904]],["body/controllers/AuthController.html",[3,0.099,4,0.099,5,0.059,9,0.162,17,4.035,22,0.399,23,1.445,28,0.491,31,0.186,33,1.703,34,0.014,35,1.157,36,0.724,37,1.036,41,2.96,45,2.358,47,2.796,49,0.428,50,0.598,55,2.35,56,0.099,59,1.308,61,2.481,66,2.277,69,0.007,70,0.007,76,3.668,93,2.42,101,3.136,119,3.296,134,1.996,135,2.974,136,1.308,137,2.35,138,1.434,139,1.996,140,3.586,141,3.141,142,2.974,143,3.586,144,4.04,145,2.699,146,5.321,147,1.963,148,4.04,149,4.867,150,2.699,151,2.699,152,2.974,153,4.349,154,2.699,155,4.035,156,7.113,157,2.699,158,2.699,159,4.119,160,2.699,161,4.035,162,2.699,163,2.699,164,2.59,165,4.119,166,2.699,167,2.699,168,2.699,169,4.995,170,2.699,171,4.035,172,4.867,173,2.699,174,2.699,175,4.119,176,3.352,177,1.811,178,1.811,179,1.811,180,3.924,181,4.391,182,4.258,183,1.811,184,1.104,185,2.35,186,1.251,187,1.6,188,3.141,189,2.35,190,2.699,191,2.699,192,1.811,193,2.35,194,2.699,195,2.699,196,2.699,197,2.699,198,1.37,199,4.04,200,2.699,201,5.589,202,1.198,203,1.754,204,4.867,205,4.119,206,4.119,207,4.119,208,4.119,209,4.119,210,4.119,211,2.699,212,2.699,213,2.699,214,2.699,215,2.699,216,2.699,217,2.699,218,2.699,219,3.236,220,0.85,221,2.699,222,2.699,223,2.699,224,2.699]],["title/modules/AuthModule.html",[105,1.713,111,2.7]],["body/modules/AuthModule.html",[3,0.176,4,0.176,5,0.106,31,0.331,34,0.014,49,0.475,50,1.066,52,3.475,56,0.176,69,0.01,70,0.01,71,5.143,73,2.852,105,2.638,107,2.443,108,3.002,111,5.467,113,3.889,116,4.819,117,3.476,118,2.7,119,2.332,121,3.896,131,3.672,135,4.946,136,3.002,188,4.819,189,4.19,225,4.19,226,4.813,227,4.19,228,4.813,229,4.813,230,3.781,231,6.195,232,4.813,233,4.813,234,4.813,235,3.23,236,4.813]],["title/injectables/AuthService.html",[0,1.36,188,2.53]],["body/injectables/AuthService.html",[0,0.824,2,0.719,3,0.052,4,0.052,5,0.031,9,0.085,22,0.209,23,0.855,25,0.689,28,0.519,31,0.221,33,1.799,34,0.014,35,1.222,36,0.832,37,1.095,45,2.258,47,2.854,49,0.383,50,0.314,56,0.052,61,3.038,66,2.093,67,0.84,69,0.004,70,0.004,73,2.776,76,3.721,82,3.314,83,0.84,85,4.366,89,1.759,90,1.233,93,3.315,101,3.415,102,2.121,103,2.554,108,1.18,138,1.064,140,2.121,141,2.016,142,1.759,143,2.121,144,4.769,149,2.121,152,3.822,153,4.609,172,2.121,185,2.121,186,0.656,188,1.532,192,0.951,193,1.233,198,1.627,202,2.35,203,2.592,204,5.813,220,1.651,230,1.113,237,1.233,238,2.393,239,3.806,240,4.329,241,3.205,242,2.436,243,2.436,244,3.205,245,3.205,246,2.436,247,3.205,248,2.436,249,1.417,250,3.138,251,5.534,252,2.545,253,1.417,254,1.532,255,1.417,256,4.078,257,1.417,258,2.028,259,3.45,260,3.806,261,2.702,262,3.806,263,2.436,264,1.417,265,2.436,266,1.417,267,2.436,268,2.436,269,1.417,270,1.417,271,1.417,272,4.609,273,4.683,274,3.314,275,4.078,276,2.99,277,3.381,278,2.436,279,2.436,280,1.417,281,2.554,282,2.436,283,1.417,284,1.417,285,1.417,286,2.436,287,1.417,288,5.014,289,1.417,290,2.554,291,3.806,292,5.743,293,0.767,294,2.436,295,2.436,296,2.436,297,2.121,298,2.436,299,2.436,300,2.436,301,2.436,302,2.436,303,1.417,304,5.534,305,4.609,306,1.417,307,2.436,308,1.771,309,2.436,310,1.417,311,2.436,312,1.417,313,1.417,314,1.914,315,2.121,316,2.436,317,1.417,318,0.887,319,1.081,320,1.233,321,1.023,322,2.518,323,1.417,324,1.417,325,0.951,326,1.914,327,1.417,328,1.417,329,2.436,330,0.84,331,1.759,332,2.121,333,1.417,334,1.759,335,1.417,336,1.417,337,4.503,338,1.417,339,4.683,340,1.417,341,2.436,342,4.078,343,1.417,344,2.436,345,1.417,346,1.417,347,1.417,348,1.417,349,3.806,350,3.806,351,1.417,352,3.806,353,3.205,354,1.417,355,2.436,356,1.417,357,1.233,358,1.233,359,1.444,360,2.436,361,3.205,362,1.417,363,2.436,364,1.417,365,2.436,366,1.417,367,1.635,368,1.417,369,2.436,370,1.417,371,1.417,372,1.233]],["title/classes/AuthServiceInputException.html",[31,0.277,373,2.53]],["body/classes/AuthServiceInputException.html",[3,0.198,4,0.198,5,0.119,9,0.325,25,1.53,28,0.441,31,0.372,33,1.53,34,0.013,35,1.039,36,0.65,37,0.931,56,0.198,57,1.699,69,0.011,70,0.011,220,1.492,293,2.275,319,2.96,373,4.875,374,0.738,375,5.238,376,3.09,377,3.63,378,5.219,379,5.219,380,3.503,381,4.852,382,4.546,383,4.814,384,3.904,385,1.969,386,3.904]],["title/classes/Category.html",[31,0.277,387,1.786]],["body/classes/Category.html",[3,0.189,4,0.189,5,0.114,9,0.31,22,0.763,28,0.529,31,0.355,34,0.014,35,1.47,36,0.779,37,1.115,49,0.31,56,0.189,69,0.011,70,0.011,186,2.392,220,1.533,261,2.875,330,3.839,374,0.704,387,3.555,388,4.494,389,1.967,390,2.254,391,3.001,392,3.127,393,5.161,394,5.161,395,2.392,396,5.161,397,1.967,398,5.161,399,5.161,400,5.161,401,5.161,402,5.161,403,4.494]],["title/controllers/CategoryController.html",[134,1.949,404,2.904]],["body/controllers/CategoryController.html",[3,0.091,4,0.091,5,0.055,9,0.15,22,0.368,23,1.358,28,0.501,31,0.267,32,1.263,33,1.738,34,0.014,35,1.418,36,0.739,37,1.058,41,2.814,45,2.434,47,2.83,49,0.419,50,0.552,56,0.091,59,1.206,66,2.323,69,0.009,70,0.006,76,3.699,134,1.206,136,1.206,139,2.301,147,2.003,148,4.122,176,3.187,177,1.671,178,1.671,179,2.598,182,4.303,183,1.671,184,1.018,198,1.263,199,4.122,220,1.486,254,1.565,258,2.854,261,1.718,281,3.595,308,2.026,387,3.466,392,2.846,404,2.794,405,2.167,406,1.797,407,3.428,408,2.53,409,1.606,410,2.986,411,3.428,412,4.134,413,2.062,414,2.2,415,2.167,416,3.862,417,3.532,418,2.489,419,2.489,420,4.449,421,2.489,422,4.122,423,2.489,424,2.489,425,3.187,426,2.434,427,1.875,428,2.434,429,2.854,430,1.648,431,2.434,432,1.718,433,1.964,434,3.37,435,2.434,436,1.797,437,4.418,438,2.794,439,2.489,440,2.489,441,3.368,442,2.167,443,2.489,444,2.489,445,1.475,446,2.489,447,2.489,448,1.475,449,4.449,450,3.005,451,2.489,452,2.489,453,1.409,454,1.797,455,1.955,456,1.475,457,3.595,458,1.955,459,3.254,460,1.475,461,1.671,462,2.167,463,1.797,464,3.368,465,2.167,466,1.396,467,3.04,468,1.565,469,2.167,470,1.396,471,1.955,472,2.489,473,2.489,474,2.489,475,2.489,476,2.171,477,2.167,478,3.04,479,2.489,480,2.489,481,2.489,482,2.489,483,1.955,484,2.489,485,1.955,486,1.797,487,1.955,488,2.489]],["title/modules/CategoryModule.html",[105,1.713,112,2.7]],["body/modules/CategoryModule.html",[3,0.195,4,0.195,5,0.117,31,0.367,34,0.014,49,0.452,50,1.182,56,0.195,69,0.011,70,0.011,105,2.815,107,2.707,108,3.203,112,5.408,113,3.993,117,3.709,118,2.992,119,2.584,121,4.157,131,3.918,136,3.203,235,3.579,404,5.187,464,4.947,465,4.644,489,4.644,490,5.333,491,4.644,492,5.333,493,5.333]],["title/classes/CategoryNameInUseException.html",[31,0.277,494,2.904]],["body/classes/CategoryNameInUseException.html",[3,0.178,4,0.178,5,0.107,9,0.293,25,1.95,28,0.398,31,0.336,34,0.013,35,1.537,49,0.293,50,1.08,56,0.178,57,1.591,69,0.01,70,0.01,138,1.347,293,2.287,318,2.647,374,0.665,385,2.274,387,3.413,494,4.509,495,4.509,496,3.519,497,3.522,498,4.308,499,5.71,500,3.368,501,6.141,502,4.308,503,4.078,504,4.976,505,3.829,506,4.976,507,4.244]],["title/classes/CategoryNotFoundException.html",[31,0.277,508,2.904]],["body/classes/CategoryNotFoundException.html",[3,0.186,4,0.186,5,0.112,9,0.306,25,1.988,28,0.415,31,0.35,34,0.014,49,0.306,50,1.125,56,0.186,57,1.634,69,0.01,70,0.01,138,1.368,293,2.322,318,2.688,374,0.693,385,2.335,387,3.45,495,4.629,497,3.576,498,4.374,500,3.42,502,4.374,503,4.14,507,4.423,508,4.629,509,3.409,510,5.328,511,4.716,512,3.667,513,4.419]],["title/injectables/CategoryService.html",[0,1.36,464,2.53]],["body/injectables/CategoryService.html",[0,1.079,2,0.991,3,0.071,4,0.071,5,0.043,9,0.117,22,0.289,23,1.119,25,0.553,28,0.513,30,2.141,31,0.278,32,1.619,33,1.778,34,0.014,35,1.525,36,0.756,37,1.082,45,2.186,47,2.742,49,0.35,50,0.433,56,0.071,59,0.946,61,2.789,66,2.297,67,3.83,69,0.008,70,0.005,76,3.534,83,2.396,138,0.591,139,2.261,198,0.991,220,1.531,238,2.935,240,3.271,252,2.801,258,1.7,261,2.45,277,2.303,290,2.141,293,1.004,308,1.765,325,1.311,337,3.235,358,2.777,387,3.449,392,2.89,395,1.478,408,2.487,409,1.079,410,2.543,411,2.919,412,3.52,413,1.7,414,1.873,415,2.777,416,3.471,422,3.132,425,4.338,426,2.006,427,1.545,428,2.006,429,3.444,430,2.586,431,2.006,432,2.283,433,1.619,435,2.006,436,1.41,437,3.451,441,2.935,442,1.701,445,1.89,448,1.158,449,4.799,450,3.096,453,1.162,462,1.701,463,1.41,464,2.006,466,1.096,467,2.506,468,1.228,469,1.701,470,1.096,471,1.534,476,3.096,514,1.701,515,3.369,516,3.369,517,3.19,518,4.043,519,1.41,520,1.953,521,3.19,522,1.953,523,3.19,524,2.777,525,2.777,526,1.953,527,1.534,528,1.953,529,2.303,530,1.953,531,3.369,532,1.953,533,1.953,534,1.953,535,1.953,536,1.953,537,2.777,538,1.953,539,1.953,540,2.777,541,3.952,542,3.19,543,1.953,544,3.176,545,3.176,546,3.176,547,3.52,548,3.52,549,1.534,550,1.701,551,3.666,552,4.064,553,3.19,554,2.506,555,2.506,556,2.006,557,1.789,558,2.506,559,1.953,560,1.953,561,1.953,562,3.19,563,1.953,564,1.953,565,1.953,566,1.953]],["title/classes/CreateCategoryDto.html",[31,0.277,416,2.53]],["body/classes/CreateCategoryDto.html",[3,0.194,4,0.194,5,0.117,9,0.319,22,0.784,28,0.433,31,0.454,34,0.014,35,1.481,36,0.638,49,0.396,56,0.194,69,0.011,70,0.011,147,1.73,220,1.36,374,0.723,387,3.536,389,2,390,2,391,3.053,397,1.61,403,4.618,409,2.228,416,4.143,471,4.166,567,5.736,568,4.166,569,3.343,570,3.053,571,4.166,572,5.304,573,4.422,574,3.343,575,2.085]],["title/classes/CreateProductDto.html",[31,0.277,576,2.53]],["body/classes/CreateProductDto.html",[3,0.125,4,0.125,5,0.075,9,0.416,22,0.505,28,0.564,31,0.338,34,0.014,35,1.277,36,0.831,37,1.255,49,0.377,56,0.125,57,0.871,61,1.517,69,0.008,70,0.008,147,2.255,184,1.398,220,1.504,367,4.21,374,0.466,387,2.178,389,1.49,390,1.49,392,1.398,397,2.099,409,1.66,425,3.853,432,1.517,556,2.15,557,1.918,569,2.49,570,2.274,571,2.685,573,3.853,574,2.913,575,1.344,576,3.086,577,6.202,578,2.685,579,2.628,580,4.509,581,4.998,582,5.784,583,3.509,584,5.218,585,3.418,586,3.418,587,3.855,588,4.273,589,4.273,590,3.543,591,3.855,592,3.855,593,3.086,594,3.418,595,3.418,596,4.273,597,2.685,598,3.418,599,3.418,600,3.418,601,4.273,602,4.273,603,4.21,604,3.418,605,3.418,606,3.418,607,2.49,608,2.976,609,2.976,610,4.907,611,3.293,612,4.998,613,3.727,614,2.685,615,3.418,616,2.294,617,2.976,618,4.273,619,3.543,620,2.976,621,2.976,622,2.976,623,3.418,624,3.418,625,3.418,626,3.418,627,3.418,628,3.418,629,3.418,630,3.418,631,3.418,632,3.418]],["title/classes/CreatePurchaseDto.html",[31,0.277,633,2.53]],["body/classes/CreatePurchaseDto.html",[3,0.173,4,0.173,5,0.104,9,0.284,22,0.697,28,0.499,31,0.421,34,0.014,36,0.736,49,0.408,56,0.173,57,1.202,69,0.01,70,0.01,147,1.995,184,1.93,220,1.263,330,3.625,374,0.644,389,1.857,390,1.857,392,2.501,397,1.857,409,2.069,430,2.605,569,3.104,570,2.834,575,1.855,579,2.428,583,3.104,603,4.105,607,3.869,612,5.326,613,3.431,633,3.847,634,5.91,635,3.406,636,3.288,637,4.819,638,4.718,639,4.108,640,4.416,641,6.116,642,4.718,643,4.108,644,4.416,645,4.718,646,3.406,647,4.108,648,4.108,649,4.108,650,4.108,651,4.108,652,4.108,653,4.108]],["title/classes/CreateUserDto.html",[31,0.277,654,2.53]],["body/classes/CreateUserDto.html",[3,0.143,4,0.143,5,0.086,9,0.235,22,0.578,28,0.543,31,0.372,34,0.014,35,1.343,36,0.801,37,1.147,49,0.325,56,0.143,69,0.009,70,0.009,138,1.473,147,2.172,202,3.101,203,3.259,220,1.557,276,3.073,367,2.626,374,0.534,385,2.544,389,1.638,390,1.638,391,2.5,397,2.022,409,1.825,430,3.211,525,5.798,569,2.738,570,2.5,574,3.379,575,1.538,583,3.379,597,4.239,613,3.465,654,3.393,655,6.082,656,2.824,657,6.082,658,3.912,659,3.912,660,4.239,661,4.698,662,3.912,663,3.912,664,3.912,665,5.396,666,3.912,667,5.396,668,6.658,669,3.912,670,4.698,671,3.912,672,3.406,673,2.824,674,2.824,675,3.912,676,3.912,677,3.912,678,3.406,679,3.406,680,3.406,681,3.406]],["title/classes/DeleteUserDto.html",[31,0.277,682,2.7]],["body/classes/DeleteUserDto.html",[3,0.198,4,0.198,5,0.119,9,0.325,22,0.799,28,0.441,31,0.459,34,0.014,36,0.65,49,0.325,56,0.198,69,0.011,70,0.011,138,1.399,147,1.764,164,4.193,203,2.839,220,1.377,374,0.738,389,2.025,390,2.025,397,1.642,456,3.952,569,3.384,570,3.09,571,4.248,573,4.475,574,3.384,575,2.126,656,3.904,674,3.904,682,4.475,683,5.806,684,5.679,685,5.408]],["title/classes/EmailInUseException.html",[31,0.277,686,2.904]],["body/classes/EmailInUseException.html",[3,0.181,4,0.181,5,0.109,9,0.298,25,1.964,28,0.404,31,0.341,34,0.013,49,0.298,50,1.097,56,0.181,57,1.607,69,0.01,70,0.01,138,1.355,202,3.245,293,2.3,318,2.662,374,0.675,385,2.297,496,3.573,497,3.542,498,4.333,499,5.743,500,3.387,501,6.163,502,4.333,503,4.101,504,5.012,505,3.888,506,5.012,660,4.955,661,6.045,686,4.553,687,4.955,688,4.949]],["title/interfaces/ExceptionHandler.html",[689,2.904,690,2.53]],["body/interfaces/ExceptionHandler.html",[3,0.205,4,0.205,5,0.124,9,0.338,22,0.83,23,2.393,28,0.458,33,1.588,34,0.013,35,1.079,36,0.675,37,0.967,45,1.898,56,0.205,69,0.011,70,0.011,319,3.536,380,2.72,689,4.925,690,4.29,691,5.613,692,4.888,693,5.613,694,5.131,695,4.925,696,5.613,697,5.94,698,6.822,699,5.359,700,4.578]],["title/injectables/ExceptionInterceptor.html",[0,1.36,701,3.16]],["body/injectables/ExceptionInterceptor.html",[0,1.936,2,2.166,3,0.156,4,0.156,5,0.094,9,0.257,10,4.985,18,5.423,19,4.633,22,0.631,23,2.009,28,0.348,31,0.294,33,1.208,34,0.014,35,0.82,36,0.513,37,0.735,39,5.423,44,4.497,45,1.443,47,2.251,48,5.075,49,0.433,50,0.946,53,3.081,56,0.156,66,1.614,69,0.009,70,0.009,308,2.443,318,2.085,319,2.868,359,2.53,391,1.978,427,2.774,453,2.085,497,3.345,701,4.497,702,3.716,703,5.725,704,5.725,705,5.423,706,4.985,707,4.984,708,5.725,709,6.903,710,6.46,711,4.268,712,6.46,713,6.903,714,4.268,715,4.133,716,4.133,717,4.985,718,5.725,719,4.268,720,3.081,721,4.268,722,4.664,723,3.081,724,4.268,725,3.081,726,4.268,727,3.353,728,4.268,729,4.268,730,4.268,731,4.268,732,4.268]],["title/classes/FileTypeError.html",[31,0.277,733,3.16]],["body/classes/FileTypeError.html",[3,0.176,4,0.176,5,0.172,9,0.289,25,1.362,28,0.393,31,0.331,33,1.362,34,0.014,35,0.925,36,0.9,37,0.829,49,0.289,56,0.176,57,1.579,69,0.01,70,0.01,138,1.341,293,2.276,318,2.256,374,0.656,376,2.23,380,3.002,385,2.256,500,3.352,557,4.059,579,1.628,733,4.867,734,5.394,735,4.19,736,5.223,737,7.235,738,4.598,739,6.195,740,6.851,741,4.813,742,4.598,743,6.851,744,5.966,745,7.795,746,2.852,747,4.813]],["title/classes/FileUploadDto.html",[31,0.277,748,3.16]],["body/classes/FileUploadDto.html",[3,0.194,4,0.194,5,0.179,9,0.318,22,0.782,28,0.432,31,0.364,34,0.014,36,0.791,49,0.396,56,0.194,69,0.011,70,0.011,147,1.725,184,2.163,220,1.358,374,0.721,389,1.997,390,1.997,397,1.606,453,2.395,557,3.689,570,3.048,579,2.224,742,4.414,748,5.166,749,5.726,750,4.605,751,5.289,752,5.726,753,6.577,754,5.289,755,6.577,756,4.155,757,5.289]],["title/classes/FindCategoriesDto.html",[31,0.277,422,2.7]],["body/classes/FindCategoriesDto.html",[3,0.163,4,0.163,5,0.098,9,0.267,22,0.657,28,0.538,31,0.454,34,0.014,35,1.131,36,0.902,37,1.291,49,0.354,56,0.163,69,0.01,70,0.01,147,2.15,220,1.449,374,0.606,387,2.611,389,1.786,390,1.786,397,2.002,422,3.948,425,5.033,429,4.076,430,1.893,432,1.973,433,2.986,453,2.142,529,4.247,531,5.066,540,5.741,541,4.146,574,2.986,575,1.748,583,3.806,607,2.986,611,4.425,613,3.936,644,4.76,758,6.11,759,3.871,760,3.492,761,4.446,762,4.621,763,4.621,764,4.446,765,4.446,766,2.984,767,3.492]],["title/classes/FindProductsDto.html",[31,0.277,437,2.384]],["body/classes/FindProductsDto.html",[3,0.163,4,0.163,5,0.098,9,0.267,22,0.657,28,0.538,31,0.454,34,0.014,35,1.131,36,0.902,37,1.291,49,0.354,56,0.163,69,0.01,70,0.01,147,2.15,220,1.449,374,0.606,389,1.786,390,1.786,397,2.002,429,4.076,430,1.893,432,1.973,433,2.986,437,3.486,453,2.142,476,4.207,529,4.247,531,5.066,541,4.146,551,5.179,574,2.986,575,1.748,579,1.989,583,3.806,607,2.986,611,4.425,613,3.936,644,4.76,760,3.492,762,4.621,763,4.621,766,2.984,767,3.492,768,6.11,769,3.871,770,4.446,771,4.446,772,4.446]],["title/classes/FindPurchasesDto.html",[31,0.277,773,2.7]],["body/classes/FindPurchasesDto.html",[3,0.15,4,0.15,5,0.09,9,0.246,22,0.604,28,0.553,31,0.435,34,0.014,36,0.9,37,1.312,49,0.334,56,0.15,69,0.009,70,0.012,101,3.545,138,1.03,147,2.212,220,1.573,374,0.557,389,1.688,390,1.688,392,2.773,397,2.059,429,3.99,430,1.74,432,1.814,433,2.822,453,2.025,529,4.014,531,4.896,541,3.974,574,3.207,575,1.607,579,1.88,583,3.714,607,2.822,611,4.241,613,3.98,637,4.241,644,4.562,760,4.367,763,4.367,766,2.743,773,3.731,774,6.177,775,3.558,776,5.749,777,4.087,778,4.087,779,4.087,780,4.087,781,4.087,782,4.087,783,4.087,784,4.087,785,4.087,786,4.087,787,4.087,788,4.087,789,4.087,790,4.087]],["title/classes/InvalidEmailOrPasswordException.html",[31,0.277,331,2.904]],["body/classes/InvalidEmailOrPasswordException.html",[3,0.184,4,0.184,5,0.111,9,0.302,25,1.979,28,0.41,31,0.346,34,0.014,49,0.302,56,0.184,57,1.623,69,0.01,70,0.01,138,1.363,141,4.624,202,3.57,203,3.352,293,2.313,318,2.32,331,4.599,373,4.398,374,0.686,376,2.329,380,3.086,385,2.32,500,3.407,736,4.599,746,2.979,791,5.004,792,4.377,793,6.402,794,6.402,795,5.026,796,4.377,797,3.949]],["title/classes/InvalidPasswordUpdateException.html",[31,0.277,798,2.904]],["body/classes/InvalidPasswordUpdateException.html",[3,0.18,4,0.18,5,0.108,9,0.296,25,1.96,28,0.402,31,0.339,34,0.014,49,0.296,56,0.18,57,1.602,69,0.01,70,0.01,138,1.397,164,4.928,203,3.496,293,2.296,308,2.76,318,2.289,374,0.672,376,2.282,380,3.046,385,2.289,409,2.468,500,3.381,736,4.539,746,2.918,793,6.353,794,6.353,797,3.868,798,4.539,799,5.474,800,3.868,801,4.355,802,4.924]],["title/classes/InvalidRefreshTokenException.html",[31,0.277,334,2.904]],["body/classes/InvalidRefreshTokenException.html",[3,0.188,4,0.188,5,0.113,9,0.309,25,1.998,28,0.419,31,0.354,34,0.014,49,0.309,56,0.188,57,1.645,69,0.011,70,0.011,93,3.832,138,1.373,259,4.068,293,2.331,318,2.351,334,4.66,373,4.441,374,0.7,376,2.379,380,3.128,385,2.351,500,3.433,736,5.626,746,3.043,791,5.071,796,4.47,797,4.033,803,4.47,804,7.409,805,5.134]],["title/classes/JwtExceptionHandler.html",[31,0.277,720,2.904]],["body/classes/JwtExceptionHandler.html",[3,0.15,4,0.15,5,0.09,7,3.119,9,0.246,22,0.604,23,1.951,28,0.516,31,0.281,33,1.573,34,0.014,35,1.068,36,0.76,37,0.957,45,2.294,46,4.014,49,0.334,50,0.905,56,0.15,66,1.546,69,0.009,70,0.009,74,4.896,93,1.98,240,4.337,297,4.841,308,1.546,318,2.47,319,3.605,359,2.422,374,0.557,390,1.688,391,2.576,427,1.98,497,3.286,690,3.974,694,3.731,695,4.014,700,3.731,707,4.896,715,4.896,716,4.896,720,4.014,722,2.95,806,5.905,807,2.95,808,6.319,809,5.56,810,3.558,811,5.56,812,5.56,813,5.56,814,4.087,815,5.56,816,5.56,817,5.56,818,5.56,819,4.087,820,5.56,821,4.087,822,4.841,823,5.56,824,3.558,825,4.087,826,4.087,827,4.087,828,4.087]],["title/classes/LoginCredentialsDto.html",[31,0.277,155,2.904]],["body/classes/LoginCredentialsDto.html",[3,0.185,4,0.185,5,0.111,9,0.304,22,0.747,28,0.522,31,0.44,34,0.014,36,0.769,49,0.304,56,0.185,69,0.01,70,0.01,138,1.439,147,2.084,155,4.614,202,3.373,203,3.235,220,1.521,374,0.689,389,1.94,390,1.94,397,1.94,453,2.327,570,2.961,573,4.705,574,3.558,575,1.986,673,3.648,674,3.648,829,6.103,830,4.4,831,6.391,832,4.019,833,6.391,834,5.053,835,5.053]],["title/classes/LoginResponse.html",[31,0.277,192,2.7]],["body/classes/LoginResponse.html",[3,0.195,4,0.195,5,0.117,7,4.209,9,0.32,15,4.178,17,5.417,22,0.786,28,0.539,31,0.366,34,0.014,36,0.794,56,0.195,69,0.011,70,0.011,73,3.911,93,3.635,141,3.345,144,4.816,192,4.429,220,1.549,259,3.516,342,6.248,374,0.725,389,1.615,390,2.004,397,2.004,836,4.631,837,5.318,838,5.318,839,5.318,840,5.318,841,5.318,842,5.318,843,5.318,844,4.178]],["title/classes/LogoutDto.html",[31,0.277,161,2.904]],["body/classes/LogoutDto.html",[3,0.199,4,0.199,5,0.12,9,0.327,22,0.804,28,0.444,31,0.461,34,0.014,36,0.654,49,0.327,56,0.199,69,0.011,70,0.011,93,3.242,138,1.402,142,4.831,144,4.864,147,1.774,161,4.831,220,1.381,259,3.565,374,0.742,389,2.032,390,2.032,397,1.651,453,2.437,570,3.101,575,2.138,832,4.208,844,4.272,845,4.736,846,6.31,847,5.439]],["title/classes/MissingPasswordUpdateException.html",[31,0.277,848,2.904]],["body/classes/MissingPasswordUpdateException.html",[3,0.172,4,0.172,5,0.103,9,0.282,25,1.916,28,0.383,31,0.323,34,0.014,49,0.282,56,0.172,57,1.554,69,0.01,70,0.01,138,1.377,164,4.874,203,3.55,293,2.255,308,2.931,318,2.22,374,0.64,376,2.176,380,2.954,385,2.22,414,3.321,500,3.321,570,3.321,746,2.783,800,3.688,801,4.258,848,4.402,849,5.309,850,6.748,851,4.695,852,6.097,853,6.771,854,4.695]],["title/classes/NotPurchaseOwnerException.html",[31,0.277,855,2.904]],["body/classes/NotPurchaseOwnerException.html",[3,0.192,4,0.192,5,0.116,9,0.316,25,2.02,28,0.429,31,0.362,34,0.014,49,0.316,56,0.192,57,1.67,69,0.011,70,0.011,293,2.351,318,2.387,374,0.718,376,2.438,380,3.175,385,2.387,513,4.49,636,3.927,746,3.118,855,4.732,856,5.707,857,4.58,858,4.429,859,7.474,860,5.016,861,4.792,862,5.26,863,4.58]],["title/classes/PrismaExceptionHandler.html",[31,0.277,723,2.904]],["body/classes/PrismaExceptionHandler.html",[3,0.074,4,0.074,5,0.044,9,0.121,22,0.297,23,1.146,28,0.532,31,0.138,33,1.846,34,0.014,35,1.41,36,0.763,37,1.123,45,2.607,46,5.298,49,0.392,56,0.074,66,2.401,69,0.005,70,0.005,138,0.605,202,1.831,240,4.587,308,2.575,314,2.565,318,1.729,319,3.569,359,4.103,374,0.274,382,1.264,387,2.318,391,1.513,395,3.369,409,1.104,414,1.513,427,0.974,456,1.935,457,4.379,494,2.358,495,2.358,497,2.3,508,3.428,513,2.593,546,2.565,556,1.264,579,1.993,609,1.751,636,1.998,686,2.358,687,1.579,690,2.593,694,2.192,695,2.358,700,2.192,707,3.428,715,3.428,716,3.428,722,1.451,723,2.358,807,1.451,864,5.813,865,4.134,866,3.266,867,4.124,868,3.266,869,3.266,870,3.266,871,3.266,872,4.124,873,3.266,874,3.266,875,1.751,876,3.266,877,7.595,878,2.01,879,7.198,880,7.198,881,2.01,882,2.01,883,3.518,884,3.266,885,2.01,886,3.266,887,3.591,888,2.01,889,2.01,890,3.266,891,2.01,892,3.266,893,3.266,894,3.266,895,3.266,896,2.01,897,2.01,898,2.01,899,3.266,900,2.01,901,3.266,902,2.01,903,2.01,904,1.579,905,4.124,906,4.748,907,2.358,908,2.358,909,3.428,910,2.977,911,1.579,912,2.358,913,1.579,914,2.01,915,2.01,916,3.591,917,2.01,918,2.01,919,2.01,920,2.01,921,4.124,922,2.01,923,3.266,924,2.01,925,2.01,926,2.01,927,2.01,928,2.01,929,2.01,930,4.124,931,2.01,932,2.01,933,4.124,934,2.01,935,3.266,936,2.01,937,2.01,938,2.01,939,2.01,940,2.01]],["title/modules/PrismaModule.html",[105,1.713,113,2.042]],["body/modules/PrismaModule.html",[3,0.203,4,0.203,5,0.122,31,0.382,34,0.013,49,0.407,50,1.229,56,0.203,69,0.011,70,0.011,105,2.884,107,2.816,108,3.282,113,4.081,117,3.8,118,3.113,119,2.688,131,4.015,252,4.213,941,4.831,942,4.831,943,4.831,944,5.549,945,5.898,946,5.549]],["title/injectables/PrismaService.html",[0,1.36,252,2.042]],["body/injectables/PrismaService.html",[0,1.916,2,2.133,3,0.154,4,0.154,5,0.093,9,0.253,19,3.803,22,0.621,23,1.988,28,0.462,31,0.289,33,1.189,34,0.014,35,0.808,36,0.505,37,1.104,45,1.916,47,2.697,49,0.341,50,0.931,56,0.154,57,1.444,69,0.009,70,0.009,76,3.654,119,2.745,186,1.947,238,3.563,252,2.876,261,3.045,337,3.563,391,1.947,395,3.419,524,4.933,705,3.301,717,4.933,832,3.563,865,4.933,947,3.659,948,5.666,949,7.379,950,6.41,951,6.86,952,7.379,953,5.666,954,6.86,955,4.203,956,5.666,957,5.666,958,6.86,959,5.666,960,6.86,961,5.666,962,5.666,963,5.666,964,5.666,965,4.203,966,5.666,967,4.933,968,5.666,969,4.203,970,4.203,971,4.203]],["title/classes/Product.html",[31,0.277,579,1.36]],["body/classes/Product.html",[3,0.124,4,0.124,5,0.074,9,0.414,22,0.5,28,0.604,31,0.233,34,0.014,35,1.365,36,0.89,37,1.324,49,0.203,56,0.124,69,0.008,70,0.008,186,1.567,220,1.614,261,2.162,330,2.886,367,4.19,374,0.461,389,1.479,390,1.895,391,2.257,392,2.705,395,1.567,397,2.247,432,1.501,556,3.589,557,3.711,579,2.744,580,4.483,581,4.969,582,5.76,583,3.497,584,3.825,587,3.825,588,4.24,589,4.24,590,3.516,591,3.825,592,3.825,593,3.063,601,4.24,602,4.24,603,4.19,607,2.471,616,4.44,617,4.24,618,4.969,619,4.12,620,2.945,621,2.945,622,2.945,972,2.945,973,4.24,974,3.382,975,3.063,976,3.382,977,3.825,978,3.382,979,3.382,980,3.382,981,3.382,982,3.382,983,3.382,984,3.382,985,4.87,986,3.825,987,3.382,988,3.382,989,3.382,990,3.382,991,3.382,992,3.382,993,3.382,994,2.442,995,2.945,996,2.945]],["title/controllers/ProductController.html",[134,1.949,997,2.904]],["body/controllers/ProductController.html",[3,0.085,4,0.085,5,0.153,9,0.14,14,3.196,16,3.196,22,0.344,23,1.288,28,0.51,31,0.253,32,1.181,33,1.768,34,0.014,35,1.338,36,0.802,37,1.076,41,2.694,45,2.354,47,2.859,49,0.419,50,0.515,56,0.085,59,1.127,66,2.364,69,0.008,70,0.006,134,1.127,136,1.127,139,2.203,147,2.038,148,4.195,176,2.464,177,1.562,178,1.562,179,2.464,182,4.347,183,1.562,184,0.951,198,1.181,199,4.195,220,1.518,254,1.463,258,2.75,261,1.629,281,3.464,308,2.45,392,2.847,406,1.68,407,3.282,408,2.422,409,1.241,410,2.308,411,2.65,413,1.956,414,2.107,417,3.772,420,4.347,426,2.308,427,1.778,428,2.308,429,2.75,430,1.563,431,2.308,432,1.629,433,1.863,434,3.196,435,2.308,436,1.68,437,3.059,438,3.727,441,3.246,445,1.379,448,1.379,450,2.896,453,1.337,454,1.68,455,1.828,456,1.379,457,1.562,458,1.828,459,3.349,460,1.379,461,1.562,463,1.68,466,1.305,468,1.463,470,1.305,476,2.55,477,2.026,478,2.884,483,1.828,485,1.828,486,1.68,487,1.828,556,2.859,557,2.55,576,3.755,579,2.66,614,1.828,756,1.828,986,2.884,997,2.65,998,2.026,999,3.196,1000,4.546,1001,2.026,1002,2.327,1003,2.327,1004,2.327,1005,2.327,1006,2.327,1007,3.671,1008,2.327,1009,2.327,1010,2.026,1011,2.327,1012,2.327,1013,2.327,1014,2.327,1015,4.347,1016,2.327,1017,2.327,1018,2.327,1019,4.494,1020,2.327,1021,2.327,1022,3.196,1023,3.196,1024,3.196,1025,3.196,1026,3.196,1027,2.65,1028,3.671,1029,3.671,1030,2.884,1031,1.828,1032,2.327,1033,2.884,1034,3.246,1035,2.026,1036,2.327,1037,2.327,1038,2.026,1039,2.327,1040,2.327,1041,2.327,1042,2.327,1043,2.327,1044,2.327,1045,2.327,1046,2.327,1047,2.327,1048,2.327,1049,2.327,1050,2.327]],["title/modules/ProductModule.html",[105,1.713,114,2.7]],["body/modules/ProductModule.html",[3,0.188,4,0.188,5,0.113,31,0.355,34,0.014,49,0.469,50,1.141,56,0.188,69,0.011,70,0.011,105,2.753,107,2.612,108,3.133,113,3.957,114,5.372,117,3.627,118,2.888,119,2.494,121,4.066,131,3.832,136,3.133,187,3.051,235,3.455,997,5.104,1027,3.716,1034,4.904,1035,4.482,1051,4.482,1052,4.482,1053,5.148,1054,5.148,1055,5.148,1056,5.148,1057,4.482,1058,4.044,1059,5.148,1060,5.148]],["title/classes/ProductNameInUseException.html",[31,0.277,907,2.904]],["body/classes/ProductNameInUseException.html",[3,0.178,4,0.178,5,0.107,9,0.293,25,1.95,28,0.398,31,0.336,34,0.013,35,1.537,49,0.293,50,1.08,56,0.178,57,1.591,69,0.01,70,0.01,138,1.347,293,2.287,318,2.647,374,0.665,385,2.274,496,3.519,497,3.522,498,4.308,499,5.71,500,3.368,501,6.141,502,4.308,503,4.078,504,4.976,505,3.829,506,4.976,579,2.6,907,4.509,908,4.509,1061,4.244]],["title/classes/ProductNotFoundException.html",[31,0.277,909,2.904]],["body/classes/ProductNotFoundException.html",[3,0.186,4,0.186,5,0.112,9,0.306,25,1.988,28,0.415,31,0.35,34,0.014,49,0.306,50,1.125,56,0.186,57,1.634,69,0.01,70,0.01,138,1.368,293,2.322,318,2.688,374,0.693,385,2.335,497,3.576,498,4.374,500,3.42,502,4.374,503,4.14,509,3.409,510,5.328,511,4.716,512,3.667,513,4.419,579,2.628,908,4.629,909,4.629,1061,4.423]],["title/injectables/ProductService.html",[0,1.36,1034,2.53]],["body/injectables/ProductService.html",[0,0.989,2,0.893,3,0.064,4,0.064,5,0.128,9,0.106,22,0.26,23,1.026,25,0.498,28,0.522,30,1.963,31,0.259,32,1.485,33,1.811,34,0.014,35,1.464,36,0.769,37,1.102,45,2.213,47,2.742,49,0.35,50,0.39,56,0.064,59,0.852,61,2.683,66,2.42,67,3.109,69,0.007,70,0.005,76,3.546,83,2.594,138,0.542,139,2.121,186,0.815,198,0.893,220,1.558,238,2.753,240,3.582,252,2.662,258,1.559,261,2.329,277,2.112,290,1.963,293,0.92,308,1.984,325,1.18,337,1.84,381,1.963,387,0.781,392,2.815,395,2.252,397,0.888,408,2.333,409,0.989,410,2.362,411,2.112,413,2.333,414,1.741,425,4.295,426,1.84,427,1.417,428,1.84,429,2.795,430,1.864,431,1.84,432,1.667,433,1.485,435,1.84,436,2.112,437,2.594,441,2.753,445,1.734,448,1.042,450,2.943,453,1.065,457,1.963,463,1.27,466,0.987,468,1.106,470,0.987,476,3.498,515,3.16,516,3.16,519,1.27,527,1.381,537,3.812,541,2.362,544,1.381,545,1.381,546,1.381,547,1.531,548,1.531,549,1.381,550,1.531,551,2.298,552,2.547,554,3.439,555,3.439,556,3.921,557,2.107,558,2.298,576,3.299,579,2.435,596,2.547,614,1.381,752,2.547,756,1.381,767,2.951,916,2.547,967,2.547,986,2.298,999,2.547,1001,2.547,1010,2.547,1015,4.681,1019,2.547,1033,2.298,1034,1.84,1062,1.531,1063,3.756,1064,2.925,1065,3.756,1066,2.925,1067,1.759,1068,1.759,1069,1.759,1070,2.925,1071,2.925,1072,2.925,1073,1.759,1074,1.759,1075,1.759,1076,1.759,1077,2.925,1078,1.759,1079,2.925,1080,2.298,1081,2.925,1082,2.925,1083,2.925,1084,2.925,1085,5.245,1086,2.925,1087,4.378,1088,2.925,1089,2.925,1090,2.925,1091,2.925,1092,2.925,1093,3.756,1094,2.925,1095,1.759,1096,1.759,1097,1.759,1098,1.759,1099,1.759,1100,1.759,1101,2.925,1102,1.759,1103,1.759,1104,1.759,1105,1.759,1106,3.756,1107,1.759,1108,1.759,1109,2.547,1110,1.759,1111,1.759,1112,1.759,1113,1.759,1114,1.759,1115,1.759,1116,1.759,1117,1.759,1118,1.759,1119,2.925,1120,1.759,1121,1.759,1122,1.759,1123,3.756,1124,1.759]],["title/classes/ProductServiceInputException.html",[31,0.277,738,2.7]],["body/classes/ProductServiceInputException.html",[3,0.198,4,0.198,5,0.119,9,0.325,25,1.53,28,0.441,31,0.372,33,1.53,34,0.013,35,1.039,36,0.65,37,0.931,56,0.198,57,1.699,69,0.011,70,0.011,220,1.492,293,2.275,319,2.96,374,0.738,376,3.09,377,3.63,378,5.219,379,5.219,380,3.503,381,4.852,382,4.546,383,4.814,384,3.904,385,1.969,386,3.904,738,5.202,1125,5.238]],["title/classes/Purchase.html",[31,0.277,636,1.949]],["body/classes/Purchase.html",[3,0.128,4,0.128,5,0.077,9,0.21,22,0.516,28,0.598,31,0.241,34,0.014,36,0.881,37,1.303,49,0.21,56,0.128,69,0.008,70,0.008,101,3.259,138,0.924,186,1.619,220,1.597,261,2.212,330,4.128,374,0.476,389,1.513,390,1.923,391,2.309,392,3.05,395,1.619,397,2.225,430,2.698,433,2.529,579,2.559,583,3.535,584,3.915,587,3.915,590,3.598,591,3.915,592,3.915,593,3.134,603,3.345,607,3.638,616,4.496,619,2.522,636,3.551,637,3.899,640,3.598,648,3.041,649,3.041,650,3.041,651,3.041,652,3.041,653,3.041,860,4.252,973,4.339,975,3.134,977,3.915,994,2.522,1126,3.041,1127,5.059,1128,5.059,1129,5.059,1130,3.493,1131,3.493,1132,3.493,1133,3.493,1134,3.493,1135,4.339,1136,3.493,1137,3.134,1138,4.564,1139,3.493,1140,4.983,1141,4.983,1142,3.493,1143,3.493,1144,3.493,1145,3.493,1146,3.493,1147,3.493,1148,3.493,1149,3.493,1150,3.493,1151,3.493,1152,3.493,1153,3.493,1154,3.493,1155,3.041,1156,3.493,1157,3.493]],["title/controllers/PurchaseController.html",[134,1.949,1158,2.904]],["body/controllers/PurchaseController.html",[3,0.074,4,0.074,5,0.045,9,0.122,22,0.301,23,1.157,28,0.483,31,0.227,32,1.032,33,1.676,34,0.014,35,1.138,36,0.712,37,1.02,45,2.348,47,2.77,49,0.394,50,0.451,56,0.074,59,0.985,61,2.122,66,2.24,69,0.009,70,0.009,76,3.644,101,3.831,103,2.79,134,0.985,136,0.985,138,0.611,139,2.014,146,5.047,147,1.932,148,3.975,176,3.208,177,1.365,178,1.365,179,2.212,180,4.127,181,4.127,182,4.14,183,1.365,184,0.832,187,1.205,198,1.032,199,3.975,219,3.755,220,1.505,254,1.279,258,2.547,261,1.463,281,3.208,308,1.808,392,2.422,406,1.468,407,3.001,408,2.215,409,1.406,410,2.614,413,1.756,414,1.926,417,2.997,420,4.14,426,3.006,427,2.316,428,3.006,429,3.287,430,2.036,431,3.006,432,2.122,433,2.426,435,3.006,438,3.451,441,2.073,445,1.205,448,1.205,450,2.682,453,1.2,454,1.468,455,1.598,456,1.205,457,2.79,459,2.682,460,1.205,461,1.365,466,1.141,468,1.279,470,1.141,478,3.265,483,1.598,485,1.598,486,1.468,487,1.598,579,1.406,633,3.879,636,3.619,637,3.208,640,3.451,646,1.468,773,4.584,776,4.846,858,3.333,860,2.79,975,3.006,1158,2.38,1159,1.771,1160,4.156,1161,3.619,1162,2.034,1163,2.034,1164,2.034,1165,3.296,1166,2.034,1167,2.034,1168,2.034,1169,2.87,1170,4.78,1171,2.034,1172,2.034,1173,2.034,1174,2.034,1175,5.157,1176,2.034,1177,2.034,1178,2.87,1179,2.034,1180,2.034,1181,2.034,1182,4.14,1183,4.78,1184,2.034,1185,2.034,1186,3.296,1187,4.14,1188,2.034,1189,2.034,1190,3.265,1191,1.771,1192,1.771,1193,3.006,1194,1.771,1195,2.034,1196,2.034,1197,2.034,1198,2.034,1199,3.296,1200,2.034,1201,2.034,1202,2.034,1203,2.034,1204,2.034,1205,2.034,1206,2.034]],["title/modules/PurchaseModule.html",[105,1.713,115,2.7]],["body/modules/PurchaseModule.html",[3,0.195,4,0.195,5,0.117,31,0.367,34,0.014,49,0.452,50,1.182,56,0.195,69,0.011,70,0.011,105,2.815,107,2.707,108,3.203,113,3.993,115,5.408,117,3.709,118,2.992,119,2.584,121,4.157,131,3.918,136,3.203,235,3.579,1158,5.187,1193,4.947,1194,4.644,1207,4.644,1208,5.333,1209,4.644,1210,5.333,1211,5.333]],["title/classes/PurchaseNotFoundException.html",[31,0.277,910,2.904]],["body/classes/PurchaseNotFoundException.html",[3,0.186,4,0.186,5,0.112,9,0.306,25,1.988,28,0.415,31,0.35,34,0.014,49,0.306,50,1.125,56,0.186,57,1.634,69,0.01,70,0.01,138,1.368,293,2.322,318,2.688,374,0.693,385,2.335,497,3.576,498,4.374,500,3.42,502,4.374,503,4.14,509,3.409,510,5.328,511,4.716,512,3.667,513,4.419,636,3.765,863,4.423,910,4.629,911,5.037]],["title/injectables/PurchaseService.html",[0,1.36,1193,2.53]],["body/injectables/PurchaseService.html",[0,1.053,2,0.962,3,0.069,4,0.069,5,0.042,9,0.114,22,0.28,23,1.092,25,0.536,28,0.49,30,2.089,31,0.273,32,1.58,33,1.698,34,0.014,35,1.348,36,0.722,37,1.034,45,2.102,47,2.721,49,0.385,50,0.42,56,0.069,59,0.918,61,3.025,66,2.058,67,3.967,69,0.007,70,0.005,76,3.597,83,2.347,101,3.822,103,3.076,138,0.938,139,2.221,186,0.878,198,0.962,202,2.247,220,1.561,238,2.883,240,2.347,252,2.761,258,1.658,261,2.415,290,2.089,308,1.734,325,1.272,337,4.024,359,1.845,392,2.737,395,1.442,408,2.442,409,1.339,410,2.49,413,1.658,414,1.835,420,2.089,426,1.957,427,1.508,428,1.957,429,2.899,430,1.952,431,1.957,432,1.758,433,1.58,435,1.957,441,1.957,445,1.845,448,1.123,450,1.746,453,1.133,466,1.063,468,1.192,470,1.063,476,1.746,515,3.309,516,3.309,519,1.368,527,1.489,541,2.49,544,1.489,545,1.489,549,1.489,554,3.977,555,5.026,558,2.445,579,1.712,580,1.489,593,1.192,607,1.58,616,1.272,633,4.285,636,3.44,637,3.398,640,2.247,646,1.368,773,3.076,776,5.436,855,2.859,858,2.717,860,3.398,1109,1.65,1129,4.408,1161,3.448,1175,5.226,1178,2.71,1182,4.029,1187,4.029,1190,3.111,1191,1.65,1192,1.65,1193,1.957,1212,1.65,1213,3.96,1214,1.895,1215,1.895,1216,1.895,1217,1.895,1218,1.895,1219,1.895,1220,1.895,1221,1.895,1222,1.895,1223,1.895,1224,1.895,1225,1.895,1226,1.192,1227,1.895,1228,1.895,1229,1.895,1230,1.895,1231,1.895,1232,3.112,1233,1.895,1234,3.112,1235,1.895,1236,3.96,1237,1.65,1238,3.112,1239,3.112,1240,1.895,1241,1.895,1242,1.895,1243,1.895,1244,1.895,1245,3.112,1246,1.895,1247,1.895,1248,1.895,1249,1.895,1250,1.895]],["title/classes/PurchaseServiceInputException.html",[31,0.277,861,2.7]],["body/classes/PurchaseServiceInputException.html",[3,0.198,4,0.198,5,0.119,9,0.325,25,1.53,28,0.441,31,0.372,33,1.53,34,0.013,35,1.039,36,0.65,37,0.931,56,0.198,57,1.699,69,0.011,70,0.011,220,1.492,293,2.275,319,2.96,374,0.738,376,3.09,377,3.63,378,5.219,379,5.219,380,3.503,381,4.852,382,4.546,383,4.814,384,3.904,385,1.969,386,3.904,861,5.202,1251,5.238]],["title/classes/RefreshTokenDto.html",[31,0.277,171,2.904]],["body/classes/RefreshTokenDto.html",[3,0.198,4,0.198,5,0.119,9,0.325,22,0.799,28,0.441,31,0.459,34,0.014,36,0.65,49,0.325,56,0.198,69,0.011,70,0.011,93,3.231,138,1.399,142,4.814,144,4.852,147,1.764,171,4.814,220,1.377,259,3.553,374,0.738,389,2.025,390,2.025,397,1.642,453,2.428,570,3.09,575,2.126,832,4.193,844,4.248,846,6.295,1252,5.806,1253,4.709,1254,5.408]],["title/classes/ReviewPurchaseDto.html",[31,0.277,1182,2.7]],["body/classes/ReviewPurchaseDto.html",[3,0.173,4,0.173,5,0.104,9,0.284,22,0.697,28,0.499,31,0.421,34,0.014,36,0.736,37,1.053,49,0.408,56,0.173,57,1.202,69,0.01,70,0.01,147,1.995,184,1.93,220,1.263,374,0.644,389,1.857,390,1.857,397,1.857,430,2.605,569,3.104,570,2.834,574,3.104,575,1.855,579,2.428,583,3.104,597,3.706,611,4.105,613,3.431,619,3.406,635,3.406,636,3.288,639,4.108,643,4.108,646,3.406,647,4.108,860,5.116,1127,6.252,1128,6.252,1135,5.326,1137,3.847,1138,5.332,1155,4.108,1182,4.105,1255,5.91,1256,4.718,1257,4.718,1258,4.718,1259,4.718,1260,4.718,1261,4.718]],["title/guards/RolesGuard.html",[1262,3.16,1263,2.904]],["body/guards/RolesGuard.html",[0,1.856,3,0.147,4,0.147,5,0.088,9,0.241,15,5.286,18,5.286,19,4.516,20,6.136,21,5.858,22,0.593,23,1.926,24,6.136,25,1.135,26,3.491,27,6.605,28,0.448,30,3.683,31,0.431,32,2.785,33,1.553,34,0.014,35,1.055,36,0.66,37,0.945,38,3.491,39,5.286,44,4.311,45,1.356,46,3.962,47,2.158,48,4.915,49,0.424,50,0.888,51,2.895,53,2.895,56,0.147,59,1.943,61,2.778,64,3.491,65,3.491,66,2.076,67,2.377,69,0.009,70,0.009,73,3.253,98,3.15,103,3.683,138,1.349,146,2.691,186,1.858,219,3.15,314,5.286,391,1.858,417,3.877,459,3.079,461,2.691,1226,2.522,1237,3.491,1263,3.962,1264,3.491,1265,6.728,1266,4.01,1267,4.01,1268,5.488,1269,3.15,1270,4.01,1271,4.01,1272,4.01]],["title/classes/UpdateCategoryDto.html",[31,0.277,449,2.7]],["body/classes/UpdateCategoryDto.html",[3,0.204,4,0.204,5,0.123,9,0.336,31,0.384,34,0.014,37,1.171,49,0.409,56,0.204,57,1.422,69,0.011,70,0.011,184,2.282,374,0.761,387,3.018,389,2.064,409,1.887,416,4.61,449,4.562,467,4.384,568,4.384,569,3.45,883,4.275,1137,4.275,1273,4.859,1274,4.907,1275,4.907,1276,4.907,1277,4.029,1278,5.581]],["title/classes/UpdateProductDto.html",[31,0.277,1015,2.7]],["body/classes/UpdateProductDto.html",[3,0.204,4,0.204,5,0.123,9,0.336,31,0.384,34,0.014,37,1.171,49,0.409,56,0.204,57,1.422,69,0.011,70,0.011,184,2.282,374,0.761,389,2.064,409,1.887,569,3.45,576,4.61,578,4.384,579,2.299,883,4.275,1015,4.562,1033,4.384,1137,4.275,1274,4.907,1275,4.907,1276,4.907,1277,4.029,1279,4.859,1280,5.581]],["title/classes/UpdatePurchaseDto.html",[31,0.277,1187,2.7]],["body/classes/UpdatePurchaseDto.html",[3,0.204,4,0.204,5,0.123,9,0.336,31,0.384,34,0.014,37,1.171,49,0.409,56,0.204,57,1.422,69,0.011,70,0.011,184,2.282,374,0.761,389,2.064,409,1.887,569,3.45,633,4.61,635,4.029,636,3.293,883,4.275,1137,4.275,1187,4.562,1190,4.384,1274,4.907,1275,4.907,1276,4.907,1277,4.029,1281,4.859,1282,5.581]],["title/classes/UpdateUserDto.html",[31,0.277,1283,2.7]],["body/classes/UpdateUserDto.html",[3,0.182,4,0.182,5,0.11,9,0.299,22,0.735,28,0.406,31,0.436,34,0.014,36,0.598,37,1.261,49,0.419,56,0.182,57,1.268,69,0.01,70,0.01,138,1.358,147,1.622,164,3.98,184,2.034,203,2.695,220,1.306,374,0.679,389,1.921,390,1.921,397,1.51,409,1.682,569,3.211,573,4.247,574,3.211,575,1.956,613,3.55,654,4.376,656,3.591,674,3.591,684,5.467,883,3.98,1137,3.98,1274,4.568,1275,4.568,1276,4.568,1277,3.591,1283,4.247,1284,4.971,1285,4.974,1286,4.974,1287,3.908,1288,4.974]],["title/classes/UpdateUserRoleDto.html",[31,0.277,1289,2.7]],["body/classes/UpdateUserRoleDto.html",[3,0.181,4,0.181,5,0.109,9,0.298,22,0.731,28,0.515,31,0.434,34,0.014,36,0.758,49,0.379,56,0.181,69,0.01,70,0.01,138,1.486,147,2.057,186,2.293,202,3.352,220,1.302,308,2.386,374,0.675,389,1.915,390,1.915,397,1.915,414,2.923,417,2.637,453,2.297,570,2.923,575,1.946,670,6.045,673,3.573,1226,5.082,1284,5.453,1289,4.233,1290,4.309,1291,4.949,1292,6.307,1293,4.949,1294,4.949]],["title/classes/User.html",[31,0.277,138,0.746]],["body/classes/User.html",[3,0.131,4,0.131,5,0.079,9,0.216,22,0.53,28,0.602,31,0.247,34,0.014,35,1.3,36,0.887,37,1.338,49,0.216,56,0.131,69,0.008,70,0.008,138,1.517,152,3.664,186,1.661,202,3.003,203,2.88,220,1.629,261,2.253,330,3.008,367,2.405,374,0.489,389,1.541,390,1.946,391,2.352,392,2.766,395,1.661,397,2.24,417,3.415,476,2.847,603,3.406,616,4.54,657,5.89,673,2.587,678,3.121,679,3.121,680,3.121,681,3.121,694,3.406,858,3.008,975,4.03,977,5.035,994,3.664,995,4.419,996,4.419,1226,4.64,1295,3.121,1296,5.89,1297,3.584,1298,3.584,1299,3.584,1300,3.584,1301,3.584,1302,3.584,1303,3.584,1304,3.584,1305,3.584,1306,3.584,1307,3.584,1308,3.584,1309,3.584,1310,3.584,1311,3.584]],["title/controllers/UserController.html",[134,1.949,1312,2.904]],["body/controllers/UserController.html",[3,0.102,4,0.102,5,0.061,9,0.168,22,0.412,23,1.48,28,0.498,31,0.291,32,1.413,33,1.727,34,0.014,35,1.173,36,0.734,37,1.051,41,2.5,45,2.256,47,2.819,49,0.438,50,0.617,56,0.102,59,1.349,61,2.26,66,2.308,69,0.007,70,0.007,76,2.467,101,2.857,134,1.349,136,1.349,138,1.441,139,2.467,146,5.151,147,1.99,148,4.096,152,4.636,176,3.812,177,1.869,178,1.869,179,2.831,180,4,181,4.462,182,4.31,183,1.869,184,1.139,187,1.65,198,1.413,199,4.096,203,1.796,250,3.366,254,1.751,258,3.027,281,3.812,308,2.148,372,2.425,406,2.01,407,3.676,408,2.713,409,1.427,413,2.713,414,2.36,417,2.248,420,2.831,438,3.045,450,3.603,453,2.339,454,3.045,456,2.5,458,2.188,459,2.366,460,1.65,461,1.869,466,1.562,470,2.366,486,2.01,503,2.366,654,4.039,682,4.611,1038,2.425,1226,3.202,1283,4.611,1287,4,1289,4.31,1312,3.045,1313,2.425,1314,3.673,1315,4.434,1316,2.425,1317,2.785,1318,2.785,1319,2.785,1320,2.785,1321,2.785,1322,5.092,1323,3.418,1324,2.785,1325,2.785,1326,2.785,1327,4.218,1328,2.785,1329,2.785,1330,2.785,1331,2.425,1332,4.218,1333,2.785,1334,2.785,1335,2.425,1336,2.425,1337,1.869,1338,2.425,1339,2.425,1340,2.425,1341,2.785,1342,2.785,1343,2.785,1344,2.785,1345,5.092,1346,2.785,1347,2.785,1348,2.785,1349,2.785]],["title/classes/UserInputExceptionHandler.html",[31,0.277,725,2.904]],["body/classes/UserInputExceptionHandler.html",[3,0.157,4,0.157,5,0.095,9,0.258,22,0.635,23,2.018,28,0.351,31,0.296,33,1.216,34,0.014,35,0.826,36,0.517,37,0.74,45,1.453,49,0.447,50,0.952,56,0.157,69,0.009,70,0.009,138,1.283,308,2.618,318,2.521,319,3.556,359,4.103,373,3.617,374,0.586,375,3.375,376,3.208,382,4.353,391,2.665,497,3.354,504,3.102,511,2.884,690,4.076,694,3.86,695,4.152,700,3.86,707,4.997,715,4.997,716,4.997,722,3.102,725,4.152,727,5.834,738,3.86,746,4.103,801,3.617,807,3.102,824,3.741,861,3.86,875,3.741,1125,3.375,1251,3.375,1350,5.007,1351,3.375,1352,4.297,1353,5.751,1354,4.297]],["title/modules/UserModule.html",[105,1.713,116,2.53]],["body/modules/UserModule.html",[3,0.189,4,0.189,5,0.114,31,0.356,34,0.014,49,0.447,50,1.147,56,0.189,69,0.011,70,0.011,105,2.763,107,2.627,108,3.143,113,3.963,116,5.083,117,3.64,118,2.903,119,2.507,121,4.08,131,3.845,136,3.143,235,3.473,250,4.876,945,5.649,1312,5.117,1340,4.506,1355,4.506,1356,4.506,1357,5.175,1358,4.506,1359,5.175,1360,5.175]],["title/classes/UserNotFoundException.html",[31,0.277,912,2.904]],["body/classes/UserNotFoundException.html",[3,0.182,4,0.182,5,0.11,9,0.299,25,1.969,28,0.406,31,0.343,34,0.013,49,0.299,50,1.102,56,0.182,57,1.612,69,0.01,70,0.01,138,1.499,202,3.251,293,2.304,318,2.667,374,0.679,385,2.304,392,2.995,497,3.548,498,4.341,500,3.394,502,4.341,503,4.109,509,3.339,510,5.288,511,4.671,512,3.591,513,4.376,912,4.568,913,4.971,1361,4.974]],["title/injectables/UserService.html",[0,1.36,250,2.384]],["body/injectables/UserService.html",[0,1.048,2,0.957,3,0.069,4,0.069,5,0.042,9,0.113,22,0.279,23,1.088,25,0.534,28,0.506,31,0.272,32,1.573,33,1.756,34,0.014,35,1.193,36,0.746,37,1.068,45,2.26,47,2.788,49,0.402,50,0.418,56,0.069,59,0.914,61,2.754,66,1.91,69,0.005,70,0.005,76,3.661,83,2.339,138,1.443,139,2.214,141,1.949,164,3.767,198,0.957,202,2.41,203,3.235,220,1.531,238,2.874,240,3.217,250,1.837,252,2.755,254,1.949,258,1.652,261,2.836,272,5.216,274,2.699,275,5.216,276,3.59,277,3.919,290,2.08,293,1.438,308,2.476,319,2.029,320,3.436,321,1.362,325,1.266,332,1.642,337,4.203,357,3.979,359,1.837,392,2.826,395,1.436,408,2.435,409,1.048,413,1.652,414,1.829,427,1.502,445,1.837,448,1.118,450,2.564,453,1.129,456,2.708,466,1.058,470,1.739,515,3.299,516,3.299,519,1.362,590,3.299,654,3.414,672,1.642,682,3.85,684,3.1,705,2.435,798,2.238,848,2.238,850,2.699,858,3.55,975,1.186,1226,2.482,1283,4.703,1287,3.1,1289,3.643,1296,1.642,1314,2.699,1315,3.436,1316,2.699,1323,2.649,1331,1.642,1335,1.642,1336,1.642,1337,1.266,1338,1.642,1339,1.642,1362,1.642,1363,3.1,1364,3.946,1365,3.946,1366,1.886,1367,1.886,1368,3.1,1369,1.886,1370,4.57,1371,3.1,1372,3.1,1373,1.886,1374,3.1,1375,3.1,1376,3.1,1377,1.886,1378,1.886,1379,3.1,1380,3.1,1381,3.1,1382,4.57,1383,1.886,1384,1.886,1385,1.886,1386,1.886,1387,1.886,1388,3.1,1389,3.946,1390,1.482,1391,1.886,1392,3.1,1393,1.886,1394,4.57,1395,1.886,1396,3.1,1397,4.57,1398,1.886,1399,1.886,1400,3.946,1401,1.886,1402,1.886,1403,3.1,1404,1.886,1405,1.886,1406,3.1,1407,1.886,1408,1.886,1409,4.57,1410,4.57,1411,3.1,1412,1.886]],["title/classes/UserServiceInputException.html",[31,0.277,801,2.53]],["body/classes/UserServiceInputException.html",[3,0.198,4,0.198,5,0.119,9,0.325,25,1.53,28,0.441,31,0.372,33,1.53,34,0.013,35,1.039,36,0.65,37,0.931,56,0.198,57,1.699,69,0.011,70,0.011,220,1.492,293,2.275,319,2.96,374,0.738,376,3.09,377,3.63,378,5.219,379,5.219,380,3.503,381,4.852,382,4.546,383,4.814,384,3.904,385,1.969,386,3.904,801,4.875,1351,5.238]],["title/classes/UserWithoutPassword.html",[31,0.277,1337,2.7]],["body/classes/UserWithoutPassword.html",[3,0.208,4,0.208,5,0.125,9,0.342,31,0.391,34,0.014,49,0.413,56,0.208,57,1.447,61,2.521,69,0.011,70,0.011,138,1.369,184,2.323,203,3.145,374,0.775,608,4.945,883,4.321,1323,3.812,1337,4.611,1413,4.945,1414,4.945,1415,6.87,1416,6.87,1417,6.87,1418,5.68,1419,5.68]],["title/coverage.html",[1420,4.789]],["body/coverage.html",[0,2.271,1,1.719,5,0.052,6,2.937,7,1.336,8,2.073,31,0.565,34,0.014,35,0.719,36,0.286,41,1.411,54,1.871,69,0.006,70,0.006,71,1.598,72,2.073,89,1.719,134,2.753,135,1.719,137,2.073,138,0.693,155,1.719,161,1.719,171,1.719,188,1.498,192,1.598,202,1.057,203,1.592,237,2.073,250,1.411,252,1.209,259,1.269,308,0.901,322,1.871,326,1.871,331,1.719,334,1.719,373,1.498,375,1.871,376,2.423,377,3.509,387,1.057,388,2.073,404,1.719,405,2.073,416,1.498,422,1.598,437,1.411,449,1.598,459,1.336,460,2.216,464,1.498,494,1.719,495,2.699,496,3.332,508,1.719,509,3.509,514,2.073,567,2.073,568,2.937,576,1.498,577,2.073,578,2.937,579,0.805,633,1.498,634,2.073,635,3.332,636,1.811,654,1.498,655,2.073,656,3.332,682,1.598,683,2.073,686,1.719,687,1.871,689,1.719,690,1.498,692,2.073,697,4.947,701,1.871,702,2.073,720,1.719,723,1.719,725,1.719,727,1.871,733,1.871,734,2.073,735,2.073,738,1.598,748,1.871,749,2.073,750,2.073,758,2.073,759,2.073,768,2.073,769,2.073,773,1.598,774,2.073,775,2.073,791,2.937,792,2.073,798,1.719,799,2.073,800,2.937,801,1.498,803,2.073,806,2.073,807,3.332,829,2.073,830,2.073,836,2.073,845,2.073,848,1.719,849,2.073,855,1.719,856,2.073,857,2.073,861,1.598,864,2.073,907,1.719,908,2.699,909,1.719,910,1.719,911,1.871,912,1.719,913,1.871,947,2.073,972,2.073,997,1.719,998,2.073,1015,1.598,1027,1.719,1030,1.871,1031,1.871,1034,1.498,1058,3.626,1062,2.073,1125,1.871,1126,2.073,1158,1.719,1159,2.073,1182,1.598,1187,1.598,1193,1.498,1212,2.073,1251,1.871,1252,2.073,1253,2.073,1255,2.073,1262,1.871,1263,1.719,1264,2.073,1269,1.871,1273,2.073,1279,2.073,1281,2.073,1283,1.598,1284,2.937,1289,1.598,1290,2.073,1295,2.073,1312,1.719,1313,2.073,1323,1.598,1337,1.598,1350,2.073,1351,1.871,1362,2.073,1390,1.871,1413,2.073,1414,2.073,1420,2.073,1421,2.073,1422,2.381,1423,2.381,1424,8.384,1425,6.872,1426,3.739,1427,2.381,1428,2.381,1429,7.889,1430,3.255,1431,6.715,1432,7.577,1433,2.073,1434,2.937,1435,4.615,1436,2.381,1437,2.073,1438,3.255,1439,4.019,1440,2.073,1441,2.073,1442,2.073,1443,2.073,1444,3.739,1445,4.615,1446,3.739,1447,2.381,1448,3.739,1449,3.739,1450,2.381,1451,2.381,1452,3.255,1453,2.073,1454,2.381,1455,2.381]],["title/dependencies.html",[108,2.345,1456,2.921]],["body/dependencies.html",[7,2.911,11,4.692,31,0.448,34,0.014,50,1.15,51,3.746,52,3.746,53,3.746,69,0.011,70,0.011,108,2.514,184,2.122,186,2.405,187,3.852,230,4.076,319,2.304,321,3.746,330,3.076,395,2.405,575,2.04,593,3.263,699,4.076,766,3.483,904,4.076,1057,4.518,1457,5.189,1458,5.189,1459,7.096,1460,5.189,1461,5.189,1462,5.189,1463,5.189,1464,5.189,1465,5.189,1466,5.189,1467,5.189,1468,5.189,1469,4.518,1470,5.189,1471,5.189,1472,5.189,1473,5.189,1474,5.189,1475,5.189,1476,5.189,1477,5.189,1478,5.189,1479,5.189,1480,4.518,1481,4.518,1482,5.189,1483,5.189]],["title/miscellaneous/functions.html",[1484,2.11,1485,4.215]],["body/miscellaneous/functions.html",[5,0.112,22,0.753,33,1.441,34,0.013,35,0.979,36,0.612,37,0.877,45,2.63,47,2.002,69,0.01,70,0.01,93,2.468,147,1.661,326,5.527,397,1.95,409,1.722,413,2.714,414,2.36,417,2.714,459,3.947,460,3.019,476,2.857,557,2.857,579,1.722,583,3.26,607,2.585,700,4.311,742,4.311,832,3.203,858,3.019,975,4.646,1030,5.527,1031,4.001,1080,4.001,1433,5.593,1434,5.046,1442,4.435,1443,6.126,1452,4.435,1453,5.593,1484,3.203,1485,4.435,1486,6.423,1487,5.093,1488,5.093,1489,4.435,1490,5.093,1491,6.423,1492,6.423,1493,5.093,1494,5.093,1495,5.093,1496,5.093,1497,4.435,1498,4.435]],["title/index.html",[22,0.496,1499,2.921,1500,2.921]],["body/index.html",[7,1.761,11,3.33,19,2.107,31,0.318,34,0.013,69,0.008,70,0.008,83,1.861,93,2.649,139,2.235,187,2.734,259,2.458,319,1.394,321,2.266,395,2.793,408,3.212,417,1.673,432,1.394,575,1.234,593,1.974,660,6.011,706,2.733,742,2.107,766,2.107,904,2.466,1469,2.733,1480,4.016,1481,2.733,1501,3.139,1502,5.468,1503,3.139,1504,6.939,1505,6.421,1506,3.139,1507,8.046,1508,4.613,1509,4.613,1510,4.613,1511,3.139,1512,5.468,1513,4.613,1514,5.468,1515,4.613,1516,3.139,1517,3.139,1518,3.139,1519,4.613,1520,5.468,1521,4.613,1522,4.613,1523,4.613,1524,3.139,1525,3.139,1526,3.139,1527,3.139,1528,3.139,1529,3.139,1530,4.613,1531,3.139,1532,3.139,1533,7.119,1534,4.613,1535,3.139,1536,3.139,1537,6.027,1538,3.139,1539,3.139,1540,3.139,1541,3.139,1542,3.139,1543,3.139,1544,6.027,1545,3.139,1546,3.139,1547,3.139,1548,3.139,1549,3.139,1550,7.265,1551,4.613,1552,4.613,1553,4.613,1554,4.613,1555,4.613,1556,3.139,1557,3.139,1558,3.139,1559,3.139,1560,3.139,1561,6.027,1562,6.421,1563,4.613,1564,3.139,1565,3.139,1566,4.613,1567,3.139,1568,3.139,1569,3.139,1570,3.139,1571,3.139,1572,3.139,1573,4.613,1574,3.139,1575,3.139,1576,4.613,1577,5.468,1578,6.421,1579,3.139,1580,3.139,1581,6.421,1582,7.119,1583,3.139,1584,3.139,1585,3.139,1586,3.139,1587,3.139,1588,3.139,1589,3.139,1590,3.139,1591,3.139,1592,3.139,1593,3.139,1594,4.613,1595,4.613,1596,3.139,1597,3.139,1598,3.139,1599,3.139,1600,3.139,1601,3.139,1602,3.139,1603,4.613,1604,3.139,1605,3.139,1606,3.139,1607,3.139,1608,3.139,1609,3.139,1610,3.139,1611,3.139,1612,3.139,1613,3.139,1614,3.139,1615,3.139,1616,3.139,1617,3.139,1618,3.139,1619,3.139,1620,3.139,1621,3.139,1622,3.139,1623,3.139,1624,3.139,1625,3.139,1626,3.139,1627,3.139,1628,3.139,1629,3.139,1630,3.139,1631,3.139,1632,3.139,1633,3.139,1634,3.139,1635,3.139,1636,3.139,1637,2.733]],["title/license.html",[1499,2.921,1500,2.921,1638,2.635]],["body/license.html",[34,0.01,69,0.01,70,0.01,119,2.41,187,2.948,506,4.568,744,4.331,822,4.331,994,3.591,1169,4.331,1323,4.671,1421,4.331,1637,4.331,1638,3.908,1639,6.959,1640,4.974,1641,4.974,1642,4.974,1643,6.328,1644,4.974,1645,4.974,1646,4.974,1647,4.974,1648,4.974,1649,4.974,1650,6.328,1651,8.026,1652,4.974,1653,4.974,1654,4.974,1655,4.974,1656,6.328,1657,4.974,1658,4.974,1659,4.974,1660,4.974,1661,4.974,1662,4.974,1663,4.974,1664,4.974,1665,6.328,1666,4.974,1667,4.974,1668,4.974,1669,4.974,1670,4.974,1671,4.974,1672,6.328,1673,6.328,1674,4.974,1675,4.974,1676,4.974,1677,4.974,1678,4.974,1679,4.974,1680,4.974,1681,4.974,1682,4.974,1683,4.974,1684,4.974,1685,4.974,1686,4.974,1687,4.974,1688,4.974,1689,4.974,1690,4.974,1691,4.974,1692,4.974,1693,4.974,1694,4.974,1695,4.974,1696,4.974,1697,4.974,1698,4.974,1699,4.974,1700,4.974,1701,4.974]],["title/modules.html",[107,2.791]],["body/modules.html",[34,0.011,69,0.011,70,0.011,106,4.212,107,2.961,111,3.916,112,3.916,113,2.961,114,3.916,115,3.916,116,3.669,1702,8.124,1703,8.124,1704,8.124,1705,8.124]],["title/overview.html",[1706,4.789]],["body/overview.html",[2,2.195,34,0.014,69,0.009,70,0.009,71,4.365,106,5.854,107,2.195,108,2.799,109,3.766,110,3.766,111,5.344,112,5.099,113,4.041,114,5.099,115,5.099,116,4.915,117,3.241,118,2.427,119,2.096,136,2.096,188,4.09,225,3.766,227,3.766,250,4.503,252,3.856,374,0.59,430,2.46,464,4.09,489,3.766,491,3.766,689,3.123,941,3.766,942,3.766,943,3.766,1034,4.09,1051,3.766,1052,3.766,1138,3.398,1193,4.09,1207,3.766,1209,3.766,1262,3.398,1355,3.766,1356,3.766,1358,3.766,1706,3.766,1707,4.326,1708,4.326,1709,4.326]],["title/properties.html",[390,1.47,1456,2.921]],["body/properties.html",[9,0.379,34,0.013,69,0.012,70,0.012,390,1.911,1638,4.943,1710,6.293,1711,6.293,1712,6.293,1713,6.293,1714,6.293]],["title/miscellaneous/typealiases.html",[1484,2.11,1715,4.841]],["body/miscellaneous/typealiases.html",[5,0.16,22,0.813,34,0.011,36,0.953,69,0.011,70,0.011,73,3.993,74,5.259,80,5.867,84,5.867,91,5.867,93,3.84,94,5.867,256,6.61,259,2.931,305,5.867,832,3.459,1484,3.459,1716,5.501,1717,6.738,1718,6.738,1719,7.592,1720,5.501,1721,5.501,1722,6.738,1723,5.501,1724,5.501,1725,5.501,1726,5.501,1727,5.501]],["title/miscellaneous/variables.html",[1484,2.11,1728,4.215]],["body/miscellaneous/variables.html",[5,0.14,12,2.759,17,3.612,22,0.519,34,0.014,36,0.839,41,3.454,54,3.93,61,2.819,62,3.058,66,2.204,67,2.965,69,0.008,70,0.008,73,2.081,74,3.612,75,3.058,89,3.612,98,2.759,138,0.651,139,1.702,141,2.209,146,3.358,220,1.033,259,1.871,293,2.112,315,3.058,322,3.93,397,1.066,409,1.188,427,3.618,432,1.559,453,1.279,459,2.807,460,2.081,607,1.782,699,3.93,742,3.911,762,2.759,810,6.674,858,2.081,887,3.058,1022,3.058,1023,3.058,1024,3.058,1025,3.058,1026,3.058,1027,3.612,1058,2.759,1080,2.759,1263,2.535,1269,3.93,1390,3.93,1430,3.058,1434,3.93,1437,3.058,1438,3.058,1439,5.53,1440,5.074,1441,4.356,1484,2.209,1489,3.058,1497,5.074,1498,3.058,1728,3.058,1729,5.003,1730,3.512,1731,5.003,1732,5.827,1733,5.003,1734,5.003,1735,3.512,1736,5.003,1737,3.512,1738,5.827,1739,3.512,1740,3.512,1741,5.003,1742,3.512,1743,3.512,1744,3.512,1745,5.003,1746,5.003,1747,5.003,1748,3.512,1749,3.512,1750,3.512,1751,3.512,1752,3.512,1753,5.003,1754,5.003,1755,3.512,1756,5.003,1757,5.003,1758,3.512,1759,3.512,1760,3.512,1761,3.512,1762,3.512,1763,5.827,1764,5.003,1765,5.003,1766,3.512,1767,3.512,1768,3.512,1769,3.512,1770,5.003,1771,3.512,1772,5.003,1773,3.512,1774,5.003,1775,3.512,1776,3.512,1777,3.512,1778,3.512,1779,3.512,1780,3.512,1781,3.512,1782,3.512,1783,3.512,1784,3.512,1785,3.512,1786,3.512]]],"invertedIndex":[["",{"_index":34,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["0.1.13",{"_index":1476,"title":{},"body":{"dependencies.html":{}}}],["0.1.2",{"_index":1473,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1467,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1466,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1471,"title":{},"body":{"dependencies.html":{}}}],["03",{"_index":995,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["05",{"_index":1156,"title":{},"body":{"classes/Purchase.html":{}}}],["0878",{"_index":629,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["1",{"_index":430,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"overview.html":{}}}],["1.0.0",{"_index":1711,"title":{},"body":{"properties.html":{}}}],["1/1",{"_index":1432,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":432,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["10/10",{"_index":1445,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1424,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":1753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11/11",{"_index":1436,"title":{},"body":{"coverage.html":{}}}],["12/12",{"_index":1447,"title":{},"body":{"coverage.html":{}}}],["138.75",{"_index":1154,"title":{},"body":{"classes/Purchase.html":{}}}],["13t15:41:28.527z",{"_index":1157,"title":{},"body":{"classes/Purchase.html":{}}}],["14/15",{"_index":1428,"title":{},"body":{"coverage.html":{}}}],["151be8d85634",{"_index":1310,"title":{},"body":{"classes/User.html":{}}}],["15m",{"_index":1737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1811c405c0f7",{"_index":1148,"title":{},"body":{"classes/Purchase.html":{}}}],["187",{"_index":1601,"title":{},"body":{"index.html":{}}}],["1e9",{"_index":1768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":653,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["2.0.4",{"_index":1468,"title":{},"body":{"dependencies.html":{}}}],["2.1.3",{"_index":1470,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1429,"title":{},"body":{"coverage.html":{}}}],["2022",{"_index":994,"title":{},"body":{"classes/Product.html":{},"classes/Purchase.html":{},"classes/User.html":{},"license.html":{}}}],["25d18b3976a0",{"_index":652,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["26c3fd79",{"_index":786,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["26t15:41:28.527z",{"_index":996,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["2b$10$1xpzuyu8fuvuabb3sc0xzur9dx7kakbmlt0vlnoz.unlntdmfc4lk",{"_index":1311,"title":{},"body":{"classes/User.html":{}}}],["2e651e21b871",{"_index":627,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["3",{"_index":1752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":1478,"title":{},"body":{"dependencies.html":{}}}],["3.14.0",{"_index":1464,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1425,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":1572,"title":{},"body":{"index.html":{}}}],["306e52f9e686",{"_index":785,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["32d0226134e2",{"_index":790,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["3mb",{"_index":1026,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":1472,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":1482,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1435,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":499,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["404",{"_index":510,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["42",{"_index":621,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["4302",{"_index":990,"title":{},"body":{"classes/Product.html":{}}}],["4368",{"_index":1146,"title":{},"body":{"classes/Purchase.html":{}}}],["438c",{"_index":399,"title":{},"body":{"classes/Category.html":{}}}],["44",{"_index":1709,"title":{},"body":{"overview.html":{}}}],["441e",{"_index":1308,"title":{},"body":{"classes/User.html":{}}}],["463b",{"_index":783,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["4646",{"_index":788,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["4688",{"_index":630,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["4889",{"_index":1151,"title":{},"body":{"classes/Purchase.html":{}}}],["49f3",{"_index":625,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["4fce",{"_index":400,"title":{},"body":{"classes/Category.html":{}}}],["4fde",{"_index":650,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["5",{"_index":1138,"title":{},"body":{"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{},"overview.html":{}}}],["5.0.1",{"_index":1465,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":1463,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1448,"title":{},"body":{"coverage.html":{}}}],["541c",{"_index":782,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["5c68ae94",{"_index":648,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["6/6",{"_index":1426,"title":{},"body":{"coverage.html":{}}}],["6f4ca8a4",{"_index":988,"title":{},"body":{"classes/Product.html":{}}}],["7",{"_index":1707,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":1479,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1444,"title":{},"body":{"coverage.html":{}}}],["70.00",{"_index":620,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["7aed",{"_index":1307,"title":{},"body":{"classes/User.html":{}}}],["7b5547f01b0a",{"_index":992,"title":{},"body":{"classes/Product.html":{}}}],["8",{"_index":676,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8'})@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":666,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.0.1",{"_index":1460,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":1462,"title":{},"body":{"dependencies.html":{}}}],["8.2.6",{"_index":1458,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":1483,"title":{},"body":{"dependencies.html":{}}}],["8.4.6",{"_index":1459,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1446,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":1451,"title":{},"body":{"coverage.html":{}}}],["857cd575",{"_index":623,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["88",{"_index":1450,"title":{},"body":{"coverage.html":{}}}],["8aa0",{"_index":989,"title":{},"body":{"classes/Product.html":{}}}],["8d85",{"_index":401,"title":{},"body":{"classes/Category.html":{}}}],["8fd6",{"_index":784,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["9",{"_index":1708,"title":{},"body":{"overview.html":{}}}],["9/9",{"_index":1449,"title":{},"body":{"coverage.html":{}}}],["90d",{"_index":1740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["93",{"_index":1427,"title":{},"body":{"coverage.html":{}}}],["949e",{"_index":1147,"title":{},"body":{"classes/Purchase.html":{}}}],["956b",{"_index":624,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["95f273eb70e1",{"_index":1153,"title":{},"body":{"classes/Purchase.html":{}}}],["979e",{"_index":1152,"title":{},"body":{"classes/Purchase.html":{}}}],["9f7f",{"_index":1309,"title":{},"body":{"classes/User.html":{}}}],["a04bb2db",{"_index":1149,"title":{},"body":{"classes/Purchase.html":{}}}],["a287",{"_index":789,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["a75e",{"_index":626,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["abc123456",{"_index":674,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{}}}],["above",{"_index":1671,"title":{},"body":{"license.html":{}}}],["abrir",{"_index":1570,"title":{},"body":{"index.html":{}}}],["ac1b",{"_index":991,"title":{},"body":{"classes/Product.html":{}}}],["ac63",{"_index":631,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["accepts",{"_index":1782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access",{"_index":73,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"guards/RolesGuard.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["accessible",{"_index":1498,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["accessing",{"_index":1265,"title":{},"body":{"guards/RolesGuard.html":{}}}],["accessjwtauthguard",{"_index":1,"title":{"injectables/AccessJwtAuthGuard.html":{}},"body":{"injectables/AccessJwtAuthGuard.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["accessjwtconfig",{"_index":89,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["accessjwtconfig.secret",{"_index":100,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["accessjwtstrategy",{"_index":71,"title":{"injectables/AccessJwtStrategy.html":{}},"body":{"injectables/AccessJwtStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["accesstoken",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginResponse.html":{}}}],["accesstokencontent",{"_index":91,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["accesstokenpayload",{"_index":80,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["acessar",{"_index":1574,"title":{},"body":{"index.html":{}}}],["action",{"_index":1695,"title":{},"body":{"license.html":{}}}],["active",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["add",{"_index":1491,"title":{},"body":{"miscellaneous/functions.html":{}}}],["adddaysfromnow",{"_index":1453,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["adddaysfromnow(days",{"_index":1490,"title":{},"body":{"miscellaneous/functions.html":{}}}],["address",{"_index":657,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["admin",{"_index":417,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["admin.decorator",{"_index":461,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{}}}],["admin.decorator.ts",{"_index":1434,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["admins",{"_index":420,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{}}}],["agent",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["alguns",{"_index":1597,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":1716,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed",{"_index":1268,"title":{},"body":{"guards/RolesGuard.html":{}}}],["already",{"_index":501,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["alterando",{"_index":1584,"title":{},"body":{"index.html":{}}}],["alvaromrveiga",{"_index":1714,"title":{},"body":{"properties.html":{}}}],["amazing",{"_index":1155,"title":{},"body":{"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["amount",{"_index":607,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"injectables/PurchaseService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["and/or",{"_index":1169,"title":{},"body":{"controllers/PurchaseController.html":{},"license.html":{}}}],["another",{"_index":379,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["apenas",{"_index":1603,"title":{},"body":{"index.html":{}}}],["api",{"_index":1503,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["apioperation",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":755,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["apiproperty({type",{"_index":751,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["apitags",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["apitags('authentication",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('category",{"_index":472,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apitags('product",{"_index":1036,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags('purchase",{"_index":1195,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["apitags('user",{"_index":1341,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":705,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["app.close",{"_index":971,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app_guard",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["application",{"_index":832,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"injectables/PrismaService.html":{},"classes/RefreshTokenDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["appmodule",{"_index":106,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arising",{"_index":1699,"title":{},"body":{"license.html":{}}}],["armazenar",{"_index":1612,"title":{},"body":{"index.html":{}}}],["arquivo",{"_index":1553,"title":{},"body":{"index.html":{}}}],["array",{"_index":1070,"title":{},"body":{"injectables/ProductService.html":{}}}],["asc",{"_index":550,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["associated",{"_index":1652,"title":{},"body":{"license.html":{}}}],["async",{"_index":76,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["autenticação",{"_index":1512,"title":{},"body":{"index.html":{}}}],["auth",{"_index":796,"title":{},"body":{"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidRefreshTokenException.html":{}}}],["auth.controller",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["auth.guard.ts",{"_index":8,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:13",{"_index":29,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["auth.guard.ts:28",{"_index":40,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["auth.service",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/access",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.module",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":135,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":831,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["authenticates",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticating",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":17,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{},"classes/LoginResponse.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":13,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["authguard('access",{"_index":58,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["authmodule",{"_index":111,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1713,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":827,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["authors",{"_index":1689,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":188,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authserviceinputexception",{"_index":373,"title":{"classes/AuthServiceInputException.html":{}},"body":{"classes/AuthServiceInputException.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["automático",{"_index":1527,"title":{},"body":{"index.html":{}}}],["autorização",{"_index":1513,"title":{},"body":{"index.html":{}}}],["available",{"_index":516,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["avaliações",{"_index":1511,"title":{},"body":{"index.html":{}}}],["await",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["b01f",{"_index":651,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["b076f72e",{"_index":1144,"title":{},"body":{"classes/Purchase.html":{}}}],["b0e0c99e",{"_index":781,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["backend",{"_index":1502,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":504,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"classes/UserInputExceptionHandler.html":{}}}],["badrequestexception(error.message",{"_index":1353,"title":{},"body":{"classes/UserInputExceptionHandler.html":{}}}],["banco",{"_index":1577,"title":{},"body":{"index.html":{}}}],["bando",{"_index":1591,"title":{},"body":{"index.html":{}}}],["baseprice",{"_index":580,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"injectables/PurchaseService.html":{}}}],["bcrypt",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["becomes",{"_index":1094,"title":{},"body":{"injectables/ProductService.html":{}}}],["before",{"_index":962,"title":{},"body":{"injectables/PrismaService.html":{}}}],["being",{"_index":1746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["between",{"_index":1089,"title":{},"body":{"injectables/ProductService.html":{}}}],["bf3e",{"_index":649,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{}}}],["binary",{"_index":753,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["black",{"_index":618,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["body",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["boilerplate",{"_index":717,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{}}}],["boolean",{"_index":46,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":1443,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":850,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{},"injectables/UserService.html":{}}}],["brand",{"_index":617,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["brand1",{"_index":1093,"title":{},"body":{"injectables/ProductService.html":{}}}],["break",{"_index":921,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["browse",{"_index":1705,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1702,"title":{},"body":{"modules.html":{}}}],["browserinfo",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["c",{"_index":1640,"title":{},"body":{"license.html":{}}}],["calculatetotalprice",{"_index":1213,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["calculatetotalprice(createpurchasedto",{"_index":1215,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["calculations",{"_index":591,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["call",{"_index":960,"title":{},"body":{"injectables/PrismaService.html":{}}}],["callback",{"_index":1764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(new",{"_index":1777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":1770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["called",{"_index":840,"title":{},"body":{"classes/LoginResponse.html":{}}}],["callhandler",{"_index":713,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["canactivate",{"_index":24,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":38,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["capitalize",{"_index":523,"title":{},"body":{"injectables/CategoryService.html":{}}}],["capitalizeonlyfirstletter",{"_index":517,"title":{},"body":{"injectables/CategoryService.html":{}}}],["capitalizeonlyfirstletter(name",{"_index":521,"title":{},"body":{"injectables/CategoryService.html":{}}}],["case",{"_index":916,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{}}}],["catcherror",{"_index":719,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["catcherror((error",{"_index":729,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["catches",{"_index":715,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["categorias",{"_index":1529,"title":{},"body":{"index.html":{}}}],["categories",{"_index":425,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"injectables/ProductService.html":{}}}],["categories'})@public()@get",{"_index":423,"title":{},"body":{"controllers/CategoryController.html":{}}}],["categories.dto",{"_index":469,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["categories.dto.ts",{"_index":759,"title":{},"body":{"classes/FindCategoriesDto.html":{},"coverage.html":{}}}],["categories.dto.ts:11",{"_index":761,"title":{},"body":{"classes/FindCategoriesDto.html":{}}}],["categories.dto.ts:20",{"_index":765,"title":{},"body":{"classes/FindCategoriesDto.html":{}}}],["categories.dto.ts:29",{"_index":764,"title":{},"body":{"classes/FindCategoriesDto.html":{}}}],["categories.map((category",{"_index":1124,"title":{},"body":{"injectables/ProductService.html":{}}}],["categoriesconnection",{"_index":1123,"title":{},"body":{"injectables/ProductService.html":{}}}],["categoriestoskip",{"_index":542,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category",{"_index":387,"title":{"classes/Category.html":{}},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category'})@isadmin()@delete(':id')@httpcode(httpstatus.no_content",{"_index":446,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category'})@isadmin()@patch(':id",{"_index":451,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category'})@isadmin()@post",{"_index":418,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category.controller",{"_index":493,"title":{},"body":{"modules/CategoryModule.html":{}}}],["category.dto",{"_index":467,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts",{"_index":568,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:12",{"_index":572,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.service",{"_index":465,"title":{},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{}}}],["categorycontroller",{"_index":404,"title":{"controllers/CategoryController.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"coverage.html":{}}}],["categorymodule",{"_index":112,"title":{"modules/CategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["categoryname",{"_index":540,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{}}}],["categorynameinuseexception",{"_index":494,"title":{"classes/CategoryNameInUseException.html":{}},"body":{"classes/CategoryNameInUseException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["categorynotfoundexception",{"_index":508,"title":{"classes/CategoryNotFoundException.html":{}},"body":{"classes/CategoryNotFoundException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["categoryservice",{"_index":464,"title":{"injectables/CategoryService.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["cd",{"_index":1546,"title":{},"body":{"index.html":{}}}],["chair",{"_index":767,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"injectables/ProductService.html":{}}}],["chair&quot",{"_index":1096,"title":{},"body":{"injectables/ProductService.html":{}}}],["charge",{"_index":1647,"title":{},"body":{"license.html":{}}}],["check",{"_index":14,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/ProductController.html":{}}}],["checks",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"classes/PrismaExceptionHandler.html":{},"guards/RolesGuard.html":{}}}],["claim",{"_index":1692,"title":{},"body":{"license.html":{}}}],["class",{"_index":31,"title":{"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":374,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"overview.html":{}}}],["clientversion",{"_index":892,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["clona",{"_index":1536,"title":{},"body":{"index.html":{}}}],["clone",{"_index":1541,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categorymodule",{"_index":489,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_imports",{"_index":490,"title":{},"body":{"modules/CategoryModule.html":{}}}],["cluster_categorymodule_providers",{"_index":491,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":941,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":942,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":943,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_productmodule",{"_index":1051,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_productmodule_imports",{"_index":1053,"title":{},"body":{"modules/ProductModule.html":{}}}],["cluster_productmodule_providers",{"_index":1052,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_purchasemodule",{"_index":1207,"title":{},"body":{"modules/PurchaseModule.html":{},"overview.html":{}}}],["cluster_purchasemodule_imports",{"_index":1208,"title":{},"body":{"modules/PurchaseModule.html":{}}}],["cluster_purchasemodule_providers",{"_index":1209,"title":{},"body":{"modules/PurchaseModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1355,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1356,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1357,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1358,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["codes",{"_index":818,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["colocou",{"_index":1587,"title":{},"body":{"index.html":{}}}],["com",{"_index":1504,"title":{},"body":{"index.html":{}}}],["comment",{"_index":1135,"title":{},"body":{"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["commerce",{"_index":1501,"title":{},"body":{"index.html":{}}}],["compare",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["compare(currentpassword",{"_index":1412,"title":{},"body":{"injectables/UserService.html":{}}}],["compare(password",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["compared",{"_index":1376,"title":{},"body":{"injectables/UserService.html":{}}}],["compares",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["compodoc",{"_index":1515,"title":{},"body":{"index.html":{}}}],["compras",{"_index":1510,"title":{},"body":{"index.html":{}}}],["compromised",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["conditions",{"_index":1670,"title":{},"body":{"license.html":{}}}],["configuration",{"_index":75,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["configurations",{"_index":1738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connect",{"_index":967,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/ProductService.html":{}}}],["connectcategoriesbyid",{"_index":1063,"title":{},"body":{"injectables/ProductService.html":{}}}],["connectcategoriesbyid(categories",{"_index":1068,"title":{},"body":{"injectables/ProductService.html":{}}}],["connecting",{"_index":948,"title":{},"body":{"injectables/PrismaService.html":{}}}],["connection",{"_index":1700,"title":{},"body":{"license.html":{}}}],["considering",{"_index":588,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["const",{"_index":61,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":1754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constructor",{"_index":25,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{}}}],["constructor(filetypes",{"_index":739,"title":{},"body":{"classes/FileTypeError.html":{}}}],["constructor(message",{"_index":383,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["constructor(prisma",{"_index":519,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":59,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(reflector",{"_index":26,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["constructor(userservice",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["construir",{"_index":1610,"title":{},"body":{"index.html":{}}}],["consult",{"_index":1747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contain",{"_index":668,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["containing",{"_index":762,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"miscellaneous/variables.html":{}}}],["contains",{"_index":546,"title":{},"body":{"injectables/CategoryService.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{}}}],["content",{"_index":94,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["content.ts",{"_index":1718,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["context",{"_index":44,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":65,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":64,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":1272,"title":{},"body":{"guards/RolesGuard.html":{}}}],["contract",{"_index":1696,"title":{},"body":{"license.html":{}}}],["controller",{"_index":134,"title":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('category",{"_index":473,"title":{},"body":{"controllers/CategoryController.html":{}}}],["controller('product",{"_index":1037,"title":{},"body":{"controllers/ProductController.html":{}}}],["controller('purchase",{"_index":1196,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["controller('user",{"_index":1342,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["copies",{"_index":1665,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1650,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1639,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":1420,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":409,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":1038,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["create(createcategorydto",{"_index":415,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["create(createproductdto",{"_index":1001,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["create(createuserdto",{"_index":1316,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(request",{"_index":1162,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["create(userid",{"_index":1217,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["createcategorydto",{"_index":416,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["createdat",{"_index":616,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{}}}],["createproductdto",{"_index":576,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["createpurchasedto",{"_index":633,"title":{"classes/CreatePurchaseDto.html":{}},"body":{"classes/CreatePurchaseDto.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["createpurchasedto.amount",{"_index":1249,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["createpurchasedto.productid",{"_index":1247,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["createrefreshtoken",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["createrefreshtoken(payload",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["creates",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":654,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email.tolowercase",{"_index":1398,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.password",{"_index":1395,"title":{},"body":{"injectables/UserService.html":{}}}],["credentials.dto",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":830,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:11",{"_index":834,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["credentials.dto.ts:19",{"_index":835,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["criação",{"_index":1506,"title":{},"body":{"index.html":{}}}],["crie",{"_index":1551,"title":{},"body":{"index.html":{}}}],["crud",{"_index":408,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["currency",{"_index":1227,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["currency(baseprice.tonumber()).multiply",{"_index":1248,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["currency.js",{"_index":593,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"injectables/PurchaseService.html":{},"dependencies.html":{},"index.html":{}}}],["current",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"classes/DeleteUserDto.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["currentpassword",{"_index":684,"title":{},"body":{"classes/DeleteUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["customdecorator",{"_index":1749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cálculo",{"_index":1623,"title":{},"body":{"index.html":{}}}],["cálculos",{"_index":1621,"title":{},"body":{"index.html":{}}}],["código",{"_index":1636,"title":{},"body":{"index.html":{}}}],["códigos",{"_index":1627,"title":{},"body":{"index.html":{}}}],["d31fc56c",{"_index":1306,"title":{},"body":{"classes/User.html":{}}}],["da",{"_index":1624,"title":{},"body":{"index.html":{}}}],["dados",{"_index":1578,"title":{},"body":{"index.html":{}}}],["damages",{"_index":1693,"title":{},"body":{"license.html":{}}}],["data",{"_index":83,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["database",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["date",{"_index":975,"title":{},"body":{"classes/Product.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["date.now",{"_index":1766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datestring",{"_index":977,"title":{},"body":{"classes/Product.html":{},"classes/Purchase.html":{},"classes/User.html":{}}}],["days",{"_index":1492,"title":{},"body":{"miscellaneous/functions.html":{}}}],["db3d22db270a",{"_index":402,"title":{},"body":{"classes/Category.html":{}}}],["de",{"_index":1507,"title":{},"body":{"index.html":{}}}],["deal",{"_index":1654,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1701,"title":{},"body":{"license.html":{}}}],["decimal",{"_index":584,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["decoration",{"_index":403,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{}}}],["decorator",{"_index":42,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["decorators",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["decorators/is",{"_index":1270,"title":{},"body":{"guards/RolesGuard.html":{}}}],["decrypted",{"_index":84,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["default",{"_index":427,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":603,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/User.html":{}}}],["defined",{"_index":28,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{}}}],["delete",{"_index":456,"title":{},"body":{"controllers/CategoryController.html":{},"classes/DeleteUserDto.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(':id",{"_index":485,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["deletes",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["deleteuserdto",{"_index":682,"title":{"classes/DeleteUserDto.html":{}},"body":{"classes/DeleteUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["deleteuserdto.currentpassword",{"_index":1407,"title":{},"body":{"injectables/UserService.html":{}}}],["demorar",{"_index":1596,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":108,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":32,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dependências",{"_index":1549,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1235,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["describes",{"_index":389,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{}}}],["description",{"_index":9,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"properties.html":{}}}],["descritas",{"_index":1558,"title":{},"body":{"index.html":{}}}],["desenvolvimento",{"_index":1568,"title":{},"body":{"index.html":{}}}],["destination",{"_index":1761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["detection",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["detecção",{"_index":1525,"title":{},"body":{"index.html":{}}}],["discount",{"_index":601,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["discountpercentage",{"_index":581,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["discounts",{"_index":589,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["diskstorage",{"_index":1760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distribute",{"_index":1662,"title":{},"body":{"license.html":{}}}],["docs",{"_index":1028,"title":{},"body":{"controllers/ProductController.html":{}}}],["documentation",{"_index":1421,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["documentação",{"_index":1514,"title":{},"body":{"index.html":{}}}],["doe",{"_index":679,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["doesn't",{"_index":1388,"title":{},"body":{"injectables/UserService.html":{}}}],["dos",{"_index":1618,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":466,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/delete",{"_index":1335,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/find",{"_index":468,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["dto/login",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/login.response",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/logout.dto",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/refresh",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/review",{"_index":1192,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["dto/update",{"_index":470,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e",{"_index":660,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"index.html":{}}}],["e3ecf4939a89",{"_index":632,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["e6cf9a58",{"_index":398,"title":{},"body":{"classes/Category.html":{}}}],["ecommerce",{"_index":1547,"title":{},"body":{"index.html":{}}}],["em",{"_index":1566,"title":{},"body":{"index.html":{}}}],["email",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/LoginCredentialsDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PurchaseService.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["email.tolowercase",{"_index":1401,"title":{},"body":{"injectables/UserService.html":{}}}],["emailinuseexception",{"_index":686,"title":{"classes/EmailInUseException.html":{}},"body":{"classes/EmailInUseException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["enableshutdownhooks",{"_index":951,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":953,"title":{},"body":{"injectables/PrismaService.html":{}}}],["endpoint",{"_index":1497,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["enter",{"_index":853,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["entities/category.entity",{"_index":471,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{}}}],["entities/product.entity",{"_index":614,"title":{},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["entities/purchase.entity",{"_index":646,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{}}}],["entities/user",{"_index":1338,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entities/user.entity",{"_index":672,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":1415,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["entra",{"_index":1543,"title":{},"body":{"index.html":{}}}],["entrada",{"_index":1617,"title":{},"body":{"index.html":{}}}],["enum",{"_index":904,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"dependencies.html":{},"index.html":{}}}],["env",{"_index":1554,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":1559,"title":{},"body":{"index.html":{}}}],["env.test",{"_index":1583,"title":{},"body":{"index.html":{}}}],["equals",{"_index":1234,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["error",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"dependencies.html":{},"index.html":{}}}],["error.clientversion",{"_index":931,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.code",{"_index":915,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message",{"_index":930,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.category",{"_index":935,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product",{"_index":934,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product.create",{"_index":939,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product.delete",{"_index":938,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.product.update",{"_index":937,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.purchase",{"_index":940,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["error.message.includes('prisma.user",{"_index":936,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["errormeta",{"_index":889,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["errors",{"_index":707,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["erros",{"_index":706,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"index.html":{}}}],["eslint",{"_index":1632,"title":{},"body":{"index.html":{}}}],["event",{"_index":1688,"title":{},"body":{"license.html":{}}}],["example",{"_index":397,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["exception",{"_index":380,"title":{},"body":{"classes/AuthServiceInputException.html":{},"interfaces/ExceptionHandler.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["exception.handler",{"_index":722,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["exception.handler.ts",{"_index":807,"title":{},"body":{"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["exception.handler.ts:108",{"_index":882,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:118",{"_index":902,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:12",{"_index":814,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["exception.handler.ts:123",{"_index":896,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:131",{"_index":885,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:136",{"_index":878,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:141",{"_index":900,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:19",{"_index":875,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["exception.handler.ts:21",{"_index":819,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["exception.handler.ts:28",{"_index":821,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["exception.handler.ts:87",{"_index":891,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:92",{"_index":888,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exception.handler.ts:97",{"_index":898,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["exceptionhandler",{"_index":690,"title":{"interfaces/ExceptionHandler.html":{}},"body":{"interfaces/ExceptionHandler.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["exceptioninterceptor",{"_index":701,"title":{"injectables/ExceptionInterceptor.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"coverage.html":{}}}],["exceptions/invalid",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["exceptions/missing",{"_index":1393,"title":{},"body":{"injectables/UserService.html":{}}}],["exceptions/not",{"_index":1228,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["exceções",{"_index":1629,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":39,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{}}}],["exemplo",{"_index":1588,"title":{},"body":{"index.html":{}}}],["exists",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiration",{"_index":1494,"title":{},"body":{"miscellaneous/functions.html":{}}}],["expiração",{"_index":1625,"title":{},"body":{"index.html":{}}}],["expiresat",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":1736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":56,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}}}],["exports",{"_index":945,"title":{},"body":{"modules/PrismaModule.html":{},"modules/UserModule.html":{}}}],["exposes",{"_index":407,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["express",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"modules/ProductModule.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"dependencies.html":{},"index.html":{},"license.html":{}}}],["express.multer.file",{"_index":1726,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expression",{"_index":1786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extend",{"_index":378,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["extends",{"_index":57,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"classes/AuthServiceInputException.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"injectables/PrismaService.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}}}],["extname",{"_index":1774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":87,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":96,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjzdwiioii5nwfkmznhns0wyjk4ltq2odytyjfmms1hmtkwnzm0nwjmyzcilcjpyxqioje2ndg0nzu3mzesimv4cci6mty0odq3njyzmx0.h3z3jdvhoi6y5c_n0kt6tdp2nwk_dhbzxioqn7vanno",{"_index":843,"title":{},"body":{"classes/LoginResponse.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjzdwiioiixmjm0nty3odkwiiwibmftzsi6ikpvag4grg9liiwiawf0ijoxnte2mjm5mdiyfq.sflkxwrjsmekkf2qt4fwpmejf36pok6yjv_adqssw5c",{"_index":844,"title":{},"body":{"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{}}}],["f5bd",{"_index":787,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["f70b",{"_index":1145,"title":{},"body":{"classes/Purchase.html":{}}}],["fa244865",{"_index":628,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["false",{"_index":98,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["family",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["familytokens",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["familytokens.length",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["features",{"_index":1519,"title":{},"body":{"index.html":{}}}],["fecd",{"_index":1150,"title":{},"body":{"classes/Purchase.html":{}}}],["field",{"_index":883,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserWithoutPassword.html":{}}}],["fields",{"_index":569,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["file.filename",{"_index":1107,"title":{},"body":{"injectables/ProductService.html":{}}}],["file.originalname",{"_index":1769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filefilter",{"_index":1771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filename",{"_index":1763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":1653,"title":{},"body":{"license.html":{}}}],["filesize",{"_index":1780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filetypeerror",{"_index":733,"title":{"classes/FileTypeError.html":{}},"body":{"classes/FileTypeError.html":{},"coverage.html":{}}}],["filetypeerror(validimageuploadtypesregex",{"_index":1778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filetypes",{"_index":745,"title":{},"body":{"classes/FileTypeError.html":{}}}],["fileupload",{"_index":1030,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["fileuploaddto",{"_index":748,"title":{"classes/FileUploadDto.html":{}},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["find",{"_index":441,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["findall",{"_index":410,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["findall(@query",{"_index":1040,"title":{},"body":{"controllers/ProductController.html":{}}}],["findall(findallproductsdto",{"_index":1004,"title":{},"body":{"controllers/ProductController.html":{}}}],["findall(findcategoriesdto",{"_index":421,"title":{},"body":{"controllers/CategoryController.html":{}}}],["findall(findpurchasesdto",{"_index":1166,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["findall(undefined",{"_index":527,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["findallmine",{"_index":1160,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["findallmine(request",{"_index":1171,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["findallproductsdto",{"_index":1007,"title":{},"body":{"controllers/ProductController.html":{}}}],["findalltokens",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["findalltokens(@req",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["findalltokens(request",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["findalltokens(userid",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["findbyemail",{"_index":1363,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyemail(email",{"_index":1368,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid",{"_index":1314,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findbyid(@req",{"_index":1344,"title":{},"body":{"controllers/UserController.html":{}}}],["findbyid(id",{"_index":1372,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(request",{"_index":1319,"title":{},"body":{"controllers/UserController.html":{}}}],["findcategoriesdto",{"_index":422,"title":{"classes/FindCategoriesDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"coverage.html":{}}}],["findone",{"_index":1161,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["findone(purchaseid",{"_index":1220,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["findone(request",{"_index":1174,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["findonebyid",{"_index":411,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyid(@param('id",{"_index":1042,"title":{},"body":{"controllers/ProductController.html":{}}}],["findonebyid(id",{"_index":436,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyname",{"_index":412,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["findonebyname(name",{"_index":442,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["findonebyurlname",{"_index":999,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findonebyurlname(@param('urlname",{"_index":1045,"title":{},"body":{"controllers/ProductController.html":{}}}],["findonebyurlname(urlname",{"_index":1010,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findproductsdto",{"_index":437,"title":{"classes/FindProductsDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["findpurchasesdto",{"_index":773,"title":{"classes/FindPurchasesDto.html":{}},"body":{"classes/FindPurchasesDto.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"coverage.html":{}}}],["findpurchasesdto.userid",{"_index":1200,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["finds",{"_index":1370,"title":{},"body":{"injectables/UserService.html":{}}}],["fire",{"_index":964,"title":{},"body":{"injectables/PrismaService.html":{}}}],["first",{"_index":524,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/PrismaService.html":{}}}],["fitness",{"_index":1684,"title":{},"body":{"license.html":{}}}],["following",{"_index":744,"title":{},"body":{"classes/FileTypeError.html":{},"license.html":{}}}],["forgot",{"_index":1381,"title":{},"body":{"injectables/UserService.html":{}}}],["format",{"_index":752,"title":{},"body":{"classes/FileUploadDto.html":{},"injectables/ProductService.html":{}}}],["formatação",{"_index":1635,"title":{},"body":{"index.html":{}}}],["formats",{"_index":537,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["formaturlname",{"_index":1064,"title":{},"body":{"injectables/ProductService.html":{}}}],["formaturlname(name",{"_index":1077,"title":{},"body":{"injectables/ProductService.html":{}}}],["found",{"_index":513,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["found.exception",{"_index":906,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["found.exception.ts",{"_index":509,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["found.exception.ts:6",{"_index":512,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["free",{"_index":1646,"title":{},"body":{"license.html":{}}}],["function",{"_index":697,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"coverage.html":{}}}],["functions",{"_index":1485,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1668,"title":{},"body":{"license.html":{}}}],["generate",{"_index":1079,"title":{},"body":{"injectables/ProductService.html":{}}}],["generateaccesstoken",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateaccesstoken(payload",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["generates",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('/admin",{"_index":1198,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["get('/id/:id",{"_index":477,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{}}}],["get(':id",{"_index":1201,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["get(':name",{"_index":480,"title":{},"body":{"controllers/CategoryController.html":{}}}],["get(':urlname",{"_index":1044,"title":{},"body":{"controllers/ProductController.html":{}}}],["get('tokens",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["gets",{"_index":438,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["getting",{"_index":1499,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettokenexpirationdate",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getuserrole",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuserrole(userid",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["git",{"_index":1540,"title":{},"body":{"index.html":{}}}],["github",{"_index":1516,"title":{},"body":{"index.html":{}}}],["global",{"_index":1742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["granted",{"_index":1645,"title":{},"body":{"license.html":{}}}],["guard",{"_index":1262,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":20,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["handle",{"_index":694,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{}}}],["handle(error",{"_index":695,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["handled",{"_index":592,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["handlers",{"_index":693,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["handlers/jwt",{"_index":721,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["handlers/prisma",{"_index":724,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["handlers/user",{"_index":726,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["happened",{"_index":880,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["hash",{"_index":1389,"title":{},"body":{"injectables/UserService.html":{}}}],["hashconfig",{"_index":1390,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hashconfig.saltrounds",{"_index":1396,"title":{},"body":{"injectables/UserService.html":{}}}],["hashed",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["hashedpassword",{"_index":1394,"title":{},"body":{"injectables/UserService.html":{}}}],["hashes",{"_index":1743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashifupdatingpassword",{"_index":1364,"title":{},"body":{"injectables/UserService.html":{}}}],["hashifupdatingpassword(id",{"_index":1377,"title":{},"body":{"injectables/UserService.html":{}}}],["hashs",{"_index":1619,"title":{},"body":{"index.html":{}}}],["here",{"_index":1276,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["hereby",{"_index":1644,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1690,"title":{},"body":{"license.html":{}}}],["hooks",{"_index":963,"title":{},"body":{"injectables/PrismaService.html":{}}}],["http",{"_index":497,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{}}}],["http://localhost:3000/api",{"_index":1575,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":486,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://auth0.com/docs/secure/tokens/refresh",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://docs.nestjs.com/guards",{"_index":21,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["https://docs.nestjs.com/interceptors",{"_index":709,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["https://docs.nestjs.com/recipes/prisma",{"_index":949,"title":{},"body":{"injectables/PrismaService.html":{}}}],["https://github.com/alvaromrveiga/ecommerce",{"_index":1542,"title":{},"body":{"index.html":{}}}],["https://www.npmjs.com/package/jsonwebtoken#errors",{"_index":817,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["httpstatus",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["hyphens",{"_index":1091,"title":{},"body":{"injectables/ProductService.html":{}}}],["id",{"_index":392,"title":{},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{}}}],["id'})@apibearerauth()@get(':id",{"_index":1176,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["id'})@isadmin()@get('/id/:id",{"_index":1008,"title":{},"body":{"controllers/ProductController.html":{}}}],["identificar",{"_index":1626,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":1422,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":596,"title":{},"body":{"classes/CreateProductDto.html":{},"injectables/ProductService.html":{}}}],["ignoreexpiration",{"_index":97,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["image",{"_index":1756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image.jpg",{"_index":993,"title":{},"body":{"classes/Product.html":{}}}],["imagens",{"_index":1528,"title":{},"body":{"index.html":{}}}],["implements",{"_index":391,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"classes/UserInputExceptionHandler.html":{}}}],["implied",{"_index":1680,"title":{},"body":{"license.html":{}}}],["import",{"_index":49,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{}}}],["imports",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}}}],["include",{"_index":554,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["included",{"_index":1674,"title":{},"body":{"license.html":{}}}],["including",{"_index":1656,"title":{},"body":{"license.html":{}}}],["index",{"_index":22,"title":{"index.html":{}},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":954,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}}}],["information",{"_index":453,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["informações",{"_index":1557,"title":{},"body":{"index.html":{}}}],["inicia",{"_index":1565,"title":{},"body":{"index.html":{}}}],["iniciar",{"_index":1560,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["input",{"_index":727,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["input.exception",{"_index":746,"title":{},"body":{"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/UserInputExceptionHandler.html":{}}}],["input.exception.ts",{"_index":377,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["input.exception.ts:5",{"_index":384,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["inputs",{"_index":500,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["inputted",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["insensitive",{"_index":548,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["instala",{"_index":1548,"title":{},"body":{"index.html":{}}}],["instalado",{"_index":1535,"title":{},"body":{"index.html":{}}}],["instalação",{"_index":1520,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":382,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{}}}],["instantiate",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["instantiates",{"_index":30,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{}}}],["integração",{"_index":1595,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":710,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["intercept(context",{"_index":711,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interceptor",{"_index":703,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interceptors",{"_index":708,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interface",{"_index":689,"title":{"interfaces/ExceptionHandler.html":{}},"body":{"interfaces/ExceptionHandler.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":691,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["interferes",{"_index":956,"title":{},"body":{"injectables/PrismaService.html":{}}}],["invalid",{"_index":736,"title":{},"body":{"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{}}}],["invalidemailorpasswordexception",{"_index":331,"title":{"classes/InvalidEmailOrPasswordException.html":{}},"body":{"injectables/AuthService.html":{},"classes/InvalidEmailOrPasswordException.html":{},"coverage.html":{}}}],["invalidpasswordupdateexception",{"_index":798,"title":{"classes/InvalidPasswordUpdateException.html":{}},"body":{"classes/InvalidPasswordUpdateException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["invalidrefreshtokenexception",{"_index":334,"title":{"classes/InvalidRefreshTokenException.html":{}},"body":{"injectables/AuthService.html":{},"classes/InvalidRefreshTokenException.html":{},"coverage.html":{}}}],["is_admin_key",{"_index":1269,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["is_public_key",{"_index":54,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isadmin",{"_index":459,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["isarray",{"_index":610,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["iscategoryerror",{"_index":866,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscategoryerror(error",{"_index":876,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscategorynameconstraintviolation",{"_index":867,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscategorynameconstraintviolation(error",{"_index":881,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscorrectpassword",{"_index":1411,"title":{},"body":{"injectables/UserService.html":{}}}],["iscreateproducterror",{"_index":868,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["iscreateproducterror(error",{"_index":884,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isemail",{"_index":670,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserRoleDto.html":{}}}],["isemail({message",{"_index":659,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemailconstraintviolation",{"_index":869,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isemailconstraintviolation(errormeta",{"_index":886,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isenum",{"_index":1294,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["isenum(role",{"_index":1292,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["isint",{"_index":611,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/ReviewPurchaseDto.html":{}}}],["isint()@isoptional",{"_index":605,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isint()@min(1)@max(5",{"_index":1256,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["isjwt",{"_index":846,"title":{},"body":{"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{}}}],["isjwtexception",{"_index":809,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["isjwtexception(error",{"_index":820,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["isnotempty",{"_index":573,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/DeleteUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty()@isstring",{"_index":833,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["isnumber",{"_index":612,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{}}}],["isnumber()@isnotempty",{"_index":585,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isnumber()@isoptional",{"_index":599,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isnumber()@ispositive()@isoptional",{"_index":638,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["isoptional",{"_index":613,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isarray",{"_index":594,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isoptional()@isstring",{"_index":760,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["isoptional()@type(undefined)@isint()@ispositive",{"_index":763,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["ispasswordvalid",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispositive",{"_index":644,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["isprismaunknownerror",{"_index":870,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isprismaunknownerror(error",{"_index":890,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproducterror",{"_index":871,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproducterror(error",{"_index":895,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproductnameconstraintviolation",{"_index":872,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isproductnameconstraintviolation(error",{"_index":897,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["ispublic",{"_index":62,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["ispurchaseerror",{"_index":873,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["ispurchaseerror(error",{"_index":899,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isrefreshtokenvalid",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":574,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":571,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/DeleteUserDto.html":{}}}],["isstring()@isnotempty()@isoptional",{"_index":1285,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isstring()@isoptional",{"_index":597,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/ReviewPurchaseDto.html":{}}}],["isstring()@minlength(8",{"_index":664,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isusererror",{"_index":874,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isusererror(error",{"_index":901,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["isuuid",{"_index":645,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["isuuid(4",{"_index":641,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["it's",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["jest",{"_index":1630,"title":{},"body":{"index.html":{}}}],["john",{"_index":678,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["join",{"_index":1121,"title":{},"body":{"injectables/ProductService.html":{}}}],["jpeg",{"_index":1022,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["jpeg|jpg|png",{"_index":1784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jpg",{"_index":1023,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["json",{"_index":1613,"title":{},"body":{"index.html":{}}}],["jsonwebtoken",{"_index":74,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"classes/JwtExceptionHandler.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["jsonwebtokenerror",{"_index":812,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["jwt",{"_index":7,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginResponse.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.strategy",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt.strategy.ts",{"_index":72,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"coverage.html":{}}}],["jwt.strategy.ts:13",{"_index":78,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["jwt.strategy.ts:24",{"_index":81,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["jwtauthguard",{"_index":1748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwterror",{"_index":823,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["jwterrornames",{"_index":808,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["jwtexceptionhandler",{"_index":720,"title":{"classes/JwtExceptionHandler.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"coverage.html":{}}}],["jwtexceptionhandler().handle(error",{"_index":732,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["jwtfromrequest",{"_index":95,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["jwtmodule",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwts",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtservice",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtsignoptions",{"_index":1733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kind",{"_index":1679,"title":{},"body":{"license.html":{}}}],["language']}`.replace",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["lazily",{"_index":968,"title":{},"body":{"injectables/PrismaService.html":{}}}],["leading",{"_index":1082,"title":{},"body":{"injectables/ProductService.html":{}}}],["leave",{"_index":966,"title":{},"body":{"injectables/PrismaService.html":{}}}],["length",{"_index":665,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letter",{"_index":525,"title":{},"body":{"injectables/CategoryService.html":{},"classes/CreateUserDto.html":{}}}],["liability",{"_index":1694,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1691,"title":{},"body":{"license.html":{}}}],["library",{"_index":12,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["license",{"_index":1638,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["licença",{"_index":1522,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":1657,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1681,"title":{},"body":{"license.html":{}}}],["limits",{"_index":1779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linting",{"_index":1634,"title":{},"body":{"index.html":{}}}],["listens",{"_index":957,"title":{},"body":{"injectables/PrismaService.html":{}}}],["literal",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/typealiases.html":{}}}],["logged",{"_index":1165,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["login",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/LoginResponse.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["login(email",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(undefined",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["logincredentialsdto",{"_index":155,"title":{"classes/LoginCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["loginresponse",{"_index":192,"title":{"classes/LoginResponse.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"coverage.html":{}}}],["logout",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{}}}],["logout(@body",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(refreshtoken",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout(undefined",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["logoutall",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logoutall(@req",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["logoutall(request",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["logoutall(userid",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["logoutdto",{"_index":161,"title":{"classes/LogoutDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LogoutDto.html":{},"coverage.html":{}}}],["logs",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["lower",{"_index":1081,"title":{},"body":{"injectables/ProductService.html":{}}}],["lowercaseemail",{"_index":1397,"title":{},"body":{"injectables/UserService.html":{}}}],["lowercaseurlname",{"_index":1113,"title":{},"body":{"injectables/ProductService.html":{}}}],["lowercaseurlname.trim",{"_index":1116,"title":{},"body":{"injectables/ProductService.html":{}}}],["lvaro",{"_index":1641,"title":{},"body":{"license.html":{}}}],["mail",{"_index":661,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{}}}],["mainly",{"_index":1371,"title":{},"body":{"injectables/UserService.html":{}}}],["make",{"_index":381,"title":{},"body":{"classes/AuthServiceInputException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["makes",{"_index":1080,"title":{},"body":{"injectables/ProductService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["making",{"_index":893,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["managing",{"_index":515,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["matches",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":677,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":70,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.round(math.random",{"_index":1767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["max",{"_index":1258,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["max(5",{"_index":1261,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["maximageuploadsize",{"_index":1440,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":1025,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["merchantability",{"_index":1683,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1660,"title":{},"body":{"license.html":{}}}],["message",{"_index":385,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserNotFoundException.html":{},"classes/UserServiceInputException.html":{}}}],["metadata",{"_index":1475,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":23,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{}}}],["migrate:dev",{"_index":1564,"title":{},"body":{"index.html":{}}}],["migrate:test",{"_index":1592,"title":{},"body":{"index.html":{}}}],["migrations",{"_index":1563,"title":{},"body":{"index.html":{}}}],["mimetype",{"_index":1772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["min",{"_index":1259,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["min(1",{"_index":1260,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["minimizar",{"_index":1609,"title":{},"body":{"index.html":{}}}],["minlength",{"_index":671,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":675,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minutos",{"_index":1599,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":1484,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missingpasswordupdateexception",{"_index":848,"title":{"classes/MissingPasswordUpdateException.html":{}},"body":{"classes/MissingPasswordUpdateException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["mit",{"_index":1637,"title":{},"body":{"index.html":{},"license.html":{}}}],["mode",{"_index":547,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["models/category/category.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["models/product/product.module",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["models/purchase/purchase.module",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["models/user/user.module",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["modify",{"_index":1659,"title":{},"body":{"license.html":{}}}],["modo",{"_index":1567,"title":{},"body":{"index.html":{}}}],["module",{"_index":105,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":107,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["monetários",{"_index":1622,"title":{},"body":{"index.html":{}}}],["more",{"_index":18,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{}}}],["ms",{"_index":1469,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["multer",{"_index":1781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multermodule",{"_index":1056,"title":{},"body":{"modules/ProductModule.html":{}}}],["multermodule.register(multeruploadconfig",{"_index":1060,"title":{},"body":{"modules/ProductModule.html":{}}}],["multeroptions",{"_index":1758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multeruploadconfig",{"_index":1027,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["multiple",{"_index":1088,"title":{},"body":{"injectables/ProductService.html":{}}}],["multiplied",{"_index":1141,"title":{},"body":{"classes/Purchase.html":{}}}],["máquina",{"_index":1539,"title":{},"body":{"index.html":{}}}],["mínimo",{"_index":1585,"title":{},"body":{"index.html":{}}}],["na",{"_index":1544,"title":{},"body":{"index.html":{}}}],["name",{"_index":35,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryNameInUseException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["name.substring(1).tolocalelowercase",{"_index":565,"title":{},"body":{"injectables/CategoryService.html":{}}}],["name.tolocalelowercase",{"_index":1114,"title":{},"body":{"injectables/ProductService.html":{}}}],["name[0].touppercase",{"_index":564,"title":{},"body":{"injectables/CategoryService.html":{}}}],["names",{"_index":816,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["ndice",{"_index":1518,"title":{},"body":{"index.html":{}}}],["need",{"_index":43,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["needed",{"_index":570,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserRoleDto.html":{}}}],["needs",{"_index":16,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/ProductController.html":{}}}],["nestinterceptor",{"_index":718,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["nestjs",{"_index":19,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"index.html":{}}}],["nestjs/cli",{"_index":1457,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":50,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":51,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"modules/AppModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1461,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":52,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1057,"title":{},"body":{"modules/ProductModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/FileUploadDto.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserWithoutPassword.html":{},"dependencies.html":{}}}],["new",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/JwtExceptionHandler.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newrefreshtoken",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":712,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["next.handle().pipe",{"_index":728,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["node.js",{"_index":1534,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":1687,"title":{},"body":{"license.html":{}}}],["normal",{"_index":1178,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["nos",{"_index":1616,"title":{},"body":{"index.html":{}}}],["notbeforeerror",{"_index":813,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["note",{"_index":1137,"title":{},"body":{"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["notfoundexception",{"_index":511,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{}}}],["notfoundexception(error.message",{"_index":1354,"title":{},"body":{"classes/UserInputExceptionHandler.html":{}}}],["notice",{"_index":1672,"title":{},"body":{"license.html":{}}}],["notpurchaseownerexception",{"_index":855,"title":{"classes/NotPurchaseOwnerException.html":{}},"body":{"classes/NotPurchaseOwnerException.html":{},"injectables/PurchaseService.html":{},"coverage.html":{}}}],["number",{"_index":583,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{},"miscellaneous/functions.html":{}}}],["o",{"_index":1533,"title":{},"body":{"index.html":{}}}],["object",{"_index":887,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"miscellaneous/variables.html":{}}}],["object.values(error.meta)[0][0",{"_index":933,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["object.values(errormeta)[0][0",{"_index":932,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["observable",{"_index":48,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{}}}],["obtaining",{"_index":1649,"title":{},"body":{"license.html":{}}}],["offices",{"_index":622,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["offset",{"_index":541,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["old",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["omitting",{"_index":1417,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["omittype",{"_index":608,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UserWithoutPassword.html":{}}}],["omittype(product",{"_index":615,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["omittype(user",{"_index":1419,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["once",{"_index":1496,"title":{},"body":{"miscellaneous/functions.html":{}}}],["one",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["onmoduleinit",{"_index":952,"title":{},"body":{"injectables/PrismaService.html":{}}}],["optional",{"_index":37,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"miscellaneous/functions.html":{}}}],["orderby",{"_index":549,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["ordering",{"_index":435,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["orm",{"_index":865,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{}}}],["os",{"_index":1581,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":1698,"title":{},"body":{"license.html":{}}}],["out",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":1706,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":1186,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["owner.exception",{"_index":1229,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["owner.exception.ts",{"_index":857,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"coverage.html":{}}}],["owner.exception.ts:4",{"_index":862,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{}}}],["package",{"_index":1456,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":429,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["pages",{"_index":1517,"title":{},"body":{"index.html":{}}}],["pagination",{"_index":426,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["para",{"_index":1505,"title":{},"body":{"index.html":{}}}],["param",{"_index":455,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["param('id",{"_index":478,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["param('name",{"_index":481,"title":{},"body":{"controllers/CategoryController.html":{}}}],["parameters",{"_index":33,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"miscellaneous/functions.html":{}}}],["partial",{"_index":1275,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype",{"_index":1277,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createcategorydto",{"_index":1278,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["partialtype(createproductdto",{"_index":1280,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createpurchasedto",{"_index":1282,"title":{},"body":{"classes/UpdatePurchaseDto.html":{}}}],["partialtype(createuserdto",{"_index":1288,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["particular",{"_index":1685,"title":{},"body":{"license.html":{}}}],["passport",{"_index":11,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["passportmodule",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":86,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["password",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/LoginCredentialsDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["password.entity",{"_index":1339,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["password.entity.ts",{"_index":1414,"title":{},"body":{"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["password.exception",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["password.exception..ts",{"_index":792,"title":{},"body":{"classes/InvalidEmailOrPasswordException.html":{},"coverage.html":{}}}],["password.exception..ts:6",{"_index":795,"title":{},"body":{"classes/InvalidEmailOrPasswordException.html":{}}}],["pasta",{"_index":1545,"title":{},"body":{"index.html":{}}}],["patch",{"_index":454,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["patch('/review/:id",{"_index":1203,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["patch(':id",{"_index":483,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["patch('picture/:id",{"_index":1047,"title":{},"body":{"controllers/ProductController.html":{}}}],["patch('role",{"_index":1347,"title":{},"body":{"controllers/UserController.html":{}}}],["path.extname(file.originalname).tolowercase",{"_index":1776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payed",{"_index":1140,"title":{},"body":{"classes/Purchase.html":{}}}],["payload",{"_index":85,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{}}}],["payload.sub",{"_index":102,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{}}}],["payload.tokenfamily",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.ts",{"_index":1719,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["payload.userrole",{"_index":104,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["per",{"_index":433,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["percentage",{"_index":602,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["permission",{"_index":1643,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1666,"title":{},"body":{"license.html":{}}}],["person",{"_index":1648,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1667,"title":{},"body":{"license.html":{}}}],["picktype",{"_index":643,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/ReviewPurchaseDto.html":{}}}],["picktype(purchase",{"_index":647,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/ReviewPurchaseDto.html":{}}}],["picture",{"_index":557,"title":{},"body":{"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"miscellaneous/functions.html":{}}}],["picture'})@isadmin()@fileupload()@patch('picture/:id",{"_index":1020,"title":{},"body":{"controllers/ProductController.html":{}}}],["picture.png",{"_index":757,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["please",{"_index":852,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["png",{"_index":1024,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["pode",{"_index":1573,"title":{},"body":{"index.html":{}}}],["porta",{"_index":1571,"title":{},"body":{"index.html":{}}}],["portions",{"_index":1676,"title":{},"body":{"license.html":{}}}],["possible",{"_index":815,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["post",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["post('login",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logoutall",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgresql",{"_index":1611,"title":{},"body":{"index.html":{}}}],["postgresql://username:password@localhost:5432/ecommerce",{"_index":1589,"title":{},"body":{"index.html":{}}}],["poucos",{"_index":1598,"title":{},"body":{"index.html":{}}}],["precisar",{"_index":1531,"title":{},"body":{"index.html":{}}}],["preenchendo",{"_index":1556,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":406,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["prettier",{"_index":1633,"title":{},"body":{"index.html":{}}}],["price",{"_index":587,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{}}}],["prisma",{"_index":395,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["prisma.categoryuncheckedcreateinput",{"_index":396,"title":{},"body":{"classes/Category.html":{}}}],["prisma.categoryuncheckedcreatenestedmanywithoutproductsinput",{"_index":1072,"title":{},"body":{"injectables/ProductService.html":{}}}],["prisma.decimal",{"_index":973,"title":{},"body":{"classes/Product.html":{},"classes/Purchase.html":{}}}],["prisma.productuncheckedcreateinput",{"_index":987,"title":{},"body":{"classes/Product.html":{}}}],["prisma.purchaseuncheckedcreateinput",{"_index":1143,"title":{},"body":{"classes/Purchase.html":{}}}],["prisma.service",{"_index":946,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.useruncheckedcreateinput",{"_index":1305,"title":{},"body":{"classes/User.html":{}}}],["prisma/client",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"dependencies.html":{}}}],["prisma/client/runtime",{"_index":609,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/PrismaExceptionHandler.html":{}}}],["prisma/prisma.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":950,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientknownrequesterror",{"_index":877,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror",{"_index":903,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror.foreignconstraintviolation",{"_index":922,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror.recordsnotfound",{"_index":924,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaerror.uniqueconstraintviolation",{"_index":917,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["prismaexceptionhandler",{"_index":723,"title":{"classes/PrismaExceptionHandler.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["prismaexceptionhandler().handle(error",{"_index":731,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["prismamodule",{"_index":113,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":252,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["probably",{"_index":1380,"title":{},"body":{"injectables/UserService.html":{}}}],["process.env.access_jwt_secret",{"_index":1735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.refresh_jwt_secret",{"_index":1739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.exit",{"_index":961,"title":{},"body":{"injectables/PrismaService.html":{}}}],["product",{"_index":579,"title":{"classes/Product.html":{}},"body":{"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["product'})@apibearerauth()@patch('/review/:id",{"_index":1184,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["product'})@isadmin()@delete(':id')@httpcode(httpstatus.no_content",{"_index":1013,"title":{},"body":{"controllers/ProductController.html":{}}}],["product'})@isadmin()@patch(':id",{"_index":1016,"title":{},"body":{"controllers/ProductController.html":{}}}],["product'})@isadmin()@post",{"_index":1002,"title":{},"body":{"controllers/ProductController.html":{}}}],["product.controller",{"_index":1055,"title":{},"body":{"modules/ProductModule.html":{}}}],["product.dto",{"_index":1033,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts",{"_index":578,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:26",{"_index":604,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:36",{"_index":586,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:44",{"_index":600,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:51",{"_index":606,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:59",{"_index":598,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:67",{"_index":595,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.service",{"_index":1035,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{}}}],["product/dto/find",{"_index":462,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["productcontroller",{"_index":997,"title":{"controllers/ProductController.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{}}}],["productid",{"_index":637,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/FindPurchasesDto.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["productmodule",{"_index":114,"title":{"modules/ProductModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules.html":{},"overview.html":{}}}],["productname",{"_index":551,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindProductsDto.html":{},"injectables/ProductService.html":{}}}],["productnameinuseexception",{"_index":907,"title":{"classes/ProductNameInUseException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"coverage.html":{}}}],["productnotfoundexception",{"_index":909,"title":{"classes/ProductNotFoundException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductNotFoundException.html":{},"coverage.html":{}}}],["products",{"_index":476,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindProductsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"miscellaneous/functions.html":{}}}],["products'})@isadmin()@get('/id/:id",{"_index":439,"title":{},"body":{"controllers/CategoryController.html":{}}}],["products'})@public()@get",{"_index":1005,"title":{},"body":{"controllers/ProductController.html":{}}}],["products'})@public()@get(':name",{"_index":443,"title":{},"body":{"controllers/CategoryController.html":{}}}],["products.dto",{"_index":463,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["products.dto.ts",{"_index":769,"title":{},"body":{"classes/FindProductsDto.html":{},"coverage.html":{}}}],["products.dto.ts:11",{"_index":772,"title":{},"body":{"classes/FindProductsDto.html":{}}}],["products.dto.ts:20",{"_index":771,"title":{},"body":{"classes/FindProductsDto.html":{}}}],["products.dto.ts:29",{"_index":770,"title":{},"body":{"classes/FindProductsDto.html":{}}}],["productservice",{"_index":1034,"title":{"injectables/ProductService.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{},"overview.html":{}}}],["productserviceinputexception",{"_index":738,"title":{"classes/ProductServiceInputException.html":{}},"body":{"classes/FileTypeError.html":{},"classes/ProductServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["productstoskip",{"_index":552,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["produtos",{"_index":1509,"title":{},"body":{"index.html":{}}}],["profile",{"_index":1322,"title":{},"body":{"controllers/UserController.html":{}}}],["profile'})@apibearerauth()@get",{"_index":1320,"title":{},"body":{"controllers/UserController.html":{}}}],["projeto",{"_index":1537,"title":{},"body":{"index.html":{}}}],["promise",{"_index":47,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":390,"title":{"properties.html":{}},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"properties.html":{}}}],["provide",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":1677,"title":{},"body":{"license.html":{}}}],["providers",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":41,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public.decorator",{"_index":55,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"controllers/AuthController.html":{}}}],["publish",{"_index":1661,"title":{},"body":{"license.html":{}}}],["purchase",{"_index":636,"title":{"classes/Purchase.html":{}},"body":{"classes/CreatePurchaseDto.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["purchase'})@apibearerauth()@post",{"_index":1163,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchase'})@isadmin()@delete(':id')@httpcode(httpstatus.no_content",{"_index":1179,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchase'})@isadmin()@patch(':id",{"_index":1188,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchase.amount",{"_index":1243,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["purchase.controller",{"_index":1211,"title":{},"body":{"modules/PurchaseModule.html":{}}}],["purchase.dto",{"_index":1190,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdatePurchaseDto.html":{}}}],["purchase.dto.ts",{"_index":635,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["purchase.dto.ts:14",{"_index":642,"title":{},"body":{"classes/CreatePurchaseDto.html":{}}}],["purchase.dto.ts:16",{"_index":1257,"title":{},"body":{"classes/ReviewPurchaseDto.html":{}}}],["purchase.dto.ts:23",{"_index":639,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/ReviewPurchaseDto.html":{}}}],["purchase.productid",{"_index":1241,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["purchase.service",{"_index":1194,"title":{},"body":{"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{}}}],["purchase.userid",{"_index":1238,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["purchasecontroller",{"_index":1158,"title":{"controllers/PurchaseController.html":{}},"body":{"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"coverage.html":{}}}],["purchased",{"_index":640,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["purchaseid",{"_index":1175,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["purchasemodule",{"_index":115,"title":{"modules/PurchaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PurchaseModule.html":{},"modules.html":{},"overview.html":{}}}],["purchasenotfoundexception",{"_index":910,"title":{"classes/PurchaseNotFoundException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/PurchaseNotFoundException.html":{},"coverage.html":{}}}],["purchases",{"_index":776,"title":{},"body":{"classes/FindPurchasesDto.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["purchases'})@apibearerauth()@get",{"_index":1172,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchases'})@isadmin()@get('/admin",{"_index":1167,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["purchases.dto",{"_index":1191,"title":{},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["purchases.dto.ts",{"_index":775,"title":{},"body":{"classes/FindPurchasesDto.html":{},"coverage.html":{}}}],["purchases.dto.ts:11",{"_index":780,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["purchases.dto.ts:18",{"_index":779,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["purchases.dto.ts:27",{"_index":778,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["purchases.dto.ts:36",{"_index":777,"title":{},"body":{"classes/FindPurchasesDto.html":{}}}],["purchaseservice",{"_index":1193,"title":{"injectables/PurchaseService.html":{}},"body":{"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"injectables/PurchaseService.html":{},"coverage.html":{},"overview.html":{}}}],["purchaseserviceinputexception",{"_index":861,"title":{"classes/PurchaseServiceInputException.html":{}},"body":{"classes/NotPurchaseOwnerException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["purchasestoskip",{"_index":1232,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["purpose",{"_index":1686,"title":{},"body":{"license.html":{}}}],["que",{"_index":1586,"title":{},"body":{"index.html":{}}}],["query",{"_index":457,"title":{},"body":{"controllers/CategoryController.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{}}}],["quot",{"_index":1092,"title":{},"body":{"injectables/ProductService.html":{}}}],["quot;brand1",{"_index":1095,"title":{},"body":{"injectables/ProductService.html":{}}}],["raiz",{"_index":1555,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["received",{"_index":838,"title":{},"body":{"classes/LoginResponse.html":{}}}],["recent",{"_index":1170,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["refer",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtExceptionHandler.html":{}}}],["reflect",{"_index":1474,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":27,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["refreshes",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshing",{"_index":804,"title":{},"body":{"classes/InvalidRefreshTokenException.html":{}}}],["refreshjwtconfig",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refreshtoken",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtoken(refreshtoken",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtoken(undefined",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokencontent",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokencontent.sub",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokencontent.tokenfamily",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokencredentials",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokendto",{"_index":171,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["refreshtokenpayload",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/typealiases.html":{}}}],["regexp",{"_index":740,"title":{},"body":{"classes/FileTypeError.html":{}}}],["registered",{"_index":502,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["regular",{"_index":1785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rejectonnotfound",{"_index":558,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["related",{"_index":1327,"title":{},"body":{"controllers/UserController.html":{}}}],["remove",{"_index":413,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["remove(@param('id",{"_index":487,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{}}}],["remove(id",{"_index":445,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["remove(request",{"_index":1324,"title":{},"body":{"controllers/UserController.html":{}}}],["removed",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["removerefreshtokenfamilyifcompromised",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["removerefreshtokenfamilyifcompromised(userid",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["removes",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["replacing",{"_index":1379,"title":{},"body":{"injectables/UserService.html":{}}}],["req",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["request",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["request.headers['accept",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["request.headers['user",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["request.ip",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["request.user",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PurchaseController.html":{},"guards/RolesGuard.html":{}}}],["request.user['userid",{"_index":1345,"title":{},"body":{"controllers/UserController.html":{}}}],["requests",{"_index":1374,"title":{},"body":{"injectables/UserService.html":{}}}],["reset",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["respective",{"_index":716,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["response",{"_index":837,"title":{},"body":{"classes/LoginResponse.html":{}}}],["responsible",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["restriction",{"_index":1655,"title":{},"body":{"license.html":{}}}],["results",{"_index":69,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":66,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1723,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["returns",{"_index":45,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["reuse",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["reuso",{"_index":1526,"title":{},"body":{"index.html":{}}}],["review",{"_index":860,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{}}}],["review(request",{"_index":1181,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["review(userid",{"_index":1223,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["reviewcomment",{"_index":1127,"title":{},"body":{"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["reviewnote",{"_index":1128,"title":{},"body":{"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["reviewpurchasedto",{"_index":1182,"title":{"classes/ReviewPurchaseDto.html":{}},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/ReviewPurchaseDto.html":{},"coverage.html":{}}}],["reviews",{"_index":1183,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["rights",{"_index":1658,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1477,"title":{},"body":{"dependencies.html":{}}}],["roda",{"_index":1562,"title":{},"body":{"index.html":{}}}],["rodar",{"_index":1580,"title":{},"body":{"index.html":{}}}],["role",{"_index":1226,"title":{},"body":{"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role'})@isadmin()@patch('role",{"_index":1333,"title":{},"body":{"controllers/UserController.html":{}}}],["role.admin",{"_index":1237,"title":{},"body":{"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{}}}],["role.dto",{"_index":1336,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role.dto.ts",{"_index":1290,"title":{},"body":{"classes/UpdateUserRoleDto.html":{},"coverage.html":{}}}],["role.dto.ts:11",{"_index":1291,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["role.dto.ts:18",{"_index":1293,"title":{},"body":{"classes/UpdateUserRoleDto.html":{}}}],["rolesguard",{"_index":1263,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rotaterefreshtoken",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["rotaterefreshtoken(refreshtoken",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["rotates",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["rotation#automatic",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["rotação",{"_index":1524,"title":{},"body":{"index.html":{}}}],["route",{"_index":15,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"classes/LoginResponse.html":{},"guards/RolesGuard.html":{}}}],["rxjs",{"_index":53,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["saltrounds",{"_index":1741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["same",{"_index":1416,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["saved",{"_index":590,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"injectables/UserService.html":{}}}],["saverefreshtoken",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["saverefreshtoken(refreshtokencredentials",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["saves",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["search",{"_index":529,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["searching",{"_index":434,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{}}}],["secret",{"_index":1734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":99,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["select",{"_index":555,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["sell",{"_index":1664,"title":{},"body":{"license.html":{}}}],["senhas",{"_index":1620,"title":{},"body":{"index.html":{}}}],["sensitive",{"_index":1744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["service",{"_index":376,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["servidor",{"_index":1561,"title":{},"body":{"index.html":{}}}],["session",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessions",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessions'})@apibearerauth()@post('logoutall')@httpcode(httpstatus.ok",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["set",{"_index":1332,"title":{},"body":{"controllers/UserController.html":{}}}],["setmetadata(is_public_key",{"_index":1750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sets",{"_index":1755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":1673,"title":{},"body":{"license.html":{}}}],["show",{"_index":531,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{}}}],["showing",{"_index":431,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["shutdown",{"_index":958,"title":{},"body":{"injectables/PrismaService.html":{}}}],["signals",{"_index":959,"title":{},"body":{"injectables/PrismaService.html":{}}}],["silent",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["single",{"_index":1087,"title":{},"body":{"injectables/ProductService.html":{}}}],["singlespaceurlname",{"_index":1117,"title":{},"body":{"injectables/ProductService.html":{}}}],["singlespaceurlname.split",{"_index":1120,"title":{},"body":{"injectables/ProductService.html":{}}}],["size",{"_index":1757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skip",{"_index":544,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["software",{"_index":1651,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"modules/PurchaseModule.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"classes/UserWithoutPassword.html":{}}}],["spaces",{"_index":1085,"title":{},"body":{"injectables/ProductService.html":{}}}],["spacetohyphenurlname",{"_index":1119,"title":{},"body":{"injectables/ProductService.html":{}}}],["specific",{"_index":698,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["src/.../access",{"_index":1717,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../file",{"_index":1488,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../file.ts",{"_index":1720,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../gettokenexpirationdate.ts",{"_index":1486,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../hash.config.ts",{"_index":1730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../is",{"_index":1489,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../jwt.config.ts",{"_index":1729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1487,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../multer",{"_index":1732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":1731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../refresh",{"_index":1721,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.module.ts",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/access",{"_index":6,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:31",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:49",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:67",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:76",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:86",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:110",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:125",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:138",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:165",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:179",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:18",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:208",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:224",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:242",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:35",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:58",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:87",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:92",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:97",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/login",{"_index":829,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.response.ts",{"_index":836,"title":{},"body":{"classes/LoginResponse.html":{},"coverage.html":{}}}],["src/auth/dto/login.response.ts:13",{"_index":842,"title":{},"body":{"classes/LoginResponse.html":{}}}],["src/auth/dto/login.response.ts:7",{"_index":841,"title":{},"body":{"classes/LoginResponse.html":{}}}],["src/auth/dto/logout.dto.ts",{"_index":845,"title":{},"body":{"classes/LogoutDto.html":{},"coverage.html":{}}}],["src/auth/dto/logout.dto.ts:10",{"_index":847,"title":{},"body":{"classes/LogoutDto.html":{}}}],["src/auth/dto/refresh",{"_index":1252,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/exceptions/auth",{"_index":375,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["src/auth/exceptions/invalid",{"_index":791,"title":{},"body":{"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidRefreshTokenException.html":{},"coverage.html":{}}}],["src/auth/public.decorator",{"_index":458,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["src/auth/public.decorator.ts",{"_index":1430,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/types/access",{"_index":1722,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/auth/types/refresh",{"_index":1727,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/common/decorators/file",{"_index":1031,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/decorators/is",{"_index":460,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/common/exceptions/category/category",{"_index":495,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["src/common/exceptions/product/product",{"_index":908,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"coverage.html":{}}}],["src/common/exceptions/purchase/purchase",{"_index":911,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/PurchaseNotFoundException.html":{},"coverage.html":{}}}],["src/common/exceptions/user/email",{"_index":687,"title":{},"body":{"classes/EmailInUseException.html":{},"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["src/common/exceptions/user/user",{"_index":913,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts",{"_index":1264,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts:12",{"_index":1266,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/guards/roles.guard.ts:22",{"_index":1267,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/interceptors/exception.interceptor.ts",{"_index":702,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/exception.interceptor.ts:24",{"_index":714,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["src/common/interceptors/handlers/exception.handler.ts",{"_index":692,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"coverage.html":{}}}],["src/common/interceptors/handlers/exception.handler.ts:4",{"_index":696,"title":{},"body":{"interfaces/ExceptionHandler.html":{}}}],["src/common/interceptors/handlers/jwt",{"_index":806,"title":{},"body":{"classes/JwtExceptionHandler.html":{},"coverage.html":{}}}],["src/common/interceptors/handlers/prisma",{"_index":864,"title":{},"body":{"classes/PrismaExceptionHandler.html":{},"coverage.html":{}}}],["src/common/interceptors/handlers/user",{"_index":1350,"title":{},"body":{"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["src/config/hash.config",{"_index":1391,"title":{},"body":{"injectables/UserService.html":{}}}],["src/config/hash.config.ts",{"_index":1437,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/jwt.config",{"_index":90,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{}}}],["src/config/jwt.config.ts",{"_index":1438,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/multer",{"_index":1058,"title":{},"body":{"modules/ProductModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1442,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/models/category/category.controller.ts",{"_index":405,"title":{},"body":{"controllers/CategoryController.html":{},"coverage.html":{}}}],["src/models/category/category.controller.ts:37",{"_index":419,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:51",{"_index":424,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:61",{"_index":440,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:72",{"_index":444,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:83",{"_index":452,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.controller.ts:95",{"_index":447,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/models/category/category.module.ts",{"_index":492,"title":{},"body":{"modules/CategoryModule.html":{}}}],["src/models/category/category.service.ts",{"_index":514,"title":{},"body":{"injectables/CategoryService.html":{},"coverage.html":{}}}],["src/models/category/category.service.ts:102",{"_index":534,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:119",{"_index":533,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:124",{"_index":522,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:13",{"_index":520,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:132",{"_index":536,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:22",{"_index":526,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:36",{"_index":528,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:54",{"_index":530,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/category.service.ts:77",{"_index":532,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/models/category/dto/create",{"_index":567,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/models/category/dto/find",{"_index":758,"title":{},"body":{"classes/FindCategoriesDto.html":{},"coverage.html":{}}}],["src/models/category/dto/update",{"_index":1273,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/models/category/entities/category.entity.ts",{"_index":388,"title":{},"body":{"classes/Category.html":{},"coverage.html":{}}}],["src/models/category/entities/category.entity.ts:15",{"_index":394,"title":{},"body":{"classes/Category.html":{}}}],["src/models/category/entities/category.entity.ts:9",{"_index":393,"title":{},"body":{"classes/Category.html":{}}}],["src/models/product/dto/create",{"_index":577,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/models/product/dto/file",{"_index":749,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["src/models/product/dto/find",{"_index":768,"title":{},"body":{"classes/FindProductsDto.html":{},"coverage.html":{}}}],["src/models/product/dto/update",{"_index":1279,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/models/product/entities/product.entity.ts",{"_index":972,"title":{},"body":{"classes/Product.html":{},"coverage.html":{}}}],["src/models/product/entities/product.entity.ts:15",{"_index":981,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:21",{"_index":984,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:27",{"_index":982,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:35",{"_index":974,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:41",{"_index":979,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:46",{"_index":983,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:52",{"_index":978,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:58",{"_index":976,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/entities/product.entity.ts:9",{"_index":980,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product/exceptions/file",{"_index":734,"title":{},"body":{"classes/FileTypeError.html":{},"coverage.html":{}}}],["src/models/product/exceptions/product",{"_index":1125,"title":{},"body":{"classes/ProductServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["src/models/product/product.controller.ts",{"_index":998,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{}}}],["src/models/product/product.controller.ts:105",{"_index":1014,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:39",{"_index":1003,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:51",{"_index":1006,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:59",{"_index":1009,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:67",{"_index":1012,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:82",{"_index":1021,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.controller.ts:93",{"_index":1017,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/models/product/product.module.ts",{"_index":1054,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/models/product/product.service.ts",{"_index":1062,"title":{},"body":{"injectables/ProductService.html":{},"coverage.html":{}}}],["src/models/product/product.service.ts:104",{"_index":1097,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:116",{"_index":1078,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:129",{"_index":1100,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:14",{"_index":1067,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:144",{"_index":1069,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:23",{"_index":1073,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:41",{"_index":1102,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:52",{"_index":1074,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:71",{"_index":1075,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:80",{"_index":1076,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/product.service.ts:89",{"_index":1098,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/models/product/types/file.ts",{"_index":1725,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/models/purchase/dto/create",{"_index":634,"title":{},"body":{"classes/CreatePurchaseDto.html":{},"coverage.html":{}}}],["src/models/purchase/dto/find",{"_index":774,"title":{},"body":{"classes/FindPurchasesDto.html":{},"coverage.html":{}}}],["src/models/purchase/dto/review",{"_index":1255,"title":{},"body":{"classes/ReviewPurchaseDto.html":{},"coverage.html":{}}}],["src/models/purchase/dto/update",{"_index":1281,"title":{},"body":{"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["src/models/purchase/entities/purchase.entity.ts",{"_index":1126,"title":{},"body":{"classes/Purchase.html":{},"coverage.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:13",{"_index":1142,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:18",{"_index":1133,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:24",{"_index":1130,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:31",{"_index":1139,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:36",{"_index":1136,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:41",{"_index":1134,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:46",{"_index":1131,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/entities/purchase.entity.ts:8",{"_index":1132,"title":{},"body":{"classes/Purchase.html":{}}}],["src/models/purchase/exceptions/not",{"_index":856,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"coverage.html":{}}}],["src/models/purchase/exceptions/purchase",{"_index":1251,"title":{},"body":{"classes/PurchaseServiceInputException.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["src/models/purchase/purchase.controller.ts",{"_index":1159,"title":{},"body":{"controllers/PurchaseController.html":{},"coverage.html":{}}}],["src/models/purchase/purchase.controller.ts:101",{"_index":1185,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:115",{"_index":1189,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:127",{"_index":1180,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:38",{"_index":1164,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:55",{"_index":1168,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:69",{"_index":1173,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.controller.ts:85",{"_index":1177,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["src/models/purchase/purchase.module.ts",{"_index":1210,"title":{},"body":{"modules/PurchaseModule.html":{}}}],["src/models/purchase/purchase.service.ts",{"_index":1212,"title":{},"body":{"injectables/PurchaseService.html":{},"coverage.html":{}}}],["src/models/purchase/purchase.service.ts:121",{"_index":1225,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:144",{"_index":1222,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:148",{"_index":1216,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:16",{"_index":1214,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:25",{"_index":1218,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:46",{"_index":1219,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:74",{"_index":1221,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/purchase/purchase.service.ts:96",{"_index":1224,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["src/models/user/dto/create",{"_index":655,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/models/user/dto/delete",{"_index":683,"title":{},"body":{"classes/DeleteUserDto.html":{},"coverage.html":{}}}],["src/models/user/dto/update",{"_index":1284,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"coverage.html":{}}}],["src/models/user/entities/user",{"_index":1413,"title":{},"body":{"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["src/models/user/entities/user.entity",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/models/user/entities/user.entity.ts",{"_index":1295,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/models/user/entities/user.entity.ts:19",{"_index":1303,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:25",{"_index":1299,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:31",{"_index":1302,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:37",{"_index":1301,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:43",{"_index":1297,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:49",{"_index":1298,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:55",{"_index":1304,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/entities/user.entity.ts:9",{"_index":1300,"title":{},"body":{"classes/User.html":{}}}],["src/models/user/exceptions/invalid",{"_index":799,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{},"coverage.html":{}}}],["src/models/user/exceptions/missing",{"_index":849,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{},"coverage.html":{}}}],["src/models/user/exceptions/user",{"_index":1351,"title":{},"body":{"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["src/models/user/user.controller.ts",{"_index":1313,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/models/user/user.controller.ts:37",{"_index":1318,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:45",{"_index":1321,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:55",{"_index":1330,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:68",{"_index":1334,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.controller.ts:79",{"_index":1326,"title":{},"body":{"controllers/UserController.html":{}}}],["src/models/user/user.module",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/models/user/user.module.ts",{"_index":1359,"title":{},"body":{"modules/UserModule.html":{}}}],["src/models/user/user.service",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/models/user/user.service.ts",{"_index":1362,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/models/user/user.service.ts:111",{"_index":1378,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:139",{"_index":1387,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:18",{"_index":1366,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:27",{"_index":1367,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:48",{"_index":1373,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:60",{"_index":1369,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:67",{"_index":1384,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:84",{"_index":1385,"title":{},"body":{"injectables/UserService.html":{}}}],["src/models/user/user.service.ts:98",{"_index":1383,"title":{},"body":{"injectables/UserService.html":{}}}],["src/prisma/prisma.module",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{}}}],["src/prisma/prisma.module.ts",{"_index":944,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":947,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:15",{"_index":965,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:25",{"_index":955,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/util/gettokenexpirationdate",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/util/gettokenexpirationdate.ts",{"_index":1452,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start:dev",{"_index":1569,"title":{},"body":{"index.html":{}}}],["started",{"_index":1500,"title":{"index.html":{},"license.html":{}},"body":{}}],["starting",{"_index":428,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{}}}],["starts",{"_index":1495,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statements",{"_index":1423,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":498,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["stock",{"_index":582,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{}}}],["storage",{"_index":1759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategy",{"_index":88,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["street",{"_index":681,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["string",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"miscellaneous/variables.html":{}}}],["studio",{"_index":1579,"title":{},"body":{"index.html":{}}}],["studio:test",{"_index":1606,"title":{},"body":{"index.html":{}}}],["sua",{"_index":1538,"title":{},"body":{"index.html":{}}}],["sub",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":1669,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1663,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1675,"title":{},"body":{"license.html":{}}}],["successfully",{"_index":839,"title":{},"body":{"classes/LoginResponse.html":{}}}],["suites",{"_index":1600,"title":{},"body":{"index.html":{}}}],["summary",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/PurchaseController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":60,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{}}}],["super('category",{"_index":507,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{}}}],["super('e",{"_index":688,"title":{},"body":{"classes/EmailInUseException.html":{}}}],["super('invalid",{"_index":797,"title":{},"body":{"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{}}}],["super('please",{"_index":854,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["super('product",{"_index":1061,"title":{},"body":{"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{}}}],["super('purchase",{"_index":863,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"classes/PurchaseNotFoundException.html":{}}}],["super('user",{"_index":1361,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["super(`file",{"_index":747,"title":{},"body":{"classes/FileTypeError.html":{}}}],["super(message",{"_index":386,"title":{},"body":{"classes/AuthServiceInputException.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserServiceInputException.html":{}}}],["super.canactivate(context",{"_index":68,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["supertest",{"_index":1631,"title":{},"body":{"index.html":{}}}],["support",{"_index":1703,"title":{},"body":{"modules.html":{}}}],["supports",{"_index":743,"title":{},"body":{"classes/FileTypeError.html":{}}}],["svg",{"_index":1704,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1480,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["switch",{"_index":914,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["system",{"_index":503,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"controllers/UserController.html":{},"classes/UserNotFoundException.html":{}}}],["table",{"_index":1455,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1454,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":545,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["tecnologias",{"_index":1521,"title":{},"body":{"index.html":{}}}],["ter",{"_index":1532,"title":{},"body":{"index.html":{}}}],["test",{"_index":1604,"title":{},"body":{"index.html":{}}}],["test:all",{"_index":1602,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1605,"title":{},"body":{"index.html":{}}}],["test?schema=public",{"_index":1590,"title":{},"body":{"index.html":{}}}],["testes",{"_index":1582,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":969,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":970,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.authservice.findalltokens(userid",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(email",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(refreshtoken",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logoutall(userid",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken(refreshtoken",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.calculatetotalprice",{"_index":1244,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.calculatetotalprice(createpurchasedto",{"_index":1230,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.capitalizeonlyfirstletter(createcategorydto.name",{"_index":538,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.capitalizeonlyfirstletter(name",{"_index":559,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.capitalizeonlyfirstletter(updatecategorydto.name",{"_index":566,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryservice.create(createcategorydto",{"_index":474,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findall(findcategoriesdto",{"_index":475,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findonebyid(id",{"_index":479,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findonebyname(name",{"_index":482,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.remove(id",{"_index":488,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.update(id",{"_index":484,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.connectcategoriesbyid(createproductdto.categories",{"_index":1104,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.createrefreshtoken",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.formaturlname(createproductdto.name",{"_index":1103,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.formaturlname(updateproductdto.name",{"_index":1122,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.generateaccesstoken",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generateaccesstoken(payload",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getuserrole(refreshtokencontent.sub",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashifupdatingpassword(id",{"_index":1402,"title":{},"body":{"injectables/UserService.html":{}}}],["this.iscategoryerror(error",{"_index":928,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.iscategorynameconstraintviolation(error",{"_index":920,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.iscreateproducterror(error",{"_index":927,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isemailconstraintviolation(error.meta",{"_index":918,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isjwtexception(error",{"_index":825,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["this.isprismaunknownerror(error",{"_index":929,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isproducterror(error",{"_index":926,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isproductnameconstraintviolation(error",{"_index":919,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.ispurchaseerror(error",{"_index":923,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.isusererror(error",{"_index":925,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["this.jwterrornames.includes(error.name",{"_index":828,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["this.jwtservice.signasync",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(refreshtoken",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.category.create",{"_index":539,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.delete",{"_index":563,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.findmany",{"_index":543,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.findunique",{"_index":553,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.category.update",{"_index":562,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.prisma.product.create",{"_index":1105,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.delete",{"_index":1112,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.findmany",{"_index":1108,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.product.findunique",{"_index":1109,"title":{},"body":{"injectables/ProductService.html":{},"injectables/PurchaseService.html":{}}}],["this.prisma.product.update",{"_index":1106,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.prisma.purchase.create",{"_index":1231,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.purchase.delete",{"_index":1246,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.purchase.findmany",{"_index":1233,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.purchase.findunique",{"_index":1236,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.purchase.update",{"_index":1239,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["this.prisma.user.create",{"_index":1399,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.delete",{"_index":1408,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":1400,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":1403,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prismaservice.usertokens.create",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.usertokens.deletemany",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.usertokens.findmany",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.productservice.create(createproductdto",{"_index":1039,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findall(findallproductsdto",{"_index":1041,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findonebyid(id",{"_index":1043,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findonebyurlname(urlname",{"_index":1046,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.remove(id",{"_index":1050,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.update(id",{"_index":1049,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.uploadpicture(id",{"_index":1048,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.purchaseservice.create(userid",{"_index":1197,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.findall(findpurchasesdto",{"_index":1199,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.findone(purchaseid",{"_index":1202,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.remove(id",{"_index":1206,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.review(userid",{"_index":1204,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.purchaseservice.update(id",{"_index":1205,"title":{},"body":{"controllers/PurchaseController.html":{}}}],["this.reflector.getallandoverride(is_admin_key",{"_index":1271,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":63,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{}}}],["this.removerefreshtokenfamilyifcompromised",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rotaterefreshtoken",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.saverefreshtoken",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatecategoryandname(id",{"_index":561,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.updateproductandurlname(id",{"_index":1111,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.userservice.create(createuserdto",{"_index":1343,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyemail(email",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyid(userid",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["this.userservice.remove(userid",{"_index":1349,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(userid",{"_index":1346,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateuserrole(updateuserroledto",{"_index":1348,"title":{},"body":{"controllers/UserController.html":{}}}],["this.validatecurrentpassword(id",{"_index":1406,"title":{},"body":{"injectables/UserService.html":{}}}],["this.validaterefreshtoken(refreshtoken",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validateuser(email",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PurchaseService.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{}}}],["thrown",{"_index":1382,"title":{},"body":{"injectables/UserService.html":{}}}],["throws",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"classes/EmailInUseException.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{}}}],["tmp",{"_index":1762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["today's",{"_index":1493,"title":{},"body":{"miscellaneous/functions.html":{}}}],["todos",{"_index":1593,"title":{},"body":{"index.html":{}}}],["token",{"_index":93,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["token'})@public()@post('refresh')@httpcode(httpstatus.ok",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["token.dto",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["token.dto.ts",{"_index":1253,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:10",{"_index":1254,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.exception",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["token.exception.ts",{"_index":803,"title":{},"body":{"classes/InvalidRefreshTokenException.html":{},"coverage.html":{}}}],["token.exception.ts:6",{"_index":805,"title":{},"body":{"classes/InvalidRefreshTokenException.html":{}}}],["tokenexpirederror",{"_index":811,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["tokenfamily",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["tokens'})@apibearerauth()@get('tokens",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens/refresh",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["tooling",{"_index":1608,"title":{},"body":{"index.html":{}}}],["tort",{"_index":1697,"title":{},"body":{"license.html":{}}}],["totalprice",{"_index":1129,"title":{},"body":{"classes/Purchase.html":{},"injectables/PurchaseService.html":{}}}],["totalprice.value",{"_index":1250,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["trailing",{"_index":1083,"title":{},"body":{"injectables/ProductService.html":{}}}],["transform",{"_index":704,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["transformer",{"_index":766,"title":{},"body":{"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"dependencies.html":{},"index.html":{}}}],["tratar",{"_index":1628,"title":{},"body":{"index.html":{}}}],["trimmedurlname",{"_index":1115,"title":{},"body":{"injectables/ProductService.html":{}}}],["trimmedurlname.replace(/\\s\\s+/g",{"_index":1118,"title":{},"body":{"injectables/ProductService.html":{}}}],["true",{"_index":67,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":859,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{}}}],["trying",{"_index":794,"title":{},"body":{"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{}}}],["turn",{"_index":1086,"title":{},"body":{"injectables/ProductService.html":{}}}],["turned",{"_index":985,"title":{},"body":{"classes/Product.html":{}}}],["type",{"_index":36,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"interfaces/ExceptionHandler.html":{},"injectables/ExceptionInterceptor.html":{},"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/JwtExceptionHandler.html":{},"classes/LoginCredentialsDto.html":{},"classes/LoginResponse.html":{},"classes/LogoutDto.html":{},"classes/PrismaExceptionHandler.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/PurchaseServiceInputException.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.exception.ts",{"_index":735,"title":{},"body":{"classes/FileTypeError.html":{},"coverage.html":{}}}],["type.exception.ts:6",{"_index":741,"title":{},"body":{"classes/FileTypeError.html":{}}}],["typealiases",{"_index":1715,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":699,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["types/access",{"_index":92,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["types/file",{"_index":756,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["types/refresh",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["typescript",{"_index":1607,"title":{},"body":{"index.html":{}}}],["ui",{"_index":1481,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["um",{"_index":1552,"title":{},"body":{"index.html":{}}}],["unauthenticated",{"_index":1751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":824,"title":{},"body":{"classes/JwtExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{}}}],["unauthorizedexception('invalid",{"_index":826,"title":{},"body":{"classes/JwtExceptionHandler.html":{}}}],["unauthorizedexception(error.message",{"_index":1352,"title":{},"body":{"classes/UserInputExceptionHandler.html":{}}}],["undefined",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{}}}],["undefined/g",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["uniquesuffix",{"_index":1765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unitários",{"_index":1594,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":894,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["unlicensed",{"_index":1712,"title":{},"body":{"properties.html":{}}}],["up",{"_index":1783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updatable",{"_index":1274,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdatePurchaseDto.html":{},"classes/UpdateUserDto.html":{}}}],["update",{"_index":414,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["update(id",{"_index":448,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"injectables/UserService.html":{}}}],["update(request",{"_index":1328,"title":{},"body":{"controllers/UserController.html":{}}}],["update.exception",{"_index":1392,"title":{},"body":{"injectables/UserService.html":{}}}],["update.exception.ts",{"_index":800,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"coverage.html":{}}}],["update.exception.ts:6",{"_index":802,"title":{},"body":{"classes/InvalidPasswordUpdateException.html":{}}}],["update.exception.ts:7",{"_index":851,"title":{},"body":{"classes/MissingPasswordUpdateException.html":{}}}],["updatecategoryandname",{"_index":518,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatecategoryandname(id",{"_index":535,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatecategorydto",{"_index":449,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatecategorydto.name",{"_index":560,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatedat",{"_index":1296,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{}}}],["updatedpurchase",{"_index":1245,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["updateproductandurlname",{"_index":1065,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateproductandurlname(id",{"_index":1099,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateproductdto",{"_index":1015,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updateproductdto.name",{"_index":1110,"title":{},"body":{"injectables/ProductService.html":{}}}],["updatepurchasedto",{"_index":1187,"title":{"classes/UpdatePurchaseDto.html":{}},"body":{"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/UpdatePurchaseDto.html":{},"coverage.html":{}}}],["updatepurchasedto.amount",{"_index":1242,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["updatepurchasedto.productid",{"_index":1240,"title":{},"body":{"injectables/PurchaseService.html":{}}}],["updates",{"_index":450,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserdto",{"_index":1283,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserdto.currentpassword",{"_index":1410,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto.password",{"_index":1409,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserrole",{"_index":1315,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserrole(updateuserroledto",{"_index":1331,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserroledto",{"_index":1289,"title":{"classes/UpdateUserRoleDto.html":{}},"body":{"classes/UpdateUserRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserroledto.email",{"_index":1404,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserroledto.role",{"_index":1405,"title":{},"body":{"injectables/UserService.html":{}}}],["upload",{"_index":742,"title":{},"body":{"classes/FileTypeError.html":{},"classes/FileUploadDto.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["upload.config",{"_index":1059,"title":{},"body":{"modules/ProductModule.html":{}}}],["upload.config.ts",{"_index":1439,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["upload.decorator",{"_index":1032,"title":{},"body":{"controllers/ProductController.html":{}}}],["upload.decorator.ts",{"_index":1433,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["upload.dto.ts",{"_index":750,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["upload.dto.ts:11",{"_index":754,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["uploadedfile",{"_index":1029,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploading",{"_index":737,"title":{},"body":{"classes/FileTypeError.html":{}}}],["uploadphoto",{"_index":1000,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploadphoto(id",{"_index":1018,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploadpicture",{"_index":1066,"title":{},"body":{"injectables/ProductService.html":{}}}],["uploadpicture(id",{"_index":1101,"title":{},"body":{"injectables/ProductService.html":{}}}],["uploads",{"_index":1019,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["url",{"_index":986,"title":{},"body":{"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["urlname",{"_index":556,"title":{},"body":{"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/PrismaExceptionHandler.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["urlname'})@public()@get(':urlname",{"_index":1011,"title":{},"body":{"controllers/ProductController.html":{}}}],["use",{"_index":506,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"license.html":{}}}],["use.exception",{"_index":905,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["use.exception.ts",{"_index":496,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{},"coverage.html":{}}}],["use.exception.ts:6",{"_index":505,"title":{},"body":{"classes/CategoryNameInUseException.html":{},"classes/EmailInUseException.html":{},"classes/ProductNameInUseException.html":{}}}],["useclass",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"classes/AuthServiceInputException.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/NotPurchaseOwnerException.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/ProductServiceInputException.html":{},"classes/PurchaseNotFoundException.html":{},"classes/PurchaseServiceInputException.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserServiceInputException.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":138,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CategoryNameInUseException.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CategoryService.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/EmailInUseException.html":{},"classes/FileTypeError.html":{},"classes/FindPurchasesDto.html":{},"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{},"classes/InvalidRefreshTokenException.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/PrismaExceptionHandler.html":{},"classes/ProductNameInUseException.html":{},"classes/ProductNotFoundException.html":{},"injectables/ProductService.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"classes/PurchaseNotFoundException.html":{},"injectables/PurchaseService.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["user'})@apibearerauth()@delete()@httpcode(httpstatus.no_content",{"_index":1325,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@apibearerauth()@patch",{"_index":1329,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@apibearerauth()@post('logout')@httpcode(httpstatus.ok",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["user'})@public()@post",{"_index":1317,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@public()@post('login')@httpcode(httpstatus.ok",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.controller",{"_index":1360,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":1287,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":656,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":685,"title":{},"body":{"classes/DeleteUserDto.html":{}}}],["user.dto.ts:17",{"_index":662,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":1286,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:28",{"_index":669,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":663,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:44",{"_index":658,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":1418,"title":{},"body":{"classes/UserWithoutPassword.html":{}}}],["user.id",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.role",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":1340,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user@example.com",{"_index":673,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/UpdateUserRoleDto.html":{},"classes/User.html":{}}}],["usercontroller",{"_index":1312,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":101,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/FindPurchasesDto.html":{},"classes/Purchase.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"controllers/UserController.html":{}}}],["userinputexceptionhandler",{"_index":725,"title":{"classes/UserInputExceptionHandler.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"classes/UserInputExceptionHandler.html":{},"coverage.html":{}}}],["userinputexceptionhandler().handle(error",{"_index":730,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["usermodule",{"_index":116,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["usernotfoundexception",{"_index":912,"title":{"classes/UserNotFoundException.html":{}},"body":{"classes/PrismaExceptionHandler.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["userrole",{"_index":103,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"guards/RolesGuard.html":{}}}],["users",{"_index":858,"title":{},"body":{"classes/NotPurchaseOwnerException.html":{},"controllers/PurchaseController.html":{},"injectables/PurchaseService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":250,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userserviceinputexception",{"_index":801,"title":{"classes/UserServiceInputException.html":{}},"body":{"classes/InvalidPasswordUpdateException.html":{},"classes/MissingPasswordUpdateException.html":{},"classes/UserInputExceptionHandler.html":{},"classes/UserServiceInputException.html":{},"coverage.html":{}}}],["usertokens",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["usertokens.length",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["userwithoutpassword",{"_index":1337,"title":{"classes/UserWithoutPassword.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{}}}],["uses",{"_index":10,"title":{},"body":{"injectables/AccessJwtAuthGuard.html":{},"injectables/ExceptionInterceptor.html":{}}}],["usuário",{"_index":1523,"title":{},"body":{"index.html":{}}}],["usuários",{"_index":1508,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"classes/Category.html":{},"classes/CreatePurchaseDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/User.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["v4",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["valid",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":77,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["validate(payload",{"_index":79,"title":{},"body":{"injectables/AccessJwtStrategy.html":{}}}],["validatecurrentpassword",{"_index":1365,"title":{},"body":{"injectables/UserService.html":{}}}],["validatecurrentpassword(id",{"_index":1386,"title":{},"body":{"injectables/UserService.html":{}}}],["validated",{"_index":1724,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["validaterefreshtoken",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["validaterefreshtoken(refreshtoken",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["validates",{"_index":82,"title":{},"body":{"injectables/AccessJwtStrategy.html":{},"injectables/AuthService.html":{}}}],["validateuser",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":575,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreatePurchaseDto.html":{},"classes/CreateUserDto.html":{},"classes/DeleteUserDto.html":{},"classes/FindCategoriesDto.html":{},"classes/FindProductsDto.html":{},"classes/FindPurchasesDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ReviewPurchaseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRoleDto.html":{},"dependencies.html":{},"index.html":{}}}],["validações",{"_index":1615,"title":{},"body":{"index.html":{}}}],["validimageuploadtypesregex",{"_index":1441,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["validimageuploadtypesregex.test",{"_index":1775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validimageuploadtypesregex.test(file.mimetype",{"_index":1773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["value",{"_index":810,"title":{},"body":{"classes/JwtExceptionHandler.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1431,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1728,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["veiga",{"_index":1642,"title":{},"body":{"license.html":{}}}],["verify",{"_index":1745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1710,"title":{},"body":{"properties.html":{}}}],["visualizar",{"_index":1576,"title":{},"body":{"index.html":{}}}],["voc",{"_index":1530,"title":{},"body":{"index.html":{}}}],["void",{"_index":700,"title":{},"body":{"interfaces/ExceptionHandler.html":{},"classes/JwtExceptionHandler.html":{},"classes/PrismaExceptionHandler.html":{},"classes/UserInputExceptionHandler.html":{},"miscellaneous/functions.html":{}}}],["warranties",{"_index":1682,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1678,"title":{},"body":{"license.html":{}}}],["way",{"_index":1071,"title":{},"body":{"injectables/ProductService.html":{}}}],["web",{"_index":1614,"title":{},"body":{"index.html":{}}}],["wether",{"_index":879,"title":{},"body":{"classes/PrismaExceptionHandler.html":{}}}],["wheelchair",{"_index":619,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"classes/Purchase.html":{},"classes/ReviewPurchaseDto.html":{}}}],["whether",{"_index":822,"title":{},"body":{"classes/JwtExceptionHandler.html":{},"license.html":{}}}],["white",{"_index":1084,"title":{},"body":{"injectables/ProductService.html":{}}}],["without",{"_index":1323,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserWithoutPassword.html":{},"coverage.html":{},"license.html":{}}}],["won't",{"_index":1375,"title":{},"body":{"injectables/UserService.html":{}}}],["words",{"_index":1090,"title":{},"body":{"injectables/ProductService.html":{}}}],["world",{"_index":680,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["wrong",{"_index":793,"title":{},"body":{"classes/InvalidEmailOrPasswordException.html":{},"classes/InvalidPasswordUpdateException.html":{}}}],["yarn",{"_index":1550,"title":{},"body":{"index.html":{}}}],["yes",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["z",{"_index":667,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/PurchaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessJwtAuthGuard.html":{"url":"injectables/AccessJwtAuthGuard.html","title":"injectable - AccessJwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessJwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/access-jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Uses the passport library AuthGuard to check\nif the route needs authentication\nFor more on NestJs Guards: https://docs.nestjs.com/guards\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/access-jwt-auth.guard.ts:13\n                            \n                        \n\n                \n                    \n                            Uses the passport library AuthGuard to check\nif the route needs authentication\nFor more on NestJs Guards: https://docs.nestjs.com/guards\nInstantiates the class and the Reflector dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/access-jwt-auth.guard.ts:28\n                \n            \n\n\n            \n                \n                    If the route uses the Public decorator it\ndoes not need authentication, else it does\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Observable } from 'rxjs';\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n/** Uses the passport library AuthGuard to check\n * if the route needs authentication\n *\n * For more on NestJs Guards: https://docs.nestjs.com/guards\n */\n@Injectable()\nexport class AccessJwtAuthGuard extends AuthGuard('access-jwt') {\n  /** Uses the passport library AuthGuard to check\n   * if the route needs authentication\n   *\n   * For more on NestJs Guards: https://docs.nestjs.com/guards\n   *\n   * Instantiates the class and the Reflector dependency\n   */\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  /** If the route uses the Public decorator it\n   * does not need authentication, else it does\n   */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessJwtStrategy.html":{"url":"injectables/AccessJwtStrategy.html","title":"injectable - AccessJwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessJwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/access-jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Passport library Access JsonWebToken configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/access-jwt.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            Passport library JsonWebToken configuration\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: AccessTokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/access-jwt.strategy.ts:24\n                \n            \n\n\n            \n                \n                    Validates and returns data after JsonWebToken is decrypted\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                AccessTokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { accessJwtConfig } from 'src/config/jwt.config';\nimport { AccessTokenContent } from './types/access-token-content';\nimport { AccessTokenPayload } from './types/access-token-payload';\n\n/** Passport library Access JsonWebToken configuration */\n@Injectable()\nexport class AccessJwtStrategy extends PassportStrategy(\n  Strategy,\n  'access-jwt',\n) {\n  /** Passport library JsonWebToken configuration */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: accessJwtConfig.secret,\n    });\n  }\n\n  /** Validates and returns data after JsonWebToken is decrypted */\n  async validate(payload: AccessTokenPayload): Promise {\n    return {\n      userId: payload.sub,\n      userRole: payload.userRole,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nPurchaseModule\n\nPurchaseModule\n\nAppModule -->\n\nPurchaseModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CategoryModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            ProductModule\n                        \n                        \n                            PurchaseModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthModule } from './auth/auth.module';\nimport { AccessJwtAuthGuard } from './auth/access-jwt-auth.guard';\nimport { UserModule } from './models/user/user.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { ProductModule } from './models/product/product.module';\nimport { CategoryModule } from './models/category/category.module';\nimport { PurchaseModule } from './models/purchase/purchase.module';\n\n@Module({\n  imports: [\n    UserModule,\n    AuthModule,\n    PrismaModule,\n    ProductModule,\n    CategoryModule,\n    PurchaseModule,\n  ],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: AccessJwtAuthGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                User authentication endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllTokens\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                logoutAll\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTokens(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns all user active tokens'})@ApiBearerAuth()@Get('tokens')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:86\n                \n            \n\n\n            \n                \n                    Returns all user's active tokens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(undefined: LoginCredentialsDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Logs in user'})@Public()@Post('login')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:31\n                \n            \n\n\n            \n                \n                    Authenticates the User\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(undefined: LogoutDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Logs out user'})@ApiBearerAuth()@Post('logout')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:67\n                \n            \n\n\n            \n                \n                    Logs out the User from the current session\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LogoutDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logoutAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    logoutAll(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Logs out user of all sessions'})@ApiBearerAuth()@Post('logoutAll')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:76\n                \n            \n\n\n            \n                \n                    Logs out the User from all sessions\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(undefined: RefreshTokenDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Refreshes user token'})@Public()@Post('refresh')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:49\n                \n            \n\n\n            \n                \n                    Refreshes the user token for silent authentication\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                RefreshTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Req,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { UserTokens } from '@prisma/client';\nimport { Request } from 'express';\nimport { AuthService } from './auth.service';\nimport { LoginCredentialsDto } from './dto/login-credentials.dto';\nimport { LoginResponse } from './dto/login.response';\nimport { LogoutDto } from './dto/logout.dto';\nimport { RefreshTokenDto } from './dto/refresh-token.dto';\nimport { Public } from './public.decorator';\n\n/** User authentication endpoints */\n@ApiTags('authentication')\n@Controller()\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  /** Authenticates the User */\n  @ApiOperation({ summary: 'Logs in user' })\n  @Public()\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  async login(\n    @Body() { email, password }: LoginCredentialsDto,\n    @Req() request: Request,\n  ): Promise {\n    const browserInfo =\n      `${request.ip} ${request.headers['user-agent']} ${request.headers['accept-language']}`.replace(\n        / undefined/g,\n        '',\n      );\n\n    return this.authService.login(email, password, browserInfo);\n  }\n\n  /** Refreshes the user token for silent authentication */\n  @ApiOperation({ summary: 'Refreshes user token' })\n  @Public()\n  @Post('refresh')\n  @HttpCode(HttpStatus.OK)\n  async refreshToken(\n    @Body() { refreshToken }: RefreshTokenDto,\n    @Req() request: Request,\n  ): Promise {\n    const browserInfo =\n      `${request.ip} ${request.headers['user-agent']} ${request.headers['accept-language']}`.replace(\n        / undefined/g,\n        '',\n      );\n\n    return this.authService.refreshToken(refreshToken, browserInfo);\n  }\n\n  /** Logs out the User from the current session */\n  @ApiOperation({ summary: 'Logs out user' })\n  @ApiBearerAuth()\n  @Post('logout')\n  @HttpCode(HttpStatus.OK)\n  async logout(@Body() { refreshToken }: LogoutDto): Promise {\n    return this.authService.logout(refreshToken);\n  }\n\n  /** Logs out the User from all sessions */\n  @ApiOperation({ summary: 'Logs out user of all sessions' })\n  @ApiBearerAuth()\n  @Post('logoutAll')\n  @HttpCode(HttpStatus.OK)\n  async logoutAll(@Req() request: Request): Promise {\n    const { userId } = request.user as { userId: string };\n\n    return this.authService.logoutAll(userId);\n  }\n\n  /** Returns all user's active tokens */\n  @ApiOperation({ summary: 'Returns all user active tokens' })\n  @ApiBearerAuth()\n  @Get('tokens')\n  async findAllTokens(@Req() request: Request): Promise {\n    const { userId } = request.user as { userId: string };\n\n    return this.authService.findAllTokens(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAccessJwtStrategy\n\nAccessJwtStrategy\n\nAuthModule -->\n\nAccessJwtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessJwtStrategy\n                        \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { UserModule } from 'src/models/user/user.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AccessJwtStrategy } from './access-jwt.strategy';\nimport { PrismaModule } from 'src/prisma/prisma.module';\n\n@Module({\n  imports: [UserModule, PrismaModule, PassportModule, JwtModule.register({})],\n  providers: [AuthService, AccessJwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for authenticating the user\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                createRefreshToken\n                            \n                            \n                                    Async\n                                findAllTokens\n                            \n                            \n                                    Private\n                                    Async\n                                generateAccessToken\n                            \n                            \n                                    Private\n                                    Async\n                                getUserRole\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                logoutAll\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Private\n                                    Async\n                                removeRefreshTokenFamilyIfCompromised\n                            \n                            \n                                    Private\n                                    Async\n                                rotateRefreshToken\n                            \n                            \n                                    Private\n                                    Async\n                                saveRefreshToken\n                            \n                            \n                                    Private\n                                    Async\n                                validateRefreshToken\n                            \n                            \n                                    Private\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:18\n                            \n                        \n\n                \n                    \n                            Responsible for authenticating the user\nInstantiate the class and the UserService and\nJwtService dependencies\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        createRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createRefreshToken(payload: literal type, browserInfo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:138\n                \n            \n\n\n            \n                \n                    Creates the refresh token and saves it in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    browserInfo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTokens(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:97\n                \n            \n\n\n            \n                \n                    Returns all user's active tokens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateAccessToken(payload: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:125\n                \n            \n\n\n            \n                \n                    Generates user's access token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getUserRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserRole(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:242\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(email: string, password: string, browserInfo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:35\n                \n            \n\n\n            \n                \n                    Validates if the inputted email exists and\ncompares if the hashed password matches the inputted one.\nIf so, returns the access and refresh JWTs\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    browserInfo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:87\n                \n            \n\n\n            \n                \n                    Deletes the refreshToken from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logoutAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    logoutAll(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:92\n                \n            \n\n\n            \n                \n                    Deletes all user's refresh tokens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(refreshToken: string, browserInfo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:58\n                \n            \n\n\n            \n                \n                    Refreshes and rotates user's access and refresh tokens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    browserInfo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        removeRefreshTokenFamilyIfCompromised\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRefreshTokenFamilyIfCompromised(userId: string, tokenFamily: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:208\n                \n            \n\n\n            \n                \n                    Removes a compromised refresh token family from the database\nIf a token that is not in the database is used but it's family exists\nthat means the token has been compromised and the family should me removed\nRefer to https://auth0.com/docs/secure/tokens/refresh-tokens/refresh-token-rotation#automatic-reuse-detection\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenFamily\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        rotateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    rotateRefreshToken(refreshToken: string, refreshTokenContent: RefreshTokenPayload, browserInfo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:224\n                \n            \n\n\n            \n                \n                    Removes the old token from the database and creates a new one\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshTokenContent\n                                    \n                                                RefreshTokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    browserInfo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        saveRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveRefreshToken(refreshTokenCredentials: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:165\n                \n            \n\n\n            \n                \n                    Saves the new refresh token hashed in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshTokenCredentials\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateRefreshToken(refreshToken: string, refreshTokenContent: RefreshTokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:179\n                \n            \n\n\n            \n                \n                    Checks if the refresh token is valid\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshTokenContent\n                                    \n                                                RefreshTokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:110\n                \n            \n\n\n            \n                \n                    Validates if the inputted email exists and\ncompares if the hashed password matches the inputted one.\nIf not, throws an error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserTokens } from '@prisma/client';\nimport { compare } from 'bcrypt';\nimport { accessJwtConfig, refreshJwtConfig } from 'src/config/jwt.config';\nimport { User } from 'src/models/user/entities/user.entity';\nimport { UserService } from 'src/models/user/user.service';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { getTokenExpirationDate } from 'src/util/getTokenExpirationDate';\nimport { v4 as uuidV4 } from 'uuid';\nimport { LoginResponse } from './dto/login.response';\nimport { InvalidEmailOrPasswordException } from './exceptions/invalid-email-or-password.exception.';\nimport { InvalidRefreshTokenException } from './exceptions/invalid-refresh-token.exception';\nimport { RefreshTokenPayload } from './types/refresh-token-payload';\n\n/** Responsible for authenticating the user */\n@Injectable()\nexport class AuthService {\n  /** Responsible for authenticating the user\n   *\n   * Instantiate the class and the UserService and\n   * JwtService dependencies\n   */\n  constructor(\n    private readonly userService: UserService,\n    private readonly jwtService: JwtService,\n    private readonly prismaService: PrismaService,\n  ) {}\n\n  /** Validates if the inputted email exists and\n   * compares if the hashed password matches the inputted one.\n   *\n   * If so, returns the access and refresh JWTs\n   */\n  async login(\n    email: string,\n    password: string,\n    browserInfo?: string,\n  ): Promise {\n    const user = await this.validateUser(email, password);\n\n    const payload = { sub: user.id, userRole: user.role };\n\n    const accessToken = await this.generateAccessToken(payload);\n\n    const refreshToken = await this.createRefreshToken(\n      { sub: payload.sub },\n      browserInfo,\n    );\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  /** Refreshes and rotates user's access and refresh tokens */\n  async refreshToken(\n    refreshToken: string,\n    browserInfo?: string,\n  ): Promise {\n    const refreshTokenContent: RefreshTokenPayload =\n      await this.jwtService.verifyAsync(refreshToken, refreshJwtConfig);\n\n    await this.validateRefreshToken(refreshToken, refreshTokenContent);\n\n    const userRole = await this.getUserRole(refreshTokenContent.sub);\n\n    const accessToken = await this.generateAccessToken({\n      sub: refreshTokenContent.sub,\n      userRole,\n    });\n\n    const newRefreshToken = await this.rotateRefreshToken(\n      refreshToken,\n      refreshTokenContent,\n      browserInfo,\n    );\n\n    return {\n      accessToken,\n      refreshToken: newRefreshToken,\n    };\n  }\n\n  /** Deletes the refreshToken from the database*/\n  async logout(refreshToken: string): Promise {\n    await this.prismaService.userTokens.deleteMany({ where: { refreshToken } });\n  }\n\n  /** Deletes all user's refresh tokens */\n  async logoutAll(userId: string): Promise {\n    await this.prismaService.userTokens.deleteMany({ where: { userId } });\n  }\n\n  /** Returns all user's active tokens */\n  async findAllTokens(userId: string): Promise {\n    const tokens = await this.prismaService.userTokens.findMany({\n      where: { userId },\n    });\n\n    return tokens;\n  }\n\n  /** Validates if the inputted email exists and\n   * compares if the hashed password matches the inputted one.\n   *\n   * If not, throws an error\n   */\n  private async validateUser(email: string, password: string): Promise {\n    const user = await this.userService.findByEmail(email);\n\n    if (user) {\n      const isPasswordValid = await compare(password, user.password);\n\n      if (isPasswordValid) {\n        return { ...user, password: undefined };\n      }\n    }\n\n    throw new InvalidEmailOrPasswordException();\n  }\n\n  /** Generates user's access token */\n  private async generateAccessToken(payload: {\n    sub: string;\n    userRole: string;\n  }): Promise {\n    const accessToken = await this.jwtService.signAsync(\n      payload,\n      accessJwtConfig,\n    );\n\n    return accessToken;\n  }\n\n  /** Creates the refresh token and saves it in the database */\n  private async createRefreshToken(\n    payload: {\n      sub: string;\n      tokenFamily?: string;\n    },\n    browserInfo?: string,\n  ): Promise {\n    if (!payload.tokenFamily) {\n      payload.tokenFamily = uuidV4();\n    }\n\n    const refreshToken = await this.jwtService.signAsync(\n      { ...payload },\n      refreshJwtConfig,\n    );\n\n    await this.saveRefreshToken({\n      userId: payload.sub,\n      refreshToken,\n      family: payload.tokenFamily,\n      browserInfo,\n    });\n\n    return refreshToken;\n  }\n\n  /** Saves the new refresh token hashed in the database */\n  private async saveRefreshToken(refreshTokenCredentials: {\n    userId: string;\n    refreshToken: string;\n    family: string;\n    browserInfo?: string;\n  }): Promise {\n    const expiresAt = getTokenExpirationDate();\n\n    await this.prismaService.userTokens.create({\n      data: { ...refreshTokenCredentials, expiresAt },\n    });\n  }\n\n  /** Checks if the refresh token is valid */\n  private async validateRefreshToken(\n    refreshToken: string,\n    refreshTokenContent: RefreshTokenPayload,\n  ): Promise {\n    const userTokens = await this.prismaService.userTokens.findMany({\n      where: { userId: refreshTokenContent.sub, refreshToken },\n    });\n\n    const isRefreshTokenValid = userTokens.length > 0;\n\n    if (!isRefreshTokenValid) {\n      await this.removeRefreshTokenFamilyIfCompromised(\n        refreshTokenContent.sub,\n        refreshTokenContent.tokenFamily,\n      );\n\n      throw new InvalidRefreshTokenException();\n    }\n\n    return true;\n  }\n\n  /** Removes a compromised refresh token family from the database\n   *\n   * If a token that is not in the database is used but it's family exists\n   * that means the token has been compromised and the family should me removed\n   *\n   * Refer to https://auth0.com/docs/secure/tokens/refresh-tokens/refresh-token-rotation#automatic-reuse-detection\n   */\n  private async removeRefreshTokenFamilyIfCompromised(\n    userId: string,\n    tokenFamily: string,\n  ): Promise {\n    const familyTokens = await this.prismaService.userTokens.findMany({\n      where: { userId, family: tokenFamily },\n    });\n\n    if (familyTokens.length > 0) {\n      await this.prismaService.userTokens.deleteMany({\n        where: { userId, family: tokenFamily },\n      });\n    }\n  }\n\n  /** Removes the old token from the database and creates a new one */\n  private async rotateRefreshToken(\n    refreshToken: string,\n    refreshTokenContent: RefreshTokenPayload,\n    browserInfo?: string,\n  ): Promise {\n    await this.prismaService.userTokens.deleteMany({ where: { refreshToken } });\n\n    const newRefreshToken = await this.createRefreshToken(\n      {\n        sub: refreshTokenContent.sub,\n        tokenFamily: refreshTokenContent.tokenFamily,\n      },\n      browserInfo,\n    );\n\n    return newRefreshToken;\n  }\n\n  private async getUserRole(userId: string): Promise {\n    const user = await this.userService.findById(userId);\n\n    return user.role;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthServiceInputException.html":{"url":"classes/AuthServiceInputException.html","title":"class - AuthServiceInputException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthServiceInputException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/exceptions/auth-service-input.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to extend another exception to make it\ninstanceof AuthServiceInputException\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/auth/exceptions/auth-service-input.exception.ts:5\n                            \n                        \n\n                \n                    \n                            Used to extend another exception to make it\ninstanceof AuthServiceInputException\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class AuthServiceInputException extends Error {\n  /**\n   * Used to extend another exception to make it\n   * instanceof AuthServiceInputException\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/entities/category.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of a Category in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/category/entities/category.entity.ts:9\n                        \n                    \n\n            \n                \n                    Category ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/category/entities/category.entity.ts:15\n                        \n                    \n\n            \n                \n                    Category name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\n/** Describes the properties of a Category in the database */\nexport class Category implements Prisma.CategoryUncheckedCreateInput {\n  /**\n   * Category ID as UUID\n   * @example \"e6cf9a58-438c-4fce-8d85-db3d22db270a\"\n   */\n  id?: string;\n\n  /**\n   * Category name\n   * @example \"Decoration\"\n   */\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoryController.html":{"url":"controllers/CategoryController.html","title":"controller - CategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                category\n            \n\n\n            \n                Description\n            \n            \n                Exposes category CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByName\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin creates a new category'})@IsAdmin()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:37\n                \n            \n\n\n            \n                \n                    Creates a new category, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(findCategoriesDto: FindCategoriesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns all categories'})@Public()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:51\n                \n            \n\n\n            \n                \n                    Returns all categories with pagination\nDefault is starting on page 1 showing 10 results per page,\nsearching and ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findCategoriesDto\n                                    \n                                                FindCategoriesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string, findProductsDto: FindProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin gets category by ID and its products'})@IsAdmin()@Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:61\n                \n            \n\n\n            \n                \n                    Find category by ID, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    findProductsDto\n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByName(name: string, findProductsDto: FindProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns category by name and its products'})@Public()@Get(':name')\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:72\n                \n            \n\n\n            \n                \n                    Find category by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    findProductsDto\n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin deletes category'})@IsAdmin()@Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:95\n                \n            \n\n\n            \n                \n                    Deletes category from database, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin updates category'})@IsAdmin()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/category/category.controller.ts:83\n                \n            \n\n\n            \n                \n                    Updates category information, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Public } from 'src/auth/public.decorator';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { FindProductsDto } from '../product/dto/find-products.dto';\nimport { CategoryService } from './category.service';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { FindCategoriesDto } from './dto/find-categories.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { Category } from './entities/category.entity';\n\n/** Exposes category CRUD endpoints */\n@ApiTags('category')\n@Controller('category')\nexport class CategoryController {\n  /** Exposes category CRUD endpoints\n   *\n   * Instantiate class and CategoryService dependency\n   */\n  constructor(private readonly categoryService: CategoryService) {}\n\n  /** Creates a new category, only for admins */\n  @ApiOperation({ summary: 'Admin creates a new category' })\n  @IsAdmin()\n  @Post()\n  async create(\n    @Body() createCategoryDto: CreateCategoryDto,\n  ): Promise {\n    return this.categoryService.create(createCategoryDto);\n  }\n\n  /** Returns all categories with pagination\n   *\n   * Default is starting on page 1 showing 10 results per page,\n   * searching and ordering by name\n   */\n  @ApiOperation({ summary: 'Returns all categories' })\n  @Public()\n  @Get()\n  async findAll(\n    @Query() findCategoriesDto: FindCategoriesDto,\n  ): Promise {\n    return this.categoryService.findAll(findCategoriesDto);\n  }\n\n  /** Find category by ID, only for admins */\n  @ApiOperation({ summary: 'Admin gets category by ID and its products' })\n  @IsAdmin()\n  @Get('/id/:id')\n  async findOneById(\n    @Param('id') id: string,\n    @Query() findProductsDto: FindProductsDto,\n  ): Promise {\n    return this.categoryService.findOneById(id, findProductsDto);\n  }\n\n  /** Find category by name */\n  @ApiOperation({ summary: 'Returns category by name and its products' })\n  @Public()\n  @Get(':name')\n  async findOneByName(\n    @Param('name') name: string,\n    @Query() findProductsDto: FindProductsDto,\n  ): Promise {\n    return this.categoryService.findOneByName(name, findProductsDto);\n  }\n\n  /** Updates category information, only for admins */\n  @ApiOperation({ summary: 'Admin updates category' })\n  @IsAdmin()\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updateCategoryDto: UpdateCategoryDto,\n  ): Promise {\n    return this.categoryService.update(id, updateCategoryDto);\n  }\n\n  /** Deletes category from database, only for admins */\n  @ApiOperation({ summary: 'Admin deletes category' })\n  @IsAdmin()\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async remove(@Param('id') id: string): Promise {\n    return this.categoryService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoryModule.html":{"url":"modules/CategoryModule.html","title":"module - CategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_imports\n\n\n\ncluster_CategoryModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nPrismaModule->CategoryModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/category/category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoryService } from './category.service';\nimport { CategoryController } from './category.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\n\n@Module({\n  controllers: [CategoryController],\n  imports: [PrismaModule],\n  providers: [CategoryService],\n})\nexport class CategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryNameInUseException.html":{"url":"classes/CategoryNameInUseException.html","title":"class - CategoryNameInUseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryNameInUseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/category/category-name-in-use.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\na category name that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/category/category-name-in-use.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'Category name already in use'. Used when the user inputs\na category name that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * a category name that is already registered in the system\n */\nexport class CategoryNameInUseException extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'Category name already in use'. Used when the user inputs\n   * a category name that is already registered in the system\n   */\n  constructor() {\n    super('Category name already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryNotFoundException.html":{"url":"classes/CategoryNotFoundException.html","title":"class - CategoryNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/category/category-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\na category that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/category/category-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'Category not found'. Used when the user inputs\na category that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * a category that is not registered in the system\n */\nexport class CategoryNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'Category not found'. Used when the user inputs\n   * a category that is not registered in the system\n   */\n  constructor() {\n    super('Category not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/category.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing categories in the database.\nCRUD endpoints are available for categories.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                capitalizeOnlyFirstLetter\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByName\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Private\n                                updateCategoryAndName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/category/category.service.ts:13\n                            \n                        \n\n                \n                    \n                            Responsible for managing categories in the database.\nCRUD endpoints are available for categories.\nInstantiates the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        capitalizeOnlyFirstLetter\n                        \n                    \n                \n            \n            \n                \n                    \n                    capitalizeOnlyFirstLetter(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:124\n                \n            \n\n\n            \n                \n                    Capitalize only the first letter of the category name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:22\n                \n            \n\n\n            \n                \n                    Creates a new category\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: FindCategoriesDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:36\n                \n            \n\n\n            \n                \n                    Returns all categories with pagination and can search by name\nDefault is starting on page 1 showing 10 results per page\nand ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindCategoriesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string, undefined: FindProductsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:54\n                \n            \n\n\n            \n                \n                    Find category by ID and show the products that have this category\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByName(name: string, undefined: FindProductsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:77\n                \n            \n\n\n            \n                \n                    Find category by name and show the products that have this category\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:119\n                \n            \n\n\n            \n                \n                    Removes category from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:102\n                \n            \n\n\n            \n                \n                    Updates category information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        updateCategoryAndName\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCategoryAndName(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/category/category.service.ts:132\n                \n            \n\n\n            \n                \n                    Formats name and updates the category with the new one.\nUsed when the user updates the category name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { FindProductsDto } from '../product/dto/find-products.dto';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { FindCategoriesDto } from './dto/find-categories.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { Category } from './entities/category.entity';\n\n/** Responsible for managing categories in the database.\n * CRUD endpoints are available for categories.\n */\n@Injectable()\nexport class CategoryService {\n  /** Responsible for managing categories in the database.\n   * CRUD endpoints are available for categories.\n   *\n   * Instantiates the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new category */\n  async create(createCategoryDto: CreateCategoryDto): Promise {\n    const name = this.capitalizeOnlyFirstLetter(createCategoryDto.name);\n\n    const category = await this.prisma.category.create({\n      data: { ...createCategoryDto, name },\n    });\n\n    return category;\n  }\n\n  /** Returns all categories with pagination and can search by name\n   * Default is starting on page 1 showing 10 results per page\n   * and ordering by name\n   */\n  async findAll({\n    categoryName = '',\n    page = 1,\n    offset = 10,\n  }: FindCategoriesDto): Promise {\n    const categoriesToSkip = (page - 1) * offset;\n\n    return this.prisma.category.findMany({\n      skip: categoriesToSkip,\n      take: offset,\n      where: {\n        name: { contains: categoryName, mode: 'insensitive' },\n      },\n      orderBy: { name: 'asc' },\n    });\n  }\n\n  /** Find category by ID and show the products that have this category */\n  async findOneById(\n    id: string,\n    { productName = '', page = 1, offset = 10 }: FindProductsDto,\n  ): Promise {\n    const productsToSkip = (page - 1) * offset;\n\n    const category = await this.prisma.category.findUnique({\n      where: { id },\n      include: {\n        products: {\n          select: { id: true, name: true, urlName: true, picture: true },\n          where: { name: { contains: productName, mode: 'insensitive' } },\n          skip: productsToSkip,\n          take: offset,\n        },\n      },\n      rejectOnNotFound: true,\n    });\n\n    return category;\n  }\n\n  /** Find category by name and show the products that have this category */\n  async findOneByName(\n    name: string,\n    { productName = '', page = 1, offset = 10 }: FindProductsDto,\n  ): Promise {\n    const productsToSkip = (page - 1) * offset;\n\n    name = this.capitalizeOnlyFirstLetter(name);\n\n    const category = await this.prisma.category.findUnique({\n      where: { name },\n      include: {\n        products: {\n          select: { id: true, name: true, urlName: true, picture: true },\n          where: { name: { contains: productName, mode: 'insensitive' } },\n          skip: productsToSkip,\n          take: offset,\n        },\n      },\n      rejectOnNotFound: true,\n    });\n\n    return category;\n  }\n\n  /** Updates category information */\n  async update(\n    id: string,\n    updateCategoryDto: UpdateCategoryDto,\n  ): Promise {\n    if (updateCategoryDto.name) {\n      return this.updateCategoryAndName(id, updateCategoryDto);\n    }\n\n    const category = await this.prisma.category.update({\n      where: { id },\n      data: { ...updateCategoryDto },\n    });\n\n    return category;\n  }\n\n  /** Removes category from database */\n  async remove(id: string): Promise {\n    await this.prisma.category.delete({ where: { id } });\n  }\n\n  /** Capitalize only the first letter of the category name */\n  private capitalizeOnlyFirstLetter(name: string): string {\n    return name[0].toUpperCase() + name.substring(1).toLocaleLowerCase();\n  }\n\n  /** Formats name and updates the category with the new one.\n   *\n   * Used when the user updates the category name.\n   */\n  private updateCategoryAndName(\n    id: string,\n    updateCategoryDto: UpdateCategoryDto,\n  ): Promise {\n    const name = this.capitalizeOnlyFirstLetter(updateCategoryDto.name);\n\n    return this.prisma.category.update({\n      where: { id },\n      data: { ...updateCategoryDto, name },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/dto/create-category.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create a Category\n\n            \n\n\n            \n                Implements\n            \n            \n                            Category\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/create-category.dto.ts:12\n                        \n                    \n\n            \n                \n                    Category name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { Category } from '../entities/category.entity';\n\n/** Describes the fields needed to create a Category */\nexport class CreateCategoryDto implements Category {\n  /**\n   * Category name\n   * @example \"Decoration\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/create-product.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create a Product\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                basePrice\n                            \n                            \n                                    Optional\n                                categories\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                discountPercentage\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                stock\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        basePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Decimal\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:36\n                        \n                    \n\n            \n                \n                    Product price not considering discounts.\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:67\n                        \n                    \n\n            \n                \n                    Category IDs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:59\n                        \n                    \n\n            \n                \n                    Product description\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        discountPercentage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:44\n                        \n                    \n\n            \n                \n                    Product discount in percentage. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:26\n                        \n                    \n\n            \n                \n                    Product name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/create-product.dto.ts:51\n                        \n                    \n\n            \n                \n                    Product stock amount. Defaults to 0\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { Decimal } from '@prisma/client/runtime';\nimport {\n  IsArray,\n  IsInt,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { Product } from '../entities/product.entity';\n\n/** Describes the fields needed to create a Product */\nexport class CreateProductDto extends OmitType(Product, [\n  'id',\n  'createdAt',\n  'urlName',\n  'picture',\n] as const) {\n  /**\n   * Product name\n   * @example \"Brand black wheelchair\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Product price not considering discounts.\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 70.00\n   */\n  @IsNumber()\n  @IsNotEmpty()\n  basePrice: string | number | Decimal;\n\n  /**\n   * Product discount in percentage. Defaults to 0\n   * @example 10\n   */\n  @IsNumber()\n  @IsOptional()\n  discountPercentage?: number;\n\n  /** Product stock amount. Defaults to 0\n   * @example 42\n   */\n  @IsInt()\n  @IsOptional()\n  stock?: number;\n\n  /**\n   * Product description\n   * @example \"Black wheelchair for offices\"\n   */\n  @IsString()\n  @IsOptional()\n  description?: string;\n\n  /**\n   * Category IDs\n   * @example [\"857cd575-956b-49f3-a75e-2e651e21b871\", \"fa244865-0878-4688-ac63-e3ecf4939a89\"]\n   */\n  @IsOptional()\n  @IsArray()\n  categories?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePurchaseDto.html":{"url":"classes/CreatePurchaseDto.html","title":"class - CreatePurchaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePurchaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/dto/create-purchase.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create a Purchase\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                amount\n                            \n                            \n                                productId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsPositive()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/create-purchase.dto.ts:23\n                        \n                    \n\n            \n                \n                    Amount purchased of the product\nDefaults to 1\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/create-purchase.dto.ts:14\n                        \n                    \n\n            \n                \n                    Product ID as UUID\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { IsNumber, IsOptional, IsPositive, IsUUID } from 'class-validator';\nimport { Purchase } from '../entities/purchase.entity';\n\n/** Describes the fields needed to create a Purchase */\nexport class CreatePurchaseDto extends PickType(Purchase, [\n  'productId',\n  'amount',\n]) {\n  /** Product ID as UUID\n   * @example \"5c68ae94-bf3e-4fde-b01f-25d18b3976a0\"\n   */\n  @IsUUID(4)\n  productId: string;\n\n  /** Amount purchased of the product\n   * Defaults to 1\n   * @example 2\n   */\n  @IsNumber()\n  @IsPositive()\n  @IsOptional()\n  amount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to create an User\n\n            \n\n\n            \n                Implements\n            \n            \n                            User\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:44\n                        \n                    \n\n            \n                \n                    User address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({message: 'Must be an e-mail'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:17\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:36\n                        \n                    \n\n            \n                \n                    User name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8, {message: 'Password must have length of at least 8'})@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[a-z]).*$/, {message: 'Password must contain at least 1 number and 1 letter'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/create-user.dto.ts:28\n                        \n                    \n\n            \n                \n                    User password must contain at least 1 number and 1 letter\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\nimport { User } from '../entities/user.entity';\n\n/** Describes the fields needed to create an User */\nexport class CreateUserDto implements User {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsEmail({ message: 'Must be an e-mail' })\n  email: string;\n\n  /**\n   * User password must contain at least 1 number and 1 letter\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @MinLength(8, { message: 'Password must have length of at least 8' })\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[a-z]).*$/, {\n    message: 'Password must contain at least 1 number and 1 letter',\n  })\n  password: string;\n\n  /**\n   * User name\n   * @example \"John Doe\"\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  /**\n   * User address\n   * @example \"World Street 0\"\n   */\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserDto.html":{"url":"classes/DeleteUserDto.html","title":"class - DeleteUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/delete-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to delete an User\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/delete-user.dto.ts:11\n                        \n                    \n\n            \n                \n                    User current password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/** Describes the fields needed to delete an User */\nexport class DeleteUserDto {\n  /**\n   * User current password\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  currentPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailInUseException.html":{"url":"classes/EmailInUseException.html","title":"class - EmailInUseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailInUseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/user/email-in-use.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\nan email that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/user/email-in-use.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'E-mail already in use'. Used when the user inputs\nan email that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * an email that is already registered in the system\n */\nexport class EmailInUseException extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'E-mail already in use'. Used when the user inputs\n   * an email that is already registered in the system\n   */\n  constructor() {\n    super('E-mail already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExceptionHandler.html":{"url":"interfaces/ExceptionHandler.html","title":"interface - ExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for Exception Handlers\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        handle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/exception.handler.ts:4\n                \n            \n\n\n            \n                \n                    Function to handle specific error types\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface ExceptionHandler {\n  /** Function to handle specific error types */\n  handle(error: Error): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExceptionInterceptor.html":{"url":"injectables/ExceptionInterceptor.html","title":"injectable - ExceptionInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExceptionInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/exception.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor to transform app erros into HTTP errors\nFor more about NestJs interceptors: https://docs.nestjs.com/interceptors\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler<>)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/exception.interceptor.ts:24\n                \n            \n\n\n            \n                \n                    Catches app errors and throws the\nrespective HTTP error\nUses default NestJs boilerplate, for more\ninformation: https://docs.nestjs.com/interceptors\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler<>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { catchError, Observable } from 'rxjs';\nimport { JwtExceptionHandler } from './handlers/jwt-exception.handler';\nimport { PrismaExceptionHandler } from './handlers/prisma-exception.handler';\nimport { UserInputExceptionHandler } from './handlers/user-input-exception.handler';\n\n/** Interceptor to transform app erros into HTTP errors\n *\n * For more about NestJs interceptors: https://docs.nestjs.com/interceptors\n */\n@Injectable()\nexport class ExceptionInterceptor implements NestInterceptor {\n  /** Catches app errors and throws the\n   * respective HTTP error\n   *\n   * Uses default NestJs boilerplate, for more\n   * information: https://docs.nestjs.com/interceptors\n   */\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | Promise> {\n    return next.handle().pipe(\n      catchError((error) => {\n        new UserInputExceptionHandler().handle(error);\n\n        new PrismaExceptionHandler().handle(error);\n\n        new JwtExceptionHandler().handle(error);\n\n        throw error;\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileTypeError.html":{"url":"classes/FileTypeError.html","title":"class - FileTypeError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileTypeError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/exceptions/file-type.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs an invalid file type\nuploading a picture\n\n            \n\n            \n                Extends\n            \n            \n                        ProductServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fileTypes: RegExp)\n                    \n                \n                        \n                            \n                                Defined in src/models/product/exceptions/file-type.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'File upload only supports the following\nfiletypes - {fileTypes}'.\nUsed when the user inputs an invalid file type\nuploading a picture\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileTypes\n                                                  \n                                                        \n                                                                    RegExp\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ProductServiceInputException } from './product-service-input.exception';\n\n/** Used when the user inputs an invalid file type\n * uploading a picture\n */\nexport class FileTypeError extends ProductServiceInputException {\n  /** Throws exception with message 'File upload only supports the following\n   * filetypes - {fileTypes}'.\n   *\n   * Used when the user inputs an invalid file type\n   * uploading a picture\n   */\n  constructor(fileTypes: RegExp) {\n    super(`File upload only supports the following filetypes - ${fileTypes}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/file-upload.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to upload a file\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         File\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', format: 'binary'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/file-upload.dto.ts:11\n                        \n                    \n\n            \n                \n                    Product picture\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { File } from '../types/file';\n\n/** Describes the information needed to upload a file */\nexport class FileUploadDto {\n  /**\n   * Product picture\n   * @example \"picture.png\"\n   */\n  @ApiProperty({ type: 'string', format: 'binary' })\n  file: File;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindCategoriesDto.html":{"url":"classes/FindCategoriesDto.html","title":"class - FindCategoriesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindCategoriesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/dto/find-categories.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information to search for categories\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                categoryName\n                            \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        categoryName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/find-categories.dto.ts:11\n                        \n                    \n\n            \n                \n                    String containing in category name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/find-categories.dto.ts:29\n                        \n                    \n\n            \n                \n                    Show this amount of categories per page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/category/dto/find-categories.dto.ts:20\n                        \n                    \n\n            \n                \n                    Show categories in this page\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsInt, IsOptional, IsPositive, IsString } from 'class-validator';\n\n/** Describes the information to search for categories */\nexport class FindCategoriesDto {\n  /** String containing in category name\n   * @example \"chair\"\n   */\n  @IsOptional()\n  @IsString()\n  categoryName?: string;\n\n  /** Show categories in this page\n   * @example 1\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  page?: number;\n\n  /** Show this amount of categories per page\n   * @example 10\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  offset?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindProductsDto.html":{"url":"classes/FindProductsDto.html","title":"class - FindProductsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindProductsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/find-products.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information to search for products\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                page\n                            \n                            \n                                    Optional\n                                productName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-products.dto.ts:29\n                        \n                    \n\n            \n                \n                    Show this amount of products per page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-products.dto.ts:20\n                        \n                    \n\n            \n                \n                    Show products in this page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        productName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product/dto/find-products.dto.ts:11\n                        \n                    \n\n            \n                \n                    String containing in product name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsInt, IsOptional, IsPositive, IsString } from 'class-validator';\n\n/** Describes the information to search for products */\nexport class FindProductsDto {\n  /** String containing in product name\n   * @example \"chair\"\n   */\n  @IsOptional()\n  @IsString()\n  productName?: string;\n\n  /** Show products in this page\n   * @example 1\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  page?: number;\n\n  /** Show this amount of products per page\n   * @example 10\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  offset?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindPurchasesDto.html":{"url":"classes/FindPurchasesDto.html","title":"class - FindPurchasesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindPurchasesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/dto/find-purchases.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information to search for purchases\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                page\n                            \n                            \n                                    Optional\n                                productId\n                            \n                            \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/find-purchases.dto.ts:36\n                        \n                    \n\n            \n                \n                    Show this amount of purchases per page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/find-purchases.dto.ts:27\n                        \n                    \n\n            \n                \n                    Show purchases in this page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/find-purchases.dto.ts:18\n                        \n                    \n\n            \n                \n                    String matching product ID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/find-purchases.dto.ts:11\n                        \n                    \n\n            \n                \n                    String matching user ID\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsInt, IsOptional, IsPositive, IsString } from 'class-validator';\n\n/** Describes the information to search for purchases */\nexport class FindPurchasesDto {\n  /** String matching user ID\n   * @example \"b0e0c99e-541c-463b-8fd6-306e52f9e686\"\n   */\n  @IsOptional()\n  @IsString()\n  userId?: string;\n\n  /** String matching product ID\n   * @example \"26c3fd79-f5bd-4646-a287-32d0226134e2\"\n   */\n  @IsOptional()\n  @IsString()\n  productId?: string;\n\n  /** Show purchases in this page\n   * @example 1\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  page?: number;\n\n  /** Show this amount of purchases per page\n   * @example 10\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @IsPositive()\n  offset?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidEmailOrPasswordException.html":{"url":"classes/InvalidEmailOrPasswordException.html","title":"class - InvalidEmailOrPasswordException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidEmailOrPasswordException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/exceptions/invalid-email-or-password.exception..ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs the wrong email\nor password when trying to login\n\n            \n\n            \n                Extends\n            \n            \n                        AuthServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/exceptions/invalid-email-or-password.exception..ts:6\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Invalid email or password'.\nUsed when the user inputs the wrong email\nor password when trying to login\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthServiceInputException } from './auth-service-input.exception';\n\n/** Used when the user inputs the wrong email\n * or password when trying to login\n */\nexport class InvalidEmailOrPasswordException extends AuthServiceInputException {\n  /** Throws exception with message 'Invalid email or password'.\n   *\n   * Used when the user inputs the wrong email\n   * or password when trying to login\n   */\n  constructor() {\n    super('Invalid email or password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidPasswordUpdateException.html":{"url":"classes/InvalidPasswordUpdateException.html","title":"class - InvalidPasswordUpdateException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidPasswordUpdateException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/exceptions/invalid-password-update.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs the wrong\ncurrent password when trying to create a new password\n\n            \n\n            \n                Extends\n            \n            \n                        UserServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/models/user/exceptions/invalid-password-update.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Invalid current password'.\nUsed when the user inputs the wrong current password when\ntrying to create a new password\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserServiceInputException } from './user-service-input.exception';\n\n/** Used when the user inputs the wrong\n * current password when trying to create a new password\n */\nexport class InvalidPasswordUpdateException extends UserServiceInputException {\n  /** Throws exception with message 'Invalid current password'.\n   *\n   * Used when the user inputs the wrong current password when\n   * trying to create a new password\n   */\n  constructor() {\n    super('Invalid current password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidRefreshTokenException.html":{"url":"classes/InvalidRefreshTokenException.html","title":"class - InvalidRefreshTokenException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidRefreshTokenException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/exceptions/invalid-refresh-token.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs an invalid token\nwhen refreshing\n\n            \n\n            \n                Extends\n            \n            \n                        AuthServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/exceptions/invalid-refresh-token.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Invalid refresh token'.\nUsed when the user inputs an invalid token\nwhen refreshing\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthServiceInputException } from './auth-service-input.exception';\n\n/** Used when the user inputs an invalid token\n * when refreshing\n */\nexport class InvalidRefreshTokenException extends AuthServiceInputException {\n  /** Throws exception with message 'Invalid refresh token'.\n   *\n   * Used when the user inputs an invalid token\n   * when refreshing\n   */\n  constructor() {\n    super('Invalid refresh token');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtExceptionHandler.html":{"url":"classes/JwtExceptionHandler.html","title":"class - JwtExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/jwt-exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Catches JsonWebToken Errors and throws the\nrespective HTTP error\n\n            \n\n\n            \n                Implements\n            \n            \n                            ExceptionHandler\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                jwtErrorNames\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                            \n                                    Private\n                                isJwtException\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        jwtErrorNames\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    'TokenExpiredError',\n    'JsonWebTokenError',\n    'NotBeforeError',\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/common/interceptors/handlers/jwt-exception.handler.ts:12\n                        \n                    \n\n            \n                \n                    Possible Jwt Error names\nRefer to https://www.npmjs.com/package/jsonwebtoken#errors--codes\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/jwt-exception.handler.ts:21\n                \n            \n\n\n            \n                \n                    Catches JsonWebToken Errors and throws the\nrespective HTTP error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isJwtException\n                        \n                    \n                \n            \n            \n                \n                    \n                    isJwtException(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/jwt-exception.handler.ts:28\n                \n            \n\n\n            \n                \n                    Returns whether the error is a JwtError or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UnauthorizedException } from '@nestjs/common';\nimport { ExceptionHandler } from './exception.handler';\n\n/** Catches JsonWebToken Errors and throws the\n * respective HTTP error\n */\nexport class JwtExceptionHandler implements ExceptionHandler {\n  /** Possible Jwt Error names\n   *\n   * Refer to https://www.npmjs.com/package/jsonwebtoken#errors--codes\n   */\n  private jwtErrorNames = [\n    'TokenExpiredError',\n    'JsonWebTokenError',\n    'NotBeforeError',\n  ];\n\n  /** Catches JsonWebToken Errors and throws the\n   * respective HTTP error\n   */\n  handle(error: Error): void {\n    if (this.isJwtException(error)) {\n      throw new UnauthorizedException('Invalid authorization token');\n    }\n  }\n\n  /** Returns whether the error is a JwtError or not */\n  private isJwtException(error: Error): boolean {\n    return this.jwtErrorNames.includes(error.name);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginCredentialsDto.html":{"url":"classes/LoginCredentialsDto.html","title":"class - LoginCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-credentials.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to authenticate an User to the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-credentials.dto.ts:11\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-credentials.dto.ts:19\n                        \n                    \n\n            \n                \n                    User password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/** Describes the information needed to authenticate an User to the application */\nexport class LoginCredentialsDto {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  email: string;\n\n  /**\n   * User password\n   * @example \"abc123456\"\n   */\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginResponse.html":{"url":"classes/LoginResponse.html","title":"class - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.response.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the response received when the Login route is successfully called\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                            \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.response.ts:7\n                        \n                    \n\n            \n                \n                    Access JWT Authentication token\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.response.ts:13\n                        \n                    \n\n            \n                \n                    Refresh JWT Authentication token\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LoginResponse {\n  /**\n   * Access JWT Authentication token\n   * @example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5NWFkMzNhNS0wYjk4LTQ2ODYtYjFmMS1hMTkwNzM0NWJmYzciLCJpYXQiOjE2NDg0NzU3MzEsImV4cCI6MTY0ODQ3NjYzMX0.h3z3JDvHOi6y5C_N0Kt6tdP2nWK_dHBZxioQn7VANNo\"\n   */\n  accessToken: string;\n\n  /**\n   * Refresh JWT Authentication token\n   * @example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n   */\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogoutDto.html":{"url":"classes/LogoutDto.html","title":"class - LogoutDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogoutDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/logout.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to logout an User of the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsJWT()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/logout.dto.ts:10\n                        \n                    \n\n            \n                \n                    User refresh token\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJWT } from 'class-validator';\n\n/** Describes the information needed to logout an User of the application */\nexport class LogoutDto {\n  /**\n   * User refresh token\n   * @example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n   */\n  @IsJWT()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MissingPasswordUpdateException.html":{"url":"classes/MissingPasswordUpdateException.html","title":"class - MissingPasswordUpdateException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MissingPasswordUpdateException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/exceptions/missing-password-update.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used when the user inputs only the current password\nor the new password, but both are needed to update\nthe password\n\n            \n\n            \n                Extends\n            \n            \n                        UserServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/models/user/exceptions/missing-password-update.exception.ts:7\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Please enter both new\npassword and current password'.\nUsed when the user inputs only the current password\nor the new password, but both are needed to update\nthe password\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserServiceInputException } from './user-service-input.exception';\n\n/** Used when the user inputs only the current password\n * or the new password, but both are needed to update\n * the password\n */\nexport class MissingPasswordUpdateException extends UserServiceInputException {\n  /** Throws exception with message 'Please enter both new\n   * password and current password'.\n   *\n   * Used when the user inputs only the current password\n   * or the new password, but both are needed to update\n   * the password\n   */\n  constructor() {\n    super('Please enter both new password and current password');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotPurchaseOwnerException.html":{"url":"classes/NotPurchaseOwnerException.html","title":"class - NotPurchaseOwnerException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotPurchaseOwnerException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/exceptions/not-purchase-owner.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used if the users try to review a purchase that they do not own\n\n            \n\n            \n                Extends\n            \n            \n                        PurchaseServiceInputException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/models/purchase/exceptions/not-purchase-owner.exception.ts:4\n                            \n                        \n\n                \n                    \n                            Throws exception with message 'Purchase not found'.\nUsed if the users try to review a purchase that they do not own\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PurchaseServiceInputException } from './purchase-service-input.exception';\n\n/** Used if the users try to review a purchase that they do not own */\nexport class NotPurchaseOwnerException extends PurchaseServiceInputException {\n  /** Throws exception with message 'Purchase not found'.\n   *\n   * Used if the users try to review a purchase that they do not own\n   */\n  constructor() {\n    super('Purchase not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrismaExceptionHandler.html":{"url":"classes/PrismaExceptionHandler.html","title":"class - PrismaExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrismaExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/prisma-exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Catches Prisma ORM errors and throws the\nrespective HTTP error\n\n            \n\n\n            \n                Implements\n            \n            \n                            ExceptionHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                            \n                                    Private\n                                isCategoryError\n                            \n                            \n                                    Private\n                                isCategoryNameConstraintViolation\n                            \n                            \n                                    Private\n                                isCreateProductError\n                            \n                            \n                                    Private\n                                isEmailConstraintViolation\n                            \n                            \n                                    Private\n                                isPrismaUnknownError\n                            \n                            \n                                    Private\n                                isProductError\n                            \n                            \n                                    Private\n                                isProductNameConstraintViolation\n                            \n                            \n                                    Private\n                                isPurchaseError\n                            \n                            \n                                    Private\n                                isUserError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:19\n                \n            \n\n\n            \n                \n                    Catches Prisma ORM errors and throws the\nrespective HTTP error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isCategoryError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isCategoryError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:136\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an category prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isCategoryNameConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isCategoryNameConstraintViolation(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:108\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the category name field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isCreateProductError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isCreateProductError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:131\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an create product prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isEmailConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isEmailConstraintViolation(errorMeta: object)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:92\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the email field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorMeta\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isPrismaUnknownError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isPrismaUnknownError(error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:87\n                \n            \n\n\n            \n                \n                    Checks if the error contains clientVersion,\nmaking it an unknown prisma error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isProductError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isProductError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:123\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an update or delete product prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isProductNameConstraintViolation\n                        \n                    \n                \n            \n            \n                \n                    \n                    isProductNameConstraintViolation(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:97\n                \n            \n\n\n            \n                \n                    Returns wether the error happened in the product name field or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isPurchaseError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isPurchaseError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:141\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an purchase prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isUserError\n                        \n                    \n                \n            \n            \n                \n                    \n                    isUserError(error: PrismaClientKnownRequestError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/prisma-exception.handler.ts:118\n                \n            \n\n\n            \n                \n                    Returns wether the error happened on an user prisma query or not\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PrismaClientKnownRequestError } from '@prisma/client/runtime';\nimport { PrismaError } from 'prisma-error-enum';\nimport { CategoryNameInUseException } from 'src/common/exceptions/category/category-name-in-use.exception';\nimport { CategoryNotFoundException } from 'src/common/exceptions/category/category-not-found.exception';\nimport { ProductNameInUseException } from 'src/common/exceptions/product/product-name-in-use.exception';\nimport { ProductNotFoundException } from 'src/common/exceptions/product/product-not-found.exception';\nimport { PurchaseNotFoundException } from 'src/common/exceptions/purchase/purchase-not-found.exception';\nimport { EmailInUseException } from 'src/common/exceptions/user/email-in-use.exception';\nimport { UserNotFoundException } from 'src/common/exceptions/user/user-not-found.exception';\nimport { ExceptionHandler } from './exception.handler';\n\n/** Catches Prisma ORM errors and throws the\n * respective HTTP error\n */\nexport class PrismaExceptionHandler implements ExceptionHandler {\n  /** Catches Prisma ORM errors and throws the\n   * respective HTTP error\n   */\n  handle(error: Error): void {\n    if (error instanceof PrismaClientKnownRequestError) {\n      switch (error.code) {\n        case PrismaError.UniqueConstraintViolation:\n          if (this.isEmailConstraintViolation(error.meta)) {\n            throw new EmailInUseException();\n          }\n\n          if (this.isProductNameConstraintViolation(error)) {\n            throw new ProductNameInUseException();\n          }\n\n          if (this.isCategoryNameConstraintViolation(error)) {\n            throw new CategoryNameInUseException();\n          }\n          break;\n\n        case PrismaError.ForeignConstraintViolation:\n          if (this.isPurchaseError(error)) {\n            throw new ProductNotFoundException();\n          }\n          break;\n\n        case PrismaError.RecordsNotFound:\n          if (this.isUserError(error)) {\n            throw new UserNotFoundException();\n          }\n\n          if (this.isProductError(error)) {\n            throw new ProductNotFoundException();\n          }\n\n          if (this.isCreateProductError(error)) {\n            throw new CategoryNotFoundException();\n          }\n\n          if (this.isCategoryError(error)) {\n            throw new CategoryNotFoundException();\n          }\n\n          if (this.isPurchaseError(error)) {\n            throw new PurchaseNotFoundException();\n          }\n          break;\n\n        default:\n          throw error;\n      }\n    }\n\n    if (this.isPrismaUnknownError(error)) {\n      if (error.message === 'No Product found') {\n        throw new ProductNotFoundException();\n      }\n\n      if (error.message === 'No Category found') {\n        throw new CategoryNotFoundException();\n      }\n\n      if (error.message === 'No Purchase found') {\n        throw new PurchaseNotFoundException();\n      }\n    }\n  }\n\n  /** Checks if the error contains clientVersion,\n   * making it an unknown prisma error\n   * */\n  private isPrismaUnknownError(error): boolean {\n    return !!error.clientVersion;\n  }\n\n  /** Returns wether the error happened in the email field or not */\n  private isEmailConstraintViolation(errorMeta: object): boolean {\n    return Object.values(errorMeta)[0][0] === 'email';\n  }\n\n  /** Returns wether the error happened in the product name field or not */\n  private isProductNameConstraintViolation(\n    error: PrismaClientKnownRequestError,\n  ): boolean {\n    return (\n      (Object.values(error.meta)[0][0] === 'name' ||\n        Object.values(error.meta)[0][0] === 'urlName') &&\n      error.message.includes('prisma.product')\n    );\n  }\n\n  /** Returns wether the error happened in the category name field or not */\n  private isCategoryNameConstraintViolation(\n    error: PrismaClientKnownRequestError,\n  ): boolean {\n    return (\n      Object.values(error.meta)[0][0] === 'name' &&\n      error.message.includes('prisma.category')\n    );\n  }\n\n  /** Returns wether the error happened on an user prisma query or not */\n  private isUserError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.user');\n  }\n\n  /** Returns wether the error happened on an update or delete product prisma query or not */\n  private isProductError(error: PrismaClientKnownRequestError): boolean {\n    return (\n      error.message.includes('prisma.product.update') ||\n      error.message.includes('prisma.product.delete')\n    );\n  }\n\n  /** Returns wether the error happened on an create product prisma query or not */\n  private isCreateProductError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.product.create');\n  }\n\n  /** Returns wether the error happened on an category prisma query or not */\n  private isCategoryError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.category');\n  }\n\n  /** Returns wether the error happened on an purchase prisma query or not */\n  private isPurchaseError(error: PrismaClientKnownRequestError): boolean {\n    return error.message.includes('prisma.purchase');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n            \n                Description\n            \n            \n                ORM responsible for connecting to the database\nBoilerplate from https://docs.nestjs.com/recipes/prisma\n\n            \n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:25\n                \n            \n\n\n            \n                \n                    Prisma interferes with NestJS enableShutdownHooks.\nPrisma listens for shutdown signals and will call process.exit()\nbefore your application shutdown hooks fire.\nhttps://docs.nestjs.com/recipes/prisma\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:15\n                \n            \n\n\n            \n                \n                    Optional — if you leave it out,\nPrisma will connect lazily on its first call to the database.\nhttps://docs.nestjs.com/recipes/prisma\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n/** ORM responsible for connecting to the database\n *\n * Boilerplate from https://docs.nestjs.com/recipes/prisma\n */\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  /** Optional — if you leave it out,\n   * Prisma will connect lazily on its first call to the database.\n   *\n   * https://docs.nestjs.com/recipes/prisma\n   */\n  async onModuleInit(): Promise {\n    await this.$connect();\n  }\n\n  /** Prisma interferes with NestJS enableShutdownHooks.\n   * Prisma listens for shutdown signals and will call process.exit()\n   * before your application shutdown hooks fire.\n   *\n   * https://docs.nestjs.com/recipes/prisma\n   */\n  async enableShutdownHooks(app: INestApplication): Promise {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Product.html":{"url":"classes/Product.html","title":"class - Product","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/entities/product.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of a Product in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                basePrice\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                discountPercentage\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                picture\n                            \n                            \n                                    Optional\n                                stock\n                            \n                            \n                                urlName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        basePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Prisma.Decimal\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:35\n                        \n                    \n\n            \n                \n                    Product price not considering discounts.\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:58\n                        \n                    \n\n            \n                \n                    Product createdAt dateString\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:52\n                        \n                    \n\n            \n                \n                    Product description\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        discountPercentage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:41\n                        \n                    \n\n            \n                \n                    Product discount in percentage. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:9\n                        \n                    \n\n            \n                \n                    Product ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:15\n                        \n                    \n\n            \n                \n                    Product name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:27\n                        \n                    \n\n            \n                \n                    Product picture\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:46\n                        \n                    \n\n            \n                \n                    Product stock amount. Defaults to 0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        urlName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/product/entities/product.entity.ts:21\n                        \n                    \n\n            \n                \n                    Product name turned to url\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\n/** Describes the properties of a Product in the database */\nexport class Product implements Prisma.ProductUncheckedCreateInput {\n  /**\n   * Product ID as UUID\n   * @example \"6f4ca8a4-8aa0-4302-ac1b-7b5547f01b0a\"\n   */\n  id?: string;\n\n  /**\n   * Product name\n   * @example \"Brand black wheelchair\"\n   */\n  name: string;\n\n  /**\n   * Product name turned to url\n   * @example \"brand-black-wheelchair\"\n   */\n  urlName: string;\n\n  /**\n   * Product picture\n   * @example \"image.jpg\"\n   */\n  picture?: string;\n\n  /**\n   * Product price not considering discounts.\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 70.00\n   */\n  basePrice: string | number | Prisma.Decimal;\n\n  /**\n   * Product discount in percentage. Defaults to 0\n   * @example 10\n   */\n  discountPercentage?: number;\n\n  /** Product stock amount. Defaults to 0\n   * @example 42\n   */\n  stock?: number;\n\n  /**\n   * Product description\n   * @example \"Black wheelchair for offices\"\n   */\n  description?: string;\n\n  /**\n   * Product createdAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  createdAt?: string | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductController.html":{"url":"controllers/ProductController.html","title":"controller - ProductController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                product\n            \n\n\n            \n                Description\n            \n            \n                Exposes product CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOneById\n                            \n                            \n                                findOneByUrlName\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                uploadPhoto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createProductDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin creates a new product'})@IsAdmin()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:39\n                \n            \n\n\n            \n                \n                    Creates a new product, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(findAllProductsDto: FindProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns all products'})@Public()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:51\n                \n            \n\n\n            \n                \n                    Returns all products with pagination\nDefault is starting on page 1 showing 10 results per page,\nsearching and ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findAllProductsDto\n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin gets product by ID'})@IsAdmin()@Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:59\n                \n            \n\n\n            \n                \n                    Find product by ID, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByUrlName\n                        \n                    \n                \n            \n            \n                \nfindOneByUrlName(urlName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Gets product by urlName'})@Public()@Get(':urlName')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:67\n                \n            \n\n\n            \n                \n                    Find product by Url Name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    urlName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin deletes product'})@IsAdmin()@Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:105\n                \n            \n\n\n            \n                \n                    Deletes product from database, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin updates product'})@IsAdmin()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:93\n                \n            \n\n\n            \n                \n                    Updates product information, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadPhoto\n                        \n                    \n                \n            \n            \n                \nuploadPhoto(id: string, file: File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin uploads a new product picture'})@IsAdmin()@FileUpload()@Patch('picture/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/product/product.controller.ts:82\n                \n            \n\n\n            \n                \n                    Admin uploads a new picture for the product.\nNeeds to be type jpeg, jpg or png and maximum 3MB.\nCheck \nmulterUploadConfig file in the docs.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                                File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UploadedFile,\n} from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Public } from 'src/auth/public.decorator';\nimport { FileUpload } from 'src/common/decorators/file-upload.decorator';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { FindProductsDto } from './dto/find-products.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { Product } from './entities/product.entity';\nimport { ProductService } from './product.service';\nimport { File } from './types/file';\n\n/** Exposes product CRUD endpoints */\n@ApiTags('product')\n@Controller('product')\nexport class ProductController {\n  /** Exposes product CRUD endpoints\n   *\n   * Instantiate class and ProductService dependency\n   */\n  constructor(private readonly productService: ProductService) {}\n\n  /** Creates a new product, only for admins */\n  @ApiOperation({ summary: 'Admin creates a new product' })\n  @IsAdmin()\n  @Post()\n  create(@Body() createProductDto: CreateProductDto): Promise {\n    return this.productService.create(createProductDto);\n  }\n\n  /** Returns all products with pagination\n   *\n   * Default is starting on page 1 showing 10 results per page,\n   * searching and ordering by name\n   */\n  @ApiOperation({ summary: 'Returns all products' })\n  @Public()\n  @Get()\n  findAll(@Query() findAllProductsDto: FindProductsDto): Promise {\n    return this.productService.findAll(findAllProductsDto);\n  }\n\n  /** Find product by ID, only for admins */\n  @ApiOperation({ summary: 'Admin gets product by ID' })\n  @IsAdmin()\n  @Get('/id/:id')\n  findOneById(@Param('id') id: string): Promise {\n    return this.productService.findOneById(id);\n  }\n\n  /** Find product by Url Name */\n  @ApiOperation({ summary: 'Gets product by urlName' })\n  @Public()\n  @Get(':urlName')\n  findOneByUrlName(@Param('urlName') urlName: string): Promise {\n    return this.productService.findOneByUrlName(urlName);\n  }\n\n  /**\n   * Admin uploads a new picture for the product.\n   * Needs to be type jpeg, jpg or png and maximum 3MB.\n   *\n   * Check \n   * multerUploadConfig file in the docs.\n   */\n  @ApiOperation({ summary: 'Admin uploads a new product picture' })\n  @IsAdmin()\n  @FileUpload()\n  @Patch('picture/:id')\n  uploadPhoto(\n    @Param('id') id: string,\n    @UploadedFile() file: File,\n  ): Promise {\n    return this.productService.uploadPicture(id, file);\n  }\n\n  /** Updates product information, only for admins */\n  @ApiOperation({ summary: 'Admin updates product' })\n  @IsAdmin()\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateProductDto: UpdateProductDto,\n  ): Promise {\n    return this.productService.update(id, updateProductDto);\n  }\n\n  /** Deletes product from database, only for admins */\n  @ApiOperation({ summary: 'Admin deletes product' })\n  @IsAdmin()\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  remove(@Param('id') id: string): Promise {\n    return this.productService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductModule.html":{"url":"modules/ProductModule.html","title":"module - ProductModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_ProductModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nPrismaModule->ProductModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/product/product.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductService } from './product.service';\nimport { ProductController } from './product.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { multerUploadConfig } from 'src/config/multer-upload.config';\n\n@Module({\n  controllers: [ProductController],\n  imports: [PrismaModule, MulterModule.register(multerUploadConfig)],\n  providers: [ProductService],\n})\nexport class ProductModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductNameInUseException.html":{"url":"classes/ProductNameInUseException.html","title":"class - ProductNameInUseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductNameInUseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/product/product-name-in-use.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 400. Used when the user inputs\na product name that is already registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/product/product-name-in-use.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 400 with message\n'Product name already in use'. Used when the user inputs\na product name that is already registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\n/** Throws HTTP status 400. Used when the user inputs\n * a product name that is already registered in the system\n */\nexport class ProductNameInUseException extends BadRequestException {\n  /** Throws HTTP status 400 with message\n   * 'Product name already in use'. Used when the user inputs\n   * a product name that is already registered in the system\n   */\n  constructor() {\n    super('Product name already in use');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductNotFoundException.html":{"url":"classes/ProductNotFoundException.html","title":"class - ProductNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/product/product-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\na product that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/product/product-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'Product not found'. Used when the user inputs\na product that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * a product that is not registered in the system\n */\nexport class ProductNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'Product not found'. Used when the user inputs\n   * a product that is not registered in the system\n   */\n  constructor() {\n    super('Product not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductService.html":{"url":"injectables/ProductService.html","title":"injectable - ProductService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/product.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing products in the database.\nCRUD endpoints are available for products.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                connectCategoriesById\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUrlName\n                            \n                            \n                                    Private\n                                formatUrlName\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Private\n                                updateProductAndUrlName\n                            \n                            \n                                    Async\n                                uploadPicture\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/product/product.service.ts:14\n                            \n                        \n\n                \n                    \n                            Responsible for managing products in the database.\nCRUD endpoints are available for products.\nInstantiates the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        connectCategoriesById\n                        \n                    \n                \n            \n            \n                \n                    \n                    connectCategoriesById(categories: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:144\n                \n            \n\n\n            \n                \n                    Format the categories IDs array into the prisma query way\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categories\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Prisma.CategoryUncheckedCreateNestedManyWithoutProductsInput\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createProductDto: CreateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:23\n                \n            \n\n\n            \n                \n                    Creates a new product\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: FindProductsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:52\n                \n            \n\n\n            \n                \n                    Returns all products with pagination\nDefault is starting on page 1 showing 10 results per page\nand ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:71\n                \n            \n\n\n            \n                \n                    Find product by ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUrlName(urlName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:80\n                \n            \n\n\n            \n                \n                    Find product by Url Name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    urlName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        formatUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    formatUrlName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:116\n                \n            \n\n\n            \n                \n                    Formats the name to generate an urlName.\nMakes the name lower case, remove leading and trailing white spaces,\nturn to single the multiple spaces between words and make\nsingle spaces hyphens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            &quot; BraNd1    chAir   &quot; becomes &quot;brand1-chair&quot;\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:104\n                \n            \n\n\n            \n                \n                    Removes product from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:89\n                \n            \n\n\n            \n                \n                    Updates product information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        updateProductAndUrlName\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProductAndUrlName(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:129\n                \n            \n\n\n            \n                \n                    Formats UrlName and updates the product with the new one.\nUsed when the user updates the product name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPicture\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPicture(id: string, file: File)\n                \n            \n\n\n            \n                \n                    Defined in src/models/product/product.service.ts:41\n                \n            \n\n\n            \n                \n                    Uploads new product picture\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                                File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { FindProductsDto } from './dto/find-products.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { Product } from './entities/product.entity';\nimport { File } from './types/file';\n\n/** Responsible for managing products in the database.\n * CRUD endpoints are available for products.\n */\n@Injectable()\nexport class ProductService {\n  /** Responsible for managing products in the database.\n   * CRUD endpoints are available for products.\n   *\n   * Instantiates the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new product */\n  async create(createProductDto: CreateProductDto): Promise {\n    const urlName = this.formatUrlName(createProductDto.name);\n\n    const categories = this.connectCategoriesById(createProductDto.categories);\n\n    const product = await this.prisma.product.create({\n      data: {\n        ...createProductDto,\n        urlName,\n        categories,\n      },\n      include: { categories: { select: { name: true } } },\n    });\n\n    return product;\n  }\n\n  /** Uploads new product picture */\n  async uploadPicture(id: string, file: File): Promise {\n    return this.prisma.product.update({\n      where: { id },\n      data: { picture: file.filename },\n    });\n  }\n\n  /** Returns all products with pagination\n   * Default is starting on page 1 showing 10 results per page\n   * and ordering by name\n   */\n  async findAll({\n    productName = '',\n    page = 1,\n    offset = 10,\n  }: FindProductsDto): Promise {\n    const productsToSkip = (page - 1) * offset;\n\n    return this.prisma.product.findMany({\n      skip: productsToSkip,\n      take: offset,\n      where: {\n        name: { contains: productName, mode: 'insensitive' },\n      },\n      orderBy: { name: 'asc' },\n      include: { categories: { select: { name: true } } },\n    });\n  }\n\n  /** Find product by ID */\n  async findOneById(id: string): Promise {\n    return this.prisma.product.findUnique({\n      where: { id },\n      include: { categories: { select: { name: true } } },\n      rejectOnNotFound: true,\n    });\n  }\n\n  /** Find product by Url Name */\n  async findOneByUrlName(urlName: string): Promise {\n    return this.prisma.product.findUnique({\n      where: { urlName },\n      include: { categories: { select: { name: true } } },\n      rejectOnNotFound: true,\n    });\n  }\n\n  /** Updates product information */\n  async update(\n    id: string,\n    updateProductDto: UpdateProductDto,\n  ): Promise {\n    if (updateProductDto.name) {\n      return this.updateProductAndUrlName(id, updateProductDto);\n    }\n\n    return this.prisma.product.update({\n      where: { id },\n      data: { ...updateProductDto },\n    });\n  }\n\n  /** Removes product from database */\n  async remove(id: string): Promise {\n    await this.prisma.product.delete({ where: { id } });\n  }\n\n  /** Formats the name to generate an urlName.\n   *\n   * Makes the name lower case, remove leading and trailing white spaces,\n   * turn to single the multiple spaces between words and make\n   * single spaces hyphens\n   *\n   * @example \" BraNd1    chAir   \" becomes \"brand1-chair\"\n   */\n  private formatUrlName(name: string): string {\n    const lowerCaseUrlName = name.toLocaleLowerCase();\n    const trimmedUrlName = lowerCaseUrlName.trim();\n    const singleSpaceUrlName = trimmedUrlName.replace(/\\s\\s+/g, ' ');\n    const spaceToHyphenUrlName = singleSpaceUrlName.split(' ').join('-');\n\n    return spaceToHyphenUrlName;\n  }\n\n  /** Formats UrlName and updates the product with the new one.\n   *\n   * Used when the user updates the product name.\n   */\n  private updateProductAndUrlName(\n    id: string,\n    updateProductDto: UpdateProductDto,\n  ): Promise {\n    const urlName = this.formatUrlName(updateProductDto.name);\n\n    return this.prisma.product.update({\n      where: { id },\n      data: { ...updateProductDto, urlName },\n    });\n  }\n\n  /**\n   * Format the categories IDs array into the prisma query way\n   */\n  private connectCategoriesById(\n    categories: string[],\n  ): Prisma.CategoryUncheckedCreateNestedManyWithoutProductsInput {\n    let categoriesConnection = { connect: [] };\n\n    if (categories) {\n      categoriesConnection = {\n        connect: categories.map((category) => {\n          return { id: category };\n        }),\n      };\n    }\n\n    return categoriesConnection;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductServiceInputException.html":{"url":"classes/ProductServiceInputException.html","title":"class - ProductServiceInputException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductServiceInputException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/exceptions/product-service-input.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to extend another exception to make it\ninstanceof ProductServiceInputException\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/product/exceptions/product-service-input.exception.ts:5\n                            \n                        \n\n                \n                    \n                            Used to extend another exception to make it\ninstanceof ProductServiceInputException\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ProductServiceInputException extends Error {\n  /**\n   * Used to extend another exception to make it\n   * instanceof ProductServiceInputException\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Purchase.html":{"url":"classes/Purchase.html","title":"class - Purchase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Purchase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/entities/purchase.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of a Purchase in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                amount\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                productId\n                            \n                            \n                                    Optional\n                                reviewComment\n                            \n                            \n                                    Optional\n                                reviewNote\n                            \n                            \n                                totalPrice\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:24\n                        \n                    \n\n            \n                \n                    Amount purchased of the product\nDefaults to 1\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:46\n                        \n                    \n\n            \n                \n                    Purchase createdAt dateString\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:8\n                        \n                    \n\n            \n                \n                    Purchase ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:18\n                        \n                    \n\n            \n                \n                    Product ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        reviewComment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:41\n                        \n                    \n\n            \n                \n                    Product review comment\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        reviewNote\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:36\n                        \n                    \n\n            \n                \n                    Product review note, from 1 to 5\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | Prisma.Decimal\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:31\n                        \n                    \n\n            \n                \n                    Price payed per product multiplied by the amount\nSaved as decimal, calculations should be handled\nwith currency.js\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/entities/purchase.entity.ts:13\n                        \n                    \n\n            \n                \n                    User ID as UUID\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\n/** Describes the properties of a Purchase in the database */\nexport class Purchase implements Prisma.PurchaseUncheckedCreateInput {\n  /** Purchase ID as UUID\n   * @example \"b076f72e-f70b-4368-949e-1811c405c0f7\"\n   */\n  id?: string;\n\n  /** User ID as UUID\n   * @example \"a04bb2db-fecd-4889-979e-95f273eb70e1\"\n   */\n  userId: string;\n\n  /** Product ID as UUID\n   * @example \"5c68ae94-bf3e-4fde-b01f-25d18b3976a0\"\n   */\n  productId: string;\n\n  /** Amount purchased of the product\n   * Defaults to 1\n   * @example 2\n   */\n  amount?: number;\n\n  /** Price payed per product multiplied by the amount\n   * Saved as decimal, calculations should be handled\n   * with currency.js\n   * @example 138.75\n   */\n  totalPrice: string | number | Prisma.Decimal;\n\n  /** Product review note, from 1 to 5\n   * @example 5\n   */\n  reviewNote?: number;\n\n  /** Product review comment\n   * @example \"Amazing wheelchair!\"\n   */\n  reviewComment?: string;\n\n  /** Purchase createdAt dateString\n   * @example \"2022-05-13T15:41:28.527Z\"\n   */\n  createdAt?: string | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PurchaseController.html":{"url":"controllers/PurchaseController.html","title":"controller - PurchaseController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PurchaseController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/purchase.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                purchase\n            \n\n\n            \n                Description\n            \n            \n                Exposes purchase CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllMine\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                review\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(request: Request, createPurchaseDto: CreatePurchaseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new purchase'})@ApiBearerAuth()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:38\n                \n            \n\n\n            \n                \n                    Creates a new purchase, only for logged users\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPurchaseDto\n                                    \n                                                CreatePurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(findPurchasesDto: FindPurchasesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin gets all purchases'})@IsAdmin()@Get('/admin')\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:55\n                \n            \n\n\n            \n                \n                    Returns all purchases with pagination, only for admins\nDefault is starting on page 1 showing 10 results per page,\nmatching by userId and/or productId and ordering by most recent date\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findPurchasesDto\n                                    \n                                                FindPurchasesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllMine\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllMine(request: Request, findPurchasesDto: FindPurchasesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'User gets all their purchases'})@ApiBearerAuth()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:69\n                \n            \n\n\n            \n                \n                    Returns all users' purchases with pagination,\nDefault is starting on page 1 showing 10 results per page,\nmatching by productId and ordering by most recent date\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    findPurchasesDto\n                                    \n                                                FindPurchasesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(request: Request, purchaseId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Returns purchase by ID'})@ApiBearerAuth()@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:85\n                \n            \n\n\n            \n                \n                    Find purchase by ID, normal users can only get their purchases,\nAdmins can get any.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    purchaseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin deletes purchase'})@IsAdmin()@Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:127\n                \n            \n\n\n            \n                \n                    Deletes purchase from database, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        review\n                        \n                    \n                \n            \n            \n                \n                    \n                    review(request: Request, purchaseId: string, reviewPurchaseDto: ReviewPurchaseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Reviews purchased product'})@ApiBearerAuth()@Patch('/review/:id')\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:101\n                \n            \n\n\n            \n                \n                    Reviews purchased product, must be purchase owner\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    purchaseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reviewPurchaseDto\n                                    \n                                                ReviewPurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updatePurchaseDto: UpdatePurchaseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin updates purchase'})@IsAdmin()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/models/purchase/purchase.controller.ts:115\n                \n            \n\n\n            \n                \n                    Updates purchase information, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePurchaseDto\n                                    \n                                                UpdatePurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  Query,\n  Req,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { CreatePurchaseDto } from './dto/create-purchase.dto';\nimport { FindPurchasesDto } from './dto/find-purchases.dto';\nimport { ReviewPurchaseDto } from './dto/review-purchase.dto';\nimport { UpdatePurchaseDto } from './dto/update-purchase.dto';\nimport { Purchase } from './entities/purchase.entity';\nimport { PurchaseService } from './purchase.service';\n\n/** Exposes purchase CRUD endpoints */\n@ApiTags('purchase')\n@Controller('purchase')\nexport class PurchaseController {\n  /** Exposes purchase CRUD endpoints\n   *\n   * Instantiate class and PurchaseService dependency\n   */\n  constructor(private readonly purchaseService: PurchaseService) {}\n\n  /** Creates a new purchase, only for logged users */\n  @ApiOperation({ summary: 'Creates a new purchase' })\n  @ApiBearerAuth()\n  @Post()\n  async create(\n    @Req() request: Request,\n    @Body() createPurchaseDto: CreatePurchaseDto,\n  ): Promise {\n    const { userId } = request.user as { userId: string };\n\n    return this.purchaseService.create(userId, createPurchaseDto);\n  }\n\n  /** Returns all purchases with pagination, only for admins\n   *\n   * Default is starting on page 1 showing 10 results per page,\n   * matching by userId and/or productId and ordering by most recent date\n   */\n  @ApiOperation({ summary: 'Admin gets all purchases' })\n  @IsAdmin()\n  @Get('/admin')\n  async findAll(\n    @Query() findPurchasesDto: FindPurchasesDto,\n  ): Promise {\n    return this.purchaseService.findAll(findPurchasesDto);\n  }\n\n  /** Returns all users' purchases with pagination,\n   *\n   * Default is starting on page 1 showing 10 results per page,\n   * matching by productId and ordering by most recent date\n   */\n  @ApiOperation({ summary: 'User gets all their purchases' })\n  @ApiBearerAuth()\n  @Get()\n  async findAllMine(\n    @Req() request: Request,\n    @Query() findPurchasesDto: FindPurchasesDto,\n  ): Promise {\n    const { userId } = request.user as { userId: string };\n    findPurchasesDto.userId = userId;\n\n    return this.purchaseService.findAll(findPurchasesDto);\n  }\n\n  /** Find purchase by ID, normal users can only get their purchases,\n   * Admins can get any.\n   */\n  @ApiOperation({ summary: 'Returns purchase by ID' })\n  @ApiBearerAuth()\n  @Get(':id')\n  async findOne(\n    @Req() request: Request,\n    @Param('id') purchaseId: string,\n  ): Promise {\n    const { userId, userRole } = request.user as {\n      userId: string;\n      userRole: string;\n    };\n\n    return this.purchaseService.findOne(purchaseId, userId, userRole);\n  }\n\n  /** Reviews purchased product, must be purchase owner */\n  @ApiOperation({ summary: 'Reviews purchased product' })\n  @ApiBearerAuth()\n  @Patch('/review/:id')\n  async review(\n    @Req() request: Request,\n    @Param('id') purchaseId: string,\n    @Body() reviewPurchaseDto: ReviewPurchaseDto,\n  ): Promise {\n    const { userId } = request.user as { userId: string };\n\n    return this.purchaseService.review(userId, purchaseId, reviewPurchaseDto);\n  }\n\n  /** Updates purchase information, only for admins */\n  @ApiOperation({ summary: 'Admin updates purchase' })\n  @IsAdmin()\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updatePurchaseDto: UpdatePurchaseDto,\n  ): Promise {\n    return this.purchaseService.update(id, updatePurchaseDto);\n  }\n\n  /** Deletes purchase from database, only for admins */\n  @ApiOperation({ summary: 'Admin deletes purchase' })\n  @IsAdmin()\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async remove(@Param('id') id: string): Promise {\n    return this.purchaseService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PurchaseModule.html":{"url":"modules/PurchaseModule.html","title":"module - PurchaseModule","body":"\n                   \n\n\n\n\n    Modules\n    PurchaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PurchaseModule\n\n\n\ncluster_PurchaseModule_imports\n\n\n\ncluster_PurchaseModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPurchaseModule\n\nPurchaseModule\n\nPurchaseModule -->\n\nPrismaModule->PurchaseModule\n\n\n\n\n\nPurchaseService\n\nPurchaseService\n\nPurchaseModule -->\n\nPurchaseService->PurchaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/purchase/purchase.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PurchaseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PurchaseController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PurchaseService } from './purchase.service';\nimport { PurchaseController } from './purchase.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\n\n@Module({\n  controllers: [PurchaseController],\n  imports: [PrismaModule],\n  providers: [PurchaseService],\n})\nexport class PurchaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PurchaseNotFoundException.html":{"url":"classes/PurchaseNotFoundException.html","title":"class - PurchaseNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PurchaseNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/purchase/purchase-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\na purchase that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/purchase/purchase-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'Purchase not found'. Used when the user inputs\na purchase that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * a purchase that is not registered in the system\n */\nexport class PurchaseNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'Purchase not found'. Used when the user inputs\n   * a purchase that is not registered in the system\n   */\n  constructor() {\n    super('Purchase not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PurchaseService.html":{"url":"injectables/PurchaseService.html","title":"injectable - PurchaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PurchaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/purchase.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing purchases in the database.\nCRUD endpoints are available for purchases.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                calculateTotalPrice\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                review\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/purchase/purchase.service.ts:16\n                            \n                        \n\n                \n                    \n                            Responsible for managing purchases in the database.\nCRUD endpoints are available for purchases.\nInstantiates the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        calculateTotalPrice\n                        \n                    \n                \n            \n            \n                \n                    \n                    calculateTotalPrice(createPurchaseDto: CreatePurchaseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPurchaseDto\n                                    \n                                                CreatePurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userId: string, createPurchaseDto: CreatePurchaseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:25\n                \n            \n\n\n            \n                \n                    Creates a new purchase\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPurchaseDto\n                                    \n                                                CreatePurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: FindPurchasesDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:46\n                \n            \n\n\n            \n                \n                    Returns all purchases with pagination\nDefault is starting on page 1 showing 10 results per page\nand ordering by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindPurchasesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(purchaseId: string, userId: string, userRole: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:74\n                \n            \n\n\n            \n                \n                    Find purchase by ID, normal users can only get their purchases,\nAdmins can get any.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    purchaseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userRole\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:144\n                \n            \n\n\n            \n                \n                    Removes purchase from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        review\n                        \n                    \n                \n            \n            \n                \n                    \n                    review(userId: string, purchaseId: string, reviewPurchaseDto: ReviewPurchaseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:96\n                \n            \n\n\n            \n                \n                    Users review products purchased by them\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    purchaseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reviewPurchaseDto\n                                    \n                                                ReviewPurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updatePurchaseDto: UpdatePurchaseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/purchase/purchase.service.ts:121\n                \n            \n\n\n            \n                \n                    Updates purchase information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePurchaseDto\n                                    \n                                                UpdatePurchaseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Role } from '@prisma/client';\nimport currency from 'currency.js';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreatePurchaseDto } from './dto/create-purchase.dto';\nimport { FindPurchasesDto } from './dto/find-purchases.dto';\nimport { ReviewPurchaseDto } from './dto/review-purchase.dto';\nimport { UpdatePurchaseDto } from './dto/update-purchase.dto';\nimport { Purchase } from './entities/purchase.entity';\nimport { NotPurchaseOwnerException } from './exceptions/not-purchase-owner.exception';\n\n/** Responsible for managing purchases in the database.\n * CRUD endpoints are available for purchases.\n */\n@Injectable()\nexport class PurchaseService {\n  /** Responsible for managing purchases in the database.\n   * CRUD endpoints are available for purchases.\n   *\n   * Instantiates the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new purchase */\n  async create(\n    userId: string,\n    createPurchaseDto: CreatePurchaseDto,\n  ): Promise {\n    const totalPrice = await this.calculateTotalPrice(createPurchaseDto);\n\n    const purchase = await this.prisma.purchase.create({\n      data: { ...createPurchaseDto, userId, totalPrice },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n    });\n\n    return purchase;\n  }\n\n  /** Returns all purchases with pagination\n   * Default is starting on page 1 showing 10 results per page\n   * and ordering by name\n   */\n  async findAll({\n    userId,\n    productId,\n    page = 1,\n    offset = 10,\n  }: FindPurchasesDto): Promise {\n    const purchasesToSkip = (page - 1) * offset;\n\n    const purchases = await this.prisma.purchase.findMany({\n      skip: purchasesToSkip,\n      take: offset,\n      where: {\n        userId: { equals: userId },\n        productId: { equals: productId },\n      },\n      orderBy: { createdAt: 'desc' },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n    });\n\n    return purchases;\n  }\n\n  /** Find purchase by ID, normal users can only get their purchases,\n   * Admins can get any.\n   */\n  async findOne(\n    purchaseId: string,\n    userId: string,\n    userRole: string,\n  ): Promise {\n    const purchase = await this.prisma.purchase.findUnique({\n      where: { id: purchaseId },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n      rejectOnNotFound: true,\n    });\n\n    if (userRole !== Role.ADMIN && purchase.userId !== userId) {\n      throw new NotPurchaseOwnerException();\n    }\n\n    return purchase;\n  }\n\n  /** Users review products purchased by them */\n  async review(\n    userId: string,\n    purchaseId: string,\n    reviewPurchaseDto: ReviewPurchaseDto,\n  ): Promise {\n    const purchase = await this.prisma.purchase.findUnique({\n      where: { id: purchaseId },\n      rejectOnNotFound: true,\n    });\n\n    if (userId !== purchase.userId) {\n      throw new NotPurchaseOwnerException();\n    }\n\n    return this.prisma.purchase.update({\n      where: { id: purchaseId },\n      data: { ...reviewPurchaseDto },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n    });\n  }\n\n  /** Updates purchase information */\n  async update(\n    id: string,\n    updatePurchaseDto: UpdatePurchaseDto,\n  ): Promise {\n    const purchase = await this.prisma.purchase.findUnique({ where: { id } });\n\n    const productId = updatePurchaseDto.productId || purchase.productId;\n    const amount = updatePurchaseDto.amount || purchase.amount;\n    const totalPrice = await this.calculateTotalPrice({ productId, amount });\n\n    const updatedPurchase = await this.prisma.purchase.update({\n      where: { id },\n      data: { ...updatePurchaseDto, totalPrice },\n      include: {\n        user: { select: { email: true } },\n        product: { select: { name: true } },\n      },\n    });\n\n    return updatedPurchase;\n  }\n\n  /** Removes purchase from database */\n  async remove(id: string): Promise {\n    await this.prisma.purchase.delete({ where: { id } });\n  }\n\n  private async calculateTotalPrice(\n    createPurchaseDto: CreatePurchaseDto,\n  ): Promise {\n    const { basePrice } = await this.prisma.product.findUnique({\n      where: { id: createPurchaseDto.productId },\n    });\n\n    const totalPrice = currency(basePrice.toNumber()).multiply(\n      createPurchaseDto.amount,\n    );\n\n    return totalPrice.value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PurchaseServiceInputException.html":{"url":"classes/PurchaseServiceInputException.html","title":"class - PurchaseServiceInputException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PurchaseServiceInputException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/exceptions/purchase-service-input.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to extend another exception to make it\ninstanceof PurchaseServiceInputException\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/purchase/exceptions/purchase-service-input.exception.ts:5\n                            \n                        \n\n                \n                    \n                            Used to extend another exception to make it\ninstanceof PurchaseServiceInputException\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PurchaseServiceInputException extends Error {\n  /**\n   * Used to extend another exception to make it\n   * instanceof PurchaseServiceInputException\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/refresh-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to logout an User of the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsJWT()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/refresh-token.dto.ts:10\n                        \n                    \n\n            \n                \n                    User refresh token\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJWT } from 'class-validator';\n\n/** Describes the information needed to logout an User of the application */\nexport class RefreshTokenDto {\n  /**\n   * User refresh token\n   * @example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n   */\n  @IsJWT()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReviewPurchaseDto.html":{"url":"classes/ReviewPurchaseDto.html","title":"class - ReviewPurchaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReviewPurchaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/dto/review-purchase.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the fields needed to review a Purchase\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                reviewComment\n                            \n                            \n                                reviewNote\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        reviewComment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/review-purchase.dto.ts:23\n                        \n                    \n\n            \n                \n                    Product review comment\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reviewNote\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)@Max(5)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/purchase/dto/review-purchase.dto.ts:16\n                        \n                    \n\n            \n                \n                    Product review note, from 1 to 5\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { IsInt, IsOptional, IsString, Max, Min } from 'class-validator';\nimport { Purchase } from '../entities/purchase.entity';\n\n/** Describes the fields needed to review a Purchase */\nexport class ReviewPurchaseDto extends PickType(Purchase, [\n  'reviewNote',\n  'reviewComment',\n]) {\n  /** Product review note, from 1 to 5\n   * @example 5\n   */\n  @IsInt()\n  @Min(1)\n  @Max(5)\n  reviewNote: number;\n\n  /** Product review comment\n   * @example \"Amazing wheelchair!\"\n   */\n  @IsString()\n  @IsOptional()\n  reviewComment?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/roles.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Checks if the user accessing the route is an admin\nFor more on NestJs Guards: https://docs.nestjs.com/guards\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/roles.guard.ts:12\n                            \n                        \n\n                \n                    \n                            Checks if the user accessing the route is an admin\nFor more on NestJs Guards: https://docs.nestjs.com/guards\nInstantiates the class and the Reflector dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guards/roles.guard.ts:22\n                \n            \n\n\n            \n                \n                    If the user is an Admin, access is allowed\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '@prisma/client';\nimport { Observable } from 'rxjs';\nimport { IS_ADMIN_KEY } from '../decorators/is-admin.decorator';\n\n/** Checks if the user accessing the route is an admin\n *\n * For more on NestJs Guards: https://docs.nestjs.com/guards\n */\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  /** Checks if the user accessing the route is an admin\n   *\n   * For more on NestJs Guards: https://docs.nestjs.com/guards\n   *\n   * Instantiates the class and the Reflector dependency\n   */\n  constructor(private reflector: Reflector) {}\n\n  /** If the user is an Admin, access is allowed */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const isAdmin = this.reflector.getAllAndOverride(IS_ADMIN_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    const request = context.switchToHttp().getRequest();\n    const { userRole } = request.user;\n\n    if (isAdmin && userRole === Role.ADMIN) {\n      return true;\n    }\n\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/category/dto/update-category.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the Category fields that are updatable\nNote that since this is a\nPartial of CreateCategoryDto,\nany field there is optional here\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCategoryDto } from './create-category.dto';\n\n/** Describes the Category fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateCategoryDto,\n * any field there is optional here\n */\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product/dto/update-product.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the Product fields that are updatable\nNote that since this is a\nPartial of CreateProductDto,\nany field there is optional here\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateProductDto } from './create-product.dto';\n\n/** Describes the Product fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateProductDto,\n * any field there is optional here\n */\nexport class UpdateProductDto extends PartialType(CreateProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePurchaseDto.html":{"url":"classes/UpdatePurchaseDto.html","title":"class - UpdatePurchaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePurchaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/purchase/dto/update-purchase.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the Purchase fields that are updatable\nNote that since this is a\nPartial of CreatePurchaseDto,\nany field there is optional here\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreatePurchaseDto } from './create-purchase.dto';\n\n/** Describes the Purchase fields that are updatable\n *\n * Note that since this is a\n * Partial of CreatePurchaseDto,\n * any field there is optional here\n */\nexport class UpdatePurchaseDto extends PartialType(CreatePurchaseDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the User fields that are updatable\nNote that since this is a\nPartial of CreateUserDto,\nany field there is optional here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                currentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user.dto.ts:19\n                        \n                    \n\n            \n                \n                    User current password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\n\n/** Describes the User fields that are updatable\n *\n * Note that since this is a\n * Partial of CreateUserDto,\n * any field there is optional here\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n  /**\n   * User current password\n   * @example \"abc123456\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  currentPassword?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserRoleDto.html":{"url":"classes/UpdateUserRoleDto.html","title":"class - UpdateUserRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/dto/update-user-role.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the information needed to update an User role\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user-role.dto.ts:11\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user/dto/update-user-role.dto.ts:18\n                        \n                    \n\n            \n                \n                    User new role\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Role } from '@prisma/client';\nimport { IsEmail, IsEnum } from 'class-validator';\n\n/** Describes the information needed to update an User role */\nexport class UpdateUserRoleDto {\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  @IsEmail()\n  email: string;\n\n  /**\n   * User new role\n   * @example \"ADMIN\"\n   */\n  @IsEnum(Role)\n  role: Role;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes the properties of an User in the database\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                role\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:43\n                        \n                    \n\n            \n                \n                    User address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:49\n                        \n                    \n\n            \n                \n                    User createdAt dateString\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:25\n                        \n                    \n\n            \n                \n                    User email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:9\n                        \n                    \n\n            \n                \n                    User ID as UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:37\n                        \n                    \n\n            \n                \n                    User name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:31\n                        \n                    \n\n            \n                \n                    User password\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:19\n                        \n                    \n\n            \n                \n                    User's Role.\nCan be \"USER\" or \"ADMIN\".\nAdmin users can handle products\nDefaults to \"USER\"\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/user/entities/user.entity.ts:55\n                        \n                    \n\n            \n                \n                    User updatedAt dateString\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma, Role } from '@prisma/client';\n\n/** Describes the properties of an User in the database */\nexport class User implements Prisma.UserUncheckedCreateInput {\n  /**\n   * User ID as UUID\n   * @example \"d31fc56c-7aed-441e-9f7f-151be8d85634\"\n   */\n  id?: string;\n\n  /**\n   * User's Role.\n   * Can be \"USER\" or \"ADMIN\".\n   * Admin users can handle products\n   *\n   * Defaults to \"USER\"\n   * @example \"USER\"\n   */\n  role?: Role;\n\n  /**\n   * User email\n   * @example \"user@example.com\"\n   */\n  email: string;\n\n  /**\n   * User password\n   * @example \"$2b$10$1XpzUYu8FuvuaBb3SC0xzuR9DX7KakbMLt0vLNoZ.UnLntDMFc4LK\"\n   */\n  password: string;\n\n  /**\n   * User name\n   * @example \"John Doe\"\n   */\n  name?: string;\n\n  /**\n   * User address\n   * @example \"World Street 0\"\n   */\n  address?: string;\n\n  /**\n   * User createdAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  createdAt?: string | Date;\n\n  /**\n   * User updatedAt dateString\n   * @example \"2022-03-26T15:41:28.527Z\"\n   */\n  updatedAt?: string | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                Exposes user CRUD endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                updateUserRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new user'})@Public()@Post()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:37\n                \n            \n\n\n            \n                \n                    Creates a new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Gets user's own profile'})@ApiBearerAuth()@Get()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:45\n                \n            \n\n\n            \n                \n                    Returns user's own profile information without password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(request: Request, deleteUserDto: DeleteUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes user'})@ApiBearerAuth()@Delete()@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:79\n                \n            \n\n\n            \n                \n                    Deletes user and all user related information from the system\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    deleteUserDto\n                                    \n                                                DeleteUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(request: Request, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates user'})@ApiBearerAuth()@Patch()\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:55\n                \n            \n\n\n            \n                \n                    Updates user information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserRole\n                        \n                    \n                \n            \n            \n                \nupdateUserRole(updateUserRoleDto: UpdateUserRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin set user's role'})@IsAdmin()@Patch('role')\n                \n            \n\n            \n                \n                    Defined in src/models/user/user.controller.ts:68\n                \n            \n\n\n            \n                \n                    Updates user role, only for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserRoleDto\n                                    \n                                                UpdateUserRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Patch,\n  Post,\n  Req,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { Public } from 'src/auth/public.decorator';\nimport { IsAdmin } from 'src/common/decorators/is-admin.decorator';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { DeleteUserDto } from './dto/delete-user.dto';\nimport { UpdateUserRoleDto } from './dto/update-user-role.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserWithoutPassword } from './entities/user-without-password.entity';\nimport { UserService } from './user.service';\n\n/** Exposes user CRUD endpoints */\n@ApiTags('user')\n@Controller('user')\nexport class UserController {\n  /** Exposes user CRUD endpoints\n   *\n   * Instantiate class and UserService dependency\n   */\n  constructor(private readonly userService: UserService) {}\n\n  /** Creates a new user */\n  @ApiOperation({ summary: 'Creates a new user' })\n  @Public()\n  @Post()\n  create(@Body() createUserDto: CreateUserDto): Promise {\n    return this.userService.create(createUserDto);\n  }\n\n  /** Returns user's own profile information without password */\n  @ApiOperation({ summary: \"Gets user's own profile\" })\n  @ApiBearerAuth()\n  @Get()\n  async findById(@Req() request: Request): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.findById(userId);\n  }\n\n  /** Updates user information */\n  @ApiOperation({ summary: 'Updates user' })\n  @ApiBearerAuth()\n  @Patch()\n  update(\n    @Req() request: Request,\n    @Body() updateUserDto: UpdateUserDto,\n  ): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.update(userId, updateUserDto);\n  }\n\n  /** Updates user role, only for admins */\n  @ApiOperation({ summary: \"Admin set user's role\" })\n  @IsAdmin()\n  @Patch('role')\n  updateUserRole(\n    @Body() updateUserRoleDto: UpdateUserRoleDto,\n  ): Promise {\n    return this.userService.updateUserRole(updateUserRoleDto);\n  }\n\n  /** Deletes user and all user related information from the system */\n  @ApiOperation({ summary: 'Deletes user' })\n  @ApiBearerAuth()\n  @Delete()\n  @HttpCode(HttpStatus.NO_CONTENT)\n  remove(\n    @Req() request: Request,\n    @Body() deleteUserDto: DeleteUserDto,\n  ): Promise {\n    const userId = request.user['userId'];\n\n    return this.userService.remove(userId, deleteUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserInputExceptionHandler.html":{"url":"classes/UserInputExceptionHandler.html","title":"class - UserInputExceptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserInputExceptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/handlers/user-input-exception.handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Catches user input errors and throws the\nrespective HTTP error\n\n            \n\n\n            \n                Implements\n            \n            \n                            ExceptionHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(error: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/handlers/user-input-exception.handler.ts:19\n                \n            \n\n\n            \n                \n                    Catches user input errors and throws the\nrespective HTTP error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthServiceInputException } from 'src/auth/exceptions/auth-service-input.exception';\nimport { ProductServiceInputException } from 'src/models/product/exceptions/product-service-input.exception';\nimport { PurchaseServiceInputException } from 'src/models/purchase/exceptions/purchase-service-input.exception';\nimport { UserServiceInputException } from 'src/models/user/exceptions/user-service-input.exception';\nimport { ExceptionHandler } from './exception.handler';\n\n/** Catches user input errors and throws the\n * respective HTTP error\n */\nexport class UserInputExceptionHandler implements ExceptionHandler {\n  /** Catches user input errors and throws the\n   * respective HTTP error\n   */\n  handle(error: Error): void {\n    if (error instanceof AuthServiceInputException) {\n      throw new UnauthorizedException(error.message);\n    }\n\n    if (error instanceof UserServiceInputException) {\n      throw new BadRequestException(error.message);\n    }\n\n    if (error instanceof ProductServiceInputException) {\n      throw new BadRequestException(error.message);\n    }\n\n    if (error instanceof PurchaseServiceInputException) {\n      throw new NotFoundException(error.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  controllers: [UserController],\n  providers: [UserService],\n  imports: [PrismaModule],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotFoundException.html":{"url":"classes/UserNotFoundException.html","title":"class - UserNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/user/user-not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Throws HTTP status 404. Used when the user inputs\nan user email or id that is not registered in the system\n\n            \n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/user/user-not-found.exception.ts:6\n                            \n                        \n\n                \n                    \n                            Throws HTTP status 404 with message\n'User not found'. Used when the user inputs an user\nemail or id that is not registered in the system\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\n/** Throws HTTP status 404. Used when the user inputs\n * an user email or id that is not registered in the system\n */\nexport class UserNotFoundException extends NotFoundException {\n  /** Throws HTTP status 404 with message\n   * 'User not found'. Used when the user inputs an user\n   * email or id that is not registered in the system\n   */\n  constructor() {\n    super('User not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Responsible for managing users in the database.\nCRUD endpoints are available for users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Private\n                                    Async\n                                hashIfUpdatingPassword\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateUserRole\n                            \n                            \n                                    Private\n                                    Async\n                                validateCurrentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/models/user/user.service.ts:18\n                            \n                        \n\n                \n                    \n                            Responsible for managing users in the database.\nCRUD endpoints are available for users.\nInstantiate the class and the PrismaService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:27\n                \n            \n\n\n            \n                \n                    Creates a new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:60\n                \n            \n\n\n            \n                \n                    Finds user by email and returns the user with password.\nUsed mainly in login to compare if the inputted password matches\nthe hashed one.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:48\n                \n            \n\n\n            \n                \n                    Finds user by id and returns the user without password.\nUsed for default in app requests where the hashed password\nwon't be compared\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        hashIfUpdatingPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashIfUpdatingPassword(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:111\n                \n            \n\n\n            \n                \n                    If the user inputted both new password and current password\nthe new password is hashed to be saved in the database replacing\nthe current one.\nIf only the new password or current password were inputted the user\nprobably forgot about the other one and an error is thrown\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string, deleteUserDto: DeleteUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:98\n                \n            \n\n\n            \n                \n                    Removes user from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    deleteUserDto\n                                    \n                                                DeleteUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:67\n                \n            \n\n\n            \n                \n                    Updates user information\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserRole(updateUserRoleDto: UpdateUserRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:84\n                \n            \n\n\n            \n                \n                    Updates user role\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserRoleDto\n                                    \n                                                UpdateUserRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateCurrentPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateCurrentPassword(id: string, currentPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/user/user.service.ts:139\n                \n            \n\n\n            \n                \n                    Compares if the inputted current password matches the\nuser hashed password saved in the database\nIf it doesn't, an error is thrown\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { compare, hash } from 'bcrypt';\nimport { hashConfig } from 'src/config/hash.config';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { DeleteUserDto } from './dto/delete-user.dto';\nimport { UpdateUserRoleDto } from './dto/update-user-role.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserWithoutPassword } from './entities/user-without-password.entity';\nimport { User } from './entities/user.entity';\nimport { InvalidPasswordUpdateException } from './exceptions/invalid-password-update.exception';\nimport { MissingPasswordUpdateException } from './exceptions/missing-password-update.exception';\n\n/** Responsible for managing users in the database.\n * CRUD endpoints are available for users.\n */\n@Injectable()\nexport class UserService {\n  /** Responsible for managing users in the database.\n   * CRUD endpoints are available for users.\n   *\n   * Instantiate the class and the PrismaService dependency\n   */\n  constructor(private readonly prisma: PrismaService) {}\n\n  /** Creates a new user */\n  async create(createUserDto: CreateUserDto): Promise {\n    const hashedPassword = await hash(\n      createUserDto.password,\n      hashConfig.saltRounds,\n    );\n\n    const lowerCaseEmail = createUserDto.email.toLowerCase();\n\n    await this.prisma.user.create({\n      data: {\n        ...createUserDto,\n        email: lowerCaseEmail,\n        password: hashedPassword,\n      },\n    });\n  }\n\n  /** Finds user by id and returns the user without password.\n   * Used for default in app requests where the hashed password\n   * won't be compared\n   */\n  async findById(id: string): Promise {\n    const user = await this.prisma.user.findUnique({ where: { id } });\n\n    delete user.password;\n\n    return { ...user };\n  }\n\n  /** Finds user by email and returns the user with password.\n   * Used mainly in login to compare if the inputted password matches\n   * the hashed one.\n   */\n  async findByEmail(email: string): Promise {\n    const lowerCaseEmail = email.toLowerCase();\n\n    return this.prisma.user.findUnique({ where: { email: lowerCaseEmail } });\n  }\n\n  /** Updates user information */\n  async update(\n    id: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    await this.hashIfUpdatingPassword(id, updateUserDto);\n\n    const user = await this.prisma.user.update({\n      where: { id },\n      data: { ...updateUserDto, updatedAt: new Date() },\n    });\n\n    delete user.password;\n\n    return { ...user };\n  }\n\n  /** Updates user role */\n  async updateUserRole(\n    updateUserRoleDto: UpdateUserRoleDto,\n  ): Promise {\n    const user = await this.prisma.user.update({\n      where: { email: updateUserRoleDto.email },\n      data: { role: updateUserRoleDto.role },\n    });\n\n    delete user.password;\n\n    return user;\n  }\n\n  /** Removes user from database */\n  async remove(id: string, deleteUserDto: DeleteUserDto): Promise {\n    await this.validateCurrentPassword(id, deleteUserDto.currentPassword);\n\n    await this.prisma.user.delete({ where: { id } });\n  }\n\n  /** If the user inputted both new password and current password\n   * the new password is hashed to be saved in the database replacing\n   * the current one.\n   *\n   * If only the new password or current password were inputted the user\n   * probably forgot about the other one and an error is thrown\n   */\n  private async hashIfUpdatingPassword(\n    id: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    if (updateUserDto.password && updateUserDto.currentPassword) {\n      await this.validateCurrentPassword(id, updateUserDto.currentPassword);\n\n      const hashedPassword = await hash(\n        updateUserDto.password,\n        hashConfig.saltRounds,\n      );\n\n      updateUserDto.password = hashedPassword;\n      delete updateUserDto.currentPassword;\n\n      return;\n    }\n\n    if (updateUserDto.password || updateUserDto.currentPassword) {\n      throw new MissingPasswordUpdateException();\n    }\n  }\n\n  /** Compares if the inputted current password matches the\n   * user hashed password saved in the database\n   *\n   * If it doesn't, an error is thrown\n   */\n  private async validateCurrentPassword(\n    id: string,\n    currentPassword: string,\n  ): Promise {\n    const user = await this.prisma.user.findUnique({ where: { id } });\n\n    const isCorrectPassword = await compare(currentPassword, user.password);\n\n    if (!isCorrectPassword) {\n      throw new InvalidPasswordUpdateException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserServiceInputException.html":{"url":"classes/UserServiceInputException.html","title":"class - UserServiceInputException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserServiceInputException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/exceptions/user-service-input.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to extend another exception to make it\ninstanceof UserServiceInputException\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/user/exceptions/user-service-input.exception.ts:5\n                            \n                        \n\n                \n                    \n                            Used to extend another exception to make it\ninstanceof UserServiceInputException\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserServiceInputException extends Error {\n  /**\n   * Used to extend another exception to make it\n   * instanceof UserServiceInputException\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserWithoutPassword.html":{"url":"classes/UserWithoutPassword.html","title":"class - UserWithoutPassword","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserWithoutPassword\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user/entities/user-without-password.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This entity is the same as\nUser\nbut omitting the password field\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { User } from './user.entity';\n\n/** This entity is the same as\n * User\n * but omitting the password field\n */\nexport class UserWithoutPassword extends OmitType(User, [\n  'password',\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/access-jwt-auth.guard.ts\n            \n            injectable\n            AccessJwtAuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/access-jwt.strategy.ts\n            \n            injectable\n            AccessJwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                93 %\n                (14/15)\n            \n        \n        \n            \n                \n                src/auth/dto/login-credentials.dto.ts\n            \n            class\n            LoginCredentialsDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login.response.ts\n            \n            class\n            LoginResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dto/logout.dto.ts\n            \n            class\n            LogoutDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/dto/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/exceptions/auth-service-input.exception.ts\n            \n            class\n            AuthServiceInputException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/exceptions/invalid-email-or-password.exception..ts\n            \n            class\n            InvalidEmailOrPasswordException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/exceptions/invalid-refresh-token.exception.ts\n            \n            class\n            InvalidRefreshTokenException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/file-upload.decorator.ts\n            \n            function\n            FileUpload\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/is-admin.decorator.ts\n            \n            function\n            IsAdmin\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/is-admin.decorator.ts\n            \n            variable\n            IS_ADMIN_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/exceptions/category/category-name-in-use.exception.ts\n            \n            class\n            CategoryNameInUseException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/category/category-not-found.exception.ts\n            \n            class\n            CategoryNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/product/product-name-in-use.exception.ts\n            \n            class\n            ProductNameInUseException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/product/product-not-found.exception.ts\n            \n            class\n            ProductNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/purchase/purchase-not-found.exception.ts\n            \n            class\n            PurchaseNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/user/email-in-use.exception.ts\n            \n            class\n            EmailInUseException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/user/user-not-found.exception.ts\n            \n            class\n            UserNotFoundException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/exception.interceptor.ts\n            \n            injectable\n            ExceptionInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/exception.handler.ts\n            \n            interface\n            ExceptionHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/jwt-exception.handler.ts\n            \n            class\n            JwtExceptionHandler\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/prisma-exception.handler.ts\n            \n            class\n            PrismaExceptionHandler\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/common/interceptors/handlers/user-input-exception.handler.ts\n            \n            class\n            UserInputExceptionHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/config/hash.config.ts\n            \n            variable\n            hashConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            accessJwtConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            refreshJwtConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer-upload.config.ts\n            \n            variable\n            maxImageUploadSize\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer-upload.config.ts\n            \n            variable\n            multerUploadConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer-upload.config.ts\n            \n            variable\n            validImageUploadTypesRegex\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/category/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/models/category/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/models/category/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/category/dto/find-categories.dto.ts\n            \n            class\n            FindCategoriesDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/models/category/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/category/entities/category.entity.ts\n            \n            class\n            Category\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/models/product/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/models/product/dto/file-upload.dto.ts\n            \n            class\n            FileUploadDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/product/dto/find-products.dto.ts\n            \n            class\n            FindProductsDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/models/product/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/product/entities/product.entity.ts\n            \n            class\n            Product\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/models/product/exceptions/file-type.exception.ts\n            \n            class\n            FileTypeError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/product/exceptions/product-service-input.exception.ts\n            \n            class\n            ProductServiceInputException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/product/product.controller.ts\n            \n            controller\n            ProductController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/models/product/product.service.ts\n            \n            injectable\n            ProductService\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/models/purchase/dto/create-purchase.dto.ts\n            \n            class\n            CreatePurchaseDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/models/purchase/dto/find-purchases.dto.ts\n            \n            class\n            FindPurchasesDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/models/purchase/dto/review-purchase.dto.ts\n            \n            class\n            ReviewPurchaseDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/models/purchase/dto/update-purchase.dto.ts\n            \n            class\n            UpdatePurchaseDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/purchase/entities/purchase.entity.ts\n            \n            class\n            Purchase\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/models/purchase/exceptions/not-purchase-owner.exception.ts\n            \n            class\n            NotPurchaseOwnerException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/purchase/exceptions/purchase-service-input.exception.ts\n            \n            class\n            PurchaseServiceInputException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/purchase/purchase.controller.ts\n            \n            controller\n            PurchaseController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/models/purchase/purchase.service.ts\n            \n            injectable\n            PurchaseService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/models/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/models/user/dto/delete-user.dto.ts\n            \n            class\n            DeleteUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/dto/update-user-role.dto.ts\n            \n            class\n            UpdateUserRoleDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/models/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/entities/user-without-password.entity.ts\n            \n            class\n            UserWithoutPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/models/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/models/user/exceptions/invalid-password-update.exception.ts\n            \n            class\n            InvalidPasswordUpdateException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/exceptions/missing-password-update.exception.ts\n            \n            class\n            MissingPasswordUpdateException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/exceptions/user-service-input.exception.ts\n            \n            class\n            UserServiceInputException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/models/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/models/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/util/getTokenExpirationDate.ts\n            \n            function\n            addDaysFromNow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/util/getTokenExpirationDate.ts\n            \n            function\n            getTokenExpirationDate\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/cli : ^8.2.6\n        \n            @nestjs/common : ^8.4.6\n        \n            @nestjs/core : ^8.4.6\n        \n            @nestjs/jwt : ^8.0.1\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.4.6\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @prisma/client : 3.14.0\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            currency.js : ^2.0.4\n        \n            ms : ^2.1.3\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            prisma-error-enum : ^0.1.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.4.0\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addDaysFromNow   (src/.../getTokenExpirationDate.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            FileUpload   (src/.../file-upload.decorator.ts)\n                        \n                        \n                            getTokenExpirationDate   (src/.../getTokenExpirationDate.ts)\n                        \n                        \n                            IsAdmin   (src/.../is-admin.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/util/getTokenExpirationDate.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        addDaysFromNow\n                        \n                    \n                \n            \n            \n                \naddDaysFromNow(days: number)\n                \n            \n\n\n\n\n            \n                \n                    Add amount of days from today's date\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    days\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Date\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTokenExpirationDate\n                        \n                    \n                \n            \n            \n                \ngetTokenExpirationDate()\n                \n            \n\n\n\n\n            \n                \n                    Returns the token expiration date\n\n\n                    \n                        Returns :         Date\n\n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Starts the application\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    src/common/decorators/file-upload.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FileUpload\n                        \n                    \n                \n            \n            \n                \nFileUpload()\n                \n            \n\n\n\n\n            \n                \n                    Add all file upload decorators at once\nExample: Upload product picture\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    src/common/decorators/is-admin.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsAdmin\n                        \n                    \n                \n            \n            \n                \nIsAdmin()\n                \n            \n\n\n\n\n            \n                \n                    Makes an endpoint accessible only by admin users\nExample: Create, update and remove products\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nE-Commerce Backend\nAPI com endpoints para criação de usuários, produtos, compras e avaliações com autenticação e autorização\n🔗 Documentação com Compodoc e GitHub Pages\n\n\n  \n  \n  \n  \n\n\n📑 Índice\n\n\n📌 Features\n🔧 Instalação\n💻 Tecnologias\n📄 Licença\n\n📌 Features\n\n CRUD de usuários\n Autenticação de usuário\n Rotação de Refresh Token\n Detecção de Reuso Automático\n\n\n\n\n Autorização de usuário (admin)\n CRUD de produtos\n Upload de imagens\n\n\n CRUD de categorias\n CRUD de compras\n\n🔧 Instalação\n\nVocê precisará ter o Node.js instalado\n\nInstalação\n\n\n  # Clona o projeto para sua máquina\n  git clone https://github.com/alvaromrveiga/ecommerce-backend\n\n  # Entra na pasta do projeto\n  cd ecommerce-backend\n\n  # Instala as dependências\n  yarn\nCrie um arquivo .env na raiz do projeto preenchendo as informações descritas no .env.example\n\nIniciar servidor\n\n\n  # Roda as migrations\n  yarn migrate:dev \n\n  # Inicia o servidor em modo de desenvolvimento\n  yarn start:dev\n\n  # O servidor abrirá na porta 3000. \n  # Você pode acessar a documentação com Swagger em http://localhost:3000/api/\n\n  # Para visualizar o banco de dados\n  yarn prisma studio\nRodar os testes\nCrie um arquivo .env.test na raiz do projeto alterando no mínimo o banco de dados que colocou no .env\nExemplo: postgresql://username:password@localhost:5432/ecommerce-test?schema=public\n\n\n\n\n\n  # Roda as migrations no bando de testes\n  yarn migrate:test \n\n  # Roda todos os testes unitários e de integração\n  # Pode demorar alguns poucos minutos\n  # 10 suites e 187 testes\n  yarn test:all\n\n  # Roda apenas os testes unitários\n  yarn test\n\n  # Roda apenas os testes de integração\n  yarn test:e2e\n\n  # Para visualizar o banco de dados de testes\n  yarn studio:test💻 Tecnologias\n\nTypescript - tooling e minimizar erros\nNode.js e NestJS com Express - construir o servidor\nPrisma com PostgreSQL - armazenar dados\nPassport e passport-jwt - autenticação com Json Web Token\nClass-validator e class-transformer - validações nos dados de entrada dos endpoints\nBcrypt - hashs de senhas\ncurrency.js - cálculos monetários\nms - cálculo da data de expiração do refresh token\nPrisma-error-enum - identificar os códigos para tratar as exceções do prisma\nJest, SuperTest - testes\nSwagger UI Express e compodoc - documentação\nESLint e Prettier - linting e formatação de código\n\n📄 Licença\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Álvaro Veiga\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PurchaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_PurchaseModule\n\n\n\ncluster_PurchaseModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nCategoryModule -->\n\nPrismaModule->CategoryModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nPrismaModule->ProductModule\n\n\n\n\n\nPurchaseModule\n\nPurchaseModule\n\nPurchaseModule -->\n\nPrismaModule->PurchaseModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\nAppModule -->\n\nPurchaseModule->AppModule\n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAccessJwtStrategy\n\nAccessJwtStrategy\n\nAuthModule -->\n\nAccessJwtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nPurchaseService\n\nPurchaseService\n\nPurchaseModule -->\n\nPurchaseService->PurchaseModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    44 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : alvaromrveiga\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AccessTokenContent   (src/.../access-token-content.ts)\n                        \n                        \n                            AccessTokenPayload   (src/.../access-token-payload.ts)\n                        \n                        \n                            File   (src/.../file.ts)\n                        \n                        \n                            RefreshTokenPayload   (src/.../refresh-token-payload.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/types/access-token-content.ts\n    \n    \n        \n            \n                \n                    \n                    AccessTokenContent\n                \n            \n            \n                \n                    What is returned to the application after Access JsonWebToken is validated\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/auth/types/access-token-payload.ts\n    \n    \n        \n            \n                \n                    \n                    AccessTokenPayload\n                \n            \n            \n                \n                    Decrypted Access JsonWebToken content\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/models/product/types/file.ts\n    \n    \n        \n            \n                \n                    \n                    File\n                \n            \n            \n                \n                    File type from Express.Multer.File\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/auth/types/refresh-token-payload.ts\n    \n    \n        \n            \n                \n                    \n                    RefreshTokenPayload\n                \n            \n            \n                \n                    Decrypted Refresh JsonWebToken content\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            accessJwtConfig   (src/.../jwt.config.ts)\n                        \n                        \n                            hashConfig   (src/.../hash.config.ts)\n                        \n                        \n                            IS_ADMIN_KEY   (src/.../is-admin.decorator.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            maxImageUploadSize   (src/.../multer-upload.config.ts)\n                        \n                        \n                            multerUploadConfig   (src/.../multer-upload.config.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            refreshJwtConfig   (src/.../jwt.config.ts)\n                        \n                        \n                            validImageUploadTypesRegex   (src/.../multer-upload.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/jwt.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        accessJwtConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JwtSignOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.ACCESS_JWT_SECRET,\n  expiresIn: '15m',\n}\n                    \n                \n\n            \n                \n                    Configurations for the access jsonwebtoken used for authentication\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshJwtConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JwtSignOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.REFRESH_JWT_SECRET,\n  expiresIn: '90d',\n}\n                    \n                \n\n            \n                \n                    Configurations for the refresh jsonwebtoken used for authentication\n\n                \n            \n\n        \n    \n\n    src/config/hash.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        hashConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  saltRounds: 10,\n}\n                    \n                \n\n            \n                \n                    Global configuration for amount of saltRounds on hashes of sensitive information\n\n                \n            \n\n        \n    \n\n    src/common/decorators/is-admin.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_ADMIN_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isAdmin'\n                    \n                \n\n            \n                \n                    Value to verify if @IsAdmin() is being used in the endpoint\nConsult RolesGuard\n\n                \n            \n\n        \n    \n\n    src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n            \n                \n                    Value to verify if @Public() is being used in the endpoint\nConsult JwtAuthGuard\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CustomDecorator => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n            \n                \n                    Makes an endpoint accessible by unauthenticated users\nExample: Create user and Login endpoints\n\n                \n            \n\n        \n    \n\n    src/config/multer-upload.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        maxImageUploadSize\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 3 * 1024 * 1024\n                    \n                \n\n            \n                \n                    Constant that sets the maximum image upload file size\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        multerUploadConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MulterOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  storage: diskStorage({\n    destination: './tmp',\n    filename: (request, file, callback) => {\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);\n      const fileName = `${uniqueSuffix}-${file.originalname}`;\n\n      return callback(null, fileName);\n    },\n  }),\n\n  fileFilter: (request, file, callback) => {\n    const mimetype = validImageUploadTypesRegex.test(file.mimetype);\n    const extname = validImageUploadTypesRegex.test(\n      path.extname(file.originalname).toLowerCase(),\n    );\n\n    if (mimetype && extname) {\n      return callback(null, true);\n    }\n\n    return callback(new FileTypeError(validImageUploadTypesRegex), false);\n  },\n\n  limits: {\n    fileSize: maxImageUploadSize,\n  },\n}\n                    \n                \n\n            \n                \n                    Configurations for the multer library used for file upload.\nAccepts types jpeg, jpg and png of size up to 3MB\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validImageUploadTypesRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /jpeg|jpg|png/\n                    \n                \n\n            \n                \n                    Constant containing a Regular Expression\nwith the valid image upload types\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
